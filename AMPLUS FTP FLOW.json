[
    {
        "id": "5594cda0528bfa62",
        "type": "tab",
        "label": "ALEX_5MW",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1070e23b7de197ec",
        "type": "tab",
        "label": "Arjun_2MW",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e53c97b35120504",
        "type": "tab",
        "label": "Nayaka",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63d962c004d68b5d",
        "type": "tab",
        "label": "FTP Alex Bikaner Part 1-3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b338dc37820f661d",
        "type": "tab",
        "label": "FTP Alex Bikaner Part 4-7",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "979a635b04d6eba7",
        "type": "tab",
        "label": "ARJUN 2MW",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b843ee95109f04d",
        "type": "tab",
        "label": "Alex Bikaner INV",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e7f74bd7920f8b4e",
        "type": "tab",
        "label": "Nayaka CR EM&INV&WS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b66bd877793ab767",
        "type": "tab",
        "label": "AMP34_INV1_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13bf10f7424e875b",
        "type": "tab",
        "label": "AMP34_INV2_SMU",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bdb6362ab82f896f",
        "type": "tab",
        "label": "AMP34_INV3_SMU",
        "disabled": false,
        "info": ""
    },
    {
        "id": "981d83ec85c3dad4",
        "type": "tab",
        "label": "AMP34_INV4_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a86c721b13d34fc6",
        "type": "tab",
        "label": "AMP34_INV5_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f63309332e4729d6",
        "type": "tab",
        "label": "AMP34_INV6_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "437bcfccf5b218c3",
        "type": "tab",
        "label": "AMP34_INV7_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "731933204433520c",
        "type": "tab",
        "label": "AMP34_INV8_SMU",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ff096b0e7876967d",
        "type": "tab",
        "label": "AMP34_INV9_SMU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b8fe5f0d8849996",
        "type": "tab",
        "label": "DATA REFILL FLOW FTP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "162c0f75aa8149f9",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part4 LOCAL FILE SAVE FLOW",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ee888a85dc828716",
            "b48a32ba2080d1ae",
            "a3b066a05658aa69",
            "697a2f4ad8989407",
            "0341113c052fe177",
            "7a2c27bfe6de5d78",
            "c1634884b84a4ac3",
            "4543edf16ae4aa10",
            "df7904d3fb0ed01c",
            "db6c2849d102e78d",
            "981bf2c455d1de74",
            "fddbe9e4b26f2d4c",
            "d67aba194213829f",
            "ad73e0a831803ac3",
            "b328291ac3fe9b0b",
            "8d6007541e926fdb",
            "02b06cc4ab086394",
            "5b151d4a2c88d63c",
            "c3416cb3e9b3ebd8",
            "ada7674aa4bec1fe",
            "7c300287d810bb0f",
            "81ac22f0c6f690c0",
            "5df62245746c6892",
            "7176114a8d985a96",
            "dcf2f1409873e083",
            "65096107c6256a91",
            "496335b35d09f534"
        ],
        "x": 74,
        "y": 119,
        "w": 1392,
        "h": 442
    },
    {
        "id": "dbb1330d4313d8da",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "FTP FLOW Amplus_Alex_Bikaner_SMU_Part4",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b11b3785977600ee",
            "c31bd0710d1f7afd",
            "3485e17b47eb9733",
            "01b113ae547016f4",
            "7ba709fab59af95c",
            "c9898d52ff537229"
        ],
        "x": 74,
        "y": 599,
        "w": 992,
        "h": 82
    },
    {
        "id": "d5e303e6ab5a4dd0",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": " Amplus_Alex_Bikaner_SMU_Part4 Overwrite flow",
        "style": {
            "label": true
        },
        "nodes": [
            "d9576541efe777be",
            "7519d47ff4b56780",
            "ecbd67930449733d",
            "686557cd1cded67c",
            "1a82d7cb81cbcdc0",
            "ea72b992180a4a49",
            "b42c5cbca0aba87a",
            "8166d2184faa099e",
            "f0dfd299dda5d191",
            "6f7729b311c4ed37",
            "8755966542749ceb",
            "d7488e6819d93a0b",
            "4f9dc4b3327d1a20",
            "d5649014dcd18c5d",
            "40d8f826f72491aa",
            "67f4ca804992f71c",
            "977f7d43bf8f8c28"
        ],
        "x": 74,
        "y": 719,
        "w": 1612,
        "h": 262
    },
    {
        "id": "05fdd02e01780ceb",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part5 LOCAL FILE SAVE FLOW",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e0e6f68b9762aa0f",
            "6ffb7d186b3e8d0d",
            "01ccf1415ff9eb6f",
            "11918c24afac0efa",
            "d8641c606c15aea8",
            "98408e411a0e2a6b",
            "3a4cb3f71842c30c",
            "20f1e20ac916afbb",
            "1655af7ff6a11200",
            "f4a30f649e9328c4",
            "efbd868266972ed6",
            "dd94b0b383412a09",
            "2186980e8b7dcd2e",
            "8aec5121ff41680a",
            "ea57a8b6c867d5d7",
            "0b21048187ae8848",
            "06f3117eec82800e",
            "d144e8c81a6abc9e",
            "71e1c9346767e7ba",
            "c8763294a97cfa4e",
            "0e86efc85c8117e6",
            "60380802bb5e949d",
            "e36eac19a38def28",
            "6769f96f8f82331b",
            "a8e17b5273514e0e",
            "54d6334c07989e2e",
            "7c4d05e91d207c72"
        ],
        "x": 74,
        "y": 1119,
        "w": 1392,
        "h": 442
    },
    {
        "id": "781dddef14f0b01f",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "FTP FLOW Amplus_Alex_Bikaner_SMU_Part5",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5e0bd3d1d9a6ac96",
            "181946ceabcc8da1",
            "180f07bb7b8cba68",
            "cba114ac86345fa3",
            "3e6e941c8f4dc8ce",
            "76d7264b0fabe033"
        ],
        "x": 74,
        "y": 1599,
        "w": 992,
        "h": 82
    },
    {
        "id": "9acf8398ef844884",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": " Amplus_Alex_Bikaner_SMU_Part5 Overwrite flow",
        "style": {
            "label": true
        },
        "nodes": [
            "6cb1f66b7494a9be",
            "4b381b04390be4b9",
            "4ebc81feb6cb4559",
            "9af875b8bdcf3e65",
            "9c7e556510fa6cfb",
            "61029ddda27754fe",
            "6a9c68f9f7913e60",
            "8ee6d722a8013d51",
            "9ca952a925eac85c",
            "e21bae8a4ba51805",
            "254ad0e4efc9021d",
            "44ee8ad3251ce64b",
            "e3a87bf6ade5fd0b",
            "c070ef08059a7f9f",
            "a6858158b0b41af7",
            "b6a84063523ceded"
        ],
        "x": 74,
        "y": 1719,
        "w": 1612,
        "h": 262
    },
    {
        "id": "7736016b2c3e0dd3",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part6 LOCAL FILE SAVE FLOW",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bd5f2fe29210e10b",
            "f3e1838449a26631",
            "e2ec5da3a43f25e1",
            "6f0de806111e0790",
            "95e7ef1e5d66a8b9",
            "511cec0891743e6e",
            "85dfb35896067c1c",
            "5036db5adddf4896",
            "9e63456a569d2562",
            "4f935ce4330c2734",
            "3132e4c1aea6e41b",
            "cec20d3a3fa44072",
            "05f20d7f7023c015",
            "c651c38eba60a56f",
            "54d8ea3b7631d7f2",
            "3776accff739e1e4",
            "c32f47f94bc66f69",
            "105bddd11293215b",
            "2dc555cb3e87a44e",
            "2e8ef3260732911a",
            "ef4f6e948a5a1042",
            "e5e73f6b218fbd51",
            "ebc18f2a183f45f8",
            "c0894ccb8f0827c7",
            "a6361454e29cec41",
            "2a6f0dcc453bae35",
            "3c92bcf8ac6defe3"
        ],
        "x": 54,
        "y": 2119,
        "w": 1392,
        "h": 442
    },
    {
        "id": "1cc6cb6bb7aa1449",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "FTP FLOW Amplus_Alex_Bikaner_SMU_Part6",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cdab262442d3d6ae",
            "f61212e8aeb733a8",
            "4095aca7d2e68871",
            "66df68cd4d49eca6",
            "fbcc6ca09aed8679",
            "7a69bca4f842d7b0"
        ],
        "x": 54,
        "y": 2599,
        "w": 992,
        "h": 82
    },
    {
        "id": "2239cdda2ed14695",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": " Amplus_Alex_Bikaner_SMU_Part6 Overwrite flow",
        "style": {
            "label": true
        },
        "nodes": [
            "11974aaf6033778e",
            "2bb020a2da55dc8d",
            "55a0e11bbfa986f9",
            "95ac1d56aebc6150",
            "0f409deb67247986",
            "2bb72ae41d36034d",
            "b7324e34b68de22f",
            "2db06579a02b1c69",
            "8373bcf649ce217b",
            "19f89a6b58f33f9b",
            "4e9c33843d6dd146",
            "0c27275bfa176ec0",
            "161f3da721e561ca",
            "1456a9f3f14d0732",
            "7f4ae89987059b77",
            "d237befb3bb75ad0",
            "15d52ca5f79e0e44"
        ],
        "x": 54,
        "y": 2719,
        "w": 1612,
        "h": 262
    },
    {
        "id": "e1765f3b89cb077b",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part7 LOCAL FILE SAVE FLOW",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "115861715027564d",
            "979ff9aa6bdd1098",
            "bfb2057d490d7d92",
            "b095a978147c6a51",
            "1292044002474fe9",
            "d7ab5455d30ef7b0",
            "86d33ca997c8574d",
            "bfdb01a6b4194207",
            "a3f2bdaa727d4c38",
            "a57982033b29e838",
            "22cbaabb8e1afe04",
            "35127b7f37825f81",
            "86fb5d701e4fb955",
            "d2f6ca784d14aec3",
            "cbad9ff50b78a9f2",
            "045f58aeb788a0b5",
            "6497500f7c950e0a",
            "721627df33ea703e",
            "b00d89a0e0f9107c",
            "b31d30bceea408d8",
            "170548b4f3416e7a",
            "c312b6db60696786",
            "32e674c633dd275f",
            "4dfd580167dbd0db",
            "3b186669d8495c49",
            "0965b1e4094a08f0",
            "de62ffe681de5970"
        ],
        "x": 54,
        "y": 3119,
        "w": 1392,
        "h": 442
    },
    {
        "id": "b8a01f49c2522842",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": "FTP FLOW Amplus_Alex_Bikaner_SMU_Part7",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "83991afe95fd2460",
            "f99ea512607bf75c",
            "8ba094ca4ccf4f51",
            "fcf03439c8785fe6",
            "168334f808c94a81",
            "16645f4c07af3ed9"
        ],
        "x": 54,
        "y": 3599,
        "w": 992,
        "h": 82
    },
    {
        "id": "2314625661a890a3",
        "type": "group",
        "z": "b338dc37820f661d",
        "name": " Amplus_Alex_Bikaner_SMU_Part7 Overwrite flow",
        "style": {
            "label": true
        },
        "nodes": [
            "879d1ef990479a3c",
            "daef74ca926fb9de",
            "3e2427880bedc1e4",
            "0bb9b5dc6709ec5f",
            "4e7762ab2d7f1f3b",
            "7b7600c3aa9c4ff4",
            "3c1c36a549b469f9",
            "d1ae84d47e101ff8",
            "f010eeb5a0cda1d5",
            "f559b18828cdd0b6",
            "4a3dc037c9824ae2",
            "a1d3d258557d1936",
            "1c712778b8d885ce",
            "fe2423b5bb0ec751",
            "63c010b6aee6559e",
            "797a849dc50e0e48"
        ],
        "x": 54,
        "y": 3719,
        "w": 1612,
        "h": 262
    },
    {
        "id": "5ff011ff93eab335",
        "type": "group",
        "z": "979a635b04d6eba7",
        "name": "ARJUN 2MW PART 2",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "19887618051f8ad8",
            "f4fc506bf64bdc6e",
            "f0c88c371fd40a55",
            "510136b61e2222da",
            "c30f6a23bd149c9c",
            "ce7a076cc069ef26",
            "4906042f8a8be640",
            "634ed824dab053ef",
            "c6f4463f8ba5512e",
            "64133fad3353e0f9",
            "39429496d856c7f8",
            "f68950d0788f656d",
            "736b1ad2a0740829",
            "c8311b5948a74cd6",
            "d3dc54a0b135432b"
        ],
        "x": 94,
        "y": 679,
        "w": 1392,
        "h": 428
    },
    {
        "id": "87f302aa111a01de",
        "type": "group",
        "z": "979a635b04d6eba7",
        "name": "ARJUN 2MW",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "0703b1907afa22b9",
            "afd8d3ddfca875b5",
            "d069ba5d245f7bea",
            "81ee69ecb0c0f5b1",
            "3dc2a7393754f550",
            "5d01de10e933bde8",
            "527d5cf51e926482",
            "6d7f010f5886b62d",
            "b96ed7e276ba0ee0",
            "b5abf0b433504157",
            "a44134e53ce4e8c7",
            "d890a22553db89ab",
            "84e96492ce32f829",
            "a847e9347490aa81",
            "3cfccd211c7e674a",
            "a74d98879acb83c6",
            "16902f25a843c95b"
        ],
        "x": 94,
        "y": 99,
        "w": 1412,
        "h": 488
    },
    {
        "id": "1a1558192d8744a7",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "name": "Amplus_34_CR_EM",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "ca908f4e9378d96e",
            "b83e75fedb689f2c",
            "005aa7354a439d3d",
            "0f5656c0b593cc5a",
            "dd61eaf31f1c1d49",
            "f1677230aa7c24c2",
            "1b7544bdb89550d2",
            "48896443251ff3d4",
            "6f9e098771fe5466",
            "6f1e9c37623be40e",
            "66f20126dc5417da",
            "1f9ace4d801ff672",
            "a1a2f7e98e2f34cd",
            "46f363b903c24dbd",
            "365c089c620b1b54",
            "f12fe216e6925de0"
        ],
        "x": 14,
        "y": 99,
        "w": 1412,
        "h": 488
    },
    {
        "id": "64129dd17b6746f4",
        "type": "group",
        "z": "8b843ee95109f04d",
        "name": "Amplus_Alex_Bikaner_INV",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fde37177b9f702fc",
            "e9e93fafc1b8ceba",
            "78786f86332112ad",
            "c2bdb76861b10b18",
            "4ab06537b86cb7c8",
            "8b02b54d5eefd77e",
            "132493b6ce274b72",
            "7256c464e11372be",
            "40d33005c09ae7ed",
            "72de5de45d43dab7",
            "aa6d0aa9d404d78f",
            "af961bcae01bbd4f",
            "86b00a4f1c34a1c1",
            "213ffdcf429a386d",
            "bf625b496a61a9e0",
            "c2940f87c6ccc172"
        ],
        "x": 74,
        "y": 119,
        "w": 1412,
        "h": 488
    },
    {
        "id": "e2abe4a5781fa591",
        "type": "group",
        "z": "b66bd877793ab767",
        "name": "AMP34_INV1A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "42dd228a21db1abe",
            "73ea4d5cdba67deb",
            "8c1fb78fc3ba1146",
            "338b90d7b1c14d36",
            "9c273304e423a349",
            "b24bb4085614e04c",
            "4c8a9bf50de6d416",
            "6e3dbb3d21c5c6c3",
            "05464c8e0dcab680",
            "2c5c334e0b5dc4ed",
            "240e9559d63e190c",
            "489943b228a39332",
            "b2405004eb513250",
            "d1b47dc40179eaab",
            "f76f81e11c99c66e",
            "3b50fd5f2d418197"
        ],
        "x": 74,
        "y": 99,
        "w": 1412,
        "h": 488
    },
    {
        "id": "a1db098c0c069a6e",
        "type": "group",
        "z": "b66bd877793ab767",
        "name": "AMP34_INV1B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "c4bfefc6d2b99a07",
            "398cd3341cf8aaaa",
            "f2aedd48eec0e8f9",
            "6019cf6495c1eba9",
            "74982170a5c970cf",
            "400e29e75aad3d13",
            "21b6799c388e230e",
            "118b337805a3ef1f",
            "f83219bd1871d068",
            "9d142775c3fcb44f",
            "7872ac5172f60162",
            "e3533793eed581d9",
            "19e1bb2cca80763f",
            "850f6e42171e27e1",
            "26183ecfc075a983",
            "6be1814c887795b7"
        ],
        "x": 74,
        "y": 639,
        "w": 1412,
        "h": 488
    },
    {
        "id": "0de7d8d4955e69d4",
        "type": "group",
        "z": "b66bd877793ab767",
        "name": "AMP34_INV1C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3efa153e0312a7e2",
            "4a99998e80dd5244",
            "5611548e13075d27",
            "e3f61049301120a5",
            "88aad8f396b18c19",
            "3a4084d51eb7c109",
            "680a5e3c585d7182",
            "0ba38c5aa65d1ba8",
            "51ae0858f0546f42",
            "d9ab3b89f175af05",
            "43243eb217c9a83a",
            "726273c27fc86739",
            "0b96707e23e6b3b2",
            "004282200a640371",
            "64c38a4844599e47",
            "6a90c937e253acea"
        ],
        "x": 74,
        "y": 1239,
        "w": 1412,
        "h": 488
    },
    {
        "id": "a0d59665140cba19",
        "type": "group",
        "z": "b66bd877793ab767",
        "name": "AMP34_INV1D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "dabd11ef3388c432",
            "fe334263c4199e30",
            "a4a90d0a2d72e281",
            "04566f7e0fa5527d",
            "762c2e6b4f524b4e",
            "b3737b70f9b5de54",
            "5c30ed62a3585daa",
            "58688324f3633ab3",
            "460a670f8fdfa1b5",
            "b8277cf24f130c89",
            "a9a1914c158625f7",
            "e8f2f53eba872218",
            "1142079da6e975f1",
            "33d22f3df4ebc243",
            "62b8427e4f666e3b",
            "eac0dcbd4a18fe66"
        ],
        "x": 74,
        "y": 1819,
        "w": 1412,
        "h": 488
    },
    {
        "id": "a58be0d9c828aeab",
        "type": "group",
        "z": "13bf10f7424e875b",
        "name": "AMP34_INV2A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "0c67f5c3aec6edca",
            "cf99b9b8ef7e41c7",
            "aa5198d9e76e2592",
            "600cea19c13ee8e7",
            "05eff055d9cafa96",
            "982034714a808be6",
            "b5f9265787f388a6",
            "8a3781037dd68b31",
            "9574952c542c397c",
            "a4ebbfc2c08633ea",
            "150fb8e8b74fd7f0",
            "b21d77e48a91a540",
            "b616a6eca9dd9308",
            "d7f91ba742509171",
            "f7c4c4380485d9a0",
            "eb0aec932ff5312c"
        ],
        "x": 34,
        "y": 39,
        "w": 1412,
        "h": 488
    },
    {
        "id": "b6ca363017cbb0c1",
        "type": "group",
        "z": "13bf10f7424e875b",
        "name": "AMP34_INV2B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "87d4f5a0fd589e51",
            "5529615113713956",
            "123a0161b8d54253",
            "5c40c3ae50e01178",
            "a4d3512427428abb",
            "d54ed3b0ba32e7f2",
            "e22332ac2b5bd634",
            "15f81d06f529a76a",
            "10443914eaea19d4",
            "d5fe3474554b2e96",
            "84cff165f5e558a0",
            "4a7e88be67086948",
            "69066af1455ff022",
            "f6ece1f5cedc28b7",
            "c18333e6bb06c595",
            "623545f7d99370f3"
        ],
        "x": 34,
        "y": 579,
        "w": 1412,
        "h": 488
    },
    {
        "id": "71056b46f16f8e11",
        "type": "group",
        "z": "13bf10f7424e875b",
        "name": "AMP34_INV2C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "aeeb4042f33af342",
            "f874aaabab71297e",
            "1befe0c50f279ef3",
            "bfc7ca6fdc4692cd",
            "8bbb869d1bf7de4c",
            "91bfb337007fa533",
            "f169518c905d8847",
            "68a989b9d9028b4b",
            "5ae9a3d50867a9b4",
            "67a77bdb498ad8a9",
            "ff219c1a3739bb30",
            "f51e6127fd796d26",
            "21ece9e3c3b2985d",
            "71473f342d74240e",
            "699f89aa4e6463b2",
            "0734609d437a10f6"
        ],
        "x": 34,
        "y": 1159,
        "w": 1412,
        "h": 488
    },
    {
        "id": "16162f02d93d094e",
        "type": "group",
        "z": "13bf10f7424e875b",
        "name": "AMP34_INV2D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fb711d40239d4d77",
            "37a3496a18e04d6b",
            "7e0ebd02ad7e4338",
            "038ef3b09f36da34",
            "2add7561831ee528",
            "57c643b2eccba5bf",
            "67deb2e2d7198538",
            "e826eaf4a710a3e8",
            "6c64f6741cef0143",
            "e2faabcb77b92a9d",
            "1522b36295eeb1ec",
            "fa46e599958cff6e",
            "6155542b3c37370c",
            "033d3ef7431f1893",
            "dbd40e0416e42a5a",
            "739148fd2b2c4157"
        ],
        "x": 34,
        "y": 1759,
        "w": 1412,
        "h": 488
    },
    {
        "id": "f8c320b4bcc04f6f",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "name": "AMP34_INV3A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4724424aea48c5d3",
            "45c98a035593e3ec",
            "ee7c354d4cbc7249",
            "e609df3b540af7b7",
            "f03c38e85784199c",
            "11a63901d067474c",
            "d536e286f1dc4f16",
            "8e1b180aa4f77355",
            "ad2c5f92de6f44e3",
            "2af4903655aec714",
            "0c1d4d0676934c7a",
            "6a641bfebba8a297",
            "90657fc2ec69ebd7",
            "230f744e9f1a0c1f",
            "37d2339e1f11da5f",
            "e0a1c236b736310f"
        ],
        "x": 134,
        "y": 59,
        "w": 1412,
        "h": 488
    },
    {
        "id": "5507aa51ee6934b1",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "name": "AMP34_INV3B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "62f72251b1ec17e6",
            "2ebdcd2e89b3cae9",
            "30868d5a11169fc4",
            "4d360e420ac1d8d5",
            "10202b1c74b5d1c7",
            "570116e28fdbecee",
            "53e8310c08bc1591",
            "17bc1562b84313eb",
            "9ab3c5e1df5d3d3c",
            "5474263efeb56245",
            "8d114c6c4f2f3d66",
            "29996369720246cf",
            "15d50c126e7966ea",
            "8fe756677d860780",
            "d768dfa7282c3793",
            "77d708bdb3845928"
        ],
        "x": 134,
        "y": 599,
        "w": 1412,
        "h": 488
    },
    {
        "id": "98122507ca08ea60",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "name": "AMP34_INV3C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "699b53b689f72da1",
            "9599ad6b4c250370",
            "81e32d8cbf33fd9a",
            "f77603c5ae750fd1",
            "e8c23ad94e920841",
            "a6a7faf26a98e203",
            "4366407fc6775cb3",
            "a9502094e72fcb7c",
            "147cbc15455e5e08",
            "ddae32ef63017d1f",
            "7842e45db85aa8e8",
            "a4a3eab8455cb0a9",
            "61f0d7ca7ddcc163",
            "c7897e187752cbf7",
            "7ba614e60ddea5ec",
            "14ba17f4c55e62dc"
        ],
        "x": 134,
        "y": 1179,
        "w": 1412,
        "h": 488
    },
    {
        "id": "7625d46eadb0d068",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "name": "AMP34_INV3D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "d3fcce1448a61542",
            "7d69bd81bd874771",
            "d0f8b8a36ce2bdae",
            "a4d3e2a1e6efa546",
            "4743a09b12d37f68",
            "d1a907c7723fc09e",
            "168fe5aa755b8313",
            "494370a966cd9261",
            "a5c034e5cc13b7ab",
            "39435c7a063eab20",
            "9414a6ca730c52aa",
            "b3a7ce1f5d4ec804",
            "aecf11ae4447954b",
            "68dfdcc51cdd039e",
            "7824797d31139c45",
            "25979f00b544d15d"
        ],
        "x": 134,
        "y": 1779,
        "w": 1412,
        "h": 488
    },
    {
        "id": "2a99dfd7ecd31f18",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "name": "AMP34_INV4A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "500df65c064dc7e4",
            "a2bb19fdaeb9dd64",
            "9e7d2aa962ce97c7",
            "06568e72e4d55ed3",
            "bb881b6b2824d8c0",
            "9936487e32a306e6",
            "7ca2407d3fa7e8da",
            "4d55f069ec7878f9",
            "a7a886991167d75f",
            "f94c45461b458ade",
            "3cf4c6a6e1a4feea",
            "c2c85c618506e2f8",
            "2a1981186a9a4bdc",
            "c6e0d43482042f2f",
            "8818ea920b0cd533",
            "aa4a1aa3e6c2e9c2"
        ],
        "x": 54,
        "y": 59,
        "w": 1412,
        "h": 488
    },
    {
        "id": "e2fd5d2bf284130c",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "name": "AMP34_INV4B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "9fbff932e8af77a7",
            "790267158cb1e6f5",
            "27237608b33b677a",
            "9c915517a1f879b8",
            "0087b2d13f15a0bb",
            "572381bab61bd3c6",
            "c942d9a9c5240925",
            "35df2d9019305b6f",
            "25b15cbee709ca68",
            "409f0e6a74e32e20",
            "06c8f40fa5c323c1",
            "a1716943cb5fdb13",
            "8b01efdab939d09a",
            "5ce0f05af8d5623f",
            "a58acb80e602c7c0",
            "a4223bca32afc2b5"
        ],
        "x": 54,
        "y": 599,
        "w": 1412,
        "h": 488
    },
    {
        "id": "8e6119a3e520929f",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "name": "AMP34_INV4C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "443bc15a78dc6d38",
            "bc81110eacfaace3",
            "4d61fdf822e229fa",
            "0226a3ca8a4d0b1a",
            "643d3fe7548d5a3b",
            "ace1d2ab2eaebde8",
            "fead5d862480db56",
            "b14d7d730d731182",
            "f3d6e4d15602487b",
            "0485e0561ef95f91",
            "2c2b3ceb98eb12af",
            "389ce88f87116f7c",
            "6c173ed8e24771cc",
            "8412b17af673e671",
            "d9c542365d6bc7c0",
            "2e99d0b36faa39f5"
        ],
        "x": 54,
        "y": 1179,
        "w": 1412,
        "h": 488
    },
    {
        "id": "c9b3c5e11bce21ee",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "name": "AMP34_INV4D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "345f288b726f5e75",
            "04a313e02a3d1ec8",
            "b3d4bb6b98d7a741",
            "bde1bcfb65350f32",
            "ce8b40d73be61b74",
            "4d432aef684af1c9",
            "399f9a69a861583f",
            "f84ee7d7a49a587e",
            "6bb0a2887423e081",
            "1ccd32e5f9fb2d78",
            "e559ec3d4a20e711",
            "9a031ef937d1cf35",
            "e07b0e2a56b8d836",
            "385013456eef8ef7",
            "ed93c4599fd453a3",
            "4d41d79372c4d103"
        ],
        "x": 54,
        "y": 1779,
        "w": 1412,
        "h": 488
    },
    {
        "id": "50342b1532f418b9",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "name": "AMP34_INV5A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "60876d8cd1f53d31",
            "0c262bee2f7ae970",
            "ee796681b671843e",
            "d892f834b735b223",
            "be27ad812ed3612f",
            "fea10f8a997c41b9",
            "a0f41c57bdb5d074",
            "e2fbf1936faf5e06",
            "74e67a73faf65faa",
            "30fb3314575d45e6",
            "2a2c32d5d14f002c",
            "37f2578562640dd8",
            "e6577cebd701b36d",
            "02025c254100f34a",
            "618228f80ce09498",
            "3f71a33ef59a0247"
        ],
        "x": 54,
        "y": 59,
        "w": 1412,
        "h": 488
    },
    {
        "id": "e29b4a78e8e6888b",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "name": "AMP34_INV5B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "038d489c9d05f4ec",
            "29086b525939af6d",
            "dae1336a4e395cec",
            "75d2508406a80e7c",
            "25a63bc3d4ce9eed",
            "9b4433880eae0593",
            "abee72f7955740fd",
            "9fb82f7907751614",
            "4139733f7d597c90",
            "ae150273a0a46c89",
            "f4246a16e26f8355",
            "95cbbeef7af48d53",
            "4f5b6d763aa43f2b",
            "301bedb4eff4371a",
            "21c5bcfb80c37191",
            "7f60a43eee8fce8a"
        ],
        "x": 54,
        "y": 599,
        "w": 1412,
        "h": 488
    },
    {
        "id": "621905e91e8429b4",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "name": "AMP34_INV5C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "59125be4f9971c0a",
            "880737fefe5a5e93",
            "848c61f0566e9d81",
            "da5560dee488ac29",
            "d2bfd1156167d5c9",
            "070815b4d4c5b4a8",
            "dc6c8c30ff3171da",
            "83a90b785149cbe5",
            "cc92beb6856848af",
            "2a5ebdaf69340606",
            "afe6541598aa67ef",
            "52145f645ba9a3fc",
            "ae0f42f716c50409",
            "f487a3e2b41bd969",
            "09810144f98a7552",
            "f6d3f14822f24661"
        ],
        "x": 54,
        "y": 1179,
        "w": 1412,
        "h": 488
    },
    {
        "id": "4c271d5389cf694a",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "name": "AMP34_INV5D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "97f722e18a7289f0",
            "f657b55080f30d3b",
            "fb9a0747c907ab02",
            "745941a8c7cc5aeb",
            "985db26d17dde3b1",
            "89fa07800bcdb47d",
            "66a3fd8b55e8dbf3",
            "b5b14f18d9ec78dd",
            "aa7213f6c50ac48d",
            "118203edac7f0145",
            "d2cacc1f5b8180b1",
            "c466318cb552a52e",
            "dcfc9665b24612fc",
            "74fab9e8df404a4c",
            "b59c9e47e314eae9",
            "7ce9429885a1a680"
        ],
        "x": 54,
        "y": 1779,
        "w": 1412,
        "h": 488
    },
    {
        "id": "6dad9828d8667db2",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "name": "Amp_34_Inverter_EM_WS",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "93e9e57323898a29",
            "b3b2e5078295bb2f",
            "936394d2755938fe",
            "4865e01931a005c4",
            "da18d36e0c0333b4",
            "ed7cefad61c6d3d8",
            "dc6cd36a5506dfec",
            "6a39f29410beafd0",
            "876e6fe71c34d2bd",
            "de6920f36c854a34",
            "8966ca8d76872442",
            "917cc67b520f671b",
            "73dc2dd0c90a89fb",
            "534a16e428e73b96",
            "7b231302b3272fad",
            "58769b5e91d27ce9"
        ],
        "x": 14,
        "y": 699,
        "w": 1412,
        "h": 488
    },
    {
        "id": "47ae661278632a1f",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "name": "Amp_34_WS_PSS_EM",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3a46ee2f8d2c815f",
            "69d9e8a89218c9df",
            "3e3f21bc9ce566fa",
            "191bfa6671ae7dfe",
            "1f54ccea9bf15900",
            "41da2e985e07f15f",
            "6c6eb1d1e7b99303",
            "52d715992144de7f",
            "aee460a0defa3d67",
            "c40e14b73e5887fb",
            "bf3739046d302124",
            "0f0a3afb5853a242",
            "e6579f95ddef3fd6",
            "be1cce70c09129e1",
            "b156ba37770b0bf4",
            "ba06c6a2cccb2d7c"
        ],
        "x": 14,
        "y": 1279,
        "w": 1412,
        "h": 488
    },
    {
        "id": "ea859589138a5591",
        "type": "group",
        "z": "f63309332e4729d6",
        "name": "AMP34_INV6A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "064546a31655ed51",
            "42123c67d18dd688",
            "899e3f1510a91176",
            "5c57d4662f39cfb2",
            "61e83461669b5d4f",
            "982096e9778eee6f",
            "da6ad10bec9dd983",
            "112b5fd83c5de73d",
            "c354788eb4e6bfde",
            "85975dfddca0408f",
            "ce3dcf7bf5ce1004",
            "cfa8bb1ed5a865c9",
            "2c322a1b33a90246",
            "a61c4a8cb28adb1a",
            "752dc896f3075440",
            "5dda6ada64ec38d0"
        ],
        "x": 74,
        "y": 79,
        "w": 1412,
        "h": 488
    },
    {
        "id": "75b9240b6b258f9f",
        "type": "group",
        "z": "f63309332e4729d6",
        "name": "AMP34_INV6B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "87eb2c020ccf558a",
            "ee701a093527144e",
            "a908fca9ed570f16",
            "c5edfb00ad4fab2d",
            "0cee3848f242813c",
            "d20df0e3131124ea",
            "c3a603b45339d633",
            "df3665e55c1a487e",
            "940276e0f67668e9",
            "0e3892bf234232ea",
            "f128cd569e9c7f60",
            "a00f8fdfd8e84f29",
            "2597936e9c934162",
            "843f88b79bc5d34b",
            "e2824234d8a9bc5f",
            "9edfd80994115eab"
        ],
        "x": 74,
        "y": 619,
        "w": 1412,
        "h": 488
    },
    {
        "id": "9f65a1fba23e57a7",
        "type": "group",
        "z": "f63309332e4729d6",
        "name": "AMP34_INV6C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "8dfd06a4c1df6a48",
            "ade2476dda8863b3",
            "fd1c02cc50f19e80",
            "3a3bd7b66993cce6",
            "71b42a39f1f4169d",
            "581572bf02fe4b62",
            "156952e7c655f842",
            "0d321b9adccded8a",
            "15f30e4613ca6e14",
            "f1074160324e421b",
            "39f8e0982b757f59",
            "f213721d650242b8",
            "150a91886b4629af",
            "42b12ed780153d86",
            "a26ba6d0629fe260",
            "0c070845e5e184aa"
        ],
        "x": 74,
        "y": 1199,
        "w": 1412,
        "h": 488
    },
    {
        "id": "4072f6d6f4708b10",
        "type": "group",
        "z": "f63309332e4729d6",
        "name": "AMP34_INV6D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fbd7a029019adb49",
            "b33c124353e28813",
            "da272e422b35ff35",
            "25c7601e5854640c",
            "86c06541e1965432",
            "a5db711e571a6ff2",
            "8b8c9b97e05cab2f",
            "e5bb2a2df6f0e1ef",
            "06542b2d44cd2d37",
            "f43fba24c66e232c",
            "532477b8992c2ba7",
            "06969246dd7a5126",
            "dd64214139d4e49d",
            "93f34ce184ce78f0",
            "3b447637eee400e9",
            "27b735315a66c0a9"
        ],
        "x": 74,
        "y": 1799,
        "w": 1412,
        "h": 488
    },
    {
        "id": "4cee22ef41632015",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "name": "AMP34_INV7A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "2deab2e3648d7511",
            "fb25253f93d6cd72",
            "4fe2016edf32b121",
            "75bca8c4b23f5eb1",
            "fa09b97cc46ef96c",
            "dd05c320653b3e07",
            "2ba90ddbc7b8da67",
            "72cc5ac3e5133ee9",
            "585cd317c8103bd4",
            "db38c1f9b0acfea9",
            "a46bc8aa1e4a3ea5",
            "486ae5a937ffc233",
            "23492419d88bf58c",
            "1e22255fae1965c0",
            "d8bb81a47e75c537",
            "47b2f4b614105312"
        ],
        "x": 114,
        "y": 59,
        "w": 1412,
        "h": 488
    },
    {
        "id": "1be85b2c1fbf2c62",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "name": "AMP34_INV7B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "da70b25f7137e576",
            "b091bd04e855c971",
            "70b22837cb132ed5",
            "2394c01f556147e1",
            "8b54b187a51587a6",
            "1ce27b3c10cb3564",
            "e39a86d68d0a9591",
            "127b0f7a6db955ce",
            "54c4a900661fef13",
            "252b3681961ebcf0",
            "9d65817fc7adae13",
            "8cab19e1685cd033",
            "1e4e92c83e457abc",
            "faf0d036a6315781",
            "16e23ef70dcafadc",
            "bf8a64df8b693b6f"
        ],
        "x": 114,
        "y": 599,
        "w": 1412,
        "h": 488
    },
    {
        "id": "50e8318acee2eea9",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "name": "AMP34_INV7C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "31e076880af1d497",
            "f9b832378d0f55be",
            "4663c9594eb70a7e",
            "2cc470442ee652c3",
            "91c0191ed7fa0c38",
            "9697bfdb0be7ccce",
            "e5c7e713954dcbd3",
            "f2a3f7cd6f19fdaa",
            "c06b6470711a8da5",
            "238d048f18ee5f79",
            "88b88c6792eabaed",
            "e5f239a2236962ac",
            "335bf3de6fa516e2",
            "3388ab54980ecd67",
            "335759c5b4f01cb3",
            "912c65c1fd154ee2"
        ],
        "x": 114,
        "y": 1179,
        "w": 1412,
        "h": 488
    },
    {
        "id": "cf7d40e0411e1af3",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "name": "AMP34_INV7D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "d4bc51e293abf997",
            "3ce19c6aa5d28549",
            "4d66b88a5fe1bd41",
            "66c7110a016ad407",
            "5b5f496900407871",
            "ad7acd59cc92eb50",
            "4c79ec06e8971d18",
            "9d8906d5a331ab26",
            "6b98e9cfc01fd082",
            "32ac594397100013",
            "e328bd4392cb66e1",
            "42dcb0c9c976683a",
            "7f76e32e94ce5d24",
            "b0e5fdd1bf3c5317",
            "0e0886fb1d22ec1a",
            "aa7fa141b5e8037c"
        ],
        "x": 114,
        "y": 1779,
        "w": 1412,
        "h": 488
    },
    {
        "id": "1e602217e210d308",
        "type": "group",
        "z": "731933204433520c",
        "name": "AMP34_INV8A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "baafcd63ed003138",
            "1d09c40bf568dee6",
            "1ffa627aef96695c",
            "73b692021beb089e",
            "b70bc2f4861045cc",
            "9d54acb4ac8919cb",
            "da1aa561a334f92a",
            "dbee1a351db62f74",
            "366b246d6af591d2",
            "ab4d47516b020161",
            "9c0f5a3d34eadcc7",
            "bdcff9d3a1f1a09d",
            "1a58f46423ca6c81",
            "33a5802de6a8bbb5",
            "2da54513be6c3386",
            "7464f0c333a460f7"
        ],
        "x": 74,
        "y": 19,
        "w": 1412,
        "h": 488
    },
    {
        "id": "f4758734fe48b316",
        "type": "group",
        "z": "731933204433520c",
        "name": "AMP34_INV8B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "e6b77398b3153da6",
            "41a07c1d8163a673",
            "8842c471376b2573",
            "be9666642993a963",
            "5091b57c1748fd2d",
            "d96b17ecdd0239a7",
            "f2f4d5ba0482a0e5",
            "356a911cea61bf6b",
            "ac97453e9bb2bc02",
            "7588f8e6dea9a292",
            "d97cfdc3760e72bb",
            "492d7e2e45fa0fe2",
            "2cdcee80a8d55dfc",
            "12ed85b933f27d94",
            "a8f33029f5aab544",
            "5bceaacc77e515af"
        ],
        "x": 74,
        "y": 559,
        "w": 1412,
        "h": 488
    },
    {
        "id": "4f10f09341e5f1ce",
        "type": "group",
        "z": "731933204433520c",
        "name": "AMP34_INV8C_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "467a9fbffa4d7d44",
            "0427296e01340d89",
            "cfb1d5728532a5b6",
            "facc96d0b14a751f",
            "04e0d789f80247ac",
            "e743aeeb0264b769",
            "a4e2f61f699df82d",
            "18e386fa7480fc94",
            "7e94a15607b52652",
            "d2e79c3269eaf59c",
            "b0d6f681080e9ef8",
            "8ed670b881cff6e7",
            "006698d7d667efbe",
            "6430553224d0448f",
            "345f9bd2d20521b8",
            "7e63b120ee750e7f"
        ],
        "x": 74,
        "y": 1139,
        "w": 1412,
        "h": 488
    },
    {
        "id": "86a1d960695e6a5f",
        "type": "group",
        "z": "731933204433520c",
        "name": "AMP34_INV8D_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "0477c421a8b4ed54",
            "cf67e9f006ae4344",
            "d5e260b32abbde5e",
            "42358f342c76928f",
            "cd463acd27c716ec",
            "9869eae51c0130cd",
            "2d7e07814c9debac",
            "3d835ac44ad80e7a",
            "5647eeab4ea47550",
            "4fd57ded0b9ab073",
            "6208e149a1ad94b4",
            "d089d3af7d4dbd05",
            "d95553d651dc17f0",
            "256fc2ec2e4d450e",
            "1ce6266c510a87b8",
            "8f0aeff139bdea7b"
        ],
        "x": 74,
        "y": 1739,
        "w": 1412,
        "h": 488
    },
    {
        "id": "7e03b30b192452f8",
        "type": "group",
        "z": "ff096b0e7876967d",
        "name": "AMP34_INV9A_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "7dd0619be4818e53",
            "f3b401ed6263dfa2",
            "f51ef8b97ce69d56",
            "3458568e9f3405c4",
            "5fdcfde91b7bddb9",
            "ac8748440df3a423",
            "e605587513639894",
            "09107c68d67398cb",
            "96fe769ef5976e49",
            "0cc26ea426259887",
            "6f88280e514d9fda",
            "43d96f9e97ab1f6c",
            "be2f242f453aa09f",
            "ea370db53b4bad01",
            "c2af863abff33247",
            "a6079ec9039a81d9"
        ],
        "x": 174,
        "y": 59,
        "w": 1412,
        "h": 488
    },
    {
        "id": "e795ace9c4d5854a",
        "type": "group",
        "z": "ff096b0e7876967d",
        "name": "AMP34_INV9B_SMU",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b073f3d7fa116036",
            "8e3c862676efdb3d",
            "7e4f4fec5ba53912",
            "9705b77306c48711",
            "46313f7fb99076d0",
            "23bbff10df5d76ca",
            "20c709bd94c235a3",
            "315261d1e35d8e51",
            "9eb0ec95919b1c43",
            "d046cc607284f625",
            "0fdb35e045b5788a",
            "bdceff44787a61c3",
            "49d4ff85a3b6df19",
            "7673b3c4e6d284b3",
            "b9f774b647023e57",
            "36ad634535c1b67e"
        ],
        "x": 174,
        "y": 599,
        "w": 1412,
        "h": 488
    },
    {
        "id": "01664f568a71138f",
        "type": "group",
        "z": "63d962c004d68b5d",
        "name": "Amplus_Alex_Bikaner_SMU_Part1",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "bad656a6a80ace32",
            "15c1358854878c89",
            "8fc2f19fa2dd3e17",
            "98602ea279df25d9",
            "b0da7c38e617d45c",
            "ec447a6e78691a4c",
            "d55110bf2590d9c6",
            "017df8a9f5447aab",
            "d42daeda6726a195",
            "715a7318a83202a9",
            "d1489cb2470f78e9",
            "4fae620fd93953be",
            "e0664f0f3681bbf6",
            "6d64d862bf743b64",
            "7331d8dd6e8b9553",
            "1d0862807f0a73f3"
        ],
        "x": 174,
        "y": 139,
        "w": 1412,
        "h": 488
    },
    {
        "id": "3cfccd211c7e674a",
        "type": "group",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "FTP FLOW Arjun2MW",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3329bc593d3d0697",
            "71803bf86235e467",
            "6c6ccd2ae3482cf7",
            "8598c29ba3720969",
            "461b9c304fed7b04",
            "bbea109d968ea512",
            "af3f4e267f5856fc",
            "6621abc93fc268e2",
            "a77b4545e7c725ad",
            "a04aa63686dfbfb9"
        ],
        "x": 274,
        "y": 379,
        "w": 952,
        "h": 182
    },
    {
        "id": "d3dc54a0b135432b",
        "type": "group",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "FTP FLOW-Arjun2MW Part2",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7079492cb0abef3b",
            "aba144d5dcf90bcb",
            "95a7ec4f1cc68ca1",
            "293833f9d4c836e4",
            "a2afbedc1023a5d5",
            "9b6231ba446f6cbf",
            "59857cd1457453a1",
            "cbf2887ca64a92dc",
            "8fbbb50106a2f17c",
            "e80e620a1979416f"
        ],
        "x": 294,
        "y": 919,
        "w": 952,
        "h": 162
    },
    {
        "id": "46f363b903c24dbd",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "981fbb344bd668a5",
            "ba4eeb190e97851d",
            "d49b0b8fbdf0f159",
            "933948388111caaf",
            "f5b0dc93a02029e1",
            "4b52aced9b82ee4b",
            "19f937f879e4984e",
            "25c8d05e68efb58f",
            "f8e0d04c8934694f",
            "c520c0d1e02fb17c"
        ],
        "x": 194,
        "y": 379,
        "w": 952,
        "h": 182
    },
    {
        "id": "bf625b496a61a9e0",
        "type": "group",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "FTP FLOW Amplus_Alex_Bikaner_INV",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6d9732fa54f2689c",
            "f5cdb33b2bf63682",
            "b4e765ca81e3f629",
            "4ca472e8426631a7",
            "d7ae45b0c7d1aeb8",
            "72dc0d57aeeb79b4",
            "87d5fd4ca1aee3c4",
            "686438caaf8db6b3",
            "8c190466bdc4b923",
            "2ecf43995cbaa63e"
        ],
        "x": 254,
        "y": 399,
        "w": 952,
        "h": 182
    },
    {
        "id": "d1b47dc40179eaab",
        "type": "group",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fbea7719ea8b2863",
            "e844598ddee7a1b2",
            "4b61c66d121d185d",
            "ea2a4f595c3518a6",
            "ca982f28de69ed91",
            "f26fc9ef29c1e621",
            "4a4fb6de351560d6",
            "7931c5e8de0c1abd",
            "fedf86dae4b79962",
            "2aacc3c4734e0d22"
        ],
        "x": 254,
        "y": 379,
        "w": 952,
        "h": 182
    },
    {
        "id": "850f6e42171e27e1",
        "type": "group",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "11ce037f623fa690",
            "296336477cef62b2",
            "fc4b73a530d5e335",
            "0836effb5a33f6d0",
            "b8441078018238e9",
            "670d641a9735048d",
            "75350a56a26a64ba",
            "6fde68059d201961",
            "2bd8b49c7616b97e",
            "4d1433e7f8504d10"
        ],
        "x": 254,
        "y": 919,
        "w": 952,
        "h": 182
    },
    {
        "id": "004282200a640371",
        "type": "group",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "35ffcd5854b8f351",
            "f98eaf08f7767540",
            "58ce2d2a3f24e4c6",
            "58784a2d9bd1407b",
            "fbca8b55b427a993",
            "7b685cf335d04db3",
            "bd398b6c39c7444f",
            "743334cff09302d7",
            "d705b40312198ba5",
            "36a388bfbedf680d"
        ],
        "x": 254,
        "y": 1519,
        "w": 952,
        "h": 182
    },
    {
        "id": "33d22f3df4ebc243",
        "type": "group",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ad0e99c918641176",
            "da5052550acf8aab",
            "1da6961644c101c2",
            "36fa314f97aec458",
            "3514a601086df279",
            "3540821c7f2eeb16",
            "780ffc5acbf32428",
            "b90d15cee9fc45fa",
            "5534185ae3c0a6ce",
            "79fda90ed202e479"
        ],
        "x": 254,
        "y": 2099,
        "w": 972,
        "h": 182
    },
    {
        "id": "d7f91ba742509171",
        "type": "group",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5abea6e81ad12d77",
            "84fd44d5f85c107c",
            "57997b8fb5ce4f7d",
            "e3848de793b92bd5",
            "86f556fe3a8f9aa7",
            "dec7d7fb3ff8b846",
            "2e2f1e80998ff8ee",
            "2e94a79d6d0998d5",
            "3f3c94d02cce6cc5",
            "a9f0f8ba87a5ee36"
        ],
        "x": 214,
        "y": 319,
        "w": 952,
        "h": 182
    },
    {
        "id": "f6ece1f5cedc28b7",
        "type": "group",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "807d763016f3a1e8",
            "0afb32330de95751",
            "70540db1b86893ee",
            "f9649f7a4178388f",
            "93cdb55157928a47",
            "8c3639f792243204",
            "399f5c286ca94602",
            "3333832453f0e453",
            "a9af638138b48fde",
            "90d8b2b41e985775"
        ],
        "x": 214,
        "y": 859,
        "w": 952,
        "h": 182
    },
    {
        "id": "71473f342d74240e",
        "type": "group",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f6270001250e73e8",
            "feffe37383c63b61",
            "ac7e69914dac3409",
            "15d6fdfc9f128892",
            "9a213b0c9813e3ec",
            "fad86878ac27d6a9",
            "2e6361dca485a48f",
            "64ed133f27394ccf",
            "21e341d16fa521d5",
            "50ec4a6387cd1144"
        ],
        "x": 214,
        "y": 1439,
        "w": 952,
        "h": 182
    },
    {
        "id": "033d3ef7431f1893",
        "type": "group",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "820eedeb9e589898",
            "60c54c0dae3f274a",
            "8e507d0ea4f757df",
            "e42a063b307576e9",
            "ee23770442bf71b1",
            "1b80d026586b3661",
            "e89c25fa0e75a263",
            "93cb284dba18a6b1",
            "1a82a1e408d9e487",
            "b657ad6d30a635fe"
        ],
        "x": 214,
        "y": 2039,
        "w": 952,
        "h": 182
    },
    {
        "id": "230f744e9f1a0c1f",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9c160436a2c1c601",
            "c3dbf0547baf33f9",
            "e11626b25f07edc2",
            "a07ee1cbf3febd41",
            "68a8de3a921923e5",
            "6bd53c4632d30a45",
            "d289336aae4ffacf",
            "98f1035e32838e19",
            "4282f921d57b7bdd",
            "84a417a041ff6c4c"
        ],
        "x": 314,
        "y": 339,
        "w": 952,
        "h": 182
    },
    {
        "id": "8fe756677d860780",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d120515d9d15dfa0",
            "3485df977c5e2b50",
            "d19e212b51b32616",
            "a1f6767077d0b42d",
            "ce0b22f059895e9a",
            "7e603b7ff07f197d",
            "19978acc66f97286",
            "0240b6aced2f15a0",
            "0dc9141e2f13766e",
            "16829e584ea41110"
        ],
        "x": 314,
        "y": 879,
        "w": 952,
        "h": 182
    },
    {
        "id": "c7897e187752cbf7",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e578ff4e255f2d1f",
            "d0f25bea05700a51",
            "b8edc980485fa1b4",
            "892b3816a01688e8",
            "fee4d1f92b40ec1e",
            "545c9b32917a5cba",
            "0985a1a4be4933ed",
            "e94453355dadc823",
            "35d3d631ddd94afe",
            "4a31bedd0f22fcd2"
        ],
        "x": 314,
        "y": 1459,
        "w": 952,
        "h": 182
    },
    {
        "id": "68dfdcc51cdd039e",
        "type": "group",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e6f6dfdf50ef9636",
            "5d58ec5d72d7a1ea",
            "a38134480efba630",
            "f022dea4967f7a2c",
            "f3222f4349e9433e",
            "ba17cd726b5e40ce",
            "70b33aec1e97d728",
            "b4d0c3668f4cd2ba",
            "f0c978bc9475ed2d",
            "9b19a819d3703f58"
        ],
        "x": 314,
        "y": 2059,
        "w": 952,
        "h": 182
    },
    {
        "id": "c6e0d43482042f2f",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "52aa44c0f9deb6bb",
            "59cfe6cb2c356bfb",
            "1d49c5f07cd324d9",
            "cd5b99069f17dbf1",
            "d74fc00cea183b44",
            "4fe2c99ece213210",
            "a1696da36d5c14f3",
            "58c493abf26a3f91",
            "3f82e6287f451ad9",
            "919dfbd69c5f44e6"
        ],
        "x": 234,
        "y": 339,
        "w": 952,
        "h": 182
    },
    {
        "id": "5ce0f05af8d5623f",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "05a09ce72790a7d8",
            "9e5f3bddda231a23",
            "59120d3381bff83f",
            "589ca429fd3b0ee9",
            "f02d24a0694ed16a",
            "fbc51ba3ce6f3210",
            "bc86985ea70f39e6",
            "b5d32c9f4000ef1f",
            "5c6aa514b204279a",
            "4388f80bb15377c3"
        ],
        "x": 234,
        "y": 879,
        "w": 952,
        "h": 182
    },
    {
        "id": "8412b17af673e671",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "87462d09e939d615",
            "cce31333ad97d00b",
            "4c5ec5925f6728fa",
            "fe9b07ff961ccc47",
            "5883d1e7cd77448b",
            "f99323c0d9054cf5",
            "3567d4b878adfd32",
            "27da0d1ea72de2d9",
            "c0761dfbbaeb32b0",
            "923bd668a36298d0"
        ],
        "x": 234,
        "y": 1459,
        "w": 952,
        "h": 182
    },
    {
        "id": "385013456eef8ef7",
        "type": "group",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7725f18363333ae0",
            "8afa16dd36db3e2e",
            "944e7d644b52d373",
            "7753a0395c29bcff",
            "be0e357539485af2",
            "2640838dd01b2e54",
            "7a1b65f65cfed281",
            "b2200760a175bcd0",
            "6bd2f9b61887e399",
            "6bbe33d6f2ef8301"
        ],
        "x": 234,
        "y": 2059,
        "w": 952,
        "h": 182
    },
    {
        "id": "02025c254100f34a",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "02aa15b03ed39c81",
            "a36aa6559dd0d055",
            "59dc254085b2c8df",
            "6455b468c583a72e",
            "da7bf40fc7db1e73",
            "8362ef3e078b4b2d",
            "de132915f9f8b97b",
            "3f656a81d1454a5e",
            "7f85e5e174b66a8c",
            "18b56ddbcfdf7f95"
        ],
        "x": 234,
        "y": 339,
        "w": 952,
        "h": 182
    },
    {
        "id": "301bedb4eff4371a",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b5ced2dc69cae30e",
            "35a7b3272341b9d3",
            "33a9ce69ee7056dc",
            "66606e827e01dbd6",
            "abbfbdec7bd7d32e",
            "954ae4b0e9645d3b",
            "67b98bf144247355",
            "5939d3576de0e73d",
            "345b3f463726aaeb",
            "7f53df628173e4a1"
        ],
        "x": 234,
        "y": 879,
        "w": 952,
        "h": 182
    },
    {
        "id": "f487a3e2b41bd969",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "56a3a78481093965",
            "54dbaf8c16bec830",
            "3a9d53925d7726d7",
            "6b635a2a684fdb23",
            "208138db0e968ad1",
            "21df0a1be435af71",
            "7181297222dd5cfc",
            "e78cb840e95d814a",
            "c6bb5adfe54af4ab",
            "0e9160a7a2db76d6"
        ],
        "x": 234,
        "y": 1459,
        "w": 952,
        "h": 182
    },
    {
        "id": "74fab9e8df404a4c",
        "type": "group",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "071ddc9ebe2d68cc",
            "e156ceb868d16737",
            "0832f38e2c81a3e8",
            "326225590deca6e4",
            "3b3a959de18729bf",
            "d64a41e80d33ca1b",
            "c267f855500ae9e4",
            "a213abf81eba9701",
            "6a33ff825bb0b05a",
            "9bf5469ffd90260f"
        ],
        "x": 234,
        "y": 2059,
        "w": 952,
        "h": 182
    },
    {
        "id": "534a16e428e73b96",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "facd7851b1be0dbd",
            "26de7069f60fd5a2",
            "ba92acc19c2743f1",
            "1fdb38b0adff475a",
            "895ccee5da025207",
            "ecdd99cf8af94cdd",
            "5bf9768b223d3a39",
            "15d722768efeb9f0",
            "650dc552accf5bb5",
            "fbf88fa161dd20ef"
        ],
        "x": 194,
        "y": 979,
        "w": 952,
        "h": 182
    },
    {
        "id": "be1cce70c09129e1",
        "type": "group",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0b0847735cd91c9d",
            "9f90d9751ec0b544",
            "b2873c725c46b612",
            "cedce89fcc45f0ea",
            "d74fa5531a70e911",
            "4390c314e0315962",
            "471f6e8fa0892054",
            "5b4b675f95dc65b5",
            "9866030d710f643c",
            "819be01653156ea1"
        ],
        "x": 194,
        "y": 1559,
        "w": 952,
        "h": 182
    },
    {
        "id": "a61c4a8cb28adb1a",
        "type": "group",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fc5c26c6135e6a3c",
            "38be2a96ab7485e7",
            "753ac0d7669dc805",
            "bdc408db32086b68",
            "cea3f23192193a76",
            "4b9c3de47845cc23",
            "e7015ebb24bb5c38",
            "e54bbd42f21bb76a",
            "da3936bbe8d74abc",
            "d58ae2e0192abee4"
        ],
        "x": 254,
        "y": 359,
        "w": 952,
        "h": 182
    },
    {
        "id": "843f88b79bc5d34b",
        "type": "group",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cfd9aca115233f94",
            "d927bb5d99950b74",
            "8f86fea787723553",
            "348d8b55f0f1eada",
            "c6b0b1a5bb4682ba",
            "0f2b6d9133614746",
            "d4bc593f890efd2c",
            "f231122ec2267cb4",
            "01ef54423fb21b2a",
            "5fd290f1578c6c53"
        ],
        "x": 254,
        "y": 899,
        "w": 952,
        "h": 182
    },
    {
        "id": "42b12ed780153d86",
        "type": "group",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ccfe90276283c6c9",
            "f6dc87dd41887a87",
            "fa63fdadc45e155c",
            "4067a7faaeb8bac5",
            "f84edaee959a8ab5",
            "4328bb3746c76f93",
            "8872747ece26a538",
            "109d01cc4d38e050",
            "6489ea5fee268cb9",
            "ba6e3823dc364936"
        ],
        "x": 254,
        "y": 1479,
        "w": 952,
        "h": 182
    },
    {
        "id": "93f34ce184ce78f0",
        "type": "group",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0c535f22d8c7163b",
            "e7ece92978c7f9a7",
            "2c5240f4e4a28ac1",
            "cd903a49c3e74601",
            "e5c69ea6939dc2f9",
            "6ecadea613711a99",
            "4aa2290c98545ef7",
            "50a2be659170f5a2",
            "2dca30b05895db59",
            "2c255fa6fd30080f"
        ],
        "x": 254,
        "y": 2079,
        "w": 952,
        "h": 182
    },
    {
        "id": "1e22255fae1965c0",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3ff737dbe1cec06c",
            "c9863802efedee23",
            "ed4b208f3376683c",
            "0a6db426b08b53be",
            "654b79d36675be1d",
            "a94ae53b5a0db983",
            "b47203b2bedc3022",
            "6f70f35e2f11b856",
            "cd463ed568082ccb",
            "1b4473b2d53d7b9c"
        ],
        "x": 294,
        "y": 339,
        "w": 952,
        "h": 182
    },
    {
        "id": "faf0d036a6315781",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7e608b15dfd951e0",
            "edc961345cb19d0b",
            "1d831275f2f36a9b",
            "f0a23e9db9ee9070",
            "5ba376438ba190ed",
            "6b90ce852ea6795d",
            "c28249b109631c1a",
            "0c0392c393977b96",
            "2bf05a4549b9f227",
            "585d5e8378581021"
        ],
        "x": 294,
        "y": 879,
        "w": 952,
        "h": 182
    },
    {
        "id": "3388ab54980ecd67",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c01d49c418f64c8e",
            "7760a97f6cddef59",
            "c421e2c064500ed5",
            "2a239fefc43edd11",
            "55404bbbb0bf1b70",
            "e3118f71aea9d5bd",
            "36e9bc36b7b97589",
            "1b2d74fc3c85822a",
            "f823335976653f70",
            "56fe9ef4f4400602"
        ],
        "x": 294,
        "y": 1459,
        "w": 952,
        "h": 182
    },
    {
        "id": "b0e5fdd1bf3c5317",
        "type": "group",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0afdbc373f7337aa",
            "24b08287f8ac1706",
            "6bd41702d962317b",
            "8d22c5f2952393c3",
            "c234dc3b8d49db03",
            "16db009f4a9b19bf",
            "61b4f83581c8c3d3",
            "0df6bc421121fb90",
            "78ba27c7dca61d7f",
            "e6277104166341f1"
        ],
        "x": 294,
        "y": 2059,
        "w": 952,
        "h": 182
    },
    {
        "id": "33a5802de6a8bbb5",
        "type": "group",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "73e91b83121db7ba",
            "6e5c04bf35630d7a",
            "2252b74cf744f1fe",
            "b9fd1d6666223c4f",
            "a201ecd91e28e36a",
            "088f42a155323c20",
            "4d4efc1bf9422b78",
            "99992ee66f1fc631",
            "e101a3120c80d28b",
            "cecf316f59e02e88"
        ],
        "x": 254,
        "y": 299,
        "w": 952,
        "h": 182
    },
    {
        "id": "12ed85b933f27d94",
        "type": "group",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5c01e2113499f3e2",
            "6bf32a4b6c6ececd",
            "311c5d11dfb4824f",
            "df520c594f4d3cf3",
            "9da49f3a76caae29",
            "afc910a94c831c52",
            "590fb03b7ec7edbf",
            "3c64c38eb85e6722",
            "86731d7d0ed1c164",
            "d2cbdb508a3298c8"
        ],
        "x": 254,
        "y": 839,
        "w": 952,
        "h": 182
    },
    {
        "id": "6430553224d0448f",
        "type": "group",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cefb5a9c0cb42046",
            "f9f7a23552a02263",
            "7f8d6964eb3138ab",
            "7d253b3bef241609",
            "ae1c31f8d7d38735",
            "c96d5ad1d0e73107",
            "5b0637ba9d89c451",
            "07fd1b839d5ac2dc",
            "be362b8de394d4b7",
            "fae0dcdc9a0439f0"
        ],
        "x": 254,
        "y": 1419,
        "w": 952,
        "h": 182
    },
    {
        "id": "256fc2ec2e4d450e",
        "type": "group",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "918a8ff64b574dbe",
            "06d50da2e66ac6ac",
            "7d121e3451efbf05",
            "6c7f5348ba59db91",
            "ce0b202a28a5b0f4",
            "a8e3e6de51efb3cf",
            "76fff7b5134543f1",
            "d967a3661e710466",
            "5805c9388fe6ba76",
            "f10b213289d063df"
        ],
        "x": 254,
        "y": 2019,
        "w": 952,
        "h": 182
    },
    {
        "id": "a6079ec9039a81d9",
        "type": "group",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "82569ffce052c9a2",
            "6626fe85251dfeb1",
            "27eac3724f040808",
            "0266e6fb85cab35f",
            "fc85cd41bf3eb292",
            "033f418712b4cc19",
            "9f93e5e97cc11524",
            "7f20fe5003411d86",
            "b8f2fc57bf0f79b3",
            "810d32d3ed46157e"
        ],
        "x": 354,
        "y": 339,
        "w": 952,
        "h": 182
    },
    {
        "id": "36ad634535c1b67e",
        "type": "group",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "FTP FLOW ",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0e7be28a7fdeefd7",
            "dc7d8d33fe2584a5",
            "22063c2209cab917",
            "51af6ced0629f69e",
            "d871cb4f4002a07d",
            "a7a0b4c57eb9dc63",
            "132a7336e62134ec",
            "e21de3c987336cd8",
            "4f5d1db6ee479909",
            "39b93cb2c32e618e"
        ],
        "x": 354,
        "y": 879,
        "w": 952,
        "h": 182
    },
    {
        "id": "1d0862807f0a73f3",
        "type": "group",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "FTP FLOW Amplus_Alex_Bikaner_SMU_Part1",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4fdf52553eb1bf9e",
            "e444fafbcd6d36ab",
            "b26e615f3cd61fd5",
            "7ad05620bd733d76",
            "8590072391ea6613",
            "7a508f7e839716b0",
            "2c56c086c2f6ed7c",
            "37b468c0e5f896ce",
            "455b5901a1735964",
            "2b4d28478c174c0f"
        ],
        "x": 354,
        "y": 419,
        "w": 952,
        "h": 182
    },
    {
        "id": "d4100b3ade9e64bf",
        "type": "influxdb",
        "hostname": "192.168.63.84",
        "port": "8086",
        "protocol": "http",
        "database": "iSolar",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c563e3c6072c32be",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9e23069abe8f4a6d",
        "type": "ftp",
        "host": "104.211.208.200",
        "port": "",
        "secureOptions": "",
        "user": "Medak",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "3fd032a6129a2c4a",
        "type": "ftp",
        "host": "ftp-test.iplon.co.in",
        "port": "",
        "secureOptions": "",
        "user": "bala",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "97aa7216add6f559",
        "type": "influxdb",
        "hostname": "192.168.63.84",
        "port": "8086",
        "protocol": "http",
        "database": "iSolar",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "http://amplasia.influx.svc.cluster.local",
        "rejectUnauthorized": true
    },
    {
        "id": "39b7f82a69c06ae4",
        "type": "ftp",
        "host": "13.232.166.176",
        "port": "",
        "secureOptions": "",
        "user": "iplon",
        "connTimeout": "10000",
        "pasvTimeout": "10000",
        "keepalive": "10000"
    },
    {
        "id": "fa41648353699119",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "9d29f10a338c85c1",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "EDAY_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\ndest_database=\"amplusmicrogrid\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus Retrofit 5MW\"\niGate_id = \"4141\"\ndevice = ['CR_EM03']\nfield = \"EAE_DAY\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"4141\",\n           \"d\" : Dev,\n           \"f\": \"EAE_DAY\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "953fe5d860fa9676"
            ]
        ]
    },
    {
        "id": "953fe5d860fa9676",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "EDAY_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "a3fa6b8e4347c14f"
            ]
        ]
    },
    {
        "id": "a3fa6b8e4347c14f",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 EDAY_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 100,
        "wires": [
            [
                "10d9b381325364bd"
            ],
            [
                "fa41648353699119"
            ],
            []
        ]
    },
    {
        "id": "cc5e9590cfb044a0",
        "type": "inject",
        "z": "5594cda0528bfa62",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "9d29f10a338c85c1"
            ]
        ]
    },
    {
        "id": "10d9b381325364bd",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 100,
        "wires": []
    },
    {
        "id": "dc32c0e2eeb584cf",
        "type": "http in",
        "z": "5594cda0528bfa62",
        "name": "",
        "url": "/amplasia/alex5",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "81e7ecb6eefcf992"
            ]
        ]
    },
    {
        "id": "81e7ecb6eefcf992",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": " Timestamp",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.from}} {{payload.to}}",
        "output": "str",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "6e74f741681cb6e7",
                "ee12a2130a3555b5",
                "fcd55b1b57549771",
                "882f0ff63a612190",
                "f2a5b38e55e9d61e",
                "6c6e02b7fe4f1e85",
                "7f372ae7d386492c",
                "1879e22c62d4f68e"
            ]
        ]
    },
    {
        "id": "6e74f741681cb6e7",
        "type": "http response",
        "z": "5594cda0528bfa62",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "ee12a2130a3555b5",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "EDAY_Month_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"EAE_DAY\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"EAE_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 200,
        "y": 720,
        "wires": [
            [
                "71d4976642942eaf"
            ]
        ]
    },
    {
        "id": "71d4976642942eaf",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "EDAY_Month_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 460,
        "y": 720,
        "wires": [
            [
                "b8806be02d61de12"
            ]
        ]
    },
    {
        "id": "b8806be02d61de12",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 EDAY_Month_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 750,
        "y": 720,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "8bb0947fd4de4905",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "1879e22c62d4f68e",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "fcd55b1b57549771",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "EDAY_Year_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"EAE_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"EAE_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "badfc43333c15b62"
            ]
        ]
    },
    {
        "id": "badfc43333c15b62",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "EDAY_Year_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 490,
        "y": 980,
        "wires": [
            [
                "233cc5dafc0c1185"
            ]
        ]
    },
    {
        "id": "233cc5dafc0c1185",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 EDAY_Year_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 980,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "20f090c93c9d23ab",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "ceb3082d5456eab8",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RefillEDay_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_report=\"amplusmicrogrid\"\nsource_database_report_table=\"report\"\ndest_database_report=\"amplusmicrogrid\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"EAE_DAY\"\n_field = \"EAE_DAY\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"4141\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 370,
        "y": 360,
        "wires": [
            [
                "a4b2e41d031127b0"
            ]
        ]
    },
    {
        "id": "a4b2e41d031127b0",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "RefillEDay_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 360,
        "wires": [
            [
                "17601a1cef6ebd99"
            ]
        ]
    },
    {
        "id": "17601a1cef6ebd99",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 RefillEDay_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 360,
        "wires": [
            [
                "6a474f7b1df98e44"
            ],
            [
                "26ffccad33172568"
            ],
            []
        ]
    },
    {
        "id": "6a474f7b1df98e44",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 340,
        "wires": []
    },
    {
        "id": "26ffccad33172568",
        "type": "debug",
        "z": "5594cda0528bfa62",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 420,
        "wires": []
    },
    {
        "id": "b8dcd1c40d8c96f4",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "PR_DAY_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\ndest_database=\"amplusmicrogrid\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus Retrofit 5MW\"\niGate_id = \"4141\"\ndevice = ['CR_EM03']\nfield = \"PR_DAY\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"4141\",\n           \"d\" : Dev,\n           \"f\": \"PR_DAY\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "a5f7eba06f6ee56f"
            ]
        ]
    },
    {
        "id": "a5f7eba06f6ee56f",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "prday_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 160,
        "wires": [
            [
                "1fd2ec45da92b08a"
            ]
        ]
    },
    {
        "id": "1fd2ec45da92b08a",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 prday_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "10d9b381325364bd"
            ],
            [
                "fa41648353699119"
            ],
            []
        ]
    },
    {
        "id": "6dd66c5580a65d91",
        "type": "inject",
        "z": "5594cda0528bfa62",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "b8dcd1c40d8c96f4"
            ]
        ]
    },
    {
        "id": "b5a761712d5d5214",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RefillPR_DAY_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_report=\"amplusmicrogrid\"\nsource_database_report_table=\"report\"\ndest_database_report=\"amplusmicrogrid\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"PR_DAY\"\n_field = \"PR_DAY\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"4141\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 380,
        "y": 420,
        "wires": [
            [
                "435b949dd9defa36"
            ]
        ]
    },
    {
        "id": "435b949dd9defa36",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "Refillprday_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "409f6cc1b600e58f"
            ]
        ]
    },
    {
        "id": "409f6cc1b600e58f",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 Refillprday_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 420,
        "wires": [
            [
                "6a474f7b1df98e44"
            ],
            [
                "26ffccad33172568"
            ],
            []
        ]
    },
    {
        "id": "882f0ff63a612190",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "PR_DAY_Month_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"PR_DAY\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"PR_DAY_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 190,
        "y": 780,
        "wires": [
            [
                "0cbe24d418443b95"
            ]
        ]
    },
    {
        "id": "0cbe24d418443b95",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "prday_Month_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "fdbd134927534b20"
            ]
        ]
    },
    {
        "id": "fdbd134927534b20",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 prday_Month_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 780,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "f2a5b38e55e9d61e",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "PR_DAY_Year_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_EM03']\nfield = \"PR_DAY_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"PR_DAY_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "0e7da1c350f0ee5c"
            ]
        ]
    },
    {
        "id": "0e7da1c350f0ee5c",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "prday_Year_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "3c7b12759810a3ce"
            ]
        ]
    },
    {
        "id": "3c7b12759810a3ce",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 prday_Year_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "35294dab02479824",
        "type": "comment",
        "z": "5594cda0528bfa62",
        "name": "Monthly calculation",
        "info": "",
        "x": 90,
        "y": 640,
        "wires": []
    },
    {
        "id": "4c98798fa57d8d24",
        "type": "comment",
        "z": "5594cda0528bfa62",
        "name": "Yearly calculation",
        "info": "",
        "x": 80,
        "y": 920,
        "wires": []
    },
    {
        "id": "6d0346e99a6316c2",
        "type": "comment",
        "z": "5594cda0528bfa62",
        "name": "Day values",
        "info": "",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "b1d1d25d4f9cf711",
        "type": "comment",
        "z": "5594cda0528bfa62",
        "name": "Refill values",
        "info": "",
        "x": 110,
        "y": 300,
        "wires": []
    },
    {
        "id": "333539afe5146ab4",
        "type": "cronplus",
        "z": "5594cda0528bfa62",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 360,
        "wires": [
            [
                "ceb3082d5456eab8"
            ]
        ]
    },
    {
        "id": "e4cbfea219432644",
        "type": "cronplus",
        "z": "5594cda0528bfa62",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 420,
        "wires": [
            [
                "b5a761712d5d5214"
            ]
        ]
    },
    {
        "id": "4671e5abc8030df9",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RADIATION_CUM_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\ndest_database=\"amplusmicrogrid\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus Retrofit 5MW\"\niGate_id = \"4141\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_CUM\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"4141\",\n           \"d\" : Dev,\n           \"f\": \"SOLAR_RADIATION_CUM\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "b9ad5fddb2cb6b58"
            ]
        ]
    },
    {
        "id": "b9ad5fddb2cb6b58",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "radiationcum_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 220,
        "wires": [
            [
                "24e8a57d167ad7ee"
            ]
        ]
    },
    {
        "id": "24e8a57d167ad7ee",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 radiationcum_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "10d9b381325364bd"
            ],
            [
                "fa41648353699119"
            ],
            []
        ]
    },
    {
        "id": "b873615a472fdae9",
        "type": "inject",
        "z": "5594cda0528bfa62",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "4671e5abc8030df9"
            ]
        ]
    },
    {
        "id": "0a95627ee387117d",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RefillRADIATION_CUM_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_report=\"amplusmicrogrid\"\nsource_database_report_table=\"report\"\ndest_database_report=\"amplusmicrogrid\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_CUM\"\n_field = \"SOLAR_RADIATION_CUM\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"4141\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 410,
        "y": 480,
        "wires": [
            [
                "f4fcf1edbd617316"
            ]
        ]
    },
    {
        "id": "f4fcf1edbd617316",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "Refillradiationcum_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 640,
        "y": 480,
        "wires": [
            [
                "3ae6b367ace2875d"
            ]
        ]
    },
    {
        "id": "3ae6b367ace2875d",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 Refillradiationcum_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 480,
        "wires": [
            [
                "6a474f7b1df98e44"
            ],
            [
                "26ffccad33172568"
            ],
            []
        ]
    },
    {
        "id": "cc9426f0cbc0d115",
        "type": "cronplus",
        "z": "5594cda0528bfa62",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 480,
        "wires": [
            [
                "0a95627ee387117d"
            ]
        ]
    },
    {
        "id": "6c6e02b7fe4f1e85",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RADIATION_CUM_Month_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_CUM\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"SOLAR_RADIATION_CUM_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 200,
        "y": 840,
        "wires": [
            [
                "60590eb59af94ad1"
            ]
        ]
    },
    {
        "id": "60590eb59af94ad1",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "radiationcum_Month_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 460,
        "y": 840,
        "wires": [
            [
                "0abfc758b1116c36"
            ]
        ]
    },
    {
        "id": "0abfc758b1116c36",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 radiationcum_Month_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 770,
        "y": 840,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "7f372ae7d386492c",
        "type": "template",
        "z": "5594cda0528bfa62",
        "name": "RADIATION_CUM_Year_ALEX_5MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Retrofit 5MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_CUM_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4141\",\n           \"f\": \"SOLAR_RADIATION_CUM_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 210,
        "y": 1100,
        "wires": [
            [
                "8473cbe7fde9b973"
            ]
        ]
    },
    {
        "id": "8473cbe7fde9b973",
        "type": "file",
        "z": "5594cda0528bfa62",
        "name": "write file",
        "filename": "radiationcum_Year_alex5.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 490,
        "y": 1100,
        "wires": [
            [
                "c536e1e37a66376a"
            ]
        ]
    },
    {
        "id": "c536e1e37a66376a",
        "type": "exec",
        "z": "5594cda0528bfa62",
        "command": "python3 radiationcum_Year_alex5.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 750,
        "y": 1100,
        "wires": [
            [
                "8bb0947fd4de4905"
            ],
            [
                "20f090c93c9d23ab"
            ],
            []
        ]
    },
    {
        "id": "aa4179d2aae23e15",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "465ff717dd3d55a6",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "eday_arjun_2mw",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\ndest_database=\"amplusmicrogrid\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus Arjun 2MW\"\niGate_id = \"4119\"\ndevice = ['EM02']\nfield = \"EAE_DAY\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"4119\",\n           \"d\" : Dev,\n           \"f\": \"EAE_DAY\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "a8c336feb8f70636"
            ]
        ]
    },
    {
        "id": "a8c336feb8f70636",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "eday_arjun_2mw.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "c767f9f8adc976ee"
            ]
        ]
    },
    {
        "id": "c767f9f8adc976ee",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 eday_arjun_2mw.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 900,
        "y": 100,
        "wires": [
            [
                "a88b069ab8dab6c7"
            ],
            [
                "aa4179d2aae23e15"
            ],
            []
        ]
    },
    {
        "id": "6ffdea6aabdad33a",
        "type": "inject",
        "z": "1070e23b7de197ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "465ff717dd3d55a6"
            ]
        ]
    },
    {
        "id": "a88b069ab8dab6c7",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 100,
        "wires": []
    },
    {
        "id": "1b4868391c925242",
        "type": "http in",
        "z": "1070e23b7de197ec",
        "name": "",
        "url": "/amplasia/arjun2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 580,
        "wires": [
            [
                "bf78f46c6148e310"
            ]
        ]
    },
    {
        "id": "bf78f46c6148e310",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": " Timestamp",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.from}} {{payload.to}}",
        "output": "str",
        "x": 430,
        "y": 580,
        "wires": [
            [
                "e8b9e34c972b5ede",
                "2f5b6db3343c8b71",
                "b9bf7e6d4a5a6747",
                "3b820ee275c538c3",
                "12acb9b56d319476",
                "daaa343a58f3c5c0"
            ]
        ]
    },
    {
        "id": "e8b9e34c972b5ede",
        "type": "http response",
        "z": "1070e23b7de197ec",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 660,
        "wires": []
    },
    {
        "id": "2f5b6db3343c8b71",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "eday_month_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Arjun 2MW\"\ndevice = ['EM02']\nfield = \"EAE_DAY\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4119\",\n           \"f\": \"EAE_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 270,
        "y": 720,
        "wires": [
            [
                "949d4faf1520b9b6"
            ]
        ]
    },
    {
        "id": "949d4faf1520b9b6",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "eday_month_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "82730fa1897ac643"
            ]
        ]
    },
    {
        "id": "82730fa1897ac643",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 eday_month_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 720,
        "wires": [
            [
                "a73bf9dafe99e033"
            ],
            [
                "26fed6d8d2ac0d7c"
            ],
            []
        ]
    },
    {
        "id": "a73bf9dafe99e033",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 700,
        "wires": []
    },
    {
        "id": "b9bf7e6d4a5a6747",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 620,
        "wires": []
    },
    {
        "id": "3b820ee275c538c3",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "eday_year_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Arjun 2MW\"\ndevice = ['EM02']\nfield = \"EAE_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4119\",\n           \"f\": \"EAE_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 250,
        "y": 980,
        "wires": [
            [
                "81627d6530d34515"
            ]
        ]
    },
    {
        "id": "81627d6530d34515",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "eday_year_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "a6775d78ba2e6530"
            ]
        ]
    },
    {
        "id": "a6775d78ba2e6530",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 eday_year_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 820,
        "y": 980,
        "wires": [
            [
                "a73bf9dafe99e033"
            ],
            [
                "26fed6d8d2ac0d7c"
            ],
            []
        ]
    },
    {
        "id": "26fed6d8d2ac0d7c",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 840,
        "wires": []
    },
    {
        "id": "d777bff6ade16b8f",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "RefillEDay_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_report=\"amplusmicrogrid\"\nsource_database_report_table=\"report\"\ndest_database_report=\"amplusmicrogrid\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus Arjun 2MW\"\ndevice = ['EM02']\nfield = \"EAE_DAY\"\n_field = \"EAE_DAY\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"4119\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 450,
        "y": 360,
        "wires": [
            [
                "4caf6026ae6dbf99"
            ]
        ]
    },
    {
        "id": "4caf6026ae6dbf99",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "RefillEDay_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 680,
        "y": 360,
        "wires": [
            [
                "80e963803a1c7c1d"
            ]
        ]
    },
    {
        "id": "80e963803a1c7c1d",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 RefillEDay_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 960,
        "y": 360,
        "wires": [
            [
                "6c800e3892c9bf71"
            ],
            [
                "06099ec412836ae1"
            ],
            []
        ]
    },
    {
        "id": "6c800e3892c9bf71",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 340,
        "wires": []
    },
    {
        "id": "06099ec412836ae1",
        "type": "debug",
        "z": "1070e23b7de197ec",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "0b1bb5aacf18466c",
        "type": "comment",
        "z": "1070e23b7de197ec",
        "name": "Monthly calculation",
        "info": "",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "7eac464229905638",
        "type": "comment",
        "z": "1070e23b7de197ec",
        "name": "Yearly calculation",
        "info": "",
        "x": 160,
        "y": 920,
        "wires": []
    },
    {
        "id": "1edf615c702dc01f",
        "type": "comment",
        "z": "1070e23b7de197ec",
        "name": "Day values",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "542d4694fef23dfd",
        "type": "comment",
        "z": "1070e23b7de197ec",
        "name": "Refill values",
        "info": "",
        "x": 190,
        "y": 300,
        "wires": []
    },
    {
        "id": "2e1a2accadffdeb2",
        "type": "cronplus",
        "z": "1070e23b7de197ec",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 360,
        "wires": [
            [
                "d777bff6ade16b8f"
            ]
        ]
    },
    {
        "id": "a540afc5e56bbf92",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "radiation_cum_arjun_2mw",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\ndest_database=\"amplusmicrogrid\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus Arjun 2MW\"\niGate_id = \"4119\"\ndevice = ['WS03']\nfield = \"SOLAR_RADIATION_CUM\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"4119\",\n           \"d\" : Dev,\n           \"f\": \"SOLAR_RADIATION_CUM\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 460,
        "y": 220,
        "wires": [
            [
                "32221f7c6456cf28"
            ]
        ]
    },
    {
        "id": "32221f7c6456cf28",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "radiation_cum_arjun_2mw.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "759a617b6c21c5a1"
            ]
        ]
    },
    {
        "id": "759a617b6c21c5a1",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 radiation_cum_arjun_2mw.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 930,
        "y": 220,
        "wires": [
            [
                "a88b069ab8dab6c7"
            ],
            [
                "aa4179d2aae23e15"
            ],
            []
        ]
    },
    {
        "id": "3f497913b151ab48",
        "type": "inject",
        "z": "1070e23b7de197ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "a540afc5e56bbf92"
            ]
        ]
    },
    {
        "id": "d153a47d26f29f00",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "RefillRADIATION_CUM_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_report=\"amplusmicrogrid\"\nsource_database_report_table=\"report\"\ndest_database_report=\"amplusmicrogrid\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus Arjun 2MW\"\ndevice = ['WS03']\nfield = \"SOLAR_RADIATION_CUM\"\n_field = \"SOLAR_RADIATION_CUM\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"4119\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "7f9b48e8ae2d6094"
            ]
        ]
    },
    {
        "id": "7f9b48e8ae2d6094",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "RefillRADIATION_CUM_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 480,
        "wires": [
            [
                "aaff322abe60e26c"
            ]
        ]
    },
    {
        "id": "aaff322abe60e26c",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 RefillRADIATION_CUM_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "6c800e3892c9bf71"
            ],
            [
                "06099ec412836ae1"
            ],
            []
        ]
    },
    {
        "id": "4d2b0fae96068bec",
        "type": "cronplus",
        "z": "1070e23b7de197ec",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 480,
        "wires": [
            [
                "d153a47d26f29f00"
            ]
        ]
    },
    {
        "id": "12acb9b56d319476",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "radiation_cum_month_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Arjun 2MW\"\ndevice = ['WS03']\nfield = \"SOLAR_RADIATION_CUM\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4119\",\n           \"f\": \"SOLAR_RADIATION_CUM_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 260,
        "y": 840,
        "wires": [
            [
                "85312f9ae45978bc"
            ]
        ]
    },
    {
        "id": "85312f9ae45978bc",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "radiation_cum_month_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 840,
        "wires": [
            [
                "ea022b83e16de093"
            ]
        ]
    },
    {
        "id": "ea022b83e16de093",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 radiation_cum_month_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 880,
        "y": 840,
        "wires": [
            [
                "a73bf9dafe99e033"
            ],
            [
                "26fed6d8d2ac0d7c"
            ],
            []
        ]
    },
    {
        "id": "daaa343a58f3c5c0",
        "type": "template",
        "z": "1070e23b7de197ec",
        "name": "radiation_cum_year_arjun_2MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"amplusmicrogrid\"\nsource_database_table=\"report\"\ndest_database=\"amplusmicrogrid\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus Arjun 2MW\"\ndevice = ['WS03']\nfield = \"SOLAR_RADIATION_CUM_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"4119\",\n           \"f\": \"SOLAR_RADIATION_CUM_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 270,
        "y": 1100,
        "wires": [
            [
                "6790414f58c73544"
            ]
        ]
    },
    {
        "id": "6790414f58c73544",
        "type": "file",
        "z": "1070e23b7de197ec",
        "name": "write file",
        "filename": "radiation_cum_year_arjun_2MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "e0cd89d33ccb6658"
            ]
        ]
    },
    {
        "id": "e0cd89d33ccb6658",
        "type": "exec",
        "z": "1070e23b7de197ec",
        "command": "python3 radiation_cum_year_arjun_2MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 1100,
        "wires": [
            [
                "a73bf9dafe99e033"
            ],
            [
                "26fed6d8d2ac0d7c"
            ],
            []
        ]
    },
    {
        "id": "c0f3d757f3a35894",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "9522cbb4ef25eee1",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "eday_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\ndest_database=\"ampluslargeutility\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus_34MW\"\niGate_id = \"6591\"\ndevice = ['CR_EM01']\nfield = \"EAE_DAY\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"6591\",\n           \"d\" : Dev,\n           \"f\": \"EAE_DAY\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 460,
        "y": 100,
        "wires": [
            [
                "6e799bf5751cb565"
            ]
        ]
    },
    {
        "id": "6e799bf5751cb565",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "eday_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "7798fcc52aa0b4ee"
            ]
        ]
    },
    {
        "id": "7798fcc52aa0b4ee",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 eday_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 920,
        "y": 100,
        "wires": [
            [
                "4a50e13c20119575"
            ],
            [
                "c0f3d757f3a35894"
            ],
            []
        ]
    },
    {
        "id": "9c7c76501bfb6975",
        "type": "inject",
        "z": "1e53c97b35120504",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "9522cbb4ef25eee1"
            ]
        ]
    },
    {
        "id": "4a50e13c20119575",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 100,
        "wires": []
    },
    {
        "id": "12d2b99a21ae76e2",
        "type": "http in",
        "z": "1e53c97b35120504",
        "name": "",
        "url": "/amplasia/nayaka34",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 580,
        "wires": [
            [
                "c8e78cc765d8845f"
            ]
        ]
    },
    {
        "id": "c8e78cc765d8845f",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": " Timestamp",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.from}} {{payload.to}}",
        "output": "str",
        "x": 490,
        "y": 580,
        "wires": [
            [
                "b890d9523d419c47",
                "c461eb4ee0f9f3eb",
                "168f4e9642db8e70",
                "be3a8f4e4563a758",
                "90d446b45ae09191",
                "6087feb47f6c176f"
            ]
        ]
    },
    {
        "id": "b890d9523d419c47",
        "type": "http response",
        "z": "1e53c97b35120504",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 660,
        "wires": []
    },
    {
        "id": "c461eb4ee0f9f3eb",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "eday_month_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_table=\"report\"\ndest_database=\"ampluslargeutility\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus_34MW\"\ndevice = ['CR_EM01']\nfield = \"EAE_DAY\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"6591\",\n           \"f\": \"EAE_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 280,
        "y": 720,
        "wires": [
            [
                "a6864de84fd87a34"
            ]
        ]
    },
    {
        "id": "a6864de84fd87a34",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "eday_month_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "4ae666be0302d82d"
            ]
        ]
    },
    {
        "id": "4ae666be0302d82d",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 eday_month_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 720,
        "wires": [
            [
                "ed03658d6192036a"
            ],
            [
                "a107f6e97c0afba0"
            ],
            []
        ]
    },
    {
        "id": "ed03658d6192036a",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 700,
        "wires": []
    },
    {
        "id": "168f4e9642db8e70",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 620,
        "wires": []
    },
    {
        "id": "be3a8f4e4563a758",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "eday_year_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_table=\"report\"\ndest_database=\"ampluslargeutility\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus_34MW\"\ndevice = ['CR_EM01']\nfield = \"EAE_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    #print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"6591\",\n           \"f\": \"EAE_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 260,
        "y": 980,
        "wires": [
            [
                "cbc27c251cb15deb"
            ]
        ]
    },
    {
        "id": "cbc27c251cb15deb",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "eday_year_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "ad163e0700c5ed16"
            ]
        ]
    },
    {
        "id": "ad163e0700c5ed16",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 eday_year_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "ed03658d6192036a"
            ],
            [
                "a107f6e97c0afba0"
            ],
            []
        ]
    },
    {
        "id": "a107f6e97c0afba0",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 840,
        "wires": []
    },
    {
        "id": "9372d73a4096b3e8",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "RefillEDay_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_report=\"ampluslargeutility\"\nsource_database_report_table=\"report\"\ndest_database_report=\"ampluslargeutility\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus_34MW\"\ndevice = ['CR_EM01']\nfield = \"EAE_DAY\"\n_field = \"EAE_DAY\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"6591\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 460,
        "y": 360,
        "wires": [
            [
                "5f1e5dfeff389898"
            ]
        ]
    },
    {
        "id": "5f1e5dfeff389898",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "RefillEDay_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 680,
        "y": 360,
        "wires": [
            [
                "1a35a7af311eec7c"
            ]
        ]
    },
    {
        "id": "1a35a7af311eec7c",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 RefillEDay_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 970,
        "y": 360,
        "wires": [
            [
                "d2d40e2c09aaee78"
            ],
            [
                "76d8ccd3f75a5867"
            ],
            []
        ]
    },
    {
        "id": "d2d40e2c09aaee78",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 340,
        "wires": []
    },
    {
        "id": "76d8ccd3f75a5867",
        "type": "debug",
        "z": "1e53c97b35120504",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "5fd80637e7419d2e",
        "type": "comment",
        "z": "1e53c97b35120504",
        "name": "Monthly calculation",
        "info": "",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "81baf629333624bc",
        "type": "comment",
        "z": "1e53c97b35120504",
        "name": "Yearly calculation",
        "info": "",
        "x": 160,
        "y": 920,
        "wires": []
    },
    {
        "id": "a1ef5cb32211be03",
        "type": "comment",
        "z": "1e53c97b35120504",
        "name": "Day values",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "11f3e50f989df852",
        "type": "comment",
        "z": "1e53c97b35120504",
        "name": "Refill values",
        "info": "",
        "x": 190,
        "y": 300,
        "wires": []
    },
    {
        "id": "0fddf7fef119dc50",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "radiation_cum_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\ntoday = date.today()\np = (str(today))\nx = p.split('-')\nuniqueday = int(x[2])\nuniquemonth = int(x[1])\nuniqueyear = int(x[0])\nts = datetime.datetime(uniqueyear,uniquemonth,uniqueday, 00, 00,00).timestamp()\nc = int(ts)\nFrom = (c-19800)\nTo = calendar.timegm(time.gmtime())\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\ndest_database=\"ampluslargeutility\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\nplant = \"Amplus_34MW\"\niGate_id = \"6509\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_GHI_CUM\"\n\ndef frame_influx_query(source_database, plant, device, field):\n    if source_database and device and field:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: -30m)  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'\n       \n    return query\n\ndef sending(df):\n   Year = int(df['Year'])\n   Month = int(df['Month'])\n   Day = int(df['Day'])\n   Device = str(df['Device'])\n   EAE_DAY = float(df['EAE_DAY'])\n   #print(EAE_DAY)\n   x = Device.split(' ')\n   y = x[4]\n   z = y.split('\\n')\n   Dev = z[0]\n   ts = datetime.datetime(Year,Month,Day, 00, 00,00).timestamp()\n   #ts = (calendar.timegm(Date_IST.timetuple()))\n   ns = int(ts)\n   string = str(ns) + \"000\"\n   liveepoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n   data = [{\n       \"measurement\":\"report\",\n       \"tags\": {\n           \"p\" : plant,\n           \"iid\": \"6509\",\n           \"d\" : Dev,\n           \"f\": \"SOLAR_RADIATION_GHI_CUM\"\n               },\n       \"time\" : liveepoch,\n       \"fields\": {\n           \"value\" : EAE_DAY\n           }\n       }]\n   print(data)\n   stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   if stat != 0:\n       stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n   \n   write_api.write(dest_database, organisation, data)\n\n\nfor i in range(len(device)):\n    points_day = []\n    my_q_str = frame_influx_query(source_database, plant, device[i], field)\n    print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n    points_day = [{\n        \"time\": points_time,\n        \"last\": points_value\n        }]\n    df = pd.DataFrame(points_day)\n    #print(df)\n    if len(df) != 0:\n        df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n        df.Date_IST = pd.to_datetime(df.Date_IST)\n        #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n        df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n        df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n        df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n        df = df.dropna()\n   \n        Month = df['month'].tolist()\n        Year = df['year'].tolist()\n        Day =  df['day'].tolist()\n        EAE_DAY =  df['last'].tolist()\n        Date_IST =  df['Date_IST'].tolist()\n\n        df = pd.DataFrame({\n        'Month': Month,\n        'Year': Year,\n        'Day': Day,\n        'EAE_DAY': EAE_DAY,\n        'Date_IST': Date_IST,\n        'Device':  device[i]})\n        #print(df)\n        sending(df)",
        "output": "str",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "e8ffd8db359bf58e"
            ]
        ]
    },
    {
        "id": "e8ffd8db359bf58e",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "radiation_cum_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "9805ff22686f0231"
            ]
        ]
    },
    {
        "id": "9805ff22686f0231",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 radiation_cum_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 940,
        "y": 220,
        "wires": [
            [
                "4a50e13c20119575"
            ],
            [
                "c0f3d757f3a35894"
            ],
            []
        ]
    },
    {
        "id": "eab1ea5705828c92",
        "type": "inject",
        "z": "1e53c97b35120504",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "0fddf7fef119dc50"
            ]
        ]
    },
    {
        "id": "702241dfca6716e8",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "RefillRADIATION_CUM_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\n\n#Influxdb Information\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_report=\"ampluslargeutility\"\nsource_database_report_table=\"report\"\ndest_database_report=\"ampluslargeutility\"\ndest_database_report_table=\"report\"\n\n#Plant Information\nplant = \"Amplus_34MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_GHI_CUM\"\n_field = \"SOLAR_RADIATION_GHI_CUM\"\n\ndate_to_check = 2\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS, debug=True)\nquery_api = client.query_api()\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None)\n\nYear = []\nMonth = []\nDay = []\nDevice = []\nEAE_DAY = []\nliveepoch = []\n\ndef frame_influx_query1(source_database_report, source_database_report_table, plant, device, _field, date_to_check):\n    if source_database_report and source_database_report_table and plant and device and _field:\n        #query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)  |> yield(name: \"last\")'\n        query = ' from(bucket: \\\"'+source_database_report+'\\\")  |> range(start: -'+date_to_check+'d)  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_report_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+_field+'\\\")  |> yield(name: \"last\")'\n    return query\n\ndef frame_influx_query(source_database, plant, device, field, startTime, stopTime):\n    if source_database and plant and device and field and startTime and stopTime:\n       query = 'from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+startTime+', stop: '+stopTime+')  |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\") |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\") |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"last\")'       \n    return query\n\ndef sending(df):\n    #print(df)\n    for j in range(len(df)):\n        global Year\n        global Month\n        global Day \n        global Device\n        global EAE_DAY\n        global liveepoch\n        Year += [df['Year'].iloc[j]]\n        Month += [df['Month'].iloc[j]]\n        Day += [df['Day'].iloc[j]]\n        Device = [df['Device'].iloc[j]]\n        EAE_DAY += [df['EAE_DAY'].iloc[j]]\n        ts = datetime.datetime(Year[j],Month[j],Day[j], 00, 00,00).timestamp()\n        #ts = (calendar.timegm(Date_IST.timetuple()))\n        ns = int(ts)\n        string = str(ns) + \"000\"\n        liveepoch.append(time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0)))\n\n        data = [{\n            \"measurement\":dest_database_report_table,\n            \"tags\": {\n                \"p\"  : plant,\n                \"iid\": \"6509\",\n                \"d\"  : Device[0],\n                \"f\"  : field\n                    },\n            \"time\" : liveepoch[j],\n            \"fields\": {\n                \"value\" : EAE_DAY[j]\n                }\n            }]   \n        print(data)\n        stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n        if stat != 0:\n            stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database_report+' >> /dev/null')\n    \n        write_api.write(dest_database_report, organisation, data)\n\n\nmiss = []\nfor t in range(len(device)):\n    points_day_array = []\n    my_q_str = frame_influx_query1(source_database_report, source_database_report_table, plant, device[t], _field, str(date_to_check))\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n                \"time\": points_time,\n                \"last\": points_value\n                }\n            print(points_day)\n            points_day_array.append(points_day)\n    df_day = pd.DataFrame(points_day_array)\n    if df_day.empty or df_day.eq(0).any().any() or df_day.isnull().values.any():\n        miss.append(device[t])\nprint(miss)\n\nfor i in range(len(miss)):\n    points_day_array = []\n    for x in range(date_to_check, 0, -1):\n        checkDate = datetime.datetime.today() - datetime.timedelta(days=x)\n        q = (str(checkDate))\n        x = q.split('-')\n        un = x[2].split()\n        uniqueday = int(un[0])\n        uniquemonth = int(x[1])\n        uniqueyear = int(x[0])\n    \n        Stop_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 23, 55, 00).timestamp())\n        stopTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Stop_TS)))\n    \n        Start_TS = int(datetime.datetime(uniqueyear, uniquemonth, uniqueday, 00, 00, 00).timestamp())\n        startTime = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(Start_TS)))\n\n        my_q_str = frame_influx_query(source_database, plant, miss[i], field, startTime, stopTime)\n        #print(my_q_str)\n        result = query_api.query(query=my_q_str)\n        for table in result:\n            for record in table.records:\n                #print(record)\n                points_value = record.get_value()\n                points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n                points_day = {\n                    \"time\": points_time,\n                    \"last\": points_value\n                    }\n            points_day_array.append(points_day)\n        df = pd.DataFrame(points_day_array)\n        #print(df)\n\n        if len(df) != 0:\n            df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n            df.Date_IST = pd.to_datetime(df.Date_IST)\n            #df[\"Date_IST\"] = df[\"Date_IST\"].to_pydatetime()\n            df['day'] = pd.to_datetime(df['Date_IST']).dt.day\n            df['month'] = pd.to_datetime(df['Date_IST']).dt.month\n            df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n            df = df.dropna() \n        \n            Month = df['month'].tolist()\n            Year = df['year'].tolist()\n            Day =  df['day'].tolist()\n            EAE_DAY =  df['last'].tolist()\n            Date_IST =  df['Date_IST'].tolist()\n        \n            df = pd.DataFrame(\n            {'Month': Month,\n            'Year': Year,\n            'Day': Day,\n            'EAE_DAY': EAE_DAY,\n            'Date_IST': Date_IST,\n            'Device': miss[i]})\n    #print(df)\n\n    sending(df)\n",
        "output": "str",
        "x": 480,
        "y": 480,
        "wires": [
            [
                "a36b0f4fd864b8a1"
            ]
        ]
    },
    {
        "id": "a36b0f4fd864b8a1",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "RefillRADIATION_CUM_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 480,
        "wires": [
            [
                "a2711b1a2fbbc858"
            ]
        ]
    },
    {
        "id": "a2711b1a2fbbc858",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 RefillRADIATION_CUM_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 480,
        "wires": [
            [
                "d2d40e2c09aaee78"
            ],
            [
                "76d8ccd3f75a5867"
            ],
            []
        ]
    },
    {
        "id": "90d446b45ae09191",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "radiation_cum_month_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_table=\"report\"\ndest_database=\"ampluslargeutility\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus_34MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_GHI_CUM\"\n\npoints = []\noutvalue = []\noutyear = []\noutmonth = []\noutplant = []\n\nfor i in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[i], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Date'] = pd.to_datetime(df['Date_IST']).dt.date\n    df['Time'] = pd.to_datetime(df['Date_IST']).dt.time\n    df.Date = pd.to_datetime(df.Date)\n    df = df.groupby('Date').sum('last')\n    df = df.groupby(df.index.to_period('m')).cumsum().reset_index()\n    df1 = df.groupby('Date').sum('last')\n    df1 = df1.groupby(df1.index.to_period('y')).cumsum().reset_index()\n    df['month'] = pd.to_datetime(df['Date']).dt.month\n    df['year'] = pd.to_datetime(df['Date']).dt.year\n \n    monthname = df['month'].iloc[0]\n    year = df['year'].iloc[0]   \n    l = len(df)\n\n    #---------------Month Cum Calculation start----------------#\n    for j in range(l):\n        tmp = df['month'].iloc[j]\n        tmpyear = df['year'].iloc[j]\n        if ((monthname != tmp) and (tmpyear == year)):\n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        elif ((monthname != tmp) and (tmpyear != year)): \n            valid = j-1\n            if pd.isnull(df['last'].iloc[valid]) != True:\n                outvalue += [df['last'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outmonth += [df['month'].iloc[valid]]\n                outplant += [device[i]]\n            else:\n                if tmp == 1:\n                    tmp = 13\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['last'].iloc[k]) == False) and ((tmp-1) == monthname)):\n                        break\n                    k -= 1\n                outvalue += [df['last'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outmonth += [df['month'].iloc[k]]\n                outplant += [device[i]]\n                if tmp == 13:\n                   tmp = 1\n        monthname = tmp \n        year = tmpyear    \n    \n    if ((monthname == tmp) and (tmpyear == year)):\n        count = l-1\n        if pd.isnull(df['last'].iloc[count]) != True:    \t\n            outvalue += [df['last'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outmonth += [df['month'].iloc[count]]\n            outplant += [device[i]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['last'].iloc[m]) == False) and (monthname == tmp)):\n                    break\n                m -= 1\n            outvalue += [df['last'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outmonth += [df['month'].iloc[m]]\n            outplant += [device[i]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['last'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    #a_date = str(outyear[v]) + \"-\" + str(outmonth[v]) + \"-\" + \"01\" + \"T\" + \"00\" +\":\" +\"00\" + \":\" + \"00Z\n    ts = datetime.datetime(outyear[v],outmonth[v],1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))\n    \n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\" : plant,\n            \"d\" : outplant[v],\n           \"iid\": \"6509\",\n           \"f\": \"SOLAR_RADIATION_CUM_Month\"\n             },\n        \"time\" : epoch,\n        \"fields\": {\n            \"value\" : out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n\n\n",
        "output": "str",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "65fbdc86a8ed38d9"
            ]
        ]
    },
    {
        "id": "65fbdc86a8ed38d9",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "radiation_cum_month_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 840,
        "wires": [
            [
                "29f56938045f86df"
            ]
        ]
    },
    {
        "id": "29f56938045f86df",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 radiation_cum_month_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 840,
        "wires": [
            [
                "ed03658d6192036a"
            ],
            [
                "a107f6e97c0afba0"
            ],
            []
        ]
    },
    {
        "id": "6087feb47f6c176f",
        "type": "template",
        "z": "1e53c97b35120504",
        "name": "radiation_cum_year_Nayaka_34MW",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "import sys\nimport os\nimport time\nimport pytz\nimport calendar\nimport datetime\nimport pandas as pd\nfrom datetime import date\nfrom influxdb_client import InfluxDBClient, Point, WritePrecision, WriteOptions\nfrom influxdb_client.client.write_api import SYNCHRONOUS, ASYNCHRONOUS\n\ninflux_url=\"http://amplasia.influx.svc.cluster.local\"\ninflux_token=\"_BAL9oRI6P8UJ_8dMtYPXggoFwBRr3NpqmeZBac9E3q5Y0DyUHk1pVJs30qzDRRd_gNzaUrSB9CXB3v0UVblxQ==\"\norganisation=\"ampluslakeasia\"\nsource_database=\"ampluslargeutility\"\nsource_database_table=\"report\"\ndest_database=\"ampluslargeutility\"\ndest_database_table=\"report\"\n\nclient = InfluxDBClient(url=influx_url, token=influx_token, org=organisation)\nwrite_api = client.write_api(write_options=SYNCHRONOUS)\nquery_api = client.query_api()\n\n#timestamp = (\"\"\"1640975400000 1767168792000\"\"\")\ntimestamp = (\"\"\"{{payload}}\"\"\")\nb = (timestamp.split())\nstart_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[0])/1000.0))\nstop_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(b[1])/1000.0))\n\ndef frame_influx_query(source_database, source_database_table, plant, device, field):\n    if source_database and source_database_table and plant and device and field:\n        query = ' from(bucket: \\\"'+source_database+'\\\")  |> range(start: '+start_time+', stop: '+stop_time+')  |> filter(fn: (r) => r[\"_measurement\"] == \\\"'+source_database_table+'\\\")  |> filter(fn: (r) => r[\"p\"] == \\\"'+plant+'\\\")  |> filter(fn: (r) => r[\"d\"] == \\\"'+device+'\\\")  |> filter(fn: (r) => r[\"f\"] == \\\"'+field+'\\\")  |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> yield(name: \"last\")'\n    return query\n\n\nplant = \"Amplus_34MW\"\ndevice = ['CR_WS']\nfield = \"SOLAR_RADIATION_CUM_Month\"\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_rows', None) \n\npoints = []\noutvalue = []\noutyear = []\noutplant = []\n\nfor x in range(len(device)):\n    my_q_str = frame_influx_query(source_database, source_database_table, plant, device[x], field)\n    #print(my_q_str)\n    result = query_api.query(query=my_q_str)\n    points_day_array=[]\n    for table in result:\n        for record in table.records:\n            points_value = record.get_value()\n            points_time = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(record.get_time().timestamp())))\n            points_day = {\n            \"time\": points_time,\n            \"last\": points_value\n            }\n            points_day_array.append(points_day)\n    df = pd.DataFrame(points_day_array)\n    print(df)\n\n    pd.set_option('display.max_columns', None)  \n    pd.set_option('display.max_rows', None)  \n    df.time = pd.to_datetime(df.time)\n    df[\"Date_IST\"] = pd.to_datetime(df[\"time\"]) + pd.DateOffset(hours=5, minutes=30)\n    df['Cumulative Year'] = df.groupby(df['Date_IST'].dt.year)['last'].cumsum()\n    df['year'] = pd.to_datetime(df['Date_IST']).dt.year\n    year = df['year'].iloc[0]\n    l = len(df)\n    \n    #---------------Month Cum Calculation----------------#\n    for j in range(l):\n        tmpyear = df['year'].iloc[j]\n        if (tmpyear != year):\n            valid = j-1\n            if pd.isnull(df['Cumulative Year'].iloc[valid]) != True:\n                outvalue += [df['Cumulative Year'].iloc[valid]]\n                outyear += [df['year'].iloc[valid]]\n                outplant += [device[x]]\n            else:\n                k = valid - 1\n                while k < valid:\n                    if ((pd.isnull(df['Cumulative Year'].iloc[k]) == False) and ((tmpyear-1) == year)):\n                        break\n                    k -= 1\n                outvalue += [df['Cumulative Year'].iloc[k]]\n                outyear += [df['year'].iloc[k]]\n                outplant += [device[x]]\n                outplant += [device[x]] \n        year = tmpyear\n        \n    if (tmpyear == year):\n        count = l-1\n        if pd.isnull(df['Cumulative Year'].iloc[count]) != True:\n            outvalue += [df['Cumulative Year'].iloc[count]]\n            outyear += [df['year'].iloc[count]]\n            outplant += [device[x]]\n        else:\n            m = count - 1\n            while m < count:\n                if ((pd.isnull(df['Cumulative Year'].iloc[m]) == False) and (year == tmpyear)):\n                    break\n                m -= 1\n            outvalue += [df['Cumulative Year'].iloc[m]]\n            outyear += [df['year'].iloc[m]]\n            outplant += [device[x]]\n\nout = [round(num, 2) for num in outvalue]\n\n#------------------------Month Cum calculation End------------------#\n\nnull = df[df['Cumulative Year'].isnull()].index.tolist()\nfor i in range(len(null)):\n    null_date = (df['Date_IST'].iloc[null[i]])\n\nepoch = []\n\nfor v in range(len(outvalue)):\n    ts = datetime.datetime(outyear[v],1,1, 00, 00,00).timestamp()\n    ns = int(ts)\n    string = str(ns) + \"000\"\n    epoch = time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(int(string)/1000.0))    \n\n    data = [{\n        \"measurement\": dest_database_table,\n        \"tags\": {\n            \"p\": plant,\n            \"d\" : outplant[v],\n           \"iid\": \"6509\",\n           \"f\": \"SOLAR_RADIATION_CUM_Year\"\n             },\n        \"time\": epoch,\n        \"fields\": {\n            \"value\": out[v]\n            }\n        }]\n    print(data)\n    stat = os.system('influx bucket list --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    if stat != 0:\n        stat = os.system('influx bucket create --host '+influx_url+' --token '+influx_token+' --org '+organisation+' --name '+dest_database+' >> /dev/null')\n    \n    write_api.write(dest_database, organisation, data)\n",
        "output": "str",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "0485b34a304c3cb5"
            ]
        ]
    },
    {
        "id": "0485b34a304c3cb5",
        "type": "file",
        "z": "1e53c97b35120504",
        "name": "write file",
        "filename": "radiation_cum_year_Nayaka_34MW.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "523f99a40e332e27"
            ]
        ]
    },
    {
        "id": "523f99a40e332e27",
        "type": "exec",
        "z": "1e53c97b35120504",
        "command": "python3 radiation_cum_year_Nayaka_34MW.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 1100,
        "wires": [
            [
                "ed03658d6192036a"
            ],
            [
                "a107f6e97c0afba0"
            ],
            []
        ]
    },
    {
        "id": "ef648c9e74d0c6f3",
        "type": "cronplus",
        "z": "1e53c97b35120504",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 360,
        "wires": [
            [
                "9372d73a4096b3e8"
            ]
        ]
    },
    {
        "id": "d3c5dddb633dd4c1",
        "type": "cronplus",
        "z": "1e53c97b35120504",
        "name": "",
        "outputField": "payload",
        "timeZone": "Asia/Kolkata",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 50 23 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 480,
        "wires": [
            [
                "702241dfca6716e8"
            ]
        ]
    },
    {
        "id": "bad656a6a80ace32",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "98602ea279df25d9"
            ]
        ]
    },
    {
        "id": "15c1358854878c89",
        "type": "csv",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "bad656a6a80ace32",
                "b0da7c38e617d45c"
            ]
        ]
    },
    {
        "id": "8fc2f19fa2dd3e17",
        "type": "template",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,WS03,Solar_Radiation,5m,\"GHI Irradiation(W/m2)\"\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,WS02,Solar_Radiation,5m,\"Tilt Irradiation(W/m2)\"\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN1,NaN ,5m, \"Module_Temperature(Deg_C)\"\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN2,NaN,5m, \"Wind Speed(m/s)\"\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN3,NaN,5m, \"Wind Direction(m/s)\"\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN4,NaN,5m, \"Air Temperature(Deg_C)\"\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN5,NaN,5m, \"Relative_Humidity(%)\"\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN6,NaN,5m, \"Rain_Fall(%)\"\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n",
        "output": "str",
        "x": 550,
        "y": 200,
        "wires": [
            [
                "15c1358854878c89"
            ]
        ]
    },
    {
        "id": "98602ea279df25d9",
        "type": "influxdb in",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "d42daeda6726a195"
            ]
        ]
    },
    {
        "id": "b0da7c38e617d45c",
        "type": "change",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "d42daeda6726a195"
            ]
        ]
    },
    {
        "id": "ec447a6e78691a4c",
        "type": "cronplus",
        "z": "63d962c004d68b5d",
        "d": true,
        "g": "01664f568a71138f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "6d64d862bf743b64"
            ]
        ]
    },
    {
        "id": "d55110bf2590d9c6",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 240,
        "wires": [
            [
                "017df8a9f5447aab"
            ]
        ]
    },
    {
        "id": "017df8a9f5447aab",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 240,
        "wires": [
            [
                "d1489cb2470f78e9",
                "7331d8dd6e8b9553"
            ]
        ]
    },
    {
        "id": "d42daeda6726a195",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "d55110bf2590d9c6"
            ]
        ]
    },
    {
        "id": "715a7318a83202a9",
        "type": "debug",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "2mw",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 320,
        "wires": []
    },
    {
        "id": "d1489cb2470f78e9",
        "type": "csv",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "4fae620fd93953be"
            ]
        ]
    },
    {
        "id": "4fae620fd93953be",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part1/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "e0664f0f3681bbf6"
            ]
        ]
    },
    {
        "id": "e0664f0f3681bbf6",
        "type": "file",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1340,
        "y": 320,
        "wires": [
            [
                "715a7318a83202a9"
            ]
        ]
    },
    {
        "id": "6d64d862bf743b64",
        "type": "delay",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "8fc2f19fa2dd3e17"
            ]
        ]
    },
    {
        "id": "7331d8dd6e8b9553",
        "type": "debug",
        "z": "63d962c004d68b5d",
        "g": "01664f568a71138f",
        "name": "2mw",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 200,
        "wires": []
    },
    {
        "id": "4fdf52553eb1bf9e",
        "type": "debug",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "debug 1908",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "e444fafbcd6d36ab",
        "type": "ftp in",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "ftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "4fdf52553eb1bf9e"
            ]
        ]
    },
    {
        "id": "b26e615f3cd61fd5",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_SMU_Part1/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 460,
        "wires": [
            [
                "e444fafbcd6d36ab"
            ]
        ]
    },
    {
        "id": "7ad05620bd733d76",
        "type": "file in",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 460,
        "wires": [
            [
                "b26e615f3cd61fd5"
            ]
        ]
    },
    {
        "id": "8590072391ea6613",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part1/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "7ad05620bd733d76"
            ]
        ]
    },
    {
        "id": "7a508f7e839716b0",
        "type": "cronplus",
        "z": "63d962c004d68b5d",
        "d": true,
        "g": "1d0862807f0a73f3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "8590072391ea6613"
            ]
        ]
    },
    {
        "id": "2c56c086c2f6ed7c",
        "type": "debug",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "debug 1909",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "37b468c0e5f896ce",
        "type": "ftp in",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "ftp": "",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 560,
        "wires": [
            [
                "2c56c086c2f6ed7c"
            ]
        ]
    },
    {
        "id": "455b5901a1735964",
        "type": "function",
        "z": "63d962c004d68b5d",
        "g": "1d0862807f0a73f3",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amplus_Alex_Bikaner_SMU_Part1\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "37b468c0e5f896ce"
            ]
        ]
    },
    {
        "id": "2b4d28478c174c0f",
        "type": "cronplus",
        "z": "63d962c004d68b5d",
        "d": true,
        "g": "1d0862807f0a73f3",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 590,
        "y": 560,
        "wires": [
            [
                "455b5901a1735964"
            ]
        ]
    },
    {
        "id": "4c7a30ae7d691d79",
        "type": "comment",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part4",
        "info": "",
        "x": 860,
        "y": 80,
        "wires": []
    },
    {
        "id": "ee888a85dc828716",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "Amplus_Alex_Bikaner_SMU_Part4",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  // Get the current date and time\n  var currentDate = new Date();\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  var tstart = currentDate.getTime();\n  let tend = new Date().getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start: -30m) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: false) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 320,
        "wires": [
            [
                "b48a32ba2080d1ae"
            ]
        ]
    },
    {
        "id": "b48a32ba2080d1ae",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "c1634884b84a4ac3"
            ]
        ]
    },
    {
        "id": "a3b066a05658aa69",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */3 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "496335b35d09f534"
            ]
        ]
    },
    {
        "id": "697a2f4ad8989407",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "4543edf16ae4aa10"
            ]
        ]
    },
    {
        "id": "0341113c052fe177",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 260,
        "wires": [
            [
                "ee888a85dc828716",
                "7a2c27bfe6de5d78"
            ]
        ]
    },
    {
        "id": "7a2c27bfe6de5d78",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 260,
        "wires": [
            [
                "697a2f4ad8989407"
            ]
        ]
    },
    {
        "id": "c1634884b84a4ac3",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "join *",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "165",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "df7904d3fb0ed01c"
            ]
        ]
    },
    {
        "id": "4543edf16ae4aa10",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "csv structuring",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArray = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Check if inputArray is empty\nif (inputArray.length == 0) {\n    // Get the current timestamp\n    const timeNow = Date.now();\n\n    // Round to the previous 5th minute\n    const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n    // Format the rounded timestamp in \"dd-MM-yyyy HH:mm\" format\n    const currentTimestamp = `${(\"0\" + roundedTimestamp.getDate()).slice(-2)}-${(\"0\" + (roundedTimestamp.getMonth() + 1)).slice(-2)}-${roundedTimestamp.getFullYear()} ${(\"0\" + roundedTimestamp.getHours()).slice(-2)}:${(\"0\" + roundedTimestamp.getMinutes()).slice(-2)}`;\n\n    // Create an entry for the Date_Time with undefined values for all keys\n    combinedData[currentTimestamp] = { Date_Time: currentTimestamp };\n    keys.forEach(function (keyObject) {\n        combinedData[currentTimestamp][keyObject.Column_Name] = undefined;\n    });\n} else {\n    // Iterate through each array in the inputArrays\n    for (var i = 0; i < inputArray.length; i++) {\n        var currentObject = inputArray[i];\n\n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        // Format the date to the desired format\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 320,
        "wires": [
            [
                "65096107c6256a91"
            ]
        ]
    },
    {
        "id": "df7904d3fb0ed01c",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "last timestamp",
        "func": "// Sample array of arrays\nvar arraysList = msg.payload\n\n// Using map to extract the last element from each array\nvar lastElements = arraysList.map(function (arr) {\n    // Check if the array is not empty\n    if (arr.length > 0) {\n        // Return the last element\n        return arr[arr.length - 2];\n    }\n});\n\n// Filtering out undefined values (empty arrays)\nlastElements = lastElements.filter(function (element) {\n    return element !== undefined;\n});\n\nmsg.payload =lastElements\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "697a2f4ad8989407"
            ]
        ]
    },
    {
        "id": "db6c2849d102e78d",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "7176114a8d985a96"
            ]
        ]
    },
    {
        "id": "981bf2c455d1de74",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 810,
        "y": 520,
        "wires": [
            [
                "fddbe9e4b26f2d4c"
            ]
        ]
    },
    {
        "id": "fddbe9e4b26f2d4c",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part4_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 520,
        "wires": [
            [
                "d67aba194213829f"
            ]
        ]
    },
    {
        "id": "d67aba194213829f",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 520,
        "wires": [
            [
                "ad73e0a831803ac3"
            ]
        ]
    },
    {
        "id": "ad73e0a831803ac3",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "out1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 520,
        "wires": []
    },
    {
        "id": "b328291ac3fe9b0b",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC01,5m,SMU10_IDC01(A)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC02,5m,SMU10_IDC02(A)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC03,5m,SMU10_IDC03(A)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC04,5m,SMU10_IDC04(A)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC05,5m,SMU10_IDC05(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC06,5m,SMU10_IDC06(A)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC07,5m,SMU10_IDC07(A)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC08,5m,SMU10_IDC08(A)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC09,5m,SMU10_IDC09(A)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC10,5m,SMU10_IDC10(A)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC11,5m,SMU10_IDC11(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC12,5m,SMU10_IDC12(A)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC13,5m,SMU10_IDC13(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC14,5m,SMU10_IDC14(A)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC15,5m,SMU10_IDC15(A)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC16,5m,SMU10_IDC16(A)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC17,5m,SMU10_IDC17(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC18,5m,SMU10_IDC18(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC19,5m,SMU10_IDC19(A)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC20,5m,SMU10_IDC20(A)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC21,5m,SMU10_IDC21(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC22,5m,SMU10_IDC22(A)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC23,5m,SMU10_IDC23(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC01,5m,SMU11_IDC01(A)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC02,5m,SMU11_IDC02(A)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC03,5m,SMU11_IDC03(A)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC04,5m,SMU11_IDC04(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC05,5m,SMU11_IDC05(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC06,5m,SMU11_IDC06(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC07,5m,SMU11_IDC07(A)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC08,5m,SMU11_IDC08(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC09,5m,SMU11_IDC09(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC10,5m,SMU11_IDC10(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC11,5m,SMU11_IDC11(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC12,5m,SMU11_IDC12(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC13,5m,SMU11_IDC13(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC14,5m,SMU11_IDC14(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC15,5m,SMU11_IDC15(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC16,5m,SMU11_IDC16(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC17,5m,SMU11_IDC17(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC18,5m,SMU11_IDC18(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC19,5m,SMU11_IDC19(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC20,5m,SMU11_IDC20(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC21,5m,SMU11_IDC21(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC22,5m,SMU11_IDC22(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC23,5m,SMU11_IDC23(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC24,5m,SMU11_IDC24(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC01,5m,SMU12_IDC01(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC02,5m,SMU12_IDC02(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC03,5m,SMU12_IDC03(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC04,5m,SMU12_IDC04(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC05,5m,SMU12_IDC05(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC06,5m,SMU12_IDC06(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC07,5m,SMU12_IDC07(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC08,5m,SMU12_IDC08(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC09,5m,SMU12_IDC09(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC10,5m,SMU12_IDC10(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC11,5m,SMU12_IDC11(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC12,5m,SMU12_IDC12(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC13,5m,SMU12_IDC13(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC14,5m,SMU12_IDC14(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC15,5m,SMU12_IDC15(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC16,5m,SMU12_IDC16(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC17,5m,SMU12_IDC17(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC18,5m,SMU12_IDC18(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC19,5m,SMU12_IDC19(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC20,5m,SMU12_IDC20(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC21,5m,SMU12_IDC21(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC22,5m,SMU12_IDC22(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC23,5m,SMU12_IDC23(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC24,5m,SMU12_IDC24(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC01,5m,SMU13_IDC01(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC02,5m,SMU13_IDC02(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC03,5m,SMU13_IDC03(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC04,5m,SMU13_IDC04(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC05,5m,SMU13_IDC05(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC06,5m,SMU13_IDC06(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC07,5m,SMU13_IDC07(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC08,5m,SMU13_IDC08(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC09,5m,SMU13_IDC09(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC10,5m,SMU13_IDC10(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC11,5m,SMU13_IDC11(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC12,5m,SMU13_IDC12(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC13,5m,SMU13_IDC13(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC14,5m,SMU13_IDC14(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC15,5m,SMU13_IDC15(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC16,5m,SMU13_IDC16(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC17,5m,SMU13_IDC17(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC18,5m,SMU13_IDC18(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC19,5m,SMU13_IDC19(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC20,5m,SMU13_IDC20(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC21,5m,SMU13_IDC21(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC22,5m,SMU13_IDC22(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC23,5m,SMU13_IDC23(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC24,5m,SMU13_IDC24(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC01,5m,SMU14_IDC01(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC02,5m,SMU14_IDC02(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC03,5m,SMU14_IDC03(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC04,5m,SMU14_IDC04(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC05,5m,SMU14_IDC05(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC06,5m,SMU14_IDC06(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC07,5m,SMU14_IDC07(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC08,5m,SMU14_IDC08(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC09,5m,SMU14_IDC09(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC10,5m,SMU14_IDC10(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC11,5m,SMU14_IDC11(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC12,5m,SMU14_IDC12(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC13,5m,SMU14_IDC13(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC14,5m,SMU14_IDC14(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC15,5m,SMU14_IDC15(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC16,5m,SMU14_IDC16(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC17,5m,SMU14_IDC17(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC18,5m,SMU14_IDC18(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC19,5m,SMU14_IDC19(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC20,5m,SMU14_IDC20(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC21,5m,SMU14_IDC21(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC22,5m,SMU14_IDC22(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC23,5m,SMU14_IDC23(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC24,5m,SMU14_IDC24(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC01,5m,SMU15_IDC01(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC02,5m,SMU15_IDC02(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC03,5m,SMU15_IDC03(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC04,5m,SMU15_IDC04(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC05,5m,SMU15_IDC05(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC06,5m,SMU15_IDC06(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC07,5m,SMU15_IDC07(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC08,5m,SMU15_IDC08(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC09,5m,SMU15_IDC09(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC10,5m,SMU15_IDC10(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC11,5m,SMU15_IDC11(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC12,5m,SMU15_IDC12(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC13,5m,SMU15_IDC13(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC14,5m,SMU15_IDC14(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC15,5m,SMU15_IDC15(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC16,5m,SMU15_IDC16(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC17,5m,SMU15_IDC17(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC18,5m,SMU15_IDC18(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC19,5m,SMU15_IDC19(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC20,5m,SMU15_IDC20(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC21,5m,SMU15_IDC21(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC22,5m,SMU15_IDC22(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC23,5m,SMU15_IDC23(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC01,5m,SMU16_IDC01(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC02,5m,SMU16_IDC02(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC03,5m,SMU16_IDC03(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC04,5m,SMU16_IDC04(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC05,5m,SMU16_IDC05(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC06,5m,SMU16_IDC06(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC07,5m,SMU16_IDC07(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC08,5m,SMU16_IDC08(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC09,5m,SMU16_IDC09(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC10,5m,SMU16_IDC10(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC11,5m,SMU16_IDC11(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC12,5m,SMU16_IDC12(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC13,5m,SMU16_IDC13(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC14,5m,SMU16_IDC14(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC15,5m,SMU16_IDC15(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC16,5m,SMU16_IDC16(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC17,5m,SMU16_IDC17(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC18,5m,SMU16_IDC18(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC19,5m,SMU16_IDC19(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC20,5m,SMU16_IDC20(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC21,5m,SMU16_IDC21(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC22,5m,SMU16_IDC22(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC23,5m,SMU16_IDC23(A)\n",
        "output": "str",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "0341113c052fe177"
            ]
        ]
    },
    {
        "id": "8d6007541e926fdb",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "5df62245746c6892"
            ]
        ]
    },
    {
        "id": "02b06cc4ab086394",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 310,
        "y": 420,
        "wires": [
            [
                "8d6007541e926fdb"
            ]
        ]
    },
    {
        "id": "5b151d4a2c88d63c",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "read file*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/Backup.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 420,
        "wires": [
            [
                "c3416cb3e9b3ebd8"
            ]
        ]
    },
    {
        "id": "c3416cb3e9b3ebd8",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 910,
        "y": 420,
        "wires": [
            [
                "7c300287d810bb0f"
            ]
        ]
    },
    {
        "id": "ada7674aa4bec1fe",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "PART 1 final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 420,
        "wires": []
    },
    {
        "id": "7c300287d810bb0f",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "file filtering",
        "func": "let array = msg.payload;\nlet specificDateTimeToRemove = \"Date_Time\"; // Replace with the specific Date_Time you want to remove\n\n// Use a Set to keep track of unique Date_Time values\nlet uniqueDateTimes = new Set();\n\n// Use filter to remove items with repeating Date_Time or a specific Date_Time\narray = array.filter(item => {\n    // Check if the Date_Time is unique and not equal to the specificDateTimeToRemove\n    if (!uniqueDateTimes.has(item.Date_Time) && item.Date_Time !== specificDateTimeToRemove) {\n        uniqueDateTimes.add(item.Date_Time);\n        return true; // Keep the item in the array\n    }\n    return false; // Remove the item from the array\n});\n\nmsg.payload = array;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 420,
        "wires": [
            [
                "981bf2c455d1de74",
                "ada7674aa4bec1fe"
            ]
        ]
    },
    {
        "id": "81ac22f0c6f690c0",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": " check today obj*",
        "func": "let obj_date = msg.payload.Date_Time;\nlet dateComponents = obj_date.split(' ');\nlet datePart = dateComponents[0];\n\nvar dateObject = new Date();\ndateObject.setMinutes(dateObject.getMinutes());\n// Format the date to the desired format\nvar formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\nvar todayDate = formattedDate.split(' ')[0];\n\nif (datePart == todayDate) {\n    flow.set(\"Amplus_Alex_Bikaner_SMU_Part4_filename\", todayDate);\n    return msg;\n} else {\n    node.warn(`Date did not match: obj_date=${obj_date}, todayDate=${todayDate}`);\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 320,
        "wires": [
            [
                "02b06cc4ab086394"
            ]
        ]
    },
    {
        "id": "5df62245746c6892",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 420,
        "wires": [
            [
                "5b151d4a2c88d63c"
            ]
        ]
    },
    {
        "id": "7176114a8d985a96",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "back up file delete*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "dcf2f1409873e083"
            ]
        ]
    },
    {
        "id": "dcf2f1409873e083",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "debug 1677",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 160,
        "wires": []
    },
    {
        "id": "65096107c6256a91",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "last obj",
        "func": "let arrayOfObjects=msg.payload\n// Check if the array is not empty\nif (arrayOfObjects.length > 0) {\n    // Extract the last object from the array\n    var lastObject = arrayOfObjects[arrayOfObjects.length - 1];\nmsg.payload=lastObject\n\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "81ac22f0c6f690c0"
            ]
        ]
    },
    {
        "id": "496335b35d09f534",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "162c0f75aa8149f9",
        "name": "20s",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "b328291ac3fe9b0b"
            ]
        ]
    },
    {
        "id": "b11b3785977600ee",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "name": "FTP OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 640,
        "wires": []
    },
    {
        "id": "c31bd0710d1f7afd",
        "type": "ftp in",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "ftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 640,
        "wires": [
            [
                "b11b3785977600ee"
            ]
        ]
    },
    {
        "id": "3485e17b47eb9733",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "name": "FTP Path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part4_filename\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_SMU_Part4/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            [
                "c31bd0710d1f7afd"
            ]
        ]
    },
    {
        "id": "01b113ae547016f4",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 640,
        "wires": [
            [
                "3485e17b47eb9733"
            ]
        ]
    },
    {
        "id": "7ba709fab59af95c",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part4_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/\"+ date +\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "01b113ae547016f4"
            ]
        ]
    },
    {
        "id": "c9898d52ff537229",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "dbb1330d4313d8da",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 640,
        "wires": [
            [
                "7ba709fab59af95c"
            ]
        ]
    },
    {
        "id": "d9576541efe777be",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "248",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 860,
        "wires": [
            [
                "ecbd67930449733d"
            ]
        ]
    },
    {
        "id": "7519d47ff4b56780",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "influxdb": "",
        "name": "influx",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 610,
        "y": 860,
        "wires": [
            [
                "d9576541efe777be"
            ]
        ]
    },
    {
        "id": "ecbd67930449733d",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 820,
        "wires": [
            [
                "b42c5cbca0aba87a"
            ]
        ]
    },
    {
        "id": "686557cd1cded67c",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 780,
        "wires": [
            [
                "1a82d7cb81cbcdc0",
                "8166d2184faa099e"
            ]
        ]
    },
    {
        "id": "1a82d7cb81cbcdc0",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 780,
        "wires": [
            [
                "ecbd67930449733d"
            ]
        ]
    },
    {
        "id": "ea72b992180a4a49",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n246,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)\n247,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n248,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)",
        "output": "str",
        "x": 450,
        "y": 780,
        "wires": [
            [
                "686557cd1cded67c"
            ]
        ]
    },
    {
        "id": "b42c5cbca0aba87a",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "csv structurising",
        "func": "\nlet keys = msg.payload.keys\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each array in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current inner array\n    var innerArray = inputArrays[i];\n\n    // Iterate through each object in the inner array\n    for (var j = 0; j < innerArray.length; j++) {\n        // Get the current object\n        var currentObject = innerArray[j];\n    \n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 820,
        "wires": [
            [
                "6f7729b311c4ed37",
                "d7488e6819d93a0b"
            ]
        ]
    },
    {
        "id": "8166d2184faa099e",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": " Amplus_Alex_Bikaner_SMU_Part4",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  var $today = new Date();\n  var d = new Date($today);\n  d.setDate($today.getDate());\n  d.setHours(0, 0, 0, 0);\n  var tstart = d.getTime();\n  // Get the current date and time\n  const timeNow = Date.now();\n\n  // Round to the previous 5th minute\n  const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  //currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  //var tstart = currentDate.getTime();\n  let tend = roundedTimestamp.getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 860,
        "wires": [
            [
                "7519d47ff4b56780"
            ]
        ]
    },
    {
        "id": "f0dfd299dda5d191",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "debug 1678",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 820,
        "wires": []
    },
    {
        "id": "6f7729b311c4ed37",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1210,
        "y": 820,
        "wires": [
            [
                "8755966542749ceb"
            ]
        ]
    },
    {
        "id": "8755966542749ceb",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1390,
        "y": 820,
        "wires": [
            [
                "f0dfd299dda5d191"
            ]
        ]
    },
    {
        "id": "d7488e6819d93a0b",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "debug 1679",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 920,
        "wires": []
    },
    {
        "id": "4f9dc4b3327d1a20",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "40s",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "ea72b992180a4a49"
            ]
        ]
    },
    {
        "id": "d5649014dcd18c5d",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */30 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 780,
        "wires": [
            [
                "4f9dc4b3327d1a20"
            ]
        ]
    },
    {
        "id": "40d8f826f72491aa",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "file save part1",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/27-11-2023.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1400,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "67f4ca804992f71c",
        "type": "catch",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "",
        "scope": [
            "7519d47ff4b56780"
        ],
        "uncaught": false,
        "x": 290,
        "y": 940,
        "wires": [
            [
                "977f7d43bf8f8c28"
            ]
        ]
    },
    {
        "id": "977f7d43bf8f8c28",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "d5e303e6ab5a4dd0",
        "name": "debug 1680",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 940,
        "wires": []
    },
    {
        "id": "643ace531abac31a",
        "type": "comment",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part5",
        "info": "",
        "x": 860,
        "y": 1080,
        "wires": []
    },
    {
        "id": "e0e6f68b9762aa0f",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "Amplus_Alex_Bikaner_SMU_Part5",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  // Get the current date and time\n  var currentDate = new Date();\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  var tstart = currentDate.getTime();\n  let tend = new Date().getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start: -30m) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: false) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1320,
        "wires": [
            [
                "6ffb7d186b3e8d0d"
            ]
        ]
    },
    {
        "id": "6ffb7d186b3e8d0d",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 450,
        "y": 1320,
        "wires": [
            [
                "3a4cb3f71842c30c"
            ]
        ]
    },
    {
        "id": "01ccf1415ff9eb6f",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */3 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "7c4d05e91d207c72"
            ]
        ]
    },
    {
        "id": "11918c24afac0efa",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1320,
        "wires": [
            [
                "20f1e20ac916afbb"
            ]
        ]
    },
    {
        "id": "d8641c606c15aea8",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "e0e6f68b9762aa0f",
                "98408e411a0e2a6b"
            ]
        ]
    },
    {
        "id": "98408e411a0e2a6b",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1260,
        "wires": [
            [
                "11918c24afac0efa"
            ]
        ]
    },
    {
        "id": "3a4cb3f71842c30c",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "join *",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "165",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 570,
        "y": 1320,
        "wires": [
            [
                "1655af7ff6a11200"
            ]
        ]
    },
    {
        "id": "20f1e20ac916afbb",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "csv structuring",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArray = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Check if inputArray is empty\nif (inputArray.length == 0) {\n    // Get the current timestamp\n    const timeNow = Date.now();\n\n    // Round to the previous 5th minute\n    const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n    // Format the rounded timestamp in \"dd-MM-yyyy HH:mm\" format\n    const currentTimestamp = `${(\"0\" + roundedTimestamp.getDate()).slice(-2)}-${(\"0\" + (roundedTimestamp.getMonth() + 1)).slice(-2)}-${roundedTimestamp.getFullYear()} ${(\"0\" + roundedTimestamp.getHours()).slice(-2)}:${(\"0\" + roundedTimestamp.getMinutes()).slice(-2)}`;\n\n    // Create an entry for the Date_Time with undefined values for all keys\n    combinedData[currentTimestamp] = { Date_Time: currentTimestamp };\n    keys.forEach(function (keyObject) {\n        combinedData[currentTimestamp][keyObject.Column_Name] = undefined;\n    });\n} else {\n    // Iterate through each array in the inputArrays\n    for (var i = 0; i < inputArray.length; i++) {\n        var currentObject = inputArray[i];\n\n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        // Format the date to the desired format\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1320,
        "wires": [
            [
                "54d6334c07989e2e"
            ]
        ]
    },
    {
        "id": "1655af7ff6a11200",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "last timestamp",
        "func": "// Sample array of arrays\nvar arraysList = msg.payload\n\n// Using map to extract the last element from each array\nvar lastElements = arraysList.map(function (arr) {\n    // Check if the array is not empty\n    if (arr.length > 0) {\n        // Return the last element\n        return arr[arr.length - 2];\n    }\n});\n\n// Filtering out undefined values (empty arrays)\nlastElements = lastElements.filter(function (element) {\n    return element !== undefined;\n});\n\nmsg.payload =lastElements\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "11918c24afac0efa"
            ]
        ]
    },
    {
        "id": "f4a30f649e9328c4",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "6769f96f8f82331b"
            ]
        ]
    },
    {
        "id": "efbd868266972ed6",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 810,
        "y": 1520,
        "wires": [
            [
                "dd94b0b383412a09"
            ]
        ]
    },
    {
        "id": "dd94b0b383412a09",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part5_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1520,
        "wires": [
            [
                "2186980e8b7dcd2e"
            ]
        ]
    },
    {
        "id": "2186980e8b7dcd2e",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 1520,
        "wires": [
            [
                "8aec5121ff41680a"
            ]
        ]
    },
    {
        "id": "8aec5121ff41680a",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "out1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ea57a8b6c867d5d7",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC01,5m,SMU10_IDC01(A)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC02,5m,SMU10_IDC02(A)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC03,5m,SMU10_IDC03(A)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC04,5m,SMU10_IDC04(A)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC05,5m,SMU10_IDC05(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC06,5m,SMU10_IDC06(A)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC07,5m,SMU10_IDC07(A)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC08,5m,SMU10_IDC08(A)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC09,5m,SMU10_IDC09(A)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC10,5m,SMU10_IDC10(A)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC11,5m,SMU10_IDC11(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC12,5m,SMU10_IDC12(A)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC13,5m,SMU10_IDC13(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC14,5m,SMU10_IDC14(A)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC15,5m,SMU10_IDC15(A)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC16,5m,SMU10_IDC16(A)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC17,5m,SMU10_IDC17(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC18,5m,SMU10_IDC18(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC19,5m,SMU10_IDC19(A)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC20,5m,SMU10_IDC20(A)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC21,5m,SMU10_IDC21(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC22,5m,SMU10_IDC22(A)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC23,5m,SMU10_IDC23(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC01,5m,SMU11_IDC01(A)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC02,5m,SMU11_IDC02(A)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC03,5m,SMU11_IDC03(A)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC04,5m,SMU11_IDC04(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC05,5m,SMU11_IDC05(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC06,5m,SMU11_IDC06(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC07,5m,SMU11_IDC07(A)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC08,5m,SMU11_IDC08(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC09,5m,SMU11_IDC09(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC10,5m,SMU11_IDC10(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC11,5m,SMU11_IDC11(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC12,5m,SMU11_IDC12(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC13,5m,SMU11_IDC13(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC14,5m,SMU11_IDC14(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC15,5m,SMU11_IDC15(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC16,5m,SMU11_IDC16(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC17,5m,SMU11_IDC17(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC18,5m,SMU11_IDC18(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC19,5m,SMU11_IDC19(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC20,5m,SMU11_IDC20(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC21,5m,SMU11_IDC21(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC22,5m,SMU11_IDC22(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC23,5m,SMU11_IDC23(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC24,5m,SMU11_IDC24(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC01,5m,SMU12_IDC01(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC02,5m,SMU12_IDC02(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC03,5m,SMU12_IDC03(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC04,5m,SMU12_IDC04(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC05,5m,SMU12_IDC05(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC06,5m,SMU12_IDC06(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC07,5m,SMU12_IDC07(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC08,5m,SMU12_IDC08(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC09,5m,SMU12_IDC09(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC10,5m,SMU12_IDC10(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC11,5m,SMU12_IDC11(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC12,5m,SMU12_IDC12(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC13,5m,SMU12_IDC13(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC14,5m,SMU12_IDC14(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC15,5m,SMU12_IDC15(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC16,5m,SMU12_IDC16(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC17,5m,SMU12_IDC17(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC18,5m,SMU12_IDC18(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC19,5m,SMU12_IDC19(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC20,5m,SMU12_IDC20(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC21,5m,SMU12_IDC21(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC22,5m,SMU12_IDC22(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC23,5m,SMU12_IDC23(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC24,5m,SMU12_IDC24(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC01,5m,SMU13_IDC01(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC02,5m,SMU13_IDC02(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC03,5m,SMU13_IDC03(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC04,5m,SMU13_IDC04(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC05,5m,SMU13_IDC05(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC06,5m,SMU13_IDC06(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC07,5m,SMU13_IDC07(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC08,5m,SMU13_IDC08(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC09,5m,SMU13_IDC09(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC10,5m,SMU13_IDC10(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC11,5m,SMU13_IDC11(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC12,5m,SMU13_IDC12(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC13,5m,SMU13_IDC13(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC14,5m,SMU13_IDC14(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC15,5m,SMU13_IDC15(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC16,5m,SMU13_IDC16(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC17,5m,SMU13_IDC17(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC18,5m,SMU13_IDC18(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC19,5m,SMU13_IDC19(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC20,5m,SMU13_IDC20(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC21,5m,SMU13_IDC21(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC22,5m,SMU13_IDC22(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC23,5m,SMU13_IDC23(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC24,5m,SMU13_IDC24(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC01,5m,SMU14_IDC01(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC02,5m,SMU14_IDC02(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC03,5m,SMU14_IDC03(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC04,5m,SMU14_IDC04(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC05,5m,SMU14_IDC05(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC06,5m,SMU14_IDC06(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC07,5m,SMU14_IDC07(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC08,5m,SMU14_IDC08(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC09,5m,SMU14_IDC09(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC10,5m,SMU14_IDC10(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC11,5m,SMU14_IDC11(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC12,5m,SMU14_IDC12(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC13,5m,SMU14_IDC13(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC14,5m,SMU14_IDC14(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC15,5m,SMU14_IDC15(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC16,5m,SMU14_IDC16(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC17,5m,SMU14_IDC17(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC18,5m,SMU14_IDC18(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC19,5m,SMU14_IDC19(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC20,5m,SMU14_IDC20(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC21,5m,SMU14_IDC21(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC22,5m,SMU14_IDC22(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC23,5m,SMU14_IDC23(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC24,5m,SMU14_IDC24(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC01,5m,SMU15_IDC01(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC02,5m,SMU15_IDC02(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC03,5m,SMU15_IDC03(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC04,5m,SMU15_IDC04(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC05,5m,SMU15_IDC05(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC06,5m,SMU15_IDC06(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC07,5m,SMU15_IDC07(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC08,5m,SMU15_IDC08(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC09,5m,SMU15_IDC09(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC10,5m,SMU15_IDC10(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC11,5m,SMU15_IDC11(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC12,5m,SMU15_IDC12(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC13,5m,SMU15_IDC13(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC14,5m,SMU15_IDC14(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC15,5m,SMU15_IDC15(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC16,5m,SMU15_IDC16(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC17,5m,SMU15_IDC17(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC18,5m,SMU15_IDC18(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC19,5m,SMU15_IDC19(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC20,5m,SMU15_IDC20(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC21,5m,SMU15_IDC21(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC22,5m,SMU15_IDC22(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC23,5m,SMU15_IDC23(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC01,5m,SMU16_IDC01(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC02,5m,SMU16_IDC02(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC03,5m,SMU16_IDC03(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC04,5m,SMU16_IDC04(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC05,5m,SMU16_IDC05(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC06,5m,SMU16_IDC06(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC07,5m,SMU16_IDC07(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC08,5m,SMU16_IDC08(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC09,5m,SMU16_IDC09(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC10,5m,SMU16_IDC10(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC11,5m,SMU16_IDC11(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC12,5m,SMU16_IDC12(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC13,5m,SMU16_IDC13(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC14,5m,SMU16_IDC14(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC15,5m,SMU16_IDC15(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC16,5m,SMU16_IDC16(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC17,5m,SMU16_IDC17(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC18,5m,SMU16_IDC18(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC19,5m,SMU16_IDC19(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC20,5m,SMU16_IDC20(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC21,5m,SMU16_IDC21(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC22,5m,SMU16_IDC22(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC23,5m,SMU16_IDC23(A)\n",
        "output": "str",
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "d8641c606c15aea8"
            ]
        ]
    },
    {
        "id": "0b21048187ae8848",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "e36eac19a38def28"
            ]
        ]
    },
    {
        "id": "06f3117eec82800e",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 310,
        "y": 1420,
        "wires": [
            [
                "0b21048187ae8848"
            ]
        ]
    },
    {
        "id": "d144e8c81a6abc9e",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "read file*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/Backup.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 1420,
        "wires": [
            [
                "71e1c9346767e7ba"
            ]
        ]
    },
    {
        "id": "71e1c9346767e7ba",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 910,
        "y": 1420,
        "wires": [
            [
                "0e86efc85c8117e6"
            ]
        ]
    },
    {
        "id": "c8763294a97cfa4e",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "PART 1 final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0e86efc85c8117e6",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "file filtering",
        "func": "let array = msg.payload;\nlet specificDateTimeToRemove = \"Date_Time\"; // Replace with the specific Date_Time you want to remove\n\n// Use a Set to keep track of unique Date_Time values\nlet uniqueDateTimes = new Set();\n\n// Use filter to remove items with repeating Date_Time or a specific Date_Time\narray = array.filter(item => {\n    // Check if the Date_Time is unique and not equal to the specificDateTimeToRemove\n    if (!uniqueDateTimes.has(item.Date_Time) && item.Date_Time !== specificDateTimeToRemove) {\n        uniqueDateTimes.add(item.Date_Time);\n        return true; // Keep the item in the array\n    }\n    return false; // Remove the item from the array\n});\n\nmsg.payload = array;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "efbd868266972ed6",
                "c8763294a97cfa4e"
            ]
        ]
    },
    {
        "id": "60380802bb5e949d",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": " check today obj*",
        "func": "let obj_date = msg.payload.Date_Time;\nlet dateComponents = obj_date.split(' ');\nlet datePart = dateComponents[0];\n\nvar dateObject = new Date();\ndateObject.setMinutes(dateObject.getMinutes());\n// Format the date to the desired format\nvar formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\nvar todayDate = formattedDate.split(' ')[0];\n\nif (datePart == todayDate) {\n    flow.set(\"Amplus_Alex_Bikaner_SMU_Part5_filename\", todayDate);\n    return msg;\n} else {\n    node.warn(`Date did not match: obj_date=${obj_date}, todayDate=${todayDate}`);\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1320,
        "wires": [
            [
                "06f3117eec82800e"
            ]
        ]
    },
    {
        "id": "e36eac19a38def28",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 1420,
        "wires": [
            [
                "d144e8c81a6abc9e"
            ]
        ]
    },
    {
        "id": "6769f96f8f82331b",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "back up file delete*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 370,
        "y": 1160,
        "wires": [
            [
                "a8e17b5273514e0e"
            ]
        ]
    },
    {
        "id": "a8e17b5273514e0e",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "debug 1681",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1160,
        "wires": []
    },
    {
        "id": "54d6334c07989e2e",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "last obj",
        "func": "let arrayOfObjects=msg.payload\n// Check if the array is not empty\nif (arrayOfObjects.length > 0) {\n    // Extract the last object from the array\n    var lastObject = arrayOfObjects[arrayOfObjects.length - 1];\nmsg.payload=lastObject\n\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1320,
        "wires": [
            [
                "60380802bb5e949d"
            ]
        ]
    },
    {
        "id": "7c4d05e91d207c72",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "05fdd02e01780ceb",
        "name": "25s",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "ea57a8b6c867d5d7"
            ]
        ]
    },
    {
        "id": "5e0bd3d1d9a6ac96",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "name": "FTP OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1640,
        "wires": []
    },
    {
        "id": "181946ceabcc8da1",
        "type": "ftp in",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "ftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 1640,
        "wires": [
            [
                "5e0bd3d1d9a6ac96"
            ]
        ]
    },
    {
        "id": "180f07bb7b8cba68",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "name": "FTP Path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part5_filename\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_SMU_Part5/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1640,
        "wires": [
            [
                "181946ceabcc8da1"
            ]
        ]
    },
    {
        "id": "cba114ac86345fa3",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 1640,
        "wires": [
            [
                "180f07bb7b8cba68"
            ]
        ]
    },
    {
        "id": "3e6e941c8f4dc8ce",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part5_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/\"+ date +\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1640,
        "wires": [
            [
                "cba114ac86345fa3"
            ]
        ]
    },
    {
        "id": "76d7264b0fabe033",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "781dddef14f0b01f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1640,
        "wires": [
            [
                "3e6e941c8f4dc8ce"
            ]
        ]
    },
    {
        "id": "6cb1f66b7494a9be",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "248",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 1860,
        "wires": [
            [
                "4ebc81feb6cb4559"
            ]
        ]
    },
    {
        "id": "4b381b04390be4b9",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "influxdb": "",
        "name": "influx",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 610,
        "y": 1860,
        "wires": [
            [
                "6cb1f66b7494a9be"
            ]
        ]
    },
    {
        "id": "4ebc81feb6cb4559",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1820,
        "wires": [
            [
                "6a9c68f9f7913e60"
            ]
        ]
    },
    {
        "id": "9af875b8bdcf3e65",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "9c7e556510fa6cfb",
                "8ee6d722a8013d51"
            ]
        ]
    },
    {
        "id": "9c7e556510fa6cfb",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1780,
        "wires": [
            [
                "4ebc81feb6cb4559"
            ]
        ]
    },
    {
        "id": "61029ddda27754fe",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n246,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)\n247,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n248,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)",
        "output": "str",
        "x": 450,
        "y": 1780,
        "wires": [
            [
                "9af875b8bdcf3e65"
            ]
        ]
    },
    {
        "id": "6a9c68f9f7913e60",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "csv structurising",
        "func": "\nlet keys = msg.payload.keys\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each array in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current inner array\n    var innerArray = inputArrays[i];\n\n    // Iterate through each object in the inner array\n    for (var j = 0; j < innerArray.length; j++) {\n        // Get the current object\n        var currentObject = innerArray[j];\n    \n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1820,
        "wires": [
            [
                "e21bae8a4ba51805",
                "44ee8ad3251ce64b"
            ]
        ]
    },
    {
        "id": "8ee6d722a8013d51",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": " Amplus_Alex_Bikaner_SMU_Part5",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  var $today = new Date();\n  var d = new Date($today);\n  d.setDate($today.getDate());\n  d.setHours(0, 0, 0, 0);\n  var tstart = d.getTime();\n  // Get the current date and time\n  const timeNow = Date.now();\n\n  // Round to the previous 5th minute\n  const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  //currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  //var tstart = currentDate.getTime();\n  let tend = roundedTimestamp.getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1860,
        "wires": [
            [
                "4b381b04390be4b9"
            ]
        ]
    },
    {
        "id": "9ca952a925eac85c",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "debug 1682",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1820,
        "wires": []
    },
    {
        "id": "e21bae8a4ba51805",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1210,
        "y": 1820,
        "wires": [
            [
                "254ad0e4efc9021d"
            ]
        ]
    },
    {
        "id": "254ad0e4efc9021d",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part5/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1390,
        "y": 1820,
        "wires": [
            [
                "9ca952a925eac85c"
            ]
        ]
    },
    {
        "id": "44ee8ad3251ce64b",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "debug 1683",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1920,
        "wires": []
    },
    {
        "id": "e3a87bf6ade5fd0b",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "50s",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1760,
        "wires": [
            [
                "61029ddda27754fe"
            ]
        ]
    },
    {
        "id": "c070ef08059a7f9f",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */30 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1780,
        "wires": [
            [
                "e3a87bf6ade5fd0b"
            ]
        ]
    },
    {
        "id": "a6858158b0b41af7",
        "type": "catch",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "",
        "scope": [
            "4b381b04390be4b9"
        ],
        "uncaught": false,
        "x": 290,
        "y": 1940,
        "wires": [
            [
                "b6a84063523ceded"
            ]
        ]
    },
    {
        "id": "b6a84063523ceded",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "9acf8398ef844884",
        "name": "debug 1684",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1940,
        "wires": []
    },
    {
        "id": "2ef04b3c9866f268",
        "type": "comment",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part7",
        "info": "",
        "x": 840,
        "y": 3080,
        "wires": []
    },
    {
        "id": "b071dd2fb4b4b724",
        "type": "comment",
        "z": "b338dc37820f661d",
        "name": "Amplus_Alex_Bikaner_SMU_Part6",
        "info": "",
        "x": 840,
        "y": 2080,
        "wires": []
    },
    {
        "id": "bd5f2fe29210e10b",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "Amplus_Alex_Bikaner_SMU_Part6",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  // Get the current date and time\n  var currentDate = new Date();\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  var tstart = currentDate.getTime();\n  let tend = new Date().getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start: -30m) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: false) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2320,
        "wires": [
            [
                "f3e1838449a26631"
            ]
        ]
    },
    {
        "id": "f3e1838449a26631",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 430,
        "y": 2320,
        "wires": [
            [
                "85dfb35896067c1c"
            ]
        ]
    },
    {
        "id": "e2ec5da3a43f25e1",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */3 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 2260,
        "wires": [
            [
                "3c92bcf8ac6defe3"
            ]
        ]
    },
    {
        "id": "6f0de806111e0790",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2320,
        "wires": [
            [
                "5036db5adddf4896"
            ]
        ]
    },
    {
        "id": "95e7ef1e5d66a8b9",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 2260,
        "wires": [
            [
                "bd5f2fe29210e10b",
                "511cec0891743e6e"
            ]
        ]
    },
    {
        "id": "511cec0891743e6e",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 2260,
        "wires": [
            [
                "6f0de806111e0790"
            ]
        ]
    },
    {
        "id": "85dfb35896067c1c",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "join *",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "165",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 550,
        "y": 2320,
        "wires": [
            [
                "9e63456a569d2562"
            ]
        ]
    },
    {
        "id": "5036db5adddf4896",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "csv structuring",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArray = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Check if inputArray is empty\nif (inputArray.length == 0) {\n    // Get the current timestamp\n    const timeNow = Date.now();\n\n    // Round to the previous 5th minute\n    const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n    // Format the rounded timestamp in \"dd-MM-yyyy HH:mm\" format\n    const currentTimestamp = `${(\"0\" + roundedTimestamp.getDate()).slice(-2)}-${(\"0\" + (roundedTimestamp.getMonth() + 1)).slice(-2)}-${roundedTimestamp.getFullYear()} ${(\"0\" + roundedTimestamp.getHours()).slice(-2)}:${(\"0\" + roundedTimestamp.getMinutes()).slice(-2)}`;\n\n    // Create an entry for the Date_Time with undefined values for all keys\n    combinedData[currentTimestamp] = { Date_Time: currentTimestamp };\n    keys.forEach(function (keyObject) {\n        combinedData[currentTimestamp][keyObject.Column_Name] = undefined;\n    });\n} else {\n    // Iterate through each array in the inputArrays\n    for (var i = 0; i < inputArray.length; i++) {\n        var currentObject = inputArray[i];\n\n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        // Format the date to the desired format\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2320,
        "wires": [
            [
                "2a6f0dcc453bae35"
            ]
        ]
    },
    {
        "id": "9e63456a569d2562",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "last timestamp",
        "func": "// Sample array of arrays\nvar arraysList = msg.payload\n\n// Using map to extract the last element from each array\nvar lastElements = arraysList.map(function (arr) {\n    // Check if the array is not empty\n    if (arr.length > 0) {\n        // Return the last element\n        return arr[arr.length - 2];\n    }\n});\n\n// Filtering out undefined values (empty arrays)\nlastElements = lastElements.filter(function (element) {\n    return element !== undefined;\n});\n\nmsg.payload =lastElements\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2320,
        "wires": [
            [
                "6f0de806111e0790"
            ]
        ]
    },
    {
        "id": "4f935ce4330c2734",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 2160,
        "wires": [
            [
                "c0894ccb8f0827c7"
            ]
        ]
    },
    {
        "id": "3132e4c1aea6e41b",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 790,
        "y": 2520,
        "wires": [
            [
                "cec20d3a3fa44072"
            ]
        ]
    },
    {
        "id": "cec20d3a3fa44072",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part6_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2520,
        "wires": [
            [
                "05f20d7f7023c015"
            ]
        ]
    },
    {
        "id": "05f20d7f7023c015",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1080,
        "y": 2520,
        "wires": [
            [
                "c651c38eba60a56f"
            ]
        ]
    },
    {
        "id": "c651c38eba60a56f",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "out1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 2520,
        "wires": []
    },
    {
        "id": "54d8ea3b7631d7f2",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC01,5m,SMU10_IDC01(A)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC02,5m,SMU10_IDC02(A)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC03,5m,SMU10_IDC03(A)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC04,5m,SMU10_IDC04(A)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC05,5m,SMU10_IDC05(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC06,5m,SMU10_IDC06(A)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC07,5m,SMU10_IDC07(A)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC08,5m,SMU10_IDC08(A)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC09,5m,SMU10_IDC09(A)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC10,5m,SMU10_IDC10(A)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC11,5m,SMU10_IDC11(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC12,5m,SMU10_IDC12(A)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC13,5m,SMU10_IDC13(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC14,5m,SMU10_IDC14(A)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC15,5m,SMU10_IDC15(A)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC16,5m,SMU10_IDC16(A)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC17,5m,SMU10_IDC17(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC18,5m,SMU10_IDC18(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC19,5m,SMU10_IDC19(A)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC20,5m,SMU10_IDC20(A)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC21,5m,SMU10_IDC21(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC22,5m,SMU10_IDC22(A)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC23,5m,SMU10_IDC23(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC01,5m,SMU11_IDC01(A)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC02,5m,SMU11_IDC02(A)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC03,5m,SMU11_IDC03(A)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC04,5m,SMU11_IDC04(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC05,5m,SMU11_IDC05(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC06,5m,SMU11_IDC06(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC07,5m,SMU11_IDC07(A)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC08,5m,SMU11_IDC08(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC09,5m,SMU11_IDC09(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC10,5m,SMU11_IDC10(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC11,5m,SMU11_IDC11(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC12,5m,SMU11_IDC12(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC13,5m,SMU11_IDC13(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC14,5m,SMU11_IDC14(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC15,5m,SMU11_IDC15(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC16,5m,SMU11_IDC16(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC17,5m,SMU11_IDC17(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC18,5m,SMU11_IDC18(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC19,5m,SMU11_IDC19(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC20,5m,SMU11_IDC20(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC21,5m,SMU11_IDC21(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC22,5m,SMU11_IDC22(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC23,5m,SMU11_IDC23(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC24,5m,SMU11_IDC24(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC01,5m,SMU12_IDC01(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC02,5m,SMU12_IDC02(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC03,5m,SMU12_IDC03(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC04,5m,SMU12_IDC04(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC05,5m,SMU12_IDC05(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC06,5m,SMU12_IDC06(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC07,5m,SMU12_IDC07(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC08,5m,SMU12_IDC08(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC09,5m,SMU12_IDC09(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC10,5m,SMU12_IDC10(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC11,5m,SMU12_IDC11(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC12,5m,SMU12_IDC12(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC13,5m,SMU12_IDC13(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC14,5m,SMU12_IDC14(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC15,5m,SMU12_IDC15(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC16,5m,SMU12_IDC16(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC17,5m,SMU12_IDC17(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC18,5m,SMU12_IDC18(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC19,5m,SMU12_IDC19(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC20,5m,SMU12_IDC20(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC21,5m,SMU12_IDC21(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC22,5m,SMU12_IDC22(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC23,5m,SMU12_IDC23(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC24,5m,SMU12_IDC24(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC01,5m,SMU13_IDC01(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC02,5m,SMU13_IDC02(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC03,5m,SMU13_IDC03(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC04,5m,SMU13_IDC04(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC05,5m,SMU13_IDC05(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC06,5m,SMU13_IDC06(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC07,5m,SMU13_IDC07(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC08,5m,SMU13_IDC08(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC09,5m,SMU13_IDC09(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC10,5m,SMU13_IDC10(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC11,5m,SMU13_IDC11(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC12,5m,SMU13_IDC12(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC13,5m,SMU13_IDC13(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC14,5m,SMU13_IDC14(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC15,5m,SMU13_IDC15(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC16,5m,SMU13_IDC16(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC17,5m,SMU13_IDC17(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC18,5m,SMU13_IDC18(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC19,5m,SMU13_IDC19(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC20,5m,SMU13_IDC20(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC21,5m,SMU13_IDC21(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC22,5m,SMU13_IDC22(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC23,5m,SMU13_IDC23(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC24,5m,SMU13_IDC24(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC01,5m,SMU14_IDC01(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC02,5m,SMU14_IDC02(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC03,5m,SMU14_IDC03(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC04,5m,SMU14_IDC04(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC05,5m,SMU14_IDC05(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC06,5m,SMU14_IDC06(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC07,5m,SMU14_IDC07(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC08,5m,SMU14_IDC08(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC09,5m,SMU14_IDC09(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC10,5m,SMU14_IDC10(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC11,5m,SMU14_IDC11(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC12,5m,SMU14_IDC12(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC13,5m,SMU14_IDC13(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC14,5m,SMU14_IDC14(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC15,5m,SMU14_IDC15(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC16,5m,SMU14_IDC16(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC17,5m,SMU14_IDC17(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC18,5m,SMU14_IDC18(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC19,5m,SMU14_IDC19(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC20,5m,SMU14_IDC20(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC21,5m,SMU14_IDC21(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC22,5m,SMU14_IDC22(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC23,5m,SMU14_IDC23(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC24,5m,SMU14_IDC24(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC01,5m,SMU15_IDC01(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC02,5m,SMU15_IDC02(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC03,5m,SMU15_IDC03(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC04,5m,SMU15_IDC04(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC05,5m,SMU15_IDC05(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC06,5m,SMU15_IDC06(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC07,5m,SMU15_IDC07(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC08,5m,SMU15_IDC08(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC09,5m,SMU15_IDC09(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC10,5m,SMU15_IDC10(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC11,5m,SMU15_IDC11(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC12,5m,SMU15_IDC12(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC13,5m,SMU15_IDC13(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC14,5m,SMU15_IDC14(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC15,5m,SMU15_IDC15(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC16,5m,SMU15_IDC16(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC17,5m,SMU15_IDC17(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC18,5m,SMU15_IDC18(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC19,5m,SMU15_IDC19(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC20,5m,SMU15_IDC20(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC21,5m,SMU15_IDC21(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC22,5m,SMU15_IDC22(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC23,5m,SMU15_IDC23(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC01,5m,SMU16_IDC01(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC02,5m,SMU16_IDC02(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC03,5m,SMU16_IDC03(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC04,5m,SMU16_IDC04(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC05,5m,SMU16_IDC05(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC06,5m,SMU16_IDC06(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC07,5m,SMU16_IDC07(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC08,5m,SMU16_IDC08(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC09,5m,SMU16_IDC09(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC10,5m,SMU16_IDC10(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC11,5m,SMU16_IDC11(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC12,5m,SMU16_IDC12(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC13,5m,SMU16_IDC13(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC14,5m,SMU16_IDC14(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC15,5m,SMU16_IDC15(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC16,5m,SMU16_IDC16(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC17,5m,SMU16_IDC17(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC18,5m,SMU16_IDC18(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC19,5m,SMU16_IDC19(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC20,5m,SMU16_IDC20(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC21,5m,SMU16_IDC21(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC22,5m,SMU16_IDC22(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC23,5m,SMU16_IDC23(A)\n",
        "output": "str",
        "x": 430,
        "y": 2260,
        "wires": [
            [
                "95e7ef1e5d66a8b9"
            ]
        ]
    },
    {
        "id": "3776accff739e1e4",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 450,
        "y": 2420,
        "wires": [
            [
                "ebc18f2a183f45f8"
            ]
        ]
    },
    {
        "id": "c32f47f94bc66f69",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 290,
        "y": 2420,
        "wires": [
            [
                "3776accff739e1e4"
            ]
        ]
    },
    {
        "id": "105bddd11293215b",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "read file*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/Backup.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 2420,
        "wires": [
            [
                "2dc555cb3e87a44e"
            ]
        ]
    },
    {
        "id": "2dc555cb3e87a44e",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 890,
        "y": 2420,
        "wires": [
            [
                "ef4f6e948a5a1042"
            ]
        ]
    },
    {
        "id": "2e8ef3260732911a",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "PART 6 final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 2420,
        "wires": []
    },
    {
        "id": "ef4f6e948a5a1042",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "file filtering",
        "func": "let array = msg.payload;\nlet specificDateTimeToRemove = \"Date_Time\"; // Replace with the specific Date_Time you want to remove\n\n// Use a Set to keep track of unique Date_Time values\nlet uniqueDateTimes = new Set();\n\n// Use filter to remove items with repeating Date_Time or a specific Date_Time\narray = array.filter(item => {\n    // Check if the Date_Time is unique and not equal to the specificDateTimeToRemove\n    if (!uniqueDateTimes.has(item.Date_Time) && item.Date_Time !== specificDateTimeToRemove) {\n        uniqueDateTimes.add(item.Date_Time);\n        return true; // Keep the item in the array\n    }\n    return false; // Remove the item from the array\n});\n\nmsg.payload = array;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2420,
        "wires": [
            [
                "3132e4c1aea6e41b",
                "2e8ef3260732911a"
            ]
        ]
    },
    {
        "id": "e5e73f6b218fbd51",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": " check today obj*",
        "func": "let obj_date = msg.payload.Date_Time;\nlet dateComponents = obj_date.split(' ');\nlet datePart = dateComponents[0];\n\nvar dateObject = new Date();\ndateObject.setMinutes(dateObject.getMinutes());\n// Format the date to the desired format\nvar formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\nvar todayDate = formattedDate.split(' ')[0];\n\nif (datePart == todayDate) {\n    flow.set(\"Amplus_Alex_Bikaner_SMU_Part6_filename\", todayDate);\n    return msg;\n} else {\n    node.warn(`Date did not match: obj_date=${obj_date}, todayDate=${todayDate}`);\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2320,
        "wires": [
            [
                "c32f47f94bc66f69"
            ]
        ]
    },
    {
        "id": "ebc18f2a183f45f8",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 2420,
        "wires": [
            [
                "105bddd11293215b"
            ]
        ]
    },
    {
        "id": "c0894ccb8f0827c7",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "back up file delete*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 350,
        "y": 2160,
        "wires": [
            [
                "a6361454e29cec41"
            ]
        ]
    },
    {
        "id": "a6361454e29cec41",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "debug 1824",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 2160,
        "wires": []
    },
    {
        "id": "2a6f0dcc453bae35",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "last obj",
        "func": "let arrayOfObjects=msg.payload\n// Check if the array is not empty\nif (arrayOfObjects.length > 0) {\n    // Extract the last object from the array\n    var lastObject = arrayOfObjects[arrayOfObjects.length - 1];\nmsg.payload=lastObject\n\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2320,
        "wires": [
            [
                "e5e73f6b218fbd51"
            ]
        ]
    },
    {
        "id": "3c92bcf8ac6defe3",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "7736016b2c3e0dd3",
        "name": "20s",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 2260,
        "wires": [
            [
                "54d8ea3b7631d7f2"
            ]
        ]
    },
    {
        "id": "cdab262442d3d6ae",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "name": "FTP OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 2640,
        "wires": []
    },
    {
        "id": "f61212e8aeb733a8",
        "type": "ftp in",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "ftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 790,
        "y": 2640,
        "wires": [
            [
                "cdab262442d3d6ae"
            ]
        ]
    },
    {
        "id": "4095aca7d2e68871",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "name": "FTP Path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part6_filename\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_SMU_Part6/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2640,
        "wires": [
            [
                "f61212e8aeb733a8"
            ]
        ]
    },
    {
        "id": "66df68cd4d49eca6",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 2640,
        "wires": [
            [
                "4095aca7d2e68871"
            ]
        ]
    },
    {
        "id": "fbcc6ca09aed8679",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part6_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/\"+ date +\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2640,
        "wires": [
            [
                "66df68cd4d49eca6"
            ]
        ]
    },
    {
        "id": "7a69bca4f842d7b0",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "1cc6cb6bb7aa1449",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 2640,
        "wires": [
            [
                "fbcc6ca09aed8679"
            ]
        ]
    },
    {
        "id": "11974aaf6033778e",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "248",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 2860,
        "wires": [
            [
                "55a0e11bbfa986f9"
            ]
        ]
    },
    {
        "id": "2bb020a2da55dc8d",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "influxdb": "97aa7216add6f559",
        "name": "influx",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 590,
        "y": 2860,
        "wires": [
            [
                "11974aaf6033778e"
            ]
        ]
    },
    {
        "id": "55a0e11bbfa986f9",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2820,
        "wires": [
            [
                "b7324e34b68de22f"
            ]
        ]
    },
    {
        "id": "95ac1d56aebc6150",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 2780,
        "wires": [
            [
                "0f409deb67247986",
                "2db06579a02b1c69"
            ]
        ]
    },
    {
        "id": "0f409deb67247986",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 2780,
        "wires": [
            [
                "55a0e11bbfa986f9"
            ]
        ]
    },
    {
        "id": "2bb72ae41d36034d",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n246,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)\n247,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n248,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)",
        "output": "str",
        "x": 430,
        "y": 2780,
        "wires": [
            [
                "95ac1d56aebc6150"
            ]
        ]
    },
    {
        "id": "b7324e34b68de22f",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "csv structurising",
        "func": "\nlet keys = msg.payload.keys\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each array in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current inner array\n    var innerArray = inputArrays[i];\n\n    // Iterate through each object in the inner array\n    for (var j = 0; j < innerArray.length; j++) {\n        // Get the current object\n        var currentObject = innerArray[j];\n    \n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2820,
        "wires": [
            [
                "19f89a6b58f33f9b",
                "0c27275bfa176ec0"
            ]
        ]
    },
    {
        "id": "2db06579a02b1c69",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": " Amplus_Alex_Bikaner_SMU_Part6",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  var $today = new Date();\n  var d = new Date($today);\n  d.setDate($today.getDate());\n  d.setHours(0, 0, 0, 0);\n  var tstart = d.getTime();\n  // Get the current date and time\n  const timeNow = Date.now();\n\n  // Round to the previous 5th minute\n  const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  //currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  //var tstart = currentDate.getTime();\n  let tend = roundedTimestamp.getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2860,
        "wires": [
            [
                "2bb020a2da55dc8d"
            ]
        ]
    },
    {
        "id": "8373bcf649ce217b",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "debug 1825",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 2820,
        "wires": []
    },
    {
        "id": "19f89a6b58f33f9b",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1190,
        "y": 2820,
        "wires": [
            [
                "4e9c33843d6dd146"
            ]
        ]
    },
    {
        "id": "4e9c33843d6dd146",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part6/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1370,
        "y": 2820,
        "wires": [
            [
                "8373bcf649ce217b"
            ]
        ]
    },
    {
        "id": "0c27275bfa176ec0",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "debug 1826",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2920,
        "wires": []
    },
    {
        "id": "161f3da721e561ca",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "40s",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 2760,
        "wires": [
            [
                "2bb72ae41d36034d"
            ]
        ]
    },
    {
        "id": "1456a9f3f14d0732",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */30 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 2780,
        "wires": [
            [
                "161f3da721e561ca"
            ]
        ]
    },
    {
        "id": "7f4ae89987059b77",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "file save part1",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part4/27-11-2023.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1380,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "d237befb3bb75ad0",
        "type": "catch",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "",
        "scope": [
            "2bb020a2da55dc8d"
        ],
        "uncaught": false,
        "x": 270,
        "y": 2940,
        "wires": [
            [
                "15d52ca5f79e0e44"
            ]
        ]
    },
    {
        "id": "15d52ca5f79e0e44",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2239cdda2ed14695",
        "name": "debug 1827",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 2940,
        "wires": []
    },
    {
        "id": "115861715027564d",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "Amplus_Alex_Bikaner_SMU_Part7",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  // Get the current date and time\n  var currentDate = new Date();\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  var tstart = currentDate.getTime();\n  let tend = new Date().getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start: -30m) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: false) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 3320,
        "wires": [
            [
                "979ff9aa6bdd1098"
            ]
        ]
    },
    {
        "id": "979ff9aa6bdd1098",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 430,
        "y": 3320,
        "wires": [
            [
                "86d33ca997c8574d"
            ]
        ]
    },
    {
        "id": "bfb2057d490d7d92",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */3 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 3260,
        "wires": [
            [
                "de62ffe681de5970"
            ]
        ]
    },
    {
        "id": "b095a978147c6a51",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 3320,
        "wires": [
            [
                "bfdb01a6b4194207"
            ]
        ]
    },
    {
        "id": "1292044002474fe9",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 3260,
        "wires": [
            [
                "115861715027564d",
                "d7ab5455d30ef7b0"
            ]
        ]
    },
    {
        "id": "d7ab5455d30ef7b0",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 3260,
        "wires": [
            [
                "b095a978147c6a51"
            ]
        ]
    },
    {
        "id": "86d33ca997c8574d",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "join *",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "165",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 550,
        "y": 3320,
        "wires": [
            [
                "a3f2bdaa727d4c38"
            ]
        ]
    },
    {
        "id": "bfdb01a6b4194207",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "csv structuring",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArray = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Check if inputArray is empty\nif (inputArray.length == 0) {\n    // Get the current timestamp\n    const timeNow = Date.now();\n\n    // Round to the previous 5th minute\n    const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n    // Format the rounded timestamp in \"dd-MM-yyyy HH:mm\" format\n    const currentTimestamp = `${(\"0\" + roundedTimestamp.getDate()).slice(-2)}-${(\"0\" + (roundedTimestamp.getMonth() + 1)).slice(-2)}-${roundedTimestamp.getFullYear()} ${(\"0\" + roundedTimestamp.getHours()).slice(-2)}:${(\"0\" + roundedTimestamp.getMinutes()).slice(-2)}`;\n\n    // Create an entry for the Date_Time with undefined values for all keys\n    combinedData[currentTimestamp] = { Date_Time: currentTimestamp };\n    keys.forEach(function (keyObject) {\n        combinedData[currentTimestamp][keyObject.Column_Name] = undefined;\n    });\n} else {\n    // Iterate through each array in the inputArrays\n    for (var i = 0; i < inputArray.length; i++) {\n        var currentObject = inputArray[i];\n\n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        // Format the date to the desired format\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3320,
        "wires": [
            [
                "0965b1e4094a08f0"
            ]
        ]
    },
    {
        "id": "a3f2bdaa727d4c38",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "last timestamp",
        "func": "// Sample array of arrays\nvar arraysList = msg.payload\n\n// Using map to extract the last element from each array\nvar lastElements = arraysList.map(function (arr) {\n    // Check if the array is not empty\n    if (arr.length > 0) {\n        // Return the last element\n        return arr[arr.length - 2];\n    }\n});\n\n// Filtering out undefined values (empty arrays)\nlastElements = lastElements.filter(function (element) {\n    return element !== undefined;\n});\n\nmsg.payload =lastElements\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 3320,
        "wires": [
            [
                "b095a978147c6a51"
            ]
        ]
    },
    {
        "id": "a57982033b29e838",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 3160,
        "wires": [
            [
                "4dfd580167dbd0db"
            ]
        ]
    },
    {
        "id": "22cbaabb8e1afe04",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 790,
        "y": 3520,
        "wires": [
            [
                "35127b7f37825f81"
            ]
        ]
    },
    {
        "id": "35127b7f37825f81",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part7_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 3520,
        "wires": [
            [
                "86fb5d701e4fb955"
            ]
        ]
    },
    {
        "id": "86fb5d701e4fb955",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1080,
        "y": 3520,
        "wires": [
            [
                "d2f6ca784d14aec3"
            ]
        ]
    },
    {
        "id": "d2f6ca784d14aec3",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "out1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 3520,
        "wires": []
    },
    {
        "id": "cbad9ff50b78a9f2",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC01,5m,SMU10_IDC01(A)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC02,5m,SMU10_IDC02(A)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC03,5m,SMU10_IDC03(A)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC04,5m,SMU10_IDC04(A)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC05,5m,SMU10_IDC05(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC06,5m,SMU10_IDC06(A)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC07,5m,SMU10_IDC07(A)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC08,5m,SMU10_IDC08(A)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC09,5m,SMU10_IDC09(A)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC10,5m,SMU10_IDC10(A)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC11,5m,SMU10_IDC11(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC12,5m,SMU10_IDC12(A)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC13,5m,SMU10_IDC13(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC14,5m,SMU10_IDC14(A)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC15,5m,SMU10_IDC15(A)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC16,5m,SMU10_IDC16(A)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC17,5m,SMU10_IDC17(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC18,5m,SMU10_IDC18(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC19,5m,SMU10_IDC19(A)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC20,5m,SMU10_IDC20(A)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC21,5m,SMU10_IDC21(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC22,5m,SMU10_IDC22(A)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC23,5m,SMU10_IDC23(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC01,5m,SMU11_IDC01(A)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC02,5m,SMU11_IDC02(A)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC03,5m,SMU11_IDC03(A)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC04,5m,SMU11_IDC04(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC05,5m,SMU11_IDC05(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC06,5m,SMU11_IDC06(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC07,5m,SMU11_IDC07(A)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC08,5m,SMU11_IDC08(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC09,5m,SMU11_IDC09(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC10,5m,SMU11_IDC10(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC11,5m,SMU11_IDC11(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC12,5m,SMU11_IDC12(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC13,5m,SMU11_IDC13(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC14,5m,SMU11_IDC14(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC15,5m,SMU11_IDC15(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC16,5m,SMU11_IDC16(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC17,5m,SMU11_IDC17(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC18,5m,SMU11_IDC18(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC19,5m,SMU11_IDC19(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC20,5m,SMU11_IDC20(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC21,5m,SMU11_IDC21(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC22,5m,SMU11_IDC22(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC23,5m,SMU11_IDC23(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC24,5m,SMU11_IDC24(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC01,5m,SMU12_IDC01(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC02,5m,SMU12_IDC02(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC03,5m,SMU12_IDC03(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC04,5m,SMU12_IDC04(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC05,5m,SMU12_IDC05(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC06,5m,SMU12_IDC06(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC07,5m,SMU12_IDC07(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC08,5m,SMU12_IDC08(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC09,5m,SMU12_IDC09(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC10,5m,SMU12_IDC10(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC11,5m,SMU12_IDC11(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC12,5m,SMU12_IDC12(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC13,5m,SMU12_IDC13(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC14,5m,SMU12_IDC14(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC15,5m,SMU12_IDC15(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC16,5m,SMU12_IDC16(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC17,5m,SMU12_IDC17(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC18,5m,SMU12_IDC18(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC19,5m,SMU12_IDC19(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC20,5m,SMU12_IDC20(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC21,5m,SMU12_IDC21(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC22,5m,SMU12_IDC22(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC23,5m,SMU12_IDC23(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC24,5m,SMU12_IDC24(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC01,5m,SMU13_IDC01(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC02,5m,SMU13_IDC02(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC03,5m,SMU13_IDC03(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC04,5m,SMU13_IDC04(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC05,5m,SMU13_IDC05(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC06,5m,SMU13_IDC06(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC07,5m,SMU13_IDC07(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC08,5m,SMU13_IDC08(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC09,5m,SMU13_IDC09(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC10,5m,SMU13_IDC10(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC11,5m,SMU13_IDC11(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC12,5m,SMU13_IDC12(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC13,5m,SMU13_IDC13(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC14,5m,SMU13_IDC14(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC15,5m,SMU13_IDC15(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC16,5m,SMU13_IDC16(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC17,5m,SMU13_IDC17(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC18,5m,SMU13_IDC18(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC19,5m,SMU13_IDC19(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC20,5m,SMU13_IDC20(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC21,5m,SMU13_IDC21(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC22,5m,SMU13_IDC22(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC23,5m,SMU13_IDC23(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC24,5m,SMU13_IDC24(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC01,5m,SMU14_IDC01(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC02,5m,SMU14_IDC02(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC03,5m,SMU14_IDC03(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC04,5m,SMU14_IDC04(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC05,5m,SMU14_IDC05(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC06,5m,SMU14_IDC06(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC07,5m,SMU14_IDC07(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC08,5m,SMU14_IDC08(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC09,5m,SMU14_IDC09(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC10,5m,SMU14_IDC10(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC11,5m,SMU14_IDC11(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC12,5m,SMU14_IDC12(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC13,5m,SMU14_IDC13(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC14,5m,SMU14_IDC14(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC15,5m,SMU14_IDC15(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC16,5m,SMU14_IDC16(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC17,5m,SMU14_IDC17(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC18,5m,SMU14_IDC18(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC19,5m,SMU14_IDC19(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC20,5m,SMU14_IDC20(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC21,5m,SMU14_IDC21(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC22,5m,SMU14_IDC22(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC23,5m,SMU14_IDC23(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC24,5m,SMU14_IDC24(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC01,5m,SMU15_IDC01(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC02,5m,SMU15_IDC02(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC03,5m,SMU15_IDC03(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC04,5m,SMU15_IDC04(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC05,5m,SMU15_IDC05(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC06,5m,SMU15_IDC06(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC07,5m,SMU15_IDC07(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC08,5m,SMU15_IDC08(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC09,5m,SMU15_IDC09(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC10,5m,SMU15_IDC10(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC11,5m,SMU15_IDC11(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC12,5m,SMU15_IDC12(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC13,5m,SMU15_IDC13(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC14,5m,SMU15_IDC14(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC15,5m,SMU15_IDC15(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC16,5m,SMU15_IDC16(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC17,5m,SMU15_IDC17(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC18,5m,SMU15_IDC18(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC19,5m,SMU15_IDC19(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC20,5m,SMU15_IDC20(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC21,5m,SMU15_IDC21(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC22,5m,SMU15_IDC22(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC23,5m,SMU15_IDC23(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC01,5m,SMU16_IDC01(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC02,5m,SMU16_IDC02(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC03,5m,SMU16_IDC03(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC04,5m,SMU16_IDC04(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC05,5m,SMU16_IDC05(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC06,5m,SMU16_IDC06(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC07,5m,SMU16_IDC07(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC08,5m,SMU16_IDC08(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC09,5m,SMU16_IDC09(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC10,5m,SMU16_IDC10(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC11,5m,SMU16_IDC11(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC12,5m,SMU16_IDC12(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC13,5m,SMU16_IDC13(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC14,5m,SMU16_IDC14(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC15,5m,SMU16_IDC15(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC16,5m,SMU16_IDC16(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC17,5m,SMU16_IDC17(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC18,5m,SMU16_IDC18(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC19,5m,SMU16_IDC19(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC20,5m,SMU16_IDC20(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC21,5m,SMU16_IDC21(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC22,5m,SMU16_IDC22(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC23,5m,SMU16_IDC23(A)\n",
        "output": "str",
        "x": 430,
        "y": 3260,
        "wires": [
            [
                "1292044002474fe9"
            ]
        ]
    },
    {
        "id": "045f58aeb788a0b5",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 450,
        "y": 3420,
        "wires": [
            [
                "32e674c633dd275f"
            ]
        ]
    },
    {
        "id": "6497500f7c950e0a",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 290,
        "y": 3420,
        "wires": [
            [
                "045f58aeb788a0b5"
            ]
        ]
    },
    {
        "id": "721627df33ea703e",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "read file*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/Backup.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 3420,
        "wires": [
            [
                "b00d89a0e0f9107c"
            ]
        ]
    },
    {
        "id": "b00d89a0e0f9107c",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 890,
        "y": 3420,
        "wires": [
            [
                "170548b4f3416e7a"
            ]
        ]
    },
    {
        "id": "b31d30bceea408d8",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "PART 7 final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 3420,
        "wires": []
    },
    {
        "id": "170548b4f3416e7a",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "file filtering",
        "func": "let array = msg.payload;\nlet specificDateTimeToRemove = \"Date_Time\"; // Replace with the specific Date_Time you want to remove\n\n// Use a Set to keep track of unique Date_Time values\nlet uniqueDateTimes = new Set();\n\n// Use filter to remove items with repeating Date_Time or a specific Date_Time\narray = array.filter(item => {\n    // Check if the Date_Time is unique and not equal to the specificDateTimeToRemove\n    if (!uniqueDateTimes.has(item.Date_Time) && item.Date_Time !== specificDateTimeToRemove) {\n        uniqueDateTimes.add(item.Date_Time);\n        return true; // Keep the item in the array\n    }\n    return false; // Remove the item from the array\n});\n\nmsg.payload = array;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3420,
        "wires": [
            [
                "22cbaabb8e1afe04",
                "b31d30bceea408d8"
            ]
        ]
    },
    {
        "id": "c312b6db60696786",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": " check today obj*",
        "func": "let obj_date = msg.payload.Date_Time;\nlet dateComponents = obj_date.split(' ');\nlet datePart = dateComponents[0];\n\nvar dateObject = new Date();\ndateObject.setMinutes(dateObject.getMinutes());\n// Format the date to the desired format\nvar formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\nvar todayDate = formattedDate.split(' ')[0];\n\nif (datePart == todayDate) {\n    flow.set(\"Amplus_Alex_Bikaner_SMU_Part7_filename\", todayDate);\n    return msg;\n} else {\n    node.warn(`Date did not match: obj_date=${obj_date}, todayDate=${todayDate}`);\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 3320,
        "wires": [
            [
                "6497500f7c950e0a"
            ]
        ]
    },
    {
        "id": "32e674c633dd275f",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "5s",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 3420,
        "wires": [
            [
                "721627df33ea703e"
            ]
        ]
    },
    {
        "id": "4dfd580167dbd0db",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "back up file delete*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 350,
        "y": 3160,
        "wires": [
            [
                "3b186669d8495c49"
            ]
        ]
    },
    {
        "id": "3b186669d8495c49",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "debug 1828",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3160,
        "wires": []
    },
    {
        "id": "0965b1e4094a08f0",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "last obj",
        "func": "let arrayOfObjects=msg.payload\n// Check if the array is not empty\nif (arrayOfObjects.length > 0) {\n    // Extract the last object from the array\n    var lastObject = arrayOfObjects[arrayOfObjects.length - 1];\nmsg.payload=lastObject\n\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 3320,
        "wires": [
            [
                "c312b6db60696786"
            ]
        ]
    },
    {
        "id": "de62ffe681de5970",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "e1765f3b89cb077b",
        "name": "25s",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 3260,
        "wires": [
            [
                "cbad9ff50b78a9f2"
            ]
        ]
    },
    {
        "id": "83991afe95fd2460",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "name": "FTP OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 3640,
        "wires": []
    },
    {
        "id": "f99ea512607bf75c",
        "type": "ftp in",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "ftp": "",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 790,
        "y": 3640,
        "wires": [
            [
                "83991afe95fd2460"
            ]
        ]
    },
    {
        "id": "8ba094ca4ccf4f51",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "name": "FTP Path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part7_filename\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_SMU_Part5/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3640,
        "wires": [
            [
                "f99ea512607bf75c"
            ]
        ]
    },
    {
        "id": "fcf03439c8785fe6",
        "type": "file in",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 3640,
        "wires": [
            [
                "8ba094ca4ccf4f51"
            ]
        ]
    },
    {
        "id": "168334f808c94a81",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"Amplus_Alex_Bikaner_SMU_Part7_filename\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/\"+ date +\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 3640,
        "wires": [
            [
                "fcf03439c8785fe6"
            ]
        ]
    },
    {
        "id": "16645f4c07af3ed9",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "b8a01f49c2522842",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 3640,
        "wires": [
            [
                "168334f808c94a81"
            ]
        ]
    },
    {
        "id": "879d1ef990479a3c",
        "type": "join",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "248",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 3860,
        "wires": [
            [
                "3e2427880bedc1e4"
            ]
        ]
    },
    {
        "id": "daef74ca926fb9de",
        "type": "influxdb in",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "influxdb": "97aa7216add6f559",
        "name": "influx",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 590,
        "y": 3860,
        "wires": [
            [
                "879d1ef990479a3c"
            ]
        ]
    },
    {
        "id": "3e2427880bedc1e4",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 3820,
        "wires": [
            [
                "3c1c36a549b469f9"
            ]
        ]
    },
    {
        "id": "0bb9b5dc6709ec5f",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 3780,
        "wires": [
            [
                "4e7762ab2d7f1f3b",
                "d1ae84d47e101ff8"
            ]
        ]
    },
    {
        "id": "4e7762ab2d7f1f3b",
        "type": "change",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 3780,
        "wires": [
            [
                "3e2427880bedc1e4"
            ]
        ]
    },
    {
        "id": "7b7600c3aa9c4ff4",
        "type": "template",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n246,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)\n247,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n248,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC24,5m,SMU9_IDC24(A)",
        "output": "str",
        "x": 430,
        "y": 3780,
        "wires": [
            [
                "0bb9b5dc6709ec5f"
            ]
        ]
    },
    {
        "id": "3c1c36a549b469f9",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "csv structurising",
        "func": "\nlet keys = msg.payload.keys\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each array in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current inner array\n    var innerArray = inputArrays[i];\n\n    // Iterate through each object in the inner array\n    for (var j = 0; j < innerArray.length; j++) {\n        // Get the current object\n        var currentObject = innerArray[j];\n    \n        // Extract Date_Time and value from the current object using the new keys array\n        var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n        var keyValue = extractValues(currentObject, keys);\n        var dateObject = new Date(currentObject._time);\n\n        dateObject.setMinutes(dateObject.getMinutes() - 5);\n        var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n\n        // Check if the Date_Time already exists in the combinedData object\n        if (!combinedData[Date_Time]) {\n            // If not, create an entry for that Date_Time\n            combinedData[Date_Time] = {\n                Date_Time: formattedDate\n            };\n        }\n\n        // Add the key-value pair to the object for the Date_Time\n        if (keyValue !== undefined) {\n            combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n        }\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3820,
        "wires": [
            [
                "f559b18828cdd0b6",
                "a1d3d258557d1936"
            ]
        ]
    },
    {
        "id": "d1ae84d47e101ff8",
        "type": "function",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": " Amplus_Alex_Bikaner_SMU_Part7",
        "func": "for (let i = 0; i < msg.payload.length; i++) {\n\n  let P = msg.payload[i].P\n  let BD = msg.payload[i].BD\n  let device = msg.payload[i].device\n  let field = msg.payload[i].field\n  let Bucket = msg.payload[i].Bucket\n  let Table = msg.payload[i].Table\n  let Frequency = msg.payload[i].Frequency\n\n  var $today = new Date();\n  var d = new Date($today);\n  d.setDate($today.getDate());\n  d.setHours(0, 0, 0, 0);\n  var tstart = d.getTime();\n  // Get the current date and time\n  const timeNow = Date.now();\n\n  // Round to the previous 5th minute\n  const roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n  // Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n  //currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n  //var tstart = currentDate.getTime();\n  let tend = roundedTimestamp.getTime()\n\n  const startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\n  const endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n  let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> fill(column: \"_value\", usePrevious: true) |> yield(name: \"${device}_${field}\")`\n\n  msg.query = q\n  node.send(msg);\n  msg.test = { tstart, tend }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3860,
        "wires": [
            [
                "daef74ca926fb9de"
            ]
        ]
    },
    {
        "id": "f010eeb5a0cda1d5",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "debug 1829",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 3820,
        "wires": []
    },
    {
        "id": "f559b18828cdd0b6",
        "type": "csv",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1190,
        "y": 3820,
        "wires": [
            [
                "4a3dc037c9824ae2"
            ]
        ]
    },
    {
        "id": "4a3dc037c9824ae2",
        "type": "file",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "back up file save*",
        "filename": "/data/ftp/Amplus_Alex_Bikaner_SMU_Part7/Backup.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1370,
        "y": 3820,
        "wires": [
            [
                "f010eeb5a0cda1d5"
            ]
        ]
    },
    {
        "id": "a1d3d258557d1936",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "debug 1830",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 3920,
        "wires": []
    },
    {
        "id": "1c712778b8d885ce",
        "type": "delay",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "50s",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 3760,
        "wires": [
            [
                "7b7600c3aa9c4ff4"
            ]
        ]
    },
    {
        "id": "fe2423b5bb0ec751",
        "type": "cronplus",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */30 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 3780,
        "wires": [
            [
                "1c712778b8d885ce"
            ]
        ]
    },
    {
        "id": "63c010b6aee6559e",
        "type": "catch",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "",
        "scope": [
            "daef74ca926fb9de"
        ],
        "uncaught": false,
        "x": 270,
        "y": 3940,
        "wires": [
            [
                "797a849dc50e0e48"
            ]
        ]
    },
    {
        "id": "797a849dc50e0e48",
        "type": "debug",
        "z": "b338dc37820f661d",
        "g": "2314625661a890a3",
        "name": "debug 1831",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 3940,
        "wires": []
    },
    {
        "id": "0703b1907afa22b9",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "81ee69ecb0c0f5b1"
            ]
        ]
    },
    {
        "id": "afd8d3ddfca875b5",
        "type": "csv",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "0703b1907afa22b9",
                "3dc2a7393754f550"
            ]
        ]
    },
    {
        "id": "d069ba5d245f7bea",
        "type": "template",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,WS03,Solar_Radiation,5m,\"GHI Irradiation(W/m2)\"\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,WS02,Solar_Radiation,5m,\"Tilt Irradiation(W/m2)\"\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN1,NaN ,5m, \"Module_Temperature(Deg_C)\"\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN2,NaN,5m, \"Wind Speed(m/s)\"\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN3,NaN,5m, \"Wind Direction(m/s)\"\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN4,NaN,5m, \"Air Temperature(Deg_C)\"\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN5,NaN,5m, \"Relative_Humidity(%)\"\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,NaN6,NaN,5m, \"Rain_Fall(%)\"\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PAC,5m,VCB_EM_Active_Power(kW)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,QAC,5m,VCB_EM_Reactive_Power(kVAr)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,PF,5m,VCB_EM_Power_Factor(-)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,UAC,5m,VCB_EM_AC_Voltage(V)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,IAC,5m,VCB_EM_AC_Current(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM02,EAE,5m,VCB_EM_Meter_Reading(kWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PAC,5m,INV_AUX_EM_Active_Power(kW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,QAC,5m,INV_AUX_EM_Reactive_Power(kVAr)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,PF,5m,INV_AUX_EM_Power_Factor(-)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,UAC,5m,INV_AUX_EM_AC_Voltage(V)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,IAC,5m,INV_AUX_EM_AC_Current(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM01,EAE,5m,INV_AUX_EM_Meter_Reading(kWh)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PAC,5m,ACDB_EM_Active_Power(kW)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,QAC,5m,ACDB_EM_Reactive_Power(kVAr)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,PF,5m,ACDB_EM_Power_Factor(-)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,UAC,5m,ACDB_EM_AC_Voltage(V)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,IAC,5m,ACDB_EM_AC_Current(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,EM03,EAE,5m,ACDB_EM_Meter_Reading(kWh)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,PAC,5m,INV1_AC_Power(kW)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UAC,5m,INV1_AC_Voltage(V)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IAC,5m,INV1_AC_Current(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,UDC,5m,INV1_DC_Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,IDC,5m,INV1_DC_Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV01,FAC,5m,INV1_Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,PAC,5m,INV2_AC_Power(kW)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UAC,5m,INV2_AC_Voltage(V)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IAC,5m,INV2_AC_Current(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,UDC,5m,INV2_DC_Voltage(V)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,IDC,5m,INV2_DC_Current(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,INV02,FAC,5m,INV2_Frequency(Hz)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC01,5m,SMU1_IDC1(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC02,5m,SMU1_IDC2(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC03,5m,SMU1_IDC3(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC04,5m,SMU1_IDC4(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC05,5m,SMU1_IDC5(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC06,5m,SMU1_IDC6(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC07,5m,SMU1_IDC7(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC08,5m,SMU1_IDC8(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC09,5m,SMU1_IDC9(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC10,5m,SMU1_IDC10(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC11,5m,SMU1_IDC11(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC12,5m,SMU1_IDC12(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC13,5m,SMU1_IDC13(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC14,5m,SMU1_IDC14(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC15,5m,SMU1_IDC15(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC16,5m,SMU1_IDC16(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC17,5m,SMU1_IDC17(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC18,5m,SMU1_IDC18(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC19,5m,SMU1_IDC19(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC20,5m,SMU1_IDC20(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC21,5m,SMU1_IDC21(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC22,5m,SMU1_IDC22(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC23,5m,SMU1_IDC23(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU01,IDC24,5m,SMU1_IDC24(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC01,5m,SMU2_IDC1(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC02,5m,SMU2_IDC2(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC03,5m,SMU2_IDC3(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC04,5m,SMU2_IDC4(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC05,5m,SMU2_IDC5(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC06,5m,SMU2_IDC6(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC07,5m,SMU2_IDC7(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC08,5m,SMU2_IDC8(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC09,5m,SMU2_IDC9(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC10,5m,SMU2_IDC10(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC11,5m,SMU2_IDC11(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC12,5m,SMU2_IDC12(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC13,5m,SMU2_IDC13(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC14,5m,SMU2_IDC14(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC15,5m,SMU2_IDC15(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC16,5m,SMU2_IDC16(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC17,5m,SMU2_IDC17(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC18,5m,SMU2_IDC18(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC19,5m,SMU2_IDC19(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC20,5m,SMU2_IDC20(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC21,5m,SMU2_IDC21(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC22,5m,SMU2_IDC22(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC23,5m,SMU2_IDC23(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU02,IDC24,5m,SMU2_IDC24(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC01,5m,SMU3_IDC1(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC02,5m,SMU3_IDC2(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC03,5m,SMU3_IDC3(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC04,5m,SMU3_IDC4(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC05,5m,SMU3_IDC5(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC06,5m,SMU3_IDC6(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC07,5m,SMU3_IDC7(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC08,5m,SMU3_IDC8(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC09,5m,SMU3_IDC9(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC10,5m,SMU3_IDC10(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC11,5m,SMU3_IDC11(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC12,5m,SMU3_IDC12(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC13,5m,SMU3_IDC13(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC14,5m,SMU3_IDC14(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC15,5m,SMU3_IDC15(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC16,5m,SMU3_IDC16(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC17,5m,SMU3_IDC17(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC18,5m,SMU3_IDC18(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC19,5m,SMU3_IDC19(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC20,5m,SMU3_IDC20(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC21,5m,SMU3_IDC21(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC22,5m,SMU3_IDC22(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC23,5m,SMU3_IDC23(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU03,IDC24,5m,SMU3_IDC24(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC01,5m,SMU4_IDC1(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC02,5m,SMU4_IDC2(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC03,5m,SMU4_IDC3(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC04,5m,SMU4_IDC4(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC05,5m,SMU4_IDC5(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC06,5m,SMU4_IDC6(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC07,5m,SMU4_IDC7(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC08,5m,SMU4_IDC8(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC09,5m,SMU4_IDC9(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC10,5m,SMU4_IDC10(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC11,5m,SMU4_IDC11(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC12,5m,SMU4_IDC12(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC13,5m,SMU4_IDC13(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC14,5m,SMU4_IDC14(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC15,5m,SMU4_IDC15(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC16,5m,SMU4_IDC16(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC17,5m,SMU4_IDC17(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC18,5m,SMU4_IDC18(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC19,5m,SMU4_IDC19(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC20,5m,SMU4_IDC20(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC21,5m,SMU4_IDC21(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC22,5m,SMU4_IDC22(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC23,5m,SMU4_IDC23(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU04,IDC24,5m,SMU4_IDC24(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC01,5m,SMU5_IDC1(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC02,5m,SMU5_IDC2(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC03,5m,SMU5_IDC3(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC04,5m,SMU5_IDC4(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC05,5m,SMU5_IDC5(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC06,5m,SMU5_IDC6(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC07,5m,SMU5_IDC7(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC08,5m,SMU5_IDC8(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC09,5m,SMU5_IDC9(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC10,5m,SMU5_IDC10(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC11,5m,SMU5_IDC11(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC12,5m,SMU5_IDC12(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC13,5m,SMU5_IDC13(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC14,5m,SMU5_IDC14(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC15,5m,SMU5_IDC15(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC16,5m,SMU5_IDC16(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC17,5m,SMU5_IDC17(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC18,5m,SMU5_IDC18(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC19,5m,SMU5_IDC19(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC20,5m,SMU5_IDC20(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC21,5m,SMU5_IDC21(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC22,5m,SMU5_IDC22(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC23,5m,SMU5_IDC23(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU05,IDC24,5m,SMU5_IDC24(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC01,5m,SMU6_IDC1(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC02,5m,SMU6_IDC2(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC03,5m,SMU6_IDC3(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC04,5m,SMU6_IDC4(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC05,5m,SMU6_IDC5(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC06,5m,SMU6_IDC6(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC07,5m,SMU6_IDC7(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC08,5m,SMU6_IDC8(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC09,5m,SMU6_IDC9(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC10,5m,SMU6_IDC10(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC11,5m,SMU6_IDC11(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC12,5m,SMU6_IDC12(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC13,5m,SMU6_IDC13(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC14,5m,SMU6_IDC14(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC15,5m,SMU6_IDC15(A)\n166,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC16,5m,SMU6_IDC16(A)\n167,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC17,5m,SMU6_IDC17(A)\n168,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC18,5m,SMU6_IDC18(A)\n169,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC19,5m,SMU6_IDC19(A)\n170,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC20,5m,SMU6_IDC20(A)\n171,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC21,5m,SMU6_IDC21(A)\n172,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC22,5m,SMU6_IDC22(A)\n173,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC23,5m,SMU6_IDC23(A)\n174,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU06,IDC24,5m,SMU6_IDC24(A)\n175,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC01,5m,SMU7_IDC1(A)\n176,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC02,5m,SMU7_IDC2(A)\n177,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC03,5m,SMU7_IDC3(A)\n178,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC04,5m,SMU7_IDC4(A)\n179,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC05,5m,SMU7_IDC5(A)\n180,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC06,5m,SMU7_IDC6(A)\n181,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC07,5m,SMU7_IDC7(A)\n182,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC08,5m,SMU7_IDC8(A)\n183,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC09,5m,SMU7_IDC9(A)\n184,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC10,5m,SMU7_IDC10(A)\n185,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC11,5m,SMU7_IDC11(A)\n186,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC12,5m,SMU7_IDC12(A)\n187,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC13,5m,SMU7_IDC13(A)\n188,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC14,5m,SMU7_IDC14(A)\n189,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC15,5m,SMU7_IDC15(A)\n190,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC16,5m,SMU7_IDC16(A)\n191,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC17,5m,SMU7_IDC17(A)\n192,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC18,5m,SMU7_IDC18(A)\n193,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC19,5m,SMU7_IDC19(A)\n194,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC20,5m,SMU7_IDC20(A)\n195,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC21,5m,SMU7_IDC21(A)\n196,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC22,5m,SMU7_IDC22(A)\n197,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC23,5m,SMU7_IDC23(A)\n198,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU07,IDC24,5m,SMU7_IDC24(A)\n199,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC01,5m,SMU8_IDC1(A)\n200,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC02,5m,SMU8_IDC2(A)\n201,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC03,5m,SMU8_IDC3(A)\n202,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC04,5m,SMU8_IDC4(A)\n203,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC05,5m,SMU8_IDC5(A)\n204,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC06,5m,SMU8_IDC6(A)\n205,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC07,5m,SMU8_IDC7(A)\n206,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC08,5m,SMU8_IDC8(A)\n207,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC09,5m,SMU8_IDC9(A)\n208,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC10,5m,SMU8_IDC10(A)\n209,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC11,5m,SMU8_IDC11(A)\n210,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC12,5m,SMU8_IDC12(A)\n211,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC13,5m,SMU8_IDC13(A)\n212,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC14,5m,SMU8_IDC14(A)\n213,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC15,5m,SMU8_IDC15(A)\n214,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC16,5m,SMU8_IDC16(A)\n215,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC17,5m,SMU8_IDC17(A)\n216,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC18,5m,SMU8_IDC18(A)\n217,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC19,5m,SMU8_IDC19(A)\n218,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC20,5m,SMU8_IDC20(A)\n219,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC21,5m,SMU8_IDC21(A)\n220,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC22,5m,SMU8_IDC22(A)\n221,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC23,5m,SMU8_IDC23(A)\n222,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU08,IDC24,5m,SMU8_IDC24(A)\n223,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC01,5m,SMU9_IDC1(A)\n224,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC02,5m,SMU9_IDC2(A)\n225,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC03,5m,SMU9_IDC3(A)\n226,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC04,5m,SMU9_IDC4(A)\n227,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC05,5m,SMU9_IDC5(A)\n228,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC06,5m,SMU9_IDC6(A)\n229,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC07,5m,SMU9_IDC7(A)\n230,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC08,5m,SMU9_IDC8(A)\n231,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC09,5m,SMU9_IDC9(A)\n232,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC10,5m,SMU9_IDC10(A)\n233,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC11,5m,SMU9_IDC11(A)\n234,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC12,5m,SMU9_IDC12(A)\n235,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC13,5m,SMU9_IDC13(A)\n236,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC14,5m,SMU9_IDC14(A)\n237,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC15,5m,SMU9_IDC15(A)\n238,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC16,5m,SMU9_IDC16(A)\n239,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC17,5m,SMU9_IDC17(A)\n240,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC18,5m,SMU9_IDC18(A)\n241,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC19,5m,SMU9_IDC19(A)\n242,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC20,5m,SMU9_IDC20(A)\n243,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC21,5m,SMU9_IDC21(A)\n244,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC22,5m,SMU9_IDC22(A)\n245,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU09,IDC23,5m,SMU9_IDC23(A)\n",
        "output": "str",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "afd8d3ddfca875b5"
            ]
        ]
    },
    {
        "id": "81ee69ecb0c0f5b1",
        "type": "influxdb in",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "b96ed7e276ba0ee0"
            ]
        ]
    },
    {
        "id": "3dc2a7393754f550",
        "type": "change",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 160,
        "wires": [
            [
                "b96ed7e276ba0ee0"
            ]
        ]
    },
    {
        "id": "5d01de10e933bde8",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "a847e9347490aa81"
            ]
        ]
    },
    {
        "id": "527d5cf51e926482",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 200,
        "wires": [
            [
                "6d7f010f5886b62d"
            ]
        ]
    },
    {
        "id": "6d7f010f5886b62d",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "a44134e53ce4e8c7",
                "a74d98879acb83c6"
            ]
        ]
    },
    {
        "id": "b96ed7e276ba0ee0",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 200,
        "wires": [
            [
                "527d5cf51e926482",
                "16902f25a843c95b"
            ]
        ]
    },
    {
        "id": "b5abf0b433504157",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "2mw",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 280,
        "wires": []
    },
    {
        "id": "19887618051f8ad8",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "query",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 820,
        "wires": [
            [
                "510136b61e2222da"
            ]
        ]
    },
    {
        "id": "f4fc506bf64bdc6e",
        "type": "csv",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 610,
        "y": 740,
        "wires": [
            [
                "19887618051f8ad8",
                "c30f6a23bd149c9c"
            ]
        ]
    },
    {
        "id": "f0c88c371fd40a55",
        "type": "template",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC01,5m,SMU10_IDC01(A)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC02,5m,SMU10_IDC02(A)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC03,5m,SMU10_IDC03(A)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC04,5m,SMU10_IDC04(A)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC05,5m,SMU10_IDC05(A)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC06,5m,SMU10_IDC06(A)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC07,5m,SMU10_IDC07(A)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC08,5m,SMU10_IDC08(A)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC09,5m,SMU10_IDC09(A)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC10,5m,SMU10_IDC10(A)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC11,5m,SMU10_IDC11(A)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC12,5m,SMU10_IDC12(A)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC13,5m,SMU10_IDC13(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC14,5m,SMU10_IDC14(A)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC15,5m,SMU10_IDC15(A)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC16,5m,SMU10_IDC16(A)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC17,5m,SMU10_IDC17(A)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC18,5m,SMU10_IDC18(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC19,5m,SMU10_IDC19(A)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC20,5m,SMU10_IDC20(A)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC21,5m,SMU10_IDC21(A)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC22,5m,SMU10_IDC22(A)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU10,IDC23,5m,SMU10_IDC23(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC01,5m,SMU11_IDC01(A)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC02,5m,SMU11_IDC02(A)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC03,5m,SMU11_IDC03(A)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC04,5m,SMU11_IDC04(A)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC05,5m,SMU11_IDC05(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC06,5m,SMU11_IDC06(A)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC07,5m,SMU11_IDC07(A)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC08,5m,SMU11_IDC08(A)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC09,5m,SMU11_IDC09(A)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC10,5m,SMU11_IDC10(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC11,5m,SMU11_IDC11(A)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC12,5m,SMU11_IDC12(A)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC13,5m,SMU11_IDC13(A)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC14,5m,SMU11_IDC14(A)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC15,5m,SMU11_IDC15(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC16,5m,SMU11_IDC16(A)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC17,5m,SMU11_IDC17(A)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC18,5m,SMU11_IDC18(A)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC19,5m,SMU11_IDC19(A)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC20,5m,SMU11_IDC20(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC21,5m,SMU11_IDC21(A)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC22,5m,SMU11_IDC22(A)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC23,5m,SMU11_IDC23(A)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU11,IDC24,5m,SMU11_IDC24(A)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC01,5m,SMU12_IDC01(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC02,5m,SMU12_IDC02(A)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC03,5m,SMU12_IDC03(A)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC04,5m,SMU12_IDC04(A)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC05,5m,SMU12_IDC05(A)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC06,5m,SMU12_IDC06(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC07,5m,SMU12_IDC07(A)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC08,5m,SMU12_IDC08(A)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC09,5m,SMU12_IDC09(A)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC10,5m,SMU12_IDC10(A)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC11,5m,SMU12_IDC11(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC12,5m,SMU12_IDC12(A)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC13,5m,SMU12_IDC13(A)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC14,5m,SMU12_IDC14(A)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC15,5m,SMU12_IDC15(A)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC16,5m,SMU12_IDC16(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC17,5m,SMU12_IDC17(A)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC18,5m,SMU12_IDC18(A)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC19,5m,SMU12_IDC19(A)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC20,5m,SMU12_IDC20(A)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC21,5m,SMU12_IDC21(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC22,5m,SMU12_IDC22(A)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC23,5m,SMU12_IDC23(A)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU12,IDC24,5m,SMU12_IDC24(A)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC01,5m,SMU13_IDC01(A)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC02,5m,SMU13_IDC02(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC03,5m,SMU13_IDC03(A)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC04,5m,SMU13_IDC04(A)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC05,5m,SMU13_IDC05(A)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC06,5m,SMU13_IDC06(A)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC07,5m,SMU13_IDC07(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC08,5m,SMU13_IDC08(A)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC09,5m,SMU13_IDC09(A)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC10,5m,SMU13_IDC10(A)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC11,5m,SMU13_IDC11(A)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC12,5m,SMU13_IDC12(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC13,5m,SMU13_IDC13(A)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC14,5m,SMU13_IDC14(A)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC15,5m,SMU13_IDC15(A)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC16,5m,SMU13_IDC16(A)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC17,5m,SMU13_IDC17(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC18,5m,SMU13_IDC18(A)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC19,5m,SMU13_IDC19(A)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC20,5m,SMU13_IDC20(A)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC21,5m,SMU13_IDC21(A)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC22,5m,SMU13_IDC22(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC23,5m,SMU13_IDC23(A)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU13,IDC24,5m,SMU13_IDC24(A)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC01,5m,SMU14_IDC01(A)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC02,5m,SMU14_IDC02(A)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC03,5m,SMU14_IDC03(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC04,5m,SMU14_IDC04(A)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC05,5m,SMU14_IDC05(A)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC06,5m,SMU14_IDC06(A)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC07,5m,SMU14_IDC07(A)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC08,5m,SMU14_IDC08(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC09,5m,SMU14_IDC09(A)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC10,5m,SMU14_IDC10(A)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC11,5m,SMU14_IDC11(A)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC12,5m,SMU14_IDC12(A)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC13,5m,SMU14_IDC13(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC14,5m,SMU14_IDC14(A)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC15,5m,SMU14_IDC15(A)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC16,5m,SMU14_IDC16(A)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC17,5m,SMU14_IDC17(A)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC18,5m,SMU14_IDC18(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC19,5m,SMU14_IDC19(A)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC20,5m,SMU14_IDC20(A)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC21,5m,SMU14_IDC21(A)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC22,5m,SMU14_IDC22(A)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC23,5m,SMU14_IDC23(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU14,IDC24,5m,SMU14_IDC24(A)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC01,5m,SMU15_IDC01(A)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC02,5m,SMU15_IDC02(A)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC03,5m,SMU15_IDC03(A)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC04,5m,SMU15_IDC04(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC05,5m,SMU15_IDC05(A)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC06,5m,SMU15_IDC06(A)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC07,5m,SMU15_IDC07(A)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC08,5m,SMU15_IDC08(A)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC09,5m,SMU15_IDC09(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC10,5m,SMU15_IDC10(A)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC11,5m,SMU15_IDC11(A)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC12,5m,SMU15_IDC12(A)\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC13,5m,SMU15_IDC13(A)\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC14,5m,SMU15_IDC14(A)\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC15,5m,SMU15_IDC15(A)\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC16,5m,SMU15_IDC16(A)\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC17,5m,SMU15_IDC17(A)\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC18,5m,SMU15_IDC18(A)\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC19,5m,SMU15_IDC19(A)\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC20,5m,SMU15_IDC20(A)\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC21,5m,SMU15_IDC21(A)\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC22,5m,SMU15_IDC22(A)\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU15,IDC23,5m,SMU15_IDC23(A)\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC01,5m,SMU16_IDC01(A)\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC02,5m,SMU16_IDC02(A)\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC03,5m,SMU16_IDC03(A)\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC04,5m,SMU16_IDC04(A)\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC05,5m,SMU16_IDC05(A)\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC06,5m,SMU16_IDC06(A)\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC07,5m,SMU16_IDC07(A)\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC08,5m,SMU16_IDC08(A)\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC09,5m,SMU16_IDC09(A)\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC10,5m,SMU16_IDC10(A)\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC11,5m,SMU16_IDC11(A)\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC12,5m,SMU16_IDC12(A)\n155,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC13,5m,SMU16_IDC13(A)\n156,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC14,5m,SMU16_IDC14(A)\n157,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC15,5m,SMU16_IDC15(A)\n158,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC16,5m,SMU16_IDC16(A)\n159,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC17,5m,SMU16_IDC17(A)\n160,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC18,5m,SMU16_IDC18(A)\n161,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC19,5m,SMU16_IDC19(A)\n162,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC20,5m,SMU16_IDC20(A)\n163,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC21,5m,SMU16_IDC21(A)\n164,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC22,5m,SMU16_IDC22(A)\n165,amplusmicrogrid,v,Amplus CK Motherson,Amplus Arjun 2MW,SMU16,IDC23,5m,SMU16_IDC23(A)\n",
        "output": "str",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "f4fc506bf64bdc6e"
            ]
        ]
    },
    {
        "id": "510136b61e2222da",
        "type": "influxdb in",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "influxdb": "97aa7216add6f559",
        "name": "influx part 2 *",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 770,
        "y": 820,
        "wires": [
            [
                "c6f4463f8ba5512e"
            ]
        ]
    },
    {
        "id": "c30f6a23bd149c9c",
        "type": "change",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 740,
        "wires": [
            [
                "c6f4463f8ba5512e"
            ]
        ]
    },
    {
        "id": "ce7a076cc069ef26",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 740,
        "wires": [
            [
                "64133fad3353e0f9"
            ]
        ]
    },
    {
        "id": "4906042f8a8be640",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\", TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 760,
        "wires": [
            [
                "634ed824dab053ef"
            ]
        ]
    },
    {
        "id": "634ed824dab053ef",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 760,
        "wires": [
            [
                "f68950d0788f656d"
            ]
        ]
    },
    {
        "id": "c6f4463f8ba5512e",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 760,
        "wires": [
            [
                "4906042f8a8be640"
            ]
        ]
    },
    {
        "id": "64133fad3353e0f9",
        "type": "delay",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 720,
        "wires": [
            [
                "f0c88c371fd40a55"
            ]
        ]
    },
    {
        "id": "39429496d856c7f8",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "part2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 820,
        "wires": []
    },
    {
        "id": "f68950d0788f656d",
        "type": "csv",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1390,
        "y": 760,
        "wires": [
            [
                "736b1ad2a0740829"
            ]
        ]
    },
    {
        "id": "736b1ad2a0740829",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_Arjun_2MW_Part2/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 820,
        "wires": [
            [
                "c8311b5948a74cd6"
            ]
        ]
    },
    {
        "id": "c8311b5948a74cd6",
        "type": "file",
        "z": "979a635b04d6eba7",
        "g": "5ff011ff93eab335",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 820,
        "wires": [
            [
                "39429496d856c7f8"
            ]
        ]
    },
    {
        "id": "a44134e53ce4e8c7",
        "type": "csv",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1370,
        "y": 200,
        "wires": [
            [
                "d890a22553db89ab"
            ]
        ]
    },
    {
        "id": "d890a22553db89ab",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_Arjun_2MW/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "84e96492ce32f829"
            ]
        ]
    },
    {
        "id": "84e96492ce32f829",
        "type": "file",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "b5abf0b433504157"
            ]
        ]
    },
    {
        "id": "a847e9347490aa81",
        "type": "delay",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "d069ba5d245f7bea"
            ]
        ]
    },
    {
        "id": "3329bc593d3d0697",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "debug 1698",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "71803bf86235e467",
        "type": "ftp in",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "3329bc593d3d0697"
            ]
        ]
    },
    {
        "id": "6c6ccd2ae3482cf7",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amp_Arjun_2MW/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "71803bf86235e467"
            ]
        ]
    },
    {
        "id": "8598c29ba3720969",
        "type": "file in",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 680,
        "y": 420,
        "wires": [
            [
                "6c6ccd2ae3482cf7"
            ]
        ]
    },
    {
        "id": "461b9c304fed7b04",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_Arjun_2MW/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 420,
        "wires": [
            [
                "8598c29ba3720969"
            ]
        ]
    },
    {
        "id": "bbea109d968ea512",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "461b9c304fed7b04"
            ]
        ]
    },
    {
        "id": "af3f4e267f5856fc",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "debug 1699",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 520,
        "wires": []
    },
    {
        "id": "6621abc93fc268e2",
        "type": "ftp in",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "af3f4e267f5856fc"
            ]
        ]
    },
    {
        "id": "a77b4545e7c725ad",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_Arjun_2MW\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "6621abc93fc268e2"
            ]
        ]
    },
    {
        "id": "a04aa63686dfbfb9",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "3cfccd211c7e674a",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "a77b4545e7c725ad"
            ]
        ]
    },
    {
        "id": "7079492cb0abef3b",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "debug 1700",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 960,
        "wires": []
    },
    {
        "id": "aba144d5dcf90bcb",
        "type": "ftp in",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 960,
        "wires": [
            [
                "7079492cb0abef3b",
                "e80e620a1979416f"
            ]
        ]
    },
    {
        "id": "95a7ec4f1cc68ca1",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amp_Arjun_2MW_PART2/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 960,
        "wires": [
            [
                "aba144d5dcf90bcb"
            ]
        ]
    },
    {
        "id": "293833f9d4c836e4",
        "type": "file in",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 960,
        "wires": [
            [
                "95a7ec4f1cc68ca1"
            ]
        ]
    },
    {
        "id": "a2afbedc1023a5d5",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "local path*",
        "func": "var date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_Arjun_2MW_Part2/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 960,
        "wires": [
            [
                "293833f9d4c836e4"
            ]
        ]
    },
    {
        "id": "9b6231ba446f6cbf",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 400,
        "y": 960,
        "wires": [
            [
                "a2afbedc1023a5d5"
            ]
        ]
    },
    {
        "id": "59857cd1457453a1",
        "type": "cronplus",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "cbf2887ca64a92dc"
            ]
        ]
    },
    {
        "id": "cbf2887ca64a92dc",
        "type": "function",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_Arjun_2MW_PART2\" \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "8fbbb50106a2f17c"
            ]
        ]
    },
    {
        "id": "8fbbb50106a2f17c",
        "type": "ftp in",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "e80e620a1979416f"
            ]
        ]
    },
    {
        "id": "e80e620a1979416f",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "d3dc54a0b135432b",
        "name": "debug 1701",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a74d98879acb83c6",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "2mw",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 160,
        "wires": []
    },
    {
        "id": "16902f25a843c95b",
        "type": "debug",
        "z": "979a635b04d6eba7",
        "g": "87f302aa111a01de",
        "name": "2mw",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "fde37177b9f702fc",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "c2bdb76861b10b18"
            ]
        ]
    },
    {
        "id": "e9e93fafc1b8ceba",
        "type": "csv",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "fde37177b9f702fc",
                "4ab06537b86cb7c8"
            ]
        ]
    },
    {
        "id": "78786f86332112ad",
        "type": "template",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_WS,Solar_Radiation,5m,Irradiation(W/m2)\n2,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_WS,Module_Temperature,5m,Module Temperature(Deg C)\n3,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM03,PAC,5m,EM Forward Active Power(MW)\n4,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM03,EAE,5m,EM Meter Reading(MWh)\n5,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM01,PAC,5m,Incomer_EM1 Forward Active Power(MW)\n6,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM01,EAE,5m,Incomer_EM1 Meter Reading(MWh)\n7,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM02,PAC,5m,Incomer_EM2 Forward Active Power(MW)\n8,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM02,EAE,5m,Incomer_EM2 Meter Reading(MWh)\n9,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM04,PAC,5m,Aux_EM Forward Active Power(MW)\n10,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,CR_EM04,EAE,5m,Aux_EM Meter Reading(MWh)\n11,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,PAC,5m,B01_Master AC Power(kW)\n12,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,UDC,5m,B01_Master DC Voltage(V)\n13,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,IDC,5m,B01_Master DC Current(A)\n14,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,FAC,5m,B01_Master Frequency(Hz)\n15,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,EAE,5m,B01_Master Energy_Export(kWh)\n16,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,PAC,5m,B01_Slave1 AC Power(kW)\n17,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,UDC,5m,B01_Slave1 DC Voltage(V)\n18,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,IDC,5m,B01_Slave1 DC Current(A)\n19,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,FAC,5m,B01_Slave1 Frequency(Hz)\n20,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,EAE,5m,B01_Slave1 Energy_Export(kWh)\n21,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,PAC,5m,B01_Slave2 AC Power(kW)\n22,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,UDC,5m,B01_Slave2 DC Voltage(V)\n23,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,IDC,5m,B01_Slave2 DC Current(A)\n24,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,FAC,5m,B01_Slave2 Frequency(Hz)\n25,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,EAE,5m,B01_Slave2 Energy_Export(kWh)\n26,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,PAC,5m,B01_Slave3 AC Power(kW)\n27,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,UDC,5m,B01_Slave3 DC Voltage(V)\n28,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,IDC,5m,B01_Slave3 DC Current(A)\n29,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,FAC,5m,B01_Slave3 Frequency(Hz)\n30,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,EAE,5m,B01_Slave3 Energy_Export(kWh)\n31,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,PAC,5m,B02_Master AC Power(kW)\n32,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,UDC,5m,B02_Master DC Voltage(V)\n33,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,IDC,5m,B02_Master DC Current(A)\n34,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,FAC,5m,B02_Master Frequency(Hz)\n35,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,EAE,5m,B02_Master Energy_Export(kWh)\n36,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,PAC,5m,B02_Slave1 AC Power(kW)\n37,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,UDC,5m,B02_Slave1 DC Voltage(V)\n38,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,IDC,5m,B02_Slave1 DC Current(A)\n39,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,FAC,5m,B02_Slave1 Frequency(Hz)\n40,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,EAE,5m,B02_Slave1 Energy_Export(kWh)\n41,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,PAC,5m,B02_Slave2 AC Power(kW)\n42,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,UDC,5m,B02_Slave2 DC Voltage(V)\n43,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,IDC,5m,B02_Slave2 DC Current(A)\n44,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,FAC,5m,B02_Slave2 Frequency(Hz)\n45,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,EAE,5m,B02_Slave2 Energy_Export(kWh)\n46,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,PAC,5m,B02_Slave3 AC Power(kW)\n47,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,UDC,5m,B02_Slave3 DC Voltage(V)\n48,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,IDC,5m,B02_Slave3 DC Current(A)\n49,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,FAC,5m,B02_Slave3 Frequency(Hz)\n50,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,EAE,5m,B02_Slave3 Energy_Export(kWh)\n51,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,PAC,5m,B03_Master AC Power(kW)\n52,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,UDC,5m,B03_Master DC Voltage(V)\n53,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,IDC,5m,B03_Master DC Current(A)\n54,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,FAC,5m,B03_Master Frequency(Hz)\n55,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,EAE,5m,B03_Master Energy_Export(kWh)\n56,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,PAC,5m,B03_Slave1 AC Power(kW)\n57,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,UDC,5m,B03_Slave1 DC Voltage(V)\n58,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,IDC,5m,B03_Slave1 DC Current(A)\n59,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,FAC,5m,B03_Slave1 Frequency(Hz)\n60,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,EAE,5m,B03_Slave1 Energy_Export(kWh)\n61,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,PAC,5m,B03_Slave2 AC Power(kW)\n62,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,UDC,5m,B03_Slave2 DC Voltage(V)\n63,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,IDC,5m,B03_Slave2 DC Current(A)\n64,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,FAC,5m,B03_Slave2 Frequency(Hz)\n65,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,EAE,5m,B03_Slave2 Energy_Export(kWh)\n66,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,PAC,5m,B03_Slave3 AC Power(kW)\n67,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,UDC,5m,B03_Slave3 DC Voltage(V)\n68,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,IDC,5m,B03_Slave3 DC Current(A)\n69,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,FAC,5m,B03_Slave3 Frequency(Hz)\n70,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,EAE,5m,B03_Slave3 Energy_Export(kWh)\n71,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,PAC,5m,B04_Master AC Power(kW)\n72,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,UDC,5m,B04_Master DC Voltage(V)\n73,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,IDC,5m,B04_Master DC Current(A)\n74,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,FAC,5m,B04_Master Frequency(Hz)\n75,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,EAE,5m,B04_Master Energy_Export(kWh)\n76,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,PAC,5m,B04_Slave1 AC Power(kW)\n77,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,UDC,5m,B04_Slave1 DC Voltage(V)\n78,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,IDC,5m,B04_Slave1 DC Current(A)\n79,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,FAC,5m,B04_Slave1 Frequency(Hz)\n80,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,EAE,5m,B04_Slave1 Energy_Export(kWh)\n81,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,PAC,5m,B04_Slave2 AC Power(kW)\n82,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,UDC,5m,B04_Slave2 DC Voltage(V)\n83,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,IDC,5m,B04_Slave2 DC Current(A)\n84,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,FAC,5m,B04_Slave2 Frequency(Hz)\n85,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,EAE,5m,B04_Slave2 Energy_Export(kWh)\n86,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,PAC,5m,B04_Slave3 AC Power(kW)\n87,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,UDC,5m,B04_Slave3 DC Voltage(V)\n88,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,IDC,5m,B04_Slave3 DC Current(A)\n89,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,FAC,5m,B04_Slave3 Frequency(Hz)\n90,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,EAE,5m,B04_Slave3 Energy_Export(kWh)\n91,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,PAC,5m,B05_Master AC Power(kW)\n92,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,UDC,5m,B05_Master DC Voltage(V)\n93,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,IDC,5m,B05_Master DC Current(A)\n94,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,FAC,5m,B05_Master Frequency(Hz)\n95,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,EAE,5m,B05_Master Energy_Export(kWh)\n96,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,PAC,5m,B06_Master AC Power(kW)\n97,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,UDC,5m,B06_Master DC Voltage(V)\n98,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,IDC,5m,B06_Master DC Current(A)\n99,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,FAC,5m,B06_Master Frequency(Hz)\n100,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,EAE,5m,B06_Master Energy_Export(kWh)\n101,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,PAC,5m,B06_Slave1 AC Power(kW)\n102,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,UDC,5m,B06_Slave1 DC Voltage(V)\n103,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,IDC,5m,B06_Slave1 DC Current(A)\n104,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,FAC,5m,B06_Slave1 Frequency(Hz)\n105,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,EAE,5m,B06_Slave1 Energy_Export(kWh)\n106,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,PAC,5m,B06_Slave2 AC Power(kW)\n107,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,UDC,5m,B06_Slave2 DC Voltage(V)\n108,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,IDC,5m,B06_Slave2 DC Current(A)\n109,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,FAC,5m,B06_Slave2 Frequency(Hz)\n110,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,EAE,5m,B06_Slave2 Energy_Export(kWh)\n111,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,PAC,5m,B06_Slave3 AC Power(kW)\n112,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,UDC,5m,B06_Slave3 DC Voltage(V)\n113,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,IDC,5m,B06_Slave3 DC Current(A)\n114,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,FAC,5m,B06_Slave3 Frequency(Hz)\n115,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,EAE,5m,B06_Slave3 Energy_Export(kWh)\n116,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,PAC,5m,B07_Master AC Power(kW)\n117,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,UDC,5m,B07_Master DC Voltage(V)\n118,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,IDC,5m,B07_Master DC Current(A)\n119,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,FAC,5m,B07_Master Frequency(Hz)\n120,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,EAE,5m,B07_Master Energy_Export(kWh)\n121,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,PAC,5m,B07_Slave1 AC Power(kW)\n122,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,UDC,5m,B07_Slave1 DC Voltage(V)\n123,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,IDC,5m,B07_Slave1 DC Current(A)\n124,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,FAC,5m,B07_Slave1 Frequency(Hz)\n125,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,EAE,5m,B07_Slave1 Energy_Export(kWh)\n126,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,PAC,5m,B07_Slave2 AC Power(kW)\n127,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,UDC,5m,B07_Slave2 DC Voltage(V)\n128,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,IDC,5m,B07_Slave2 DC Current(A)\n129,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,FAC,5m,B07_Slave2 Frequency(Hz)\n130,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,EAE,5m,B07_Slave2 Energy_Export(kWh)\n131,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV1,COMMUNICATION_STATUS,5m,B01_Master_Status\n132,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV2,COMMUNICATION_STATUS,5m,B01_Slave1_Status\n133,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV3,COMMUNICATION_STATUS,5m,B01_Slave2_Status\n134,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B01_INV4,COMMUNICATION_STATUS,5m,B01_Slave3_Status\n135,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV1,COMMUNICATION_STATUS,5m,B02_Master_Status\n136,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV2,COMMUNICATION_STATUS,5m,B02_Slave1_Status\n137,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV3,COMMUNICATION_STATUS,5m,B02_Slave2_Status\n138,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B02_INV4,COMMUNICATION_STATUS,5m,B02_Slave3_Status\n139,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV1,COMMUNICATION_STATUS,5m,B03_Master_Status\n140,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV2,COMMUNICATION_STATUS,5m,B03_Slave1_Status\n141,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV3,COMMUNICATION_STATUS,5m,B03_Slave2_Status\n142,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B03_INV4,COMMUNICATION_STATUS,5m,B03_Slave3_Status\n143,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV1,COMMUNICATION_STATUS,5m,B04_Master_Status\n144,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV2,COMMUNICATION_STATUS,5m,B04_Slave1_Status\n145,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV3,COMMUNICATION_STATUS,5m,B04_Slave2_Status\n146,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B04_INV4,COMMUNICATION_STATUS,5m,B04_Slave3_Status\n147,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B05_INV1,COMMUNICATION_STATUS,5m,B05_Master_Status\n148,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV1,COMMUNICATION_STATUS,5m,B06_Master_Status\n149,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV2,COMMUNICATION_STATUS,5m,B06_Slave1_Status\n150,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV3,COMMUNICATION_STATUS,5m,B06_Slave2_Status\n151,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B06_INV4,COMMUNICATION_STATUS,5m,B06_Slave3_Status\n152,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV1,COMMUNICATION_STATUS,5m,B07_Master_Status\n153,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV2,COMMUNICATION_STATUS,5m,B07_Slave1_Status\n154,amplusmicrogrid,v,Amplus CK Motherson,Amplus Retrofit 5MW,B07_INV3,COMMUNICATION_STATUS,5m,B07_Slave2_Status\n",
        "output": "str",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "e9e93fafc1b8ceba"
            ]
        ]
    },
    {
        "id": "c2bdb76861b10b18",
        "type": "influxdb in",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "40d33005c09ae7ed"
            ]
        ]
    },
    {
        "id": "4ab06537b86cb7c8",
        "type": "change",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "40d33005c09ae7ed"
            ]
        ]
    },
    {
        "id": "8b02b54d5eefd77e",
        "type": "cronplus",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "213ffdcf429a386d"
            ]
        ]
    },
    {
        "id": "132493b6ce274b72",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "7256c464e11372be"
            ]
        ]
    },
    {
        "id": "7256c464e11372be",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 220,
        "wires": [
            [
                "aa6d0aa9d404d78f",
                "c2940f87c6ccc172"
            ]
        ]
    },
    {
        "id": "40d33005c09ae7ed",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "132493b6ce274b72"
            ]
        ]
    },
    {
        "id": "72de5de45d43dab7",
        "type": "debug",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 300,
        "wires": []
    },
    {
        "id": "aa6d0aa9d404d78f",
        "type": "csv",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "af961bcae01bbd4f"
            ]
        ]
    },
    {
        "id": "af961bcae01bbd4f",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_INV/\"+date+\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "86b00a4f1c34a1c1"
            ]
        ]
    },
    {
        "id": "86b00a4f1c34a1c1",
        "type": "file",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 300,
        "wires": [
            [
                "72de5de45d43dab7"
            ]
        ]
    },
    {
        "id": "213ffdcf429a386d",
        "type": "delay",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "78786f86332112ad"
            ]
        ]
    },
    {
        "id": "6d9732fa54f2689c",
        "type": "debug",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "debug 1698",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 440,
        "wires": []
    },
    {
        "id": "f5cdb33b2bf63682",
        "type": "ftp in",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 440,
        "wires": [
            [
                "6d9732fa54f2689c"
            ]
        ]
    },
    {
        "id": "b4e765ca81e3f629",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year +\"/Amplus_Alex_Bikaner_INV/\"+date+\".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "f5cdb33b2bf63682"
            ]
        ]
    },
    {
        "id": "4ca472e8426631a7",
        "type": "file in",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 440,
        "wires": [
            [
                "b4e765ca81e3f629"
            ]
        ]
    },
    {
        "id": "d7ae45b0c7d1aeb8",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_Alex_Bikaner_INV/\"+ date +\".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "4ca472e8426631a7"
            ]
        ]
    },
    {
        "id": "72dc0d57aeeb79b4",
        "type": "cronplus",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 440,
        "wires": [
            [
                "d7ae45b0c7d1aeb8"
            ]
        ]
    },
    {
        "id": "87d5fd4ca1aee3c4",
        "type": "debug",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "debug 1699",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "686438caaf8db6b3",
        "type": "ftp in",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 540,
        "wires": [
            [
                "87d5fd4ca1aee3c4"
            ]
        ]
    },
    {
        "id": "8c190466bdc4b923",
        "type": "function",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amplus_Alex_Bikaner_INV\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "686438caaf8db6b3"
            ]
        ]
    },
    {
        "id": "2ecf43995cbaa63e",
        "type": "cronplus",
        "z": "8b843ee95109f04d",
        "g": "bf625b496a61a9e0",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "8c190466bdc4b923"
            ]
        ]
    },
    {
        "id": "c2940f87c6ccc172",
        "type": "debug",
        "z": "8b843ee95109f04d",
        "g": "64129dd17b6746f4",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "ca908f4e9378d96e",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "005aa7354a439d3d"
            ]
        ]
    },
    {
        "id": "b83e75fedb689f2c",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "ca908f4e9378d96e",
                "0f5656c0b593cc5a"
            ]
        ]
    },
    {
        "id": "005aa7354a439d3d",
        "type": "influxdb in",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "48896443251ff3d4"
            ]
        ]
    },
    {
        "id": "0f5656c0b593cc5a",
        "type": "change",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 160,
        "wires": [
            [
                "48896443251ff3d4"
            ]
        ]
    },
    {
        "id": "dd61eaf31f1c1d49",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 160,
        "wires": [
            [
                "a1a2f7e98e2f34cd"
            ]
        ]
    },
    {
        "id": "f1677230aa7c24c2",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 200,
        "wires": [
            [
                "1b7544bdb89550d2"
            ]
        ]
    },
    {
        "id": "1b7544bdb89550d2",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "6f1e9c37623be40e",
                "365c089c620b1b54"
            ]
        ]
    },
    {
        "id": "48896443251ff3d4",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "f1677230aa7c24c2"
            ]
        ]
    },
    {
        "id": "6f9e098771fe5466",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 280,
        "wires": []
    },
    {
        "id": "6f1e9c37623be40e",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1290,
        "y": 200,
        "wires": [
            [
                "66f20126dc5417da"
            ]
        ]
    },
    {
        "id": "66f20126dc5417da",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_34_CR_EM/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "1f9ace4d801ff672"
            ]
        ]
    },
    {
        "id": "1f9ace4d801ff672",
        "type": "file",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "6f9e098771fe5466"
            ]
        ]
    },
    {
        "id": "a1a2f7e98e2f34cd",
        "type": "delay",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "f12fe216e6925de0"
            ]
        ]
    },
    {
        "id": "981fbb344bd668a5",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "debug 1832",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 420,
        "wires": []
    },
    {
        "id": "ba4eeb190e97851d",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 420,
        "wires": [
            [
                "981fbb344bd668a5"
            ]
        ]
    },
    {
        "id": "d49b0b8fbdf0f159",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_CR_EM/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            [
                "ba4eeb190e97851d"
            ]
        ]
    },
    {
        "id": "933948388111caaf",
        "type": "file in",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "d49b0b8fbdf0f159"
            ]
        ]
    },
    {
        "id": "f5b0dc93a02029e1",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amplus_34_CR_EM/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "933948388111caaf"
            ]
        ]
    },
    {
        "id": "4b52aced9b82ee4b",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 300,
        "y": 420,
        "wires": [
            [
                "f5b0dc93a02029e1"
            ]
        ]
    },
    {
        "id": "19f937f879e4984e",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "debug 1833",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 520,
        "wires": []
    },
    {
        "id": "25c8d05e68efb58f",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "19f937f879e4984e"
            ]
        ]
    },
    {
        "id": "f8e0d04c8934694f",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_CR_EM/\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 520,
        "wires": [
            [
                "25c8d05e68efb58f"
            ]
        ]
    },
    {
        "id": "c520c0d1e02fb17c",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "46f363b903c24dbd",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "f8e0d04c8934694f"
            ]
        ]
    },
    {
        "id": "365c089c620b1b54",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 160,
        "wires": []
    },
    {
        "id": "f12fe216e6925de0",
        "type": "template",
        "z": "e7f74bd7920f8b4e",
        "g": "1a1558192d8744a7",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,EAE,5m,CR_EM01_Energy_Export(MWh)\n2,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,EAE_DAY,5m,CR_EM01_Energy_Export_Day(MWh)\n3,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,EAI,5m,CR_EM01_Energy_Import(MWh)\n4,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,EAI_DAY,5m,CR_EM01_Energy_Import_Day(MWh)\n5,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,SAC,5m,CR_EM01_Apparent_Power(MVA)\n6,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,PF,5m,CR_EM01_Power_Factor\n7,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC1,5m,CR_EM01_AC_Voltage1(v)\n8,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC2,5m,CR_EM01_AC_Voltage2(v)\n9,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC3,5m,CR_EM01_AC_Voltage3(v)\n10,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC12,5m,CR_EM01_AC_VoltageRY(v)\n11,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC23,5m,CR_EM01_AC_VoltageYB(v)\n12,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC31,5m,CR_EM01_AC_VoltageBR(v)\n13,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC1,5m,CR_EM01_AC_Current1(A)\n14,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC2,5m,CR_EM01_AC_Current2(A)\n15,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC3,5m,CR_EM01_AC_Current3(A)\n16,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,EAE,5m,CR_EM02_Energy_Export(MWh)\n17,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,EAE_DAY,5m,CR_EM02_Energy_Export_Day(MWh)\n18,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,EAI,5m,CR_EM02_Energy_Import(MWh)\n19,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,EAI_DAY,5m,CR_EM02_Energy_Import_Day(MWh)\n20,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,SAC,5m,CR_EM02_Apparent_Power(MVA)\n21,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,PF,5m,CR_EM02_Power_Factor\n22,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC1,5m,CR_EM02_AC_Voltage1(v)\n23,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC2,5m,CR_EM02_AC_Voltage2(v)\n24,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC3,5m,CR_EM02_AC_Voltage3(v)\n25,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC12,5m,CR_EM02_AC_VoltageRY(v)\n26,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC23,5m,CR_EM02_AC_VoltageYB(v)\n27,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,UAC31,5m,CR_EM02_AC_VoltageBR(v)\n28,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,IAC1,5m,CR_EM02_AC_Current1(A)\n29,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,IAC2,5m,CR_EM02_AC_Current2(A)\n30,ampluslargeutility,v,Amplus_34MW,CR,CR_EM02,IAC3,5m,CR_EM02_AC_Current3(A)\n31,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,EAE,5m,CR_EM03_Energy_Export(MWh)\n32,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,EAE_DAY,5m,CR_EM03_Energy_Export_Day(MWh)\n33,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,EAI,5m,CR_EM03_Energy_Import(MWh)\n34,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,EAI_DAY,5m,CR_EM03_Energy_Import_Day(MWh)\n35,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,SAC,5m,CR_EM03_Apparent_Power(MVA)\n36,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,PF,5m,CR_EM03_Power_Factor\n37,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC1,5m,CR_EM03_AC_Voltage1(v)\n38,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC2,5m,CR_EM03_AC_Voltage2(v)\n39,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC3,5m,CR_EM03_AC_Voltage3(v)\n40,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC12,5m,CR_EM03_AC_VoltageRY(v)\n41,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC23,5m,CR_EM03_AC_VoltageYB(v)\n42,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,UAC31,5m,CR_EM03_AC_VoltageBR(v)\n43,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,IAC1,5m,CR_EM03_AC_Current1(A)\n44,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,IAC2,5m,CR_EM03_AC_Current2(A)\n45,ampluslargeutility,v,Amplus_34MW,CR,CR_EM03,IAC3,5m,CR_EM03_AC_Current3(A)\n46,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,EAE,5m,CR_EM04_Energy_Export(MWh)\n47,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,EAE_DAY,5m,CR_EM04_Energy_Export_Day(MWh)\n48,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,EAI,5m,CR_EM04_Energy_Import(MWh)\n49,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,EAI_DAY,5m,CR_EM04_Energy_Import_Day(MWh)\n50,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,SAC,5m,CR_EM04_Apparent_Power(MVA)\n51,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,PF,5m,CR_EM04_Power_Factor\n52,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC1,5m,CR_EM04_AC_Voltage1(v)\n53,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC2,5m,CR_EM04_AC_Voltage2(v)\n54,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC3,5m,CR_EM04_AC_Voltage3(v)\n55,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC12,5m,CR_EM04_AC_VoltageRY(v)\n56,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC23,5m,CR_EM04_AC_VoltageYB(v)\n57,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,UAC31,5m,CR_EM04_AC_VoltageBR(v)\n58,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,IAC1,5m,CR_EM04_AC_Current1(A)\n59,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,IAC2,5m,CR_EM04_AC_Current2(A)\n60,ampluslargeutility,v,Amplus_34MW,CR,CR_EM04,IAC3,5m,CR_EM04_AC_Current3(A)\n61,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,EAE,5m,CR_EM05_Energy_Export(MWh)\n62,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,EAE_DAY,5m,CR_EM05_Energy_Export_Day(MWh)\n63,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,EAI,5m,CR_EM05_Energy_Import(MWh)\n64,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,EAI_DAY,5m,CR_EM05_Energy_Import_Day(MWh)\n65,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,SAC,5m,CR_EM05_Apparent_Power(MVA)\n66,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,PF,5m,CR_EM05_Power_Factor\n67,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC1,5m,CR_EM05_AC_Voltage1(v)\n68,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC2,5m,CR_EM05_AC_Voltage2(v)\n69,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC3,5m,CR_EM05_AC_Voltage3(v)\n70,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC12,5m,CR_EM05_AC_VoltageRY(v)\n71,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC23,5m,CR_EM05_AC_VoltageYB(v)\n72,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,UAC31,5m,CR_EM05_AC_VoltageBR(v)\n73,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,IAC1,5m,CR_EM05_AC_Current1(A)\n74,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,IAC2,5m,CR_EM05_AC_Current2(A)\n75,ampluslargeutility,v,Amplus_34MW,CR,CR_EM05,IAC3,5m,CR_EM05_AC_Current3(A)\n76,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,EAE,5m,CR_EM06_Energy_Export(MWh)\n77,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,EAE_DAY,5m,CR_EM06_Energy_Export_Day(MWh)\n78,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,EAI,5m,CR_EM06_Energy_Import(MWh)\n79,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,EAI_DAY,5m,CR_EM06_Energy_Import_Day(MWh)\n80,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,SAC,5m,CR_EM06_Apparent_Power(MVA)\n81,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,PF,5m,CR_EM06_Power_Factor\n82,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC1,5m,CR_EM06_AC_Voltage1(v)\n83,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC2,5m,CR_EM06_AC_Voltage2(v)\n84,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC3,5m,CR_EM06_AC_Voltage3(v)\n85,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC12,5m,CR_EM06_AC_VoltageRY(v)\n86,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC23,5m,CR_EM06_AC_VoltageYB(v)\n87,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,UAC31,5m,CR_EM06_AC_VoltageBR(v)\n88,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,IAC1,5m,CR_EM06_AC_Current1(A)\n89,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,IAC2,5m,CR_EM06_AC_Current2(A)\n90,ampluslargeutility,v,Amplus_34MW,CR,CR_EM06,IAC3,5m,CR_EM06_AC_Current3(A)\n91,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,EAE,5m,CR_EM07_Energy_Export(MWh)\n92,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,EAE_DAY,5m,CR_EM07_Energy_Export_Day(MWh)\n93,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,EAI,5m,CR_EM07_Energy_Import(MWh)\n94,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,EAI_DAY,5m,CR_EM07_Energy_Import_Day(MWh)\n95,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,SAC,5m,CR_EM07_Apparent_Power(MVA)\n96,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,PF,5m,CR_EM07_Power_Factor\n97,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC1,5m,CR_EM07_AC_Voltage1(v)\n98,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC2,5m,CR_EM07_AC_Voltage2(v)\n99,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC3,5m,CR_EM07_AC_Voltage3(v)\n100,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC12,5m,CR_EM07_AC_VoltageRY(v)\n101,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC23,5m,CR_EM07_AC_VoltageYB(v)\n102,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,UAC31,5m,CR_EM07_AC_VoltageBR(v)\n103,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,IAC1,5m,CR_EM07_AC_Current1(A)\n104,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,IAC2,5m,CR_EM07_AC_Current2(A)\n105,ampluslargeutility,v,Amplus_34MW,CR,CR_EM07,IAC3,5m,CR_EM07_AC_Current3(A)\n106,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,EAE,5m,CR_EM08_Energy_Export(MWh)\n107,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,EAE_DAY,5m,CR_EM08_Energy_Export_Day(MWh)\n108,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,EAI,5m,CR_EM08_Energy_Import(MWh)\n109,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,EAI_DAY,5m,CR_EM08_Energy_Import_Day(MWh)\n110,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,SAC,5m,CR_EM08_Apparent_Power(MVA)\n111,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,PF,5m,CR_EM08_Power_Factor\n112,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC1,5m,CR_EM08_AC_Voltage1(v)\n113,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC2,5m,CR_EM08_AC_Voltage2(v)\n114,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC3,5m,CR_EM08_AC_Voltage3(v)\n115,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC12,5m,CR_EM08_AC_VoltageRY(v)\n116,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC23,5m,CR_EM08_AC_VoltageYB(v)\n117,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,UAC31,5m,CR_EM08_AC_VoltageBR(v)\n118,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,IAC1,5m,CR_EM08_AC_Current1(A)\n119,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,IAC2,5m,CR_EM08_AC_Current2(A)\n120,ampluslargeutility,v,Amplus_34MW,CR,CR_EM08,IAC3,5m,CR_EM08_AC_Current3(A)\n121,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,EAE,5m,CR_EM09_Energy_Export(MWh)\n122,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,EAE_DAY,5m,CR_EM09_Energy_Export_Day(MWh)\n123,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,EAI,5m,CR_EM09_Energy_Import(MWh)\n124,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,EAI_DAY,5m,CR_EM09_Energy_Import_Day(MWh)\n125,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,SAC,5m,CR_EM09_Apparent_Power(MVA)\n126,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,PF,5m,CR_EM09_Power_Factor\n127,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC1,5m,CR_EM09_AC_Voltage1(v)\n128,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC2,5m,CR_EM09_AC_Voltage2(v)\n129,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC3,5m,CR_EM09_AC_Voltage3(v)\n130,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC12,5m,CR_EM09_AC_VoltageRY(v)\n131,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC23,5m,CR_EM09_AC_VoltageYB(v)\n132,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,UAC31,5m,CR_EM09_AC_VoltageBR(v)\n133,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,IAC1,5m,CR_EM09_AC_Current1(A)\n134,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,IAC2,5m,CR_EM09_AC_Current2(A)\n135,ampluslargeutility,v,Amplus_34MW,CR,CR_EM09,IAC3,5m,CR_EM09_AC_Current3(A)",
        "output": "str",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "b83e75fedb689f2c"
            ]
        ]
    },
    {
        "id": "93e9e57323898a29",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 840,
        "wires": [
            [
                "936394d2755938fe"
            ]
        ]
    },
    {
        "id": "b3b2e5078295bb2f",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 530,
        "y": 760,
        "wires": [
            [
                "93e9e57323898a29",
                "4865e01931a005c4"
            ]
        ]
    },
    {
        "id": "936394d2755938fe",
        "type": "influxdb in",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 630,
        "y": 840,
        "wires": [
            [
                "6a39f29410beafd0"
            ]
        ]
    },
    {
        "id": "4865e01931a005c4",
        "type": "change",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 760,
        "wires": [
            [
                "6a39f29410beafd0"
            ]
        ]
    },
    {
        "id": "da18d36e0c0333b4",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 760,
        "wires": [
            [
                "73dc2dd0c90a89fb"
            ]
        ]
    },
    {
        "id": "ed7cefad61c6d3d8",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 800,
        "wires": [
            [
                "dc6cd36a5506dfec"
            ]
        ]
    },
    {
        "id": "dc6cd36a5506dfec",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 800,
        "wires": [
            [
                "de6920f36c854a34",
                "7b231302b3272fad"
            ]
        ]
    },
    {
        "id": "6a39f29410beafd0",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 800,
        "wires": [
            [
                "ed7cefad61c6d3d8"
            ]
        ]
    },
    {
        "id": "876e6fe71c34d2bd",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 880,
        "wires": []
    },
    {
        "id": "de6920f36c854a34",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1290,
        "y": 800,
        "wires": [
            [
                "8966ca8d76872442"
            ]
        ]
    },
    {
        "id": "8966ca8d76872442",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_34_Inverter_EM_WS/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "917cc67b520f671b"
            ]
        ]
    },
    {
        "id": "917cc67b520f671b",
        "type": "file",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 880,
        "wires": [
            [
                "876e6fe71c34d2bd"
            ]
        ]
    },
    {
        "id": "73dc2dd0c90a89fb",
        "type": "delay",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 740,
        "wires": [
            [
                "58769b5e91d27ce9"
            ]
        ]
    },
    {
        "id": "facd7851b1be0dbd",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "debug 1834",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1020,
        "wires": []
    },
    {
        "id": "26de7069f60fd5a2",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 1020,
        "wires": [
            [
                "facd7851b1be0dbd"
            ]
        ]
    },
    {
        "id": "ba92acc19c2743f1",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_Inverter_EM_WS/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1020,
        "wires": [
            [
                "26de7069f60fd5a2"
            ]
        ]
    },
    {
        "id": "1fdb38b0adff475a",
        "type": "file in",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "ba92acc19c2743f1"
            ]
        ]
    },
    {
        "id": "895ccee5da025207",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_34_Inverter_EM_WS/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "1fdb38b0adff475a"
            ]
        ]
    },
    {
        "id": "ecdd99cf8af94cdd",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 300,
        "y": 1020,
        "wires": [
            [
                "895ccee5da025207"
            ]
        ]
    },
    {
        "id": "5bf9768b223d3a39",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "debug 1835",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1120,
        "wires": []
    },
    {
        "id": "15d722768efeb9f0",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 790,
        "y": 1120,
        "wires": [
            [
                "5bf9768b223d3a39"
            ]
        ]
    },
    {
        "id": "650dc552accf5bb5",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_Inverter_EM_WS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1120,
        "wires": [
            [
                "15d722768efeb9f0"
            ]
        ]
    },
    {
        "id": "fbf88fa161dd20ef",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "534a16e428e73b96",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 430,
        "y": 1120,
        "wires": [
            [
                "650dc552accf5bb5"
            ]
        ]
    },
    {
        "id": "7b231302b3272fad",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 760,
        "wires": []
    },
    {
        "id": "58769b5e91d27ce9",
        "type": "template",
        "z": "e7f74bd7920f8b4e",
        "g": "6dad9828d8667db2",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block C 9,CR_WS,SOLAR_RADIATION_TILT,5m,Irradiation_tilt(W/m2)\n2,ampluslargeutility,v,Amplus_34MW,Block C 9,CR_WS,AMBIENT_TEMP,5m,Ambient_Temperature(Deg_C)\n3,ampluslargeutility,v,Amplus_34MW,Block C 9,CR_WS,MODULE_TEMP,5m,Module_Temperature(Deg_C)\n4,ampluslargeutility,v,Amplus_34MW,Block C 9,CR_WS,WIND_SPEED,5m,Wind_Speed(m/s)\n5,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,PAC,5m,Forward_Active_Power(kW)\n6,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,QAC,5m,Reactive_Power(kVAr)\n7,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,PF,5m,Power_Factor(-)\n8,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,UAC1,5m,AC_Voltage(V)\n9,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC1,5m,AC_Current_1(A)\n10,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC2,5m,AC_Current_2(A)\n11,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,IAC3,5m,AC_Current_3(A)\n12,ampluslargeutility,v,Amplus_34MW,CR,CR_EM01,EAE,5m,Meter_Reading(kWh)\n13,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,PAC,5m,B01_INV1_AC_Power(kW)\n14,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,UAC,5m,B01_INV1_AC_Voltage(V)\n15,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,IAC,5m,B01_INV1_AC_Current(A)\n16,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,UDC,5m,B01_INV1_DC_Voltage(V)\n17,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,IDC,5m,B01_INV1_DC_Current(A)\n18,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1,FAC,5m,B01_INV1_Frequency(Hz)\n19,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,PAC,5m,B01_INV2_AC_Power(kW)\n20,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,UAC,5m,B01_INV2_AC_Voltage(V)\n21,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,IAC,5m,B01_INV2_AC_Current(A)\n22,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,UDC,5m,B01_INV2_DC_Voltage(V)\n23,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,IDC,5m,B01_INV2_DC_Current(A)\n24,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2,FAC,5m,B01_INV2_Frequency(Hz)\n25,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,PAC,5m,B01_INV3_AC_Power(kW)\n26,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,UAC,5m,B01_INV3_AC_Voltage(V)\n27,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,IAC,5m,B01_INV3_AC_Current(A)\n28,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,UDC,5m,B01_INV3_DC_Voltage(V)\n29,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,IDC,5m,B01_INV3_DC_Current(A)\n30,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3,FAC,5m,B01_INV3_Frequency(Hz)\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,PAC,5m,B01_INV4_AC_Power(kW)\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,UAC,5m,B01_INV4_AC_Voltage(V)\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,IAC,5m,B01_INV4_AC_Current(A)\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,UDC,5m,B01_INV4_DC_Voltage(V)\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,IDC,5m,B01_INV4_DC_Current(A)\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4,FAC,5m,B01_INV4_Frequency(Hz)\n37,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,PAC,5m,B02_INV1_AC_Power(kW)\n38,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,UAC,5m,B02_INV1_AC_Voltage(V)\n39,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,IAC,5m,B02_INV1_AC_Current(A)\n40,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,UDC,5m,B02_INV1_DC_Voltage(V)\n41,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,IDC,5m,B02_INV1_DC_Current(A)\n42,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1,FAC,5m,B02_INV1_Frequency(Hz)\n43,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,PAC,5m,B02_INV2_AC_Power(kW)\n44,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,UAC,5m,B02_INV2_AC_Voltage(V)\n45,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,IAC,5m,B02_INV2_AC_Current(A)\n46,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,UDC,5m,B02_INV2_DC_Voltage(V)\n47,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,IDC,5m,B02_INV2_DC_Current(A)\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2,FAC,5m,B02_INV2_Frequency(Hz)\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,PAC,5m,B02_INV3_AC_Power(kW)\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,UAC,5m,B02_INV3_AC_Voltage(V)\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,IAC,5m,B02_INV3_AC_Current(A)\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,UDC,5m,B02_INV3_DC_Voltage(V)\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,IDC,5m,B02_INV3_DC_Current(A)\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3,FAC,5m,B02_INV3_Frequency(Hz)\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,PAC,5m,B02_INV4_AC_Power(kW)\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,UAC,5m,B02_INV4_AC_Voltage(V)\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,IAC,5m,B02_INV4_AC_Current(A)\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,UDC,5m,B02_INV4_DC_Voltage(V)\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,IDC,5m,B02_INV4_DC_Current(A)\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4,FAC,5m,B02_INV4_Frequency(Hz)\n61,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,PAC,5m,B03_INV1_AC_Power(kW)\n62,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,UAC,5m,B03_INV1_AC_Voltage(V)\n63,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,IAC,5m,B03_INV1_AC_Current(A)\n64,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,UDC,5m,B03_INV1_DC_Voltage(V)\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,IDC,5m,B03_INV1_DC_Current(A)\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1,FAC,5m,B03_INV1_Frequency(Hz)\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,PAC,5m,B03_INV2_AC_Power(kW)\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,UAC,5m,B03_INV2_AC_Voltage(V)\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,IAC,5m,B03_INV2_AC_Current(A)\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,UDC,5m,B03_INV2_DC_Voltage(V)\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,IDC,5m,B03_INV2_DC_Current(A)\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2,FAC,5m,B03_INV2_Frequency(Hz)\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,PAC,5m,B03_INV3_AC_Power(kW)\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,UAC,5m,B03_INV3_AC_Voltage(V)\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,IAC,5m,B03_INV3_AC_Current(A)\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,UDC,5m,B03_INV3_DC_Voltage(V)\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,IDC,5m,B03_INV3_DC_Current(A)\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3,FAC,5m,B03_INV3_Frequency(Hz)\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,PAC,5m,B03_INV4_AC_Power(kW)\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,UAC,5m,B03_INV4_AC_Voltage(V)\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,IAC,5m,B03_INV4_AC_Current(A)\n82,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,UDC,5m,B03_INV4_DC_Voltage(V)\n83,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,IDC,5m,B03_INV4_DC_Current(A)\n84,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4,FAC,5m,B03_INV4_Frequency(Hz)\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,PAC,5m,B04_INV1_AC_Power(kW)\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,UAC,5m,B04_INV1_AC_Voltage(V)\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,IAC,5m,B04_INV1_AC_Current(A)\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,UDC,5m,B04_INV1_DC_Voltage(V)\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,IDC,5m,B04_INV1_DC_Current(A)\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1,FAC,5m,B04_INV1_Frequency(Hz)\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,PAC,5m,B04_INV2_AC_Power(kW)\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,UAC,5m,B04_INV2_AC_Voltage(V)\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,IAC,5m,B04_INV2_AC_Current(A)\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,UDC,5m,B04_INV2_DC_Voltage(V)\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,IDC,5m,B04_INV2_DC_Current(A)\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2,FAC,5m,B04_INV2_Frequency(Hz)\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,PAC,5m,B04_INV3_AC_Power(kW)\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,UAC,5m,B04_INV3_AC_Voltage(V)\n99,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,IAC,5m,B04_INV3_AC_Current(A)\n100,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,UDC,5m,B04_INV3_DC_Voltage(V)\n101,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,IDC,5m,B04_INV3_DC_Current(A)\n102,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3,FAC,5m,B04_INV3_Frequency(Hz)\n103,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,PAC,5m,B04_INV4_AC_Power(kW)\n104,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,UAC,5m,B04_INV4_AC_Voltage(V)\n105,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,IAC,5m,B04_INV4_AC_Current(A)\n106,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,UDC,5m,B04_INV4_DC_Voltage(V)\n107,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,IDC,5m,B04_INV4_DC_Current(A)\n108,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4,FAC,5m,B04_INV4_Frequency(Hz)\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,PAC,5m,B05_INV1_AC_Power(kW)\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,UAC,5m,B05_INV1_AC_Voltage(V)\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,IAC,5m,B05_INV1_AC_Current(A)\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,UDC,5m,B05_INV1_DC_Voltage(V)\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,IDC,5m,B05_INV1_DC_Current(A)\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1,FAC,5m,B05_INV1_Frequency(Hz)\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,PAC,5m,B05_INV2_AC_Power(kW)\n116,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,UAC,5m,B05_INV2_AC_Voltage(V)\n117,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,IAC,5m,B05_INV2_AC_Current(A)\n118,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,UDC,5m,B05_INV2_DC_Voltage(V)\n119,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,IDC,5m,B05_INV2_DC_Current(A)\n120,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2,FAC,5m,B05_INV2_Frequency(Hz)\n121,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,PAC,5m,B05_INV3_AC_Power(kW)\n122,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,UAC,5m,B05_INV3_AC_Voltage(V)\n123,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,IAC,5m,B05_INV3_AC_Current(A)\n124,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,UDC,5m,B05_INV3_DC_Voltage(V)\n125,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,IDC,5m,B05_INV3_DC_Current(A)\n126,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3,FAC,5m,B05_INV3_Frequency(Hz)\n127,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,PAC,5m,B05_INV4_AC_Power(kW)\n128,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,UAC,5m,B05_INV4_AC_Voltage(V)\n129,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,IAC,5m,B05_INV4_AC_Current(A)\n130,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,UDC,5m,B05_INV4_DC_Voltage(V)\n131,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,IDC,5m,B05_INV4_DC_Current(A)\n132,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4,FAC,5m,B05_INV4_Frequency(Hz)\n133,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,PAC,5m,B06_INV1_AC_Power(kW)\n134,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,UAC,5m,B06_INV1_AC_Voltage(V)\n135,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,IAC,5m,B06_INV1_AC_Current(A)\n136,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,UDC,5m,B06_INV1_DC_Voltage(V)\n137,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,IDC,5m,B06_INV1_DC_Current(A)\n138,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1,FAC,5m,B06_INV1_Frequency(Hz)\n139,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,PAC,5m,B06_INV2_AC_Power(kW)\n140,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,UAC,5m,B06_INV2_AC_Voltage(V)\n141,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,IAC,5m,B06_INV2_AC_Current(A)\n142,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,UDC,5m,B06_INV2_DC_Voltage(V)\n143,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,IDC,5m,B06_INV2_DC_Current(A)\n144,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2,FAC,5m,B06_INV2_Frequency(Hz)\n145,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,PAC,5m,B06_INV3_AC_Power(kW)\n146,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,UAC,5m,B06_INV3_AC_Voltage(V)\n147,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,IAC,5m,B06_INV3_AC_Current(A)\n148,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,UDC,5m,B06_INV3_DC_Voltage(V)\n149,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,IDC,5m,B06_INV3_DC_Current(A)\n150,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3,FAC,5m,B06_INV3_Frequency(Hz)\n151,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,PAC,5m,B06_INV4_AC_Power(kW)\n152,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,UAC,5m,B06_INV4_AC_Voltage(V)\n153,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,IAC,5m,B06_INV4_AC_Current(A)\n154,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,UDC,5m,B06_INV4_DC_Voltage(V)\n155,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,IDC,5m,B06_INV4_DC_Current(A)\n156,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4,FAC,5m,B06_INV4_Frequency(Hz)\n157,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,PAC,5m,B07_INV1_AC_Power(kW)\n158,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,UAC,5m,B07_INV1_AC_Voltage(V)\n159,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,IAC,5m,B07_INV1_AC_Current(A)\n160,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,UDC,5m,B07_INV1_DC_Voltage(V)\n161,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,IDC,5m,B07_INV1_DC_Current(A)\n162,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1,FAC,5m,B07_INV1_Frequency(Hz)\n163,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,PAC,5m,B07_INV2_AC_Power(kW)\n164,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,UAC,5m,B07_INV2_AC_Voltage(V)\n165,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,IAC,5m,B07_INV2_AC_Current(A)\n166,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,UDC,5m,B07_INV2_DC_Voltage(V)\n167,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,IDC,5m,B07_INV2_DC_Current(A)\n168,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2,FAC,5m,B07_INV2_Frequency(Hz)\n169,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,PAC,5m,B07_INV3_AC_Power(kW)\n170,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,UAC,5m,B07_INV3_AC_Voltage(V)\n171,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,IAC,5m,B07_INV3_AC_Current(A)\n172,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,UDC,5m,B07_INV3_DC_Voltage(V)\n173,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,IDC,5m,B07_INV3_DC_Current(A)\n174,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3,FAC,5m,B07_INV3_Frequency(Hz)\n175,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,PAC,5m,B07_INV4_AC_Power(kW)\n176,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,UAC,5m,B07_INV4_AC_Voltage(V)\n177,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,IAC,5m,B07_INV4_AC_Current(A)\n178,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,UDC,5m,B07_INV4_DC_Voltage(V)\n179,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,IDC,5m,B07_INV4_DC_Current(A)\n180,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4,FAC,5m,B07_INV4_Frequency(Hz)\n181,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,PAC,5m,B08_INV1_AC_Power(kW)\n182,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,UAC,5m,B08_INV1_AC_Voltage(V)\n183,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,IAC,5m,B08_INV1_AC_Current(A)\n184,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,UDC,5m,B08_INV1_DC_Voltage(V)\n185,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,IDC,5m,B08_INV1_DC_Current(A)\n186,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1,FAC,5m,B08_INV1_Frequency(Hz)\n187,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,PAC,5m,B08_INV2_AC_Power(kW)\n188,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,UAC,5m,B08_INV2_AC_Voltage(V)\n189,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,IAC,5m,B08_INV2_AC_Current(A)\n190,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,UDC,5m,B08_INV2_DC_Voltage(V)\n191,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,IDC,5m,B08_INV2_DC_Current(A)\n192,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2,FAC,5m,B08_INV2_Frequency(Hz)\n193,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,PAC,5m,B08_INV3_AC_Power(kW)\n194,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,UAC,5m,B08_INV3_AC_Voltage(V)\n195,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,IAC,5m,B08_INV3_AC_Current(A)\n196,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,UDC,5m,B08_INV3_DC_Voltage(V)\n197,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,IDC,5m,B08_INV3_DC_Current(A)\n198,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3,FAC,5m,B08_INV3_Frequency(Hz)\n199,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,PAC,5m,B08_INV4_AC_Power(kW)\n200,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,UAC,5m,B08_INV4_AC_Voltage(V)\n201,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,IAC,5m,B08_INV4_AC_Current(A)\n202,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,UDC,5m,B08_INV4_DC_Voltage(V)\n203,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,IDC,5m,B08_INV4_DC_Current(A)\n204,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4,FAC,5m,B08_INV4_Frequency(Hz)\n205,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,PAC,5m,B09_INV1_AC_Power(kW)\n206,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,UAC,5m,B09_INV1_AC_Voltage(V)\n207,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,IAC,5m,B09_INV1_AC_Current(A)\n208,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,UDC,5m,B09_INV1_DC_Voltage(V)\n209,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,IDC,5m,B09_INV1_DC_Current(A)\n210,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1,FAC,5m,B09_INV1_Frequency(Hz)\n211,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,PAC,5m,B09_INV2_AC_Power(kW)\n212,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,UAC,5m,B09_INV2_AC_Voltage(V)\n213,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,IAC,5m,B09_INV2_AC_Current(A)\n214,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,UDC,5m,B09_INV2_DC_Voltage(V)\n215,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,IDC,5m,B09_INV2_DC_Current(A)\n216,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2,FAC,5m,B09_INV2_Frequency(Hz)\n",
        "output": "str",
        "x": 390,
        "y": 760,
        "wires": [
            [
                "b3b2e5078295bb2f"
            ]
        ]
    },
    {
        "id": "3a46ee2f8d2c815f",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "3e3f21bc9ce566fa"
            ]
        ]
    },
    {
        "id": "69d9e8a89218c9df",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "3a46ee2f8d2c815f",
                "191bfa6671ae7dfe"
            ]
        ]
    },
    {
        "id": "3e3f21bc9ce566fa",
        "type": "influxdb in",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "52d715992144de7f"
            ]
        ]
    },
    {
        "id": "191bfa6671ae7dfe",
        "type": "change",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "52d715992144de7f"
            ]
        ]
    },
    {
        "id": "1f54ccea9bf15900",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 1340,
        "wires": [
            [
                "e6579f95ddef3fd6"
            ]
        ]
    },
    {
        "id": "41da2e985e07f15f",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1380,
        "wires": [
            [
                "6c6eb1d1e7b99303"
            ]
        ]
    },
    {
        "id": "6c6eb1d1e7b99303",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "c40e14b73e5887fb",
                "b156ba37770b0bf4"
            ]
        ]
    },
    {
        "id": "52d715992144de7f",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1380,
        "wires": [
            [
                "41da2e985e07f15f"
            ]
        ]
    },
    {
        "id": "aee460a0defa3d67",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c40e14b73e5887fb",
        "type": "csv",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1290,
        "y": 1380,
        "wires": [
            [
                "bf3739046d302124"
            ]
        ]
    },
    {
        "id": "bf3739046d302124",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_34_WS_PSS_EM/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1460,
        "wires": [
            [
                "0f0a3afb5853a242"
            ]
        ]
    },
    {
        "id": "0f0a3afb5853a242",
        "type": "file",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 1460,
        "wires": [
            [
                "aee460a0defa3d67"
            ]
        ]
    },
    {
        "id": "e6579f95ddef3fd6",
        "type": "delay",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1320,
        "wires": [
            [
                "ba06c6a2cccb2d7c"
            ]
        ]
    },
    {
        "id": "0b0847735cd91c9d",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "debug 1836",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1600,
        "wires": []
    },
    {
        "id": "9f90d9751ec0b544",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 1600,
        "wires": [
            [
                "0b0847735cd91c9d"
            ]
        ]
    },
    {
        "id": "b2873c725c46b612",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_WS_PSS_EM/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1600,
        "wires": [
            [
                "9f90d9751ec0b544"
            ]
        ]
    },
    {
        "id": "cedce89fcc45f0ea",
        "type": "file in",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 1600,
        "wires": [
            [
                "b2873c725c46b612"
            ]
        ]
    },
    {
        "id": "d74fa5531a70e911",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/Amp_34_WS_PSS_EM/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1600,
        "wires": [
            [
                "cedce89fcc45f0ea"
            ]
        ]
    },
    {
        "id": "4390c314e0315962",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 300,
        "y": 1600,
        "wires": [
            [
                "d74fa5531a70e911"
            ]
        ]
    },
    {
        "id": "471f6e8fa0892054",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "debug 1837",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1700,
        "wires": []
    },
    {
        "id": "5b4b675f95dc65b5",
        "type": "ftp in",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "471f6e8fa0892054"
            ]
        ]
    },
    {
        "id": "9866030d710f643c",
        "type": "function",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/Amp_34_WS_PSS_EM\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1700,
        "wires": [
            [
                "5b4b675f95dc65b5"
            ]
        ]
    },
    {
        "id": "819be01653156ea1",
        "type": "cronplus",
        "z": "e7f74bd7920f8b4e",
        "g": "be1cce70c09129e1",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 430,
        "y": 1700,
        "wires": [
            [
                "9866030d710f643c"
            ]
        ]
    },
    {
        "id": "b156ba37770b0bf4",
        "type": "debug",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ba06c6a2cccb2d7c",
        "type": "template",
        "z": "e7f74bd7920f8b4e",
        "g": "47ae661278632a1f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_WS,PYR_RADIATION_I,5m,B01_Irradiation(W/m2)\n2,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_WS,PYR_RADIATION_I,5m,B05_Irradiation(W/m2)\n3,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_WS,MODULE_TEMP,5m,B05_Module_Temperature(Deg_C)\n4,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_HTP_EM,PAC,5m,B01_EM_AC_Power(MW)\n5,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_HTP_EM,EAE_DAY,5m,B01_Meter_Reading(MWh)\n6,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_HTP_EM,QAC,5m,B01_Reactive_Power(kVAr)\n7,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_HTP_EM,PAC,5m,B02_EM_AC_Power(MW)\n8,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_HTP_EM,EAE_DAY,5m,B02_Meter_Reading(MWh)\n9,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_HTP_EM,QAC,5m,B02_Reactive_Power(kVAr)\n10,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_HTP_EM,PAC,5m,B03_EM_AC_Power(MW)\n11,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_HTP_EM,EAE_DAY,5m,B03_Meter_Reading(MWh)\n12,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_HTP_EM,QAC,5m,B03_Reactive_Power(kVAr)\n13,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_HTP_EM,PAC,5m,B04_EM_AC_Power(MW)\n14,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_HTP_EM,EAE_DAY,5m,B04_Meter_Reading(MWh)\n15,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_HTP_EM,QAC,5m,B04_Reactive_Power(kVAr)\n16,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_HTP_EM,PAC,5m,B05_EM_AC_Power(MW)\n17,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_HTP_EM,EAE_DAY,5m,B05_Meter_Reading(MWh)\n18,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_HTP_EM,QAC,5m,B05_Reactive_Power(kVAr)\n19,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_HTP_EM,PAC,5m,B06_EM_AC_Power(MW)\n20,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_HTP_EM,EAE_DAY,5m,B06_Meter_Reading(MWh)\n21,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_HTP_EM,QAC,5m,B06_Reactive_Power(kVAr)\n22,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_HTP_EM,PAC,5m,B07_EM_AC_Power(MW)\n23,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_HTP_EM,EAE_DAY,5m,B07_Meter_Reading(MWh)\n24,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_HTP_EM,QAC,5m,B07_Reactive_Power(kVAr)\n25,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_HTP_EM,PAC,5m,B08_EM_AC_Power(MW)\n26,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_HTP_EM,EAE_DAY,5m,B08_Meter_Reading(MWh)\n27,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_HTP_EM,QAC,5m,B08_Reactive_Power(kVAr)\n28,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_HTP_EM,PAC,5m,B09_EM_AC_Power(MW)\n29,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_HTP_EM,EAE_DAY,5m,B09_Meter_Reading(MWh)\n30,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_HTP_EM,QAC,5m,B09_Reactive_Power(kVAr)\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,EAI,5m,B01_AUX_EM_Energy_Import(kwh)\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,EAI_DAY,5m,B01_AUX_EM_Energy_Import_Day(kwh)\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,EAE,5m,B01_AUX_EM_Energy_Export(kwh)\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,EAE_DAY,5m,B01_AUX_Energy_Export_Day(kwh)\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,PAC,5m,B01_AUX_EM_AC_Power(kw)\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,QAC,5m,B01_AUX_EM_Reactive_Power(kvar)\n37,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,SAC,5m,B01_AUX_EM_Apparent_Power(kva)\n38,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,PF,5m,B01_AUX_EM_Power_Factor(-)\n39,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC1,5m,B01_AUX_EM_AC_Voltage1(v)\n40,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC2,5m,B01_AUX_EM_AC_Voltage2(v)\n41,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC3,5m,B01_AUX_EM_AC_Voltage3(v)\n42,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC12,5m,B01_AUX_EM_AC_VoltageRY(v)\n43,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC23,5m,B01_AUX_EM_AC_VoltageYB(v)\n44,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,UAC31,5m,B01_AUX_EM_AC_VoltageBR(v)\n45,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,IAC1,5m,B01_AUX_EM_AC_Current1(A)\n46,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,IAC2,5m,B01_AUX_EM_AC_Current2(A)\n47,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_EM_AUX02,IAC3,5m,B01_AUX_EM_AC_Current3(A)\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,EAI,5m,B02_AUX_EM_Energy_Import(kwh)\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,EAI_DAY,5m,B02_AUX_EM_Energy_Import_Day(kwh)\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,EAE,5m,B02_AUX_EM_Energy_Export(kwh)\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,EAE_DAY,5m,B02_AUX_Energy_Export_Day(kwh)\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,PAC,5m,B02_AUX_EM_AC_Power(kw)\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,QAC,5m,B02_AUX_EM_Reactive_Power(kvar)\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,SAC,5m,B02_AUX_EM_Apparent_Power(kva)\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,PF,5m,B02_AUX_EM_Power_Factor(-)\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC1,5m,B02_AUX_EM_AC_Voltage1(v)\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC2,5m,B02_AUX_EM_AC_Voltage2(v)\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC3,5m,B02_AUX_EM_AC_Voltage3(v)\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC12,5m,B02_AUX_EM_AC_VoltageRY(v)\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC23,5m,B02_AUX_EM_AC_VoltageYB(v)\n61,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,UAC31,5m,B02_AUX_EM_AC_VoltageBR(v)\n62,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,IAC1,5m,B02_AUX_EM_AC_Current1(A)\n63,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,IAC2,5m,B02_AUX_EM_AC_Current2(A)\n64,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_EM_AUX02,IAC3,5m,B02_AUX_EM_AC_Current3(A)\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,EAI,5m,B03_AUX_EM_Energy_Import(kwh)\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,EAI_DAY,5m,B03_AUX_EM_Energy_Import_Day(kwh)\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,EAE,5m,B03_AUX_EM_Energy_Export(kwh)\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,EAE_DAY,5m,B03_AUX_Energy_Export_Day(kwh)\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,PAC,5m,B03_AUX_EM_AC_Power(kw)\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,QAC,5m,B03_AUX_EM_Reactive_Power(kvar)\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,SAC,5m,B03_AUX_EM_Apparent_Power(kva)\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,PF,5m,B03_AUX_EM_Power_Factor(-)\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC1,5m,B03_AUX_EM_AC_Voltage1(v)\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC2,5m,B03_AUX_EM_AC_Voltage2(v)\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC3,5m,B03_AUX_EM_AC_Voltage3(v)\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC12,5m,B03_AUX_EM_AC_VoltageRY(v)\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC23,5m,B03_AUX_EM_AC_VoltageYB(v)\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,UAC31,5m,B03_AUX_EM_AC_VoltageBR(v)\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,IAC1,5m,B03_AUX_EM_AC_Current1(A)\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,IAC2,5m,B03_AUX_EM_AC_Current2(A)\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_EM_AUX02,IAC3,5m,B03_AUX_EM_AC_Current3(A)\n82,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,EAI,5m,B04_AUX_EM_Energy_Import(kwh)\n83,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,EAI_DAY,5m,B04_AUX_EM_Energy_Import_Day(kwh)\n84,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,EAE,5m,B04_AUX_EM_Energy_Export(kwh)\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,EAE_DAY,5m,B04_AUX_Energy_Export_Day(kwh)\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,PAC,5m,B04_AUX_EM_AC_Power(kw)\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,QAC,5m,B04_AUX_EM_Reactive_Power(kvar)\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,SAC,5m,B04_AUX_EM_Apparent_Power(kva)\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,PF,5m,B04_AUX_EM_Power_Factor(-)\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC1,5m,B04_AUX_EM_AC_Voltage1(v)\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC2,5m,B04_AUX_EM_AC_Voltage2(v)\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC3,5m,B04_AUX_EM_AC_Voltage3(v)\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC12,5m,B04_AUX_EM_AC_VoltageRY(v)\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC23,5m,B04_AUX_EM_AC_VoltageYB(v)\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,UAC31,5m,B04_AUX_EM_AC_VoltageBR(v)\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,IAC1,5m,B04_AUX_EM_AC_Current1(A)\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,IAC2,5m,B04_AUX_EM_AC_Current2(A)\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_EM_AUX02,IAC3,5m,B04_AUX_EM_AC_Current3(A)\n99,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,EAI,5m,B05_AUX_EM_Energy_Import(kwh)\n100,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,EAI_DAY,5m,B05_AUX_EM_Energy_Import_Day(kwh)\n101,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,EAE,5m,B05_AUX_EM_Energy_Export(kwh)\n102,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,EAE_DAY,5m,B05_AUX_Energy_Export_Day(kwh)\n103,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,PAC,5m,B05_AUX_EM_AC_Power(kw)\n104,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,QAC,5m,B05_AUX_EM_Reactive_Power(kvar)\n105,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,SAC,5m,B05_AUX_EM_Apparent_Power(kva)\n106,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,PF,5m,B05_AUX_EM_Power_Factor(-)\n107,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC1,5m,B05_AUX_EM_AC_Voltage1(v)\n108,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC2,5m,B05_AUX_EM_AC_Voltage2(v)\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC3,5m,B05_AUX_EM_AC_Voltage3(v)\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC12,5m,B05_AUX_EM_AC_VoltageRY(v)\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC23,5m,B05_AUX_EM_AC_VoltageYB(v)\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,UAC31,5m,B05_AUX_EM_AC_VoltageBR(v)\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,IAC1,5m,B05_AUX_EM_AC_Current1(A)\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,IAC2,5m,B05_AUX_EM_AC_Current2(A)\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_EM_AUX02,IAC3,5m,B05_AUX_EM_AC_Current3(A)\n116,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,EAI,5m,B06_AUX_EM_Energy_Import(kwh)\n117,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,EAI_DAY,5m,B06_AUX_EM_Energy_Import_Day(kwh)\n118,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,EAE,5m,B06_AUX_EM_Energy_Export(kwh)\n119,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,EAE_DAY,5m,B06_AUX_Energy_Export_Day(kwh)\n120,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,PAC,5m,B06_AUX_EM_AC_Power(kw)\n121,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,QAC,5m,B06_AUX_EM_Reactive_Power(kvar)\n122,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,SAC,5m,B06_AUX_EM_Apparent_Power(kva)\n123,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,PF,5m,B06_AUX_EM_Power_Factor(-)\n124,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC1,5m,B06_AUX_EM_AC_Voltage1(v)\n125,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC2,5m,B06_AUX_EM_AC_Voltage2(v)\n126,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC3,5m,B06_AUX_EM_AC_Voltage3(v)\n127,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC12,5m,B06_AUX_EM_AC_VoltageRY(v)\n128,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC23,5m,B06_AUX_EM_AC_VoltageYB(v)\n129,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,UAC31,5m,B06_AUX_EM_AC_VoltageBR(v)\n130,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,IAC1,5m,B06_AUX_EM_AC_Current1(A)\n131,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,IAC2,5m,B06_AUX_EM_AC_Current2(A)\n132,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_EM_AUX02,IAC3,5m,B06_AUX_EM_AC_Current3(A)\n133,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,EAI,5m,B07_AUX_EM_Energy_Import(kwh)\n134,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,EAI_DAY,5m,B07_AUX_EM_Energy_Import_Day(kwh)\n135,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,EAE,5m,B07_AUX_EM_Energy_Export(kwh)\n136,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,EAE_DAY,5m,B07_AUX_Energy_Export_Day(kwh)\n137,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,PAC,5m,B07_AUX_EM_AC_Power(kw)\n138,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,QAC,5m,B07_AUX_EM_Reactive_Power(kvar)\n139,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,SAC,5m,B07_AUX_EM_Apparent_Power(kva)\n140,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,PF,5m,B07_AUX_EM_Power_Factor(-)\n141,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC1,5m,B07_AUX_EM_AC_Voltage1(v)\n142,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC2,5m,B07_AUX_EM_AC_Voltage2(v)\n143,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC3,5m,B07_AUX_EM_AC_Voltage3(v)\n144,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC12,5m,B07_AUX_EM_AC_VoltageRY(v)\n145,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC23,5m,B07_AUX_EM_AC_VoltageYB(v)\n146,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,UAC31,5m,B07_AUX_EM_AC_VoltageBR(v)\n147,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,IAC1,5m,B07_AUX_EM_AC_Current1(A)\n148,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,IAC2,5m,B07_AUX_EM_AC_Current2(A)\n149,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_EM_AUX02,IAC3,5m,B07_AUX_EM_AC_Current3(A)\n150,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,EAI,5m,B08_AUX_EM_Energy_Import(kwh)\n151,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,EAI_DAY,5m,B08_AUX_EM_Energy_Import_Day(kwh)\n152,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,EAE,5m,B08_AUX_EM_Energy_Export(kwh)\n153,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,EAE_DAY,5m,B08_AUX_Energy_Export_Day(kwh)\n154,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,PAC,5m,B08_AUX_EM_AC_Power(kw)\n155,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,QAC,5m,B08_AUX_EM_Reactive_Power(kvar)\n156,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,SAC,5m,B08_AUX_EM_Apparent_Power(kva)\n157,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,PF,5m,B08_AUX_EM_Power_Factor(-)\n158,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC1,5m,B08_AUX_EM_AC_Voltage1(v)\n159,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC2,5m,B08_AUX_EM_AC_Voltage2(v)\n160,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC3,5m,B08_AUX_EM_AC_Voltage3(v)\n161,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC12,5m,B08_AUX_EM_AC_VoltageRY(v)\n162,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC23,5m,B08_AUX_EM_AC_VoltageYB(v)\n163,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,UAC31,5m,B08_AUX_EM_AC_VoltageBR(v)\n164,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,IAC1,5m,B08_AUX_EM_AC_Current1(A)\n165,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,IAC2,5m,B08_AUX_EM_AC_Current2(A)\n166,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_EM_AUX02,IAC3,5m,B08_AUX_EM_AC_Current3(A)\n167,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,EAI,5m,B09_AUX_EM_Energy_Import(kwh)\n168,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,EAI_DAY,5m,B09_AUX_EM_Energy_Import_Day(kwh)\n169,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,EAE,5m,B09_AUX_EM_Energy_Export(kwh)\n170,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,EAE_DAY,5m,B09_AUX_Energy_Export_Day(kwh)\n171,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,PAC,5m,B09_AUX_EM_AC_Power(kw)\n172,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,QAC,5m,B09_AUX_EM_Reactive_Power(kvar)\n173,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,SAC,5m,B09_AUX_EM_Apparent_Power(kva)\n174,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,PF,5m,B09_AUX_EM_Power_Factor(-)\n175,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC1,5m,B09_AUX_EM_AC_Voltage1(v)\n176,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC2,5m,B09_AUX_EM_AC_Voltage2(v)\n177,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC3,5m,B09_AUX_EM_AC_Voltage3(v)\n178,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC12,5m,B09_AUX_EM_AC_VoltageRY(v)\n179,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC23,5m,B09_AUX_EM_AC_VoltageYB(v)\n180,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,UAC31,5m,B09_AUX_EM_AC_VoltageBR(v)\n181,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,IAC1,5m,B09_AUX_EM_AC_Current1(A)\n182,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,IAC2,5m,B09_AUX_EM_AC_Current2(A)\n183,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_EM_AUX02,IAC3,5m,B09_AUX_EM_AC_Current3(A)\n184,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,EAI,5m,PSS_EM01_Energy_Import(kwh)\n185,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,EAI_DAY,5m,PSS_EM01_Energy_Import_Day(kwh)\n186,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,EAE,5m,PSS_EM01_Energy_Export(kwh)\n187,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,EAE_DAY,5m,PSS_EM01_Energy_Export_Day(kwh)\n188,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,PAC,5m,PSS_EM01_AC_Power(kw)\n189,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,QAC,5m,PSS_EM01_Reactive_Power(kvar)\n190,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,SAC,5m,PSS_EM01_Apparent_Power(kva)\n191,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,PF,5m,PSS_EM01_Power_Factor(-)\n192,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC1,5m,PSS_EM01_AC_Voltage1(v)\n193,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC2,5m,PSS_EM01_AC_Voltage2(v)\n194,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC3,5m,PSS_EM01_AC_Voltage3(v)\n195,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC12,5m,PSS_EM01_AC_VoltageRY(v)\n196,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC23,5m,PSS_EM01_AC_VoltageYB(v)\n197,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,UAC31,5m,PSS_EM01_AC_VoltageBR(v)\n198,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,IAC1,5m,PSS_EM01_AC_Current1(A)\n199,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,IAC2,5m,PSS_EM01_AC_Current2(A)\n200,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM01,IAC3,5m,PSS_EM01_AC_Current3(A)\n201,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,EAI,5m,PSS_EM02_Energy_Import(kwh)\n202,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,EAI_DAY,5m,PSS_EM02_Energy_Import_Day(kwh)\n203,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,EAE,5m,PSS_EM02_Energy_Export(kwh)\n204,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,EAE_DAY,5m,PSS_EM02_Energy_Export_Day(kwh)\n205,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,PAC,5m,PSS_EM02_AC_Power(kw)\n206,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,QAC,5m,PSS_EM02_Reactive_Power(kvar)\n207,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,SAC,5m,PSS_EM02_Apparent_Power(kva)\n208,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,PF,5m,PSS_EM02_Power_Factor(-)\n209,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC1,5m,PSS_EM02_AC_Voltage1(v)\n210,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC2,5m,PSS_EM02_AC_Voltage2(v)\n211,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC3,5m,PSS_EM02_AC_Voltage3(v)\n212,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC12,5m,PSS_EM02_AC_VoltageRY(v)\n213,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC23,5m,PSS_EM02_AC_VoltageYB(v)\n214,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,UAC31,5m,PSS_EM02_AC_VoltageBR(v)\n215,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,IAC1,5m,PSS_EM02_AC_Current1(A)\n216,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,IAC2,5m,PSS_EM02_AC_Current2(A)\n217,ampluslargeutility,v,Amplus_34MW,Block C 10,PSS_EM02,IAC3,5m,PSS_EM02_AC_Current3(A)\n",
        "output": "str",
        "x": 390,
        "y": 1340,
        "wires": [
            [
                "69d9e8a89218c9df"
            ]
        ]
    },
    {
        "id": "42dd228a21db1abe",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "8c1fb78fc3ba1146"
            ]
        ]
    },
    {
        "id": "73ea4d5cdba67deb",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "42dd228a21db1abe",
                "338b90d7b1c14d36"
            ]
        ]
    },
    {
        "id": "8c1fb78fc3ba1146",
        "type": "influxdb in",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 240,
        "wires": [
            [
                "6e3dbb3d21c5c6c3"
            ]
        ]
    },
    {
        "id": "338b90d7b1c14d36",
        "type": "change",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 160,
        "wires": [
            [
                "6e3dbb3d21c5c6c3"
            ]
        ]
    },
    {
        "id": "9c273304e423a349",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "b2405004eb513250"
            ]
        ]
    },
    {
        "id": "b24bb4085614e04c",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 200,
        "wires": [
            [
                "4c8a9bf50de6d416"
            ]
        ]
    },
    {
        "id": "4c8a9bf50de6d416",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "2c5c334e0b5dc4ed",
                "f76f81e11c99c66e"
            ]
        ]
    },
    {
        "id": "6e3dbb3d21c5c6c3",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 200,
        "wires": [
            [
                "b24bb4085614e04c"
            ]
        ]
    },
    {
        "id": "05464c8e0dcab680",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 280,
        "wires": []
    },
    {
        "id": "2c5c334e0b5dc4ed",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 200,
        "wires": [
            [
                "240e9559d63e190c"
            ]
        ]
    },
    {
        "id": "240e9559d63e190c",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "489943b228a39332"
            ]
        ]
    },
    {
        "id": "489943b228a39332",
        "type": "file",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 280,
        "wires": [
            [
                "05464c8e0dcab680"
            ]
        ]
    },
    {
        "id": "b2405004eb513250",
        "type": "delay",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 140,
        "wires": [
            [
                "3b50fd5f2d418197"
            ]
        ]
    },
    {
        "id": "fbea7719ea8b2863",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "debug 1838",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 420,
        "wires": []
    },
    {
        "id": "e844598ddee7a1b2",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 420,
        "wires": [
            [
                "fbea7719ea8b2863"
            ]
        ]
    },
    {
        "id": "4b61c66d121d185d",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "e844598ddee7a1b2"
            ]
        ]
    },
    {
        "id": "ea2a4f595c3518a6",
        "type": "file in",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 420,
        "wires": [
            [
                "4b61c66d121d185d"
            ]
        ]
    },
    {
        "id": "ca982f28de69ed91",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 420,
        "wires": [
            [
                "ea2a4f595c3518a6"
            ]
        ]
    },
    {
        "id": "f26fc9ef29c1e621",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "ca982f28de69ed91"
            ]
        ]
    },
    {
        "id": "4a4fb6de351560d6",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "debug 1839",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 520,
        "wires": []
    },
    {
        "id": "7931c5e8de0c1abd",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 520,
        "wires": [
            [
                "4a4fb6de351560d6"
            ]
        ]
    },
    {
        "id": "fedf86dae4b79962",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 520,
        "wires": [
            [
                "7931c5e8de0c1abd"
            ]
        ]
    },
    {
        "id": "2aacc3c4734e0d22",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "d1b47dc40179eaab",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 520,
        "wires": [
            [
                "fedf86dae4b79962"
            ]
        ]
    },
    {
        "id": "f76f81e11c99c66e",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 160,
        "wires": []
    },
    {
        "id": "3b50fd5f2d418197",
        "type": "template",
        "z": "b66bd877793ab767",
        "g": "e2abe4a5781fa591",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC1,5m,INV1A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC2,5m,INV1A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC3,5m,INV1A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC4,5m,INV1A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC5,5m,INV1A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC6,5m,INV1A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC7,5m,INV1A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC8,5m,INV1A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC9,5m,INV1A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC10,5m,INV1A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC11,5m,INV1A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC12,5m,INV1A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC13,5m,INV1A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC14,5m,INV1A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC15,5m,INV1A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC16,5m,INV1A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC17,5m,INV1A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC18,5m,INV1A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC19,5m,INV1A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC20,5m,INV1A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC21,5m,INV1A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC22,5m,INV1A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC23,5m,INV1A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU01,IDC24,5m,INV1A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC1,5m,INV1A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC2,5m,INV1A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC3,5m,INV1A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC4,5m,INV1A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC5,5m,INV1A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC6,5m,INV1A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC7,5m,INV1A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC8,5m,INV1A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC9,5m,INV1A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC10,5m,INV1A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC11,5m,INV1A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC12,5m,INV1A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC13,5m,INV1A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC14,5m,INV1A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC15,5m,INV1A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC16,5m,INV1A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC17,5m,INV1A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC18,5m,INV1A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC19,5m,INV1A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC20,5m,INV1A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC21,5m,INV1A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC22,5m,INV1A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC23,5m,INV1A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU02,IDC24,5m,INV1A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC1,5m,INV1A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC2,5m,INV1A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC3,5m,INV1A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC4,5m,INV1A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC5,5m,INV1A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC6,5m,INV1A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC7,5m,INV1A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC8,5m,INV1A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC9,5m,INV1A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC10,5m,INV1A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC11,5m,INV1A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC12,5m,INV1A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC13,5m,INV1A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC14,5m,INV1A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC15,5m,INV1A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC16,5m,INV1A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC17,5m,INV1A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC18,5m,INV1A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC19,5m,INV1A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC20,5m,INV1A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC21,5m,INV1A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC22,5m,INV1A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC23,5m,INV1A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU03,IDC24,5m,INV1A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC1,5m,INV1A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC2,5m,INV1A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC3,5m,INV1A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC4,5m,INV1A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC5,5m,INV1A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC6,5m,INV1A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC7,5m,INV1A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC8,5m,INV1A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC9,5m,INV1A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC10,5m,INV1A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC11,5m,INV1A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC12,5m,INV1A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC13,5m,INV1A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC14,5m,INV1A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC15,5m,INV1A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC16,5m,INV1A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC17,5m,INV1A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC18,5m,INV1A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC19,5m,INV1A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC20,5m,INV1A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC21,5m,INV1A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC22,5m,INV1A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC23,5m,INV1A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU04,IDC24,5m,INV1A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC1,5m,INV1A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC2,5m,INV1A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC3,5m,INV1A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC4,5m,INV1A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC5,5m,INV1A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC6,5m,INV1A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC7,5m,INV1A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC8,5m,INV1A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC9,5m,INV1A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC10,5m,INV1A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC11,5m,INV1A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC12,5m,INV1A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC13,5m,INV1A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC14,5m,INV1A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC15,5m,INV1A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC16,5m,INV1A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC17,5m,INV1A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC18,5m,INV1A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC19,5m,INV1A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC20,5m,INV1A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC21,5m,INV1A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC22,5m,INV1A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC23,5m,INV1A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU05,IDC24,5m,INV1A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC1,5m,INV1A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC2,5m,INV1A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC3,5m,INV1A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC4,5m,INV1A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC5,5m,INV1A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC6,5m,INV1A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC7,5m,INV1A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC8,5m,INV1A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC9,5m,INV1A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC10,5m,INV1A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC11,5m,INV1A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC12,5m,INV1A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC13,5m,INV1A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC14,5m,INV1A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC15,5m,INV1A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC16,5m,INV1A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC17,5m,INV1A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC18,5m,INV1A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC19,5m,INV1A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC20,5m,INV1A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC21,5m,INV1A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC22,5m,INV1A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC23,5m,INV1A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU06,IDC24,5m,INV1A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC1,5m,INV1A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC2,5m,INV1A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC3,5m,INV1A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC4,5m,INV1A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC5,5m,INV1A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC6,5m,INV1A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC7,5m,INV1A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC8,5m,INV1A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC9,5m,INV1A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC10,5m,INV1A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC11,5m,INV1A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC12,5m,INV1A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC13,5m,INV1A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC14,5m,INV1A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC15,5m,INV1A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC16,5m,INV1A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC17,5m,INV1A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC18,5m,INV1A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC19,5m,INV1A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC20,5m,INV1A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC21,5m,INV1A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC22,5m,INV1A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC23,5m,INV1A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU07,IDC24,5m,INV1A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC1,5m,INV1A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC2,5m,INV1A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC3,5m,INV1A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC4,5m,INV1A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC5,5m,INV1A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC6,5m,INV1A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC7,5m,INV1A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC8,5m,INV1A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC9,5m,INV1A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC10,5m,INV1A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC11,5m,INV1A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC12,5m,INV1A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC13,5m,INV1A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC14,5m,INV1A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC15,5m,INV1A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC16,5m,INV1A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC17,5m,INV1A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC18,5m,INV1A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC19,5m,INV1A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC20,5m,INV1A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC21,5m,INV1A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC22,5m,INV1A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC23,5m,INV1A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC24,5m,INV1A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC25,5m,INV1A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC26,5m,INV1A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC27,5m,INV1A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC28,5m,INV1A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC29,5m,INV1A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC30,5m,INV1A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC31,5m,INV1A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV1_SMU08,IDC32,5m,INV1A_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "73ea4d5cdba67deb"
            ]
        ]
    },
    {
        "id": "c4bfefc6d2b99a07",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 780,
        "wires": [
            [
                "f2aedd48eec0e8f9"
            ]
        ]
    },
    {
        "id": "398cd3341cf8aaaa",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 700,
        "wires": [
            [
                "c4bfefc6d2b99a07",
                "6019cf6495c1eba9"
            ]
        ]
    },
    {
        "id": "f2aedd48eec0e8f9",
        "type": "influxdb in",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "118b337805a3ef1f"
            ]
        ]
    },
    {
        "id": "6019cf6495c1eba9",
        "type": "change",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 700,
        "wires": [
            [
                "118b337805a3ef1f"
            ]
        ]
    },
    {
        "id": "74982170a5c970cf",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 700,
        "wires": [
            [
                "19e1bb2cca80763f"
            ]
        ]
    },
    {
        "id": "400e29e75aad3d13",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "21b6799c388e230e"
            ]
        ]
    },
    {
        "id": "21b6799c388e230e",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 740,
        "wires": [
            [
                "9d142775c3fcb44f",
                "26183ecfc075a983"
            ]
        ]
    },
    {
        "id": "118b337805a3ef1f",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 740,
        "wires": [
            [
                "400e29e75aad3d13"
            ]
        ]
    },
    {
        "id": "f83219bd1871d068",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 820,
        "wires": []
    },
    {
        "id": "9d142775c3fcb44f",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 740,
        "wires": [
            [
                "7872ac5172f60162"
            ]
        ]
    },
    {
        "id": "7872ac5172f60162",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "e3533793eed581d9"
            ]
        ]
    },
    {
        "id": "e3533793eed581d9",
        "type": "file",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 820,
        "wires": [
            [
                "f83219bd1871d068"
            ]
        ]
    },
    {
        "id": "19e1bb2cca80763f",
        "type": "delay",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "6be1814c887795b7"
            ]
        ]
    },
    {
        "id": "11ce037f623fa690",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "debug 1842",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 960,
        "wires": []
    },
    {
        "id": "296336477cef62b2",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 960,
        "wires": [
            [
                "11ce037f623fa690"
            ]
        ]
    },
    {
        "id": "fc4b73a530d5e335",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 960,
        "wires": [
            [
                "296336477cef62b2"
            ]
        ]
    },
    {
        "id": "0836effb5a33f6d0",
        "type": "file in",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 960,
        "wires": [
            [
                "fc4b73a530d5e335"
            ]
        ]
    },
    {
        "id": "b8441078018238e9",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 960,
        "wires": [
            [
                "0836effb5a33f6d0"
            ]
        ]
    },
    {
        "id": "670d641a9735048d",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 960,
        "wires": [
            [
                "b8441078018238e9"
            ]
        ]
    },
    {
        "id": "75350a56a26a64ba",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "debug 1843",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6fde68059d201961",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "75350a56a26a64ba"
            ]
        ]
    },
    {
        "id": "2bd8b49c7616b97e",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "6fde68059d201961"
            ]
        ]
    },
    {
        "id": "4d1433e7f8504d10",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "850f6e42171e27e1",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "2bd8b49c7616b97e"
            ]
        ]
    },
    {
        "id": "26183ecfc075a983",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 700,
        "wires": []
    },
    {
        "id": "6be1814c887795b7",
        "type": "template",
        "z": "b66bd877793ab767",
        "g": "a1db098c0c069a6e",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC1,5m,INV1B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC2,5m,INV1B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC3,5m,INV1B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC4,5m,INV1B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC5,5m,INV1B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC6,5m,INV1B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC7,5m,INV1B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC8,5m,INV1B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC9,5m,INV1B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC10,5m,INV1B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC11,5m,INV1B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC12,5m,INV1B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC13,5m,INV1B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC14,5m,INV1B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC15,5m,INV1B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC16,5m,INV1B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC17,5m,INV1B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC18,5m,INV1B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC19,5m,INV1B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC20,5m,INV1B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC21,5m,INV1B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC22,5m,INV1B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC23,5m,INV1B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU09,IDC24,5m,INV1B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC1,5m,INV1B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC2,5m,INV1B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC3,5m,INV1B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC4,5m,INV1B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC5,5m,INV1B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC6,5m,INV1B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC7,5m,INV1B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC8,5m,INV1B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC9,5m,INV1B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC10,5m,INV1B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC11,5m,INV1B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC12,5m,INV1B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC13,5m,INV1B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC14,5m,INV1B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC15,5m,INV1B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC16,5m,INV1B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC17,5m,INV1B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC18,5m,INV1B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC19,5m,INV1B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC20,5m,INV1B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC21,5m,INV1B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC22,5m,INV1B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC23,5m,INV1B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU10,IDC24,5m,INV1B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC1,5m,INV1B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC2,5m,INV1B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC3,5m,INV1B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC4,5m,INV1B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC5,5m,INV1B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC6,5m,INV1B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC7,5m,INV1B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC8,5m,INV1B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC9,5m,INV1B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC10,5m,INV1B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC11,5m,INV1B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC12,5m,INV1B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC13,5m,INV1B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC14,5m,INV1B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC15,5m,INV1B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC16,5m,INV1B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC17,5m,INV1B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC18,5m,INV1B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC19,5m,INV1B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC20,5m,INV1B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC21,5m,INV1B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC22,5m,INV1B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC23,5m,INV1B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU11,IDC24,5m,INV1B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC1,5m,INV1B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC2,5m,INV1B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC3,5m,INV1B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC4,5m,INV1B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC5,5m,INV1B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC6,5m,INV1B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC7,5m,INV1B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC8,5m,INV1B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC9,5m,INV1B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC10,5m,INV1B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC11,5m,INV1B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC12,5m,INV1B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC13,5m,INV1B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC14,5m,INV1B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC15,5m,INV1B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC16,5m,INV1B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC17,5m,INV1B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC18,5m,INV1B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC19,5m,INV1B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC20,5m,INV1B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC21,5m,INV1B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC22,5m,INV1B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC23,5m,INV1B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU12,IDC24,5m,INV1B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC1,5m,INV1B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC2,5m,INV1B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC3,5m,INV1B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC4,5m,INV1B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC5,5m,INV1B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC6,5m,INV1B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC7,5m,INV1B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC8,5m,INV1B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC9,5m,INV1B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC10,5m,INV1B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC11,5m,INV1B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC12,5m,INV1B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC13,5m,INV1B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC14,5m,INV1B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC15,5m,INV1B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC16,5m,INV1B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC17,5m,INV1B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC18,5m,INV1B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC19,5m,INV1B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC20,5m,INV1B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC21,5m,INV1B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC22,5m,INV1B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC23,5m,INV1B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU13,IDC24,5m,INV1B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC1,5m,INV1B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC2,5m,INV1B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC3,5m,INV1B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC4,5m,INV1B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC5,5m,INV1B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC6,5m,INV1B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC7,5m,INV1B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC8,5m,INV1B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC9,5m,INV1B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC10,5m,INV1B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC11,5m,INV1B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC12,5m,INV1B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC13,5m,INV1B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC14,5m,INV1B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC15,5m,INV1B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC16,5m,INV1B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC17,5m,INV1B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC18,5m,INV1B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC19,5m,INV1B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC20,5m,INV1B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC21,5m,INV1B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC22,5m,INV1B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC23,5m,INV1B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU14,IDC24,5m,INV1B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC1,5m,INV1B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC2,5m,INV1B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC3,5m,INV1B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC4,5m,INV1B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC5,5m,INV1B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC6,5m,INV1B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC7,5m,INV1B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC8,5m,INV1B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC9,5m,INV1B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC10,5m,INV1B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC11,5m,INV1B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC12,5m,INV1B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC13,5m,INV1B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC14,5m,INV1B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC15,5m,INV1B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC16,5m,INV1B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC17,5m,INV1B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC18,5m,INV1B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC19,5m,INV1B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC20,5m,INV1B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC21,5m,INV1B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC22,5m,INV1B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC23,5m,INV1B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU15,IDC24,5m,INV1B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC1,5m,INV1B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC2,5m,INV1B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC3,5m,INV1B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC4,5m,INV1B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC5,5m,INV1B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC6,5m,INV1B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC7,5m,INV1B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC8,5m,INV1B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC9,5m,INV1B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC10,5m,INV1B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC11,5m,INV1B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC12,5m,INV1B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC13,5m,INV1B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC14,5m,INV1B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC15,5m,INV1B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC16,5m,INV1B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC17,5m,INV1B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC18,5m,INV1B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC19,5m,INV1B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC20,5m,INV1B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC21,5m,INV1B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC22,5m,INV1B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC23,5m,INV1B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC24,5m,INV1B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC25,5m,INV1B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC26,5m,INV1B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC27,5m,INV1B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC28,5m,INV1B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC29,5m,INV1B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC30,5m,INV1B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC31,5m,INV1B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV2_SMU16,IDC32,5m,INV1B_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "398cd3341cf8aaaa"
            ]
        ]
    },
    {
        "id": "3efa153e0312a7e2",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1380,
        "wires": [
            [
                "5611548e13075d27"
            ]
        ]
    },
    {
        "id": "4a99998e80dd5244",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1300,
        "wires": [
            [
                "3efa153e0312a7e2",
                "e3f61049301120a5"
            ]
        ]
    },
    {
        "id": "5611548e13075d27",
        "type": "influxdb in",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "0ba38c5aa65d1ba8"
            ]
        ]
    },
    {
        "id": "e3f61049301120a5",
        "type": "change",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "0ba38c5aa65d1ba8"
            ]
        ]
    },
    {
        "id": "88aad8f396b18c19",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "0b96707e23e6b3b2"
            ]
        ]
    },
    {
        "id": "3a4084d51eb7c109",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1340,
        "wires": [
            [
                "680a5e3c585d7182"
            ]
        ]
    },
    {
        "id": "680a5e3c585d7182",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1340,
        "wires": [
            [
                "d9ab3b89f175af05",
                "64c38a4844599e47"
            ]
        ]
    },
    {
        "id": "0ba38c5aa65d1ba8",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1340,
        "wires": [
            [
                "3a4084d51eb7c109"
            ]
        ]
    },
    {
        "id": "51ae0858f0546f42",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d9ab3b89f175af05",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1340,
        "wires": [
            [
                "43243eb217c9a83a"
            ]
        ]
    },
    {
        "id": "43243eb217c9a83a",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "726273c27fc86739"
            ]
        ]
    },
    {
        "id": "726273c27fc86739",
        "type": "file",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1420,
        "wires": [
            [
                "51ae0858f0546f42"
            ]
        ]
    },
    {
        "id": "0b96707e23e6b3b2",
        "type": "delay",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1280,
        "wires": [
            [
                "6a90c937e253acea"
            ]
        ]
    },
    {
        "id": "35ffcd5854b8f351",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "debug 1844",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1560,
        "wires": []
    },
    {
        "id": "f98eaf08f7767540",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 1560,
        "wires": [
            [
                "35ffcd5854b8f351"
            ]
        ]
    },
    {
        "id": "58ce2d2a3f24e4c6",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1560,
        "wires": [
            [
                "f98eaf08f7767540"
            ]
        ]
    },
    {
        "id": "58784a2d9bd1407b",
        "type": "file in",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 1560,
        "wires": [
            [
                "58ce2d2a3f24e4c6"
            ]
        ]
    },
    {
        "id": "fbca8b55b427a993",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1560,
        "wires": [
            [
                "58784a2d9bd1407b"
            ]
        ]
    },
    {
        "id": "7b685cf335d04db3",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 1560,
        "wires": [
            [
                "fbca8b55b427a993"
            ]
        ]
    },
    {
        "id": "bd398b6c39c7444f",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "debug 1845",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1660,
        "wires": []
    },
    {
        "id": "743334cff09302d7",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1660,
        "wires": [
            [
                "bd398b6c39c7444f"
            ]
        ]
    },
    {
        "id": "d705b40312198ba5",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1660,
        "wires": [
            [
                "743334cff09302d7"
            ]
        ]
    },
    {
        "id": "36a388bfbedf680d",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "004282200a640371",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1660,
        "wires": [
            [
                "d705b40312198ba5"
            ]
        ]
    },
    {
        "id": "64c38a4844599e47",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1300,
        "wires": []
    },
    {
        "id": "6a90c937e253acea",
        "type": "template",
        "z": "b66bd877793ab767",
        "g": "0de7d8d4955e69d4",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC1,5m,INV1C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC2,5m,INV1C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC3,5m,INV1C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC4,5m,INV1C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC5,5m,INV1C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC6,5m,INV1C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC7,5m,INV1C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC8,5m,INV1C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC9,5m,INV1C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC10,5m,INV1C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC11,5m,INV1C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC12,5m,INV1C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC13,5m,INV1C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC14,5m,INV1C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC15,5m,INV1C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC16,5m,INV1C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC17,5m,INV1C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC18,5m,INV1C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC19,5m,INV1C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC20,5m,INV1C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC21,5m,INV1C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC22,5m,INV1C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC23,5m,INV1C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU17,IDC24,5m,INV1C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC1,5m,INV1C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC2,5m,INV1C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC3,5m,INV1C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC4,5m,INV1C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC5,5m,INV1C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC6,5m,INV1C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC7,5m,INV1C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC8,5m,INV1C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC9,5m,INV1C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC10,5m,INV1C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC11,5m,INV1C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC12,5m,INV1C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC13,5m,INV1C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC14,5m,INV1C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC15,5m,INV1C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC16,5m,INV1C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC17,5m,INV1C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC18,5m,INV1C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC19,5m,INV1C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC20,5m,INV1C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC21,5m,INV1C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC22,5m,INV1C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC23,5m,INV1C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU18,IDC24,5m,INV1C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC1,5m,INV1C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC2,5m,INV1C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC3,5m,INV1C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC4,5m,INV1C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC5,5m,INV1C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC6,5m,INV1C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC7,5m,INV1C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC8,5m,INV1C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC9,5m,INV1C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC10,5m,INV1C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC11,5m,INV1C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC12,5m,INV1C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC13,5m,INV1C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC14,5m,INV1C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC15,5m,INV1C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC16,5m,INV1C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC17,5m,INV1C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC18,5m,INV1C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC19,5m,INV1C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC20,5m,INV1C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC21,5m,INV1C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC22,5m,INV1C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC23,5m,INV1C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU19,IDC24,5m,INV1C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC1,5m,INV1C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC2,5m,INV1C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC3,5m,INV1C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC4,5m,INV1C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC5,5m,INV1C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC6,5m,INV1C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC7,5m,INV1C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC8,5m,INV1C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC9,5m,INV1C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC10,5m,INV1C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC11,5m,INV1C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC12,5m,INV1C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC13,5m,INV1C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC14,5m,INV1C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC15,5m,INV1C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC16,5m,INV1C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC17,5m,INV1C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC18,5m,INV1C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC19,5m,INV1C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC20,5m,INV1C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC21,5m,INV1C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC22,5m,INV1C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC23,5m,INV1C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU20,IDC24,5m,INV1C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC1,5m,INV1C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC2,5m,INV1C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC3,5m,INV1C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC4,5m,INV1C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC5,5m,INV1C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC6,5m,INV1C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC7,5m,INV1C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC8,5m,INV1C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC9,5m,INV1C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC10,5m,INV1C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC11,5m,INV1C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC12,5m,INV1C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC13,5m,INV1C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC14,5m,INV1C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC15,5m,INV1C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC16,5m,INV1C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC17,5m,INV1C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC18,5m,INV1C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC19,5m,INV1C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC20,5m,INV1C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC21,5m,INV1C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC22,5m,INV1C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC23,5m,INV1C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU21,IDC24,5m,INV1C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC1,5m,INV1C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC2,5m,INV1C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC3,5m,INV1C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC4,5m,INV1C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC5,5m,INV1C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC6,5m,INV1C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC7,5m,INV1C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC8,5m,INV1C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC9,5m,INV1C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC10,5m,INV1C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC11,5m,INV1C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC12,5m,INV1C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC13,5m,INV1C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC14,5m,INV1C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC15,5m,INV1C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC16,5m,INV1C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC17,5m,INV1C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC18,5m,INV1C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC19,5m,INV1C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC20,5m,INV1C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC21,5m,INV1C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC22,5m,INV1C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC23,5m,INV1C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU22,IDC24,5m,INV1C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC1,5m,INV1C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC2,5m,INV1C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC3,5m,INV1C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC4,5m,INV1C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC5,5m,INV1C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC6,5m,INV1C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC7,5m,INV1C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC8,5m,INV1C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC9,5m,INV1C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC10,5m,INV1C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC11,5m,INV1C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC12,5m,INV1C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC13,5m,INV1C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC14,5m,INV1C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC15,5m,INV1C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC16,5m,INV1C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC17,5m,INV1C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC18,5m,INV1C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC19,5m,INV1C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC20,5m,INV1C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC21,5m,INV1C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC22,5m,INV1C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC23,5m,INV1C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU23,IDC24,5m,INV1C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC1,5m,INV1C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC2,5m,INV1C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC3,5m,INV1C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC4,5m,INV1C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC5,5m,INV1C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC6,5m,INV1C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC7,5m,INV1C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC8,5m,INV1C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC9,5m,INV1C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC10,5m,INV1C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC11,5m,INV1C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC12,5m,INV1C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC13,5m,INV1C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC14,5m,INV1C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC15,5m,INV1C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC16,5m,INV1C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC17,5m,INV1C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC18,5m,INV1C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC19,5m,INV1C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC20,5m,INV1C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC21,5m,INV1C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC22,5m,INV1C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC23,5m,INV1C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC24,5m,INV1C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC25,5m,INV1C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC26,5m,INV1C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC27,5m,INV1C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC28,5m,INV1C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC29,5m,INV1C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC30,5m,INV1C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC31,5m,INV1C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV3_SMU24,IDC32,5m,INV1C_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "4a99998e80dd5244"
            ]
        ]
    },
    {
        "id": "dabd11ef3388c432",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1960,
        "wires": [
            [
                "a4a90d0a2d72e281"
            ]
        ]
    },
    {
        "id": "fe334263c4199e30",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "dabd11ef3388c432",
                "04566f7e0fa5527d"
            ]
        ]
    },
    {
        "id": "a4a90d0a2d72e281",
        "type": "influxdb in",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1960,
        "wires": [
            [
                "58688324f3633ab3"
            ]
        ]
    },
    {
        "id": "04566f7e0fa5527d",
        "type": "change",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1880,
        "wires": [
            [
                "58688324f3633ab3"
            ]
        ]
    },
    {
        "id": "762c2e6b4f524b4e",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1880,
        "wires": [
            [
                "1142079da6e975f1"
            ]
        ]
    },
    {
        "id": "b3737b70f9b5de54",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1920,
        "wires": [
            [
                "5c30ed62a3585daa"
            ]
        ]
    },
    {
        "id": "5c30ed62a3585daa",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1920,
        "wires": [
            [
                "b8277cf24f130c89",
                "62b8427e4f666e3b"
            ]
        ]
    },
    {
        "id": "58688324f3633ab3",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1920,
        "wires": [
            [
                "b3737b70f9b5de54"
            ]
        ]
    },
    {
        "id": "460a670f8fdfa1b5",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2000,
        "wires": []
    },
    {
        "id": "b8277cf24f130c89",
        "type": "csv",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1920,
        "wires": [
            [
                "a9a1914c158625f7"
            ]
        ]
    },
    {
        "id": "a9a1914c158625f7",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2000,
        "wires": [
            [
                "e8f2f53eba872218"
            ]
        ]
    },
    {
        "id": "e8f2f53eba872218",
        "type": "file",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 2000,
        "wires": [
            [
                "460a670f8fdfa1b5"
            ]
        ]
    },
    {
        "id": "1142079da6e975f1",
        "type": "delay",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1860,
        "wires": [
            [
                "eac0dcbd4a18fe66"
            ]
        ]
    },
    {
        "id": "ad0e99c918641176",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "debug 1846",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 2140,
        "wires": []
    },
    {
        "id": "da5052550acf8aab",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 2140,
        "wires": [
            [
                "ad0e99c918641176"
            ]
        ]
    },
    {
        "id": "1da6961644c101c2",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2140,
        "wires": [
            [
                "da5052550acf8aab"
            ]
        ]
    },
    {
        "id": "36fa314f97aec458",
        "type": "file in",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 2140,
        "wires": [
            [
                "1da6961644c101c2"
            ]
        ]
    },
    {
        "id": "3514a601086df279",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV1D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2140,
        "wires": [
            [
                "36fa314f97aec458"
            ]
        ]
    },
    {
        "id": "3540821c7f2eeb16",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 2140,
        "wires": [
            [
                "3514a601086df279"
            ]
        ]
    },
    {
        "id": "780ffc5acbf32428",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "debug 1847",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2240,
        "wires": []
    },
    {
        "id": "b90d15cee9fc45fa",
        "type": "ftp in",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 2240,
        "wires": [
            [
                "780ffc5acbf32428"
            ]
        ]
    },
    {
        "id": "5534185ae3c0a6ce",
        "type": "function",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV1D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2240,
        "wires": [
            [
                "b90d15cee9fc45fa"
            ]
        ]
    },
    {
        "id": "79fda90ed202e479",
        "type": "cronplus",
        "z": "b66bd877793ab767",
        "g": "33d22f3df4ebc243",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 2240,
        "wires": [
            [
                "5534185ae3c0a6ce"
            ]
        ]
    },
    {
        "id": "62b8427e4f666e3b",
        "type": "debug",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1880,
        "wires": []
    },
    {
        "id": "eac0dcbd4a18fe66",
        "type": "template",
        "z": "b66bd877793ab767",
        "g": "a0d59665140cba19",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC1,5m,INV1D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC2,5m,INV1D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC3,5m,INV1D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC4,5m,INV1D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC5,5m,INV1D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC6,5m,INV1D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC7,5m,INV1D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC8,5m,INV1D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC9,5m,INV1D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC10,5m,INV1D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC11,5m,INV1D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC12,5m,INV1D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC13,5m,INV1D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC14,5m,INV1D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC15,5m,INV1D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC16,5m,INV1D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC17,5m,INV1D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC18,5m,INV1D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC19,5m,INV1D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC20,5m,INV1D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC21,5m,INV1D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC22,5m,INV1D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC23,5m,INV1D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU25,IDC24,5m,INV1D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC1,5m,INV1D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC2,5m,INV1D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC3,5m,INV1D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC4,5m,INV1D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC5,5m,INV1D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC6,5m,INV1D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC7,5m,INV1D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC8,5m,INV1D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC9,5m,INV1D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC10,5m,INV1D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC11,5m,INV1D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC12,5m,INV1D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC13,5m,INV1D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC14,5m,INV1D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC15,5m,INV1D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC16,5m,INV1D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC17,5m,INV1D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC18,5m,INV1D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC19,5m,INV1D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC20,5m,INV1D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC21,5m,INV1D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC22,5m,INV1D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC23,5m,INV1D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU26,IDC24,5m,INV1D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC1,5m,INV1D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC2,5m,INV1D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC3,5m,INV1D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC4,5m,INV1D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC5,5m,INV1D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC6,5m,INV1D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC7,5m,INV1D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC8,5m,INV1D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC9,5m,INV1D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC10,5m,INV1D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC11,5m,INV1D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC12,5m,INV1D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC13,5m,INV1D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC14,5m,INV1D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC15,5m,INV1D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC16,5m,INV1D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC17,5m,INV1D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC18,5m,INV1D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC19,5m,INV1D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC20,5m,INV1D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC21,5m,INV1D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC22,5m,INV1D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC23,5m,INV1D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU27,IDC24,5m,INV1D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC1,5m,INV1D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC2,5m,INV1D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC3,5m,INV1D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC4,5m,INV1D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC5,5m,INV1D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC6,5m,INV1D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC7,5m,INV1D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC8,5m,INV1D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC9,5m,INV1D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC10,5m,INV1D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC11,5m,INV1D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC12,5m,INV1D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC13,5m,INV1D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC14,5m,INV1D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC15,5m,INV1D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC16,5m,INV1D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC17,5m,INV1D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC18,5m,INV1D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC19,5m,INV1D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC20,5m,INV1D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC21,5m,INV1D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC22,5m,INV1D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC23,5m,INV1D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU28,IDC24,5m,INV1D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC1,5m,INV1D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC2,5m,INV1D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC3,5m,INV1D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC4,5m,INV1D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC5,5m,INV1D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC6,5m,INV1D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC7,5m,INV1D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC8,5m,INV1D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC9,5m,INV1D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC10,5m,INV1D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC11,5m,INV1D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC12,5m,INV1D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC13,5m,INV1D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC14,5m,INV1D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC15,5m,INV1D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC16,5m,INV1D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC17,5m,INV1D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC18,5m,INV1D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC19,5m,INV1D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC20,5m,INV1D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC21,5m,INV1D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC22,5m,INV1D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC23,5m,INV1D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU29,IDC24,5m,INV1D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC1,5m,INV1D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC2,5m,INV1D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC3,5m,INV1D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC4,5m,INV1D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC5,5m,INV1D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC6,5m,INV1D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC7,5m,INV1D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC8,5m,INV1D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC9,5m,INV1D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC10,5m,INV1D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC11,5m,INV1D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC12,5m,INV1D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC13,5m,INV1D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC14,5m,INV1D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC15,5m,INV1D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC16,5m,INV1D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC17,5m,INV1D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC18,5m,INV1D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC19,5m,INV1D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC20,5m,INV1D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC21,5m,INV1D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC22,5m,INV1D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC23,5m,INV1D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU30,IDC24,5m,INV1D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC1,5m,INV1D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC2,5m,INV1D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC3,5m,INV1D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC4,5m,INV1D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC5,5m,INV1D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC6,5m,INV1D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC7,5m,INV1D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC8,5m,INV1D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC9,5m,INV1D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC10,5m,INV1D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC11,5m,INV1D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC12,5m,INV1D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC13,5m,INV1D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC14,5m,INV1D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC15,5m,INV1D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC16,5m,INV1D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC17,5m,INV1D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC18,5m,INV1D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC19,5m,INV1D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC20,5m,INV1D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC21,5m,INV1D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC22,5m,INV1D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC23,5m,INV1D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU31,IDC24,5m,INV1D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC1,5m,INV1D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC2,5m,INV1D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC3,5m,INV1D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC4,5m,INV1D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC5,5m,INV1D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC6,5m,INV1D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC7,5m,INV1D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC8,5m,INV1D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC9,5m,INV1D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC10,5m,INV1D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC11,5m,INV1D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC12,5m,INV1D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC13,5m,INV1D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC14,5m,INV1D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC15,5m,INV1D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC16,5m,INV1D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC17,5m,INV1D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC18,5m,INV1D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC19,5m,INV1D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC20,5m,INV1D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC21,5m,INV1D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC22,5m,INV1D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC23,5m,INV1D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC24,5m,INV1D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC25,5m,INV1D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC26,5m,INV1D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC27,5m,INV1D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC28,5m,INV1D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC29,5m,INV1D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC30,5m,INV1D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC31,5m,INV1D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 1,B01_INV4_SMU32,IDC32,5m,INV1D_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1880,
        "wires": [
            [
                "fe334263c4199e30"
            ]
        ]
    },
    {
        "id": "0c67f5c3aec6edca",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "aa5198d9e76e2592"
            ]
        ]
    },
    {
        "id": "cf99b9b8ef7e41c7",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "0c67f5c3aec6edca",
                "600cea19c13ee8e7"
            ]
        ]
    },
    {
        "id": "aa5198d9e76e2592",
        "type": "influxdb in",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "8a3781037dd68b31"
            ]
        ]
    },
    {
        "id": "600cea19c13ee8e7",
        "type": "change",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "8a3781037dd68b31"
            ]
        ]
    },
    {
        "id": "05eff055d9cafa96",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 100,
        "wires": [
            [
                "b616a6eca9dd9308"
            ]
        ]
    },
    {
        "id": "982034714a808be6",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "b5f9265787f388a6"
            ]
        ]
    },
    {
        "id": "b5f9265787f388a6",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": [
            [
                "a4ebbfc2c08633ea",
                "f7c4c4380485d9a0"
            ]
        ]
    },
    {
        "id": "8a3781037dd68b31",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "982034714a808be6"
            ]
        ]
    },
    {
        "id": "9574952c542c397c",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 220,
        "wires": []
    },
    {
        "id": "a4ebbfc2c08633ea",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1310,
        "y": 140,
        "wires": [
            [
                "150fb8e8b74fd7f0"
            ]
        ]
    },
    {
        "id": "150fb8e8b74fd7f0",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "b21d77e48a91a540"
            ]
        ]
    },
    {
        "id": "b21d77e48a91a540",
        "type": "file",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "9574952c542c397c"
            ]
        ]
    },
    {
        "id": "b616a6eca9dd9308",
        "type": "delay",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "eb0aec932ff5312c"
            ]
        ]
    },
    {
        "id": "5abea6e81ad12d77",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "debug 1848",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 360,
        "wires": []
    },
    {
        "id": "84fd44d5f85c107c",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 360,
        "wires": [
            [
                "5abea6e81ad12d77"
            ]
        ]
    },
    {
        "id": "57997b8fb5ce4f7d",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "84fd44d5f85c107c"
            ]
        ]
    },
    {
        "id": "e3848de793b92bd5",
        "type": "file in",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 360,
        "wires": [
            [
                "57997b8fb5ce4f7d"
            ]
        ]
    },
    {
        "id": "86f556fe3a8f9aa7",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [
            [
                "e3848de793b92bd5"
            ]
        ]
    },
    {
        "id": "dec7d7fb3ff8b846",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "86f556fe3a8f9aa7"
            ]
        ]
    },
    {
        "id": "2e2f1e80998ff8ee",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "debug 1849",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 460,
        "wires": []
    },
    {
        "id": "2e94a79d6d0998d5",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 460,
        "wires": [
            [
                "2e2f1e80998ff8ee"
            ]
        ]
    },
    {
        "id": "3f3c94d02cce6cc5",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "2e94a79d6d0998d5"
            ]
        ]
    },
    {
        "id": "a9f0f8ba87a5ee36",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "d7f91ba742509171",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "3f3c94d02cce6cc5"
            ]
        ]
    },
    {
        "id": "f7c4c4380485d9a0",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 100,
        "wires": []
    },
    {
        "id": "eb0aec932ff5312c",
        "type": "template",
        "z": "13bf10f7424e875b",
        "g": "a58be0d9c828aeab",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC1,5m,INV2A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC2,5m,INV2A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC3,5m,INV2A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC4,5m,INV2A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC5,5m,INV2A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC6,5m,INV2A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC7,5m,INV2A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC8,5m,INV2A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC9,5m,INV2A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC10,5m,INV2A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC11,5m,INV2A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC12,5m,INV2A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC13,5m,INV2A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC14,5m,INV2A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC15,5m,INV2A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC16,5m,INV2A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC17,5m,INV2A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC18,5m,INV2A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC19,5m,INV2A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC20,5m,INV2A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC21,5m,INV2A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC22,5m,INV2A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC23,5m,INV2A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU01,IDC24,5m,INV2A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC1,5m,INV2A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC2,5m,INV2A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC3,5m,INV2A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC4,5m,INV2A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC5,5m,INV2A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC6,5m,INV2A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC7,5m,INV2A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC8,5m,INV2A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC9,5m,INV2A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC10,5m,INV2A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC11,5m,INV2A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC12,5m,INV2A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC13,5m,INV2A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC14,5m,INV2A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC15,5m,INV2A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC16,5m,INV2A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC17,5m,INV2A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC18,5m,INV2A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC19,5m,INV2A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC20,5m,INV2A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC21,5m,INV2A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC22,5m,INV2A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC23,5m,INV2A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU02,IDC24,5m,INV2A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC1,5m,INV2A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC2,5m,INV2A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC3,5m,INV2A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC4,5m,INV2A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC5,5m,INV2A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC6,5m,INV2A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC7,5m,INV2A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC8,5m,INV2A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC9,5m,INV2A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC10,5m,INV2A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC11,5m,INV2A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC12,5m,INV2A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC13,5m,INV2A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC14,5m,INV2A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC15,5m,INV2A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC16,5m,INV2A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC17,5m,INV2A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC18,5m,INV2A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC19,5m,INV2A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC20,5m,INV2A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC21,5m,INV2A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC22,5m,INV2A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC23,5m,INV2A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU03,IDC24,5m,INV2A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC1,5m,INV2A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC2,5m,INV2A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC3,5m,INV2A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC4,5m,INV2A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC5,5m,INV2A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC6,5m,INV2A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC7,5m,INV2A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC8,5m,INV2A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC9,5m,INV2A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC10,5m,INV2A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC11,5m,INV2A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC12,5m,INV2A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC13,5m,INV2A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC14,5m,INV2A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC15,5m,INV2A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC16,5m,INV2A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC17,5m,INV2A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC18,5m,INV2A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC19,5m,INV2A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC20,5m,INV2A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC21,5m,INV2A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC22,5m,INV2A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC23,5m,INV2A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU04,IDC24,5m,INV2A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC1,5m,INV2A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC2,5m,INV2A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC3,5m,INV2A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC4,5m,INV2A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC5,5m,INV2A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC6,5m,INV2A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC7,5m,INV2A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC8,5m,INV2A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC9,5m,INV2A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC10,5m,INV2A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC11,5m,INV2A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC12,5m,INV2A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC13,5m,INV2A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC14,5m,INV2A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC15,5m,INV2A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC16,5m,INV2A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC17,5m,INV2A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC18,5m,INV2A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC19,5m,INV2A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC20,5m,INV2A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC21,5m,INV2A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC22,5m,INV2A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC23,5m,INV2A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU05,IDC24,5m,INV2A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC1,5m,INV2A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC2,5m,INV2A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC3,5m,INV2A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC4,5m,INV2A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC5,5m,INV2A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC6,5m,INV2A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC7,5m,INV2A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC8,5m,INV2A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC9,5m,INV2A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC10,5m,INV2A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC11,5m,INV2A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC12,5m,INV2A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC13,5m,INV2A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC14,5m,INV2A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC15,5m,INV2A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC16,5m,INV2A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC17,5m,INV2A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC18,5m,INV2A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC19,5m,INV2A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC20,5m,INV2A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC21,5m,INV2A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC22,5m,INV2A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC23,5m,INV2A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU06,IDC24,5m,INV2A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC1,5m,INV2A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC2,5m,INV2A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC3,5m,INV2A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC4,5m,INV2A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC5,5m,INV2A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC6,5m,INV2A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC7,5m,INV2A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC8,5m,INV2A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC9,5m,INV2A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC10,5m,INV2A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC11,5m,INV2A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC12,5m,INV2A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC13,5m,INV2A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC14,5m,INV2A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC15,5m,INV2A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC16,5m,INV2A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC17,5m,INV2A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC18,5m,INV2A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC19,5m,INV2A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC20,5m,INV2A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC21,5m,INV2A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC22,5m,INV2A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC23,5m,INV2A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU07,IDC24,5m,INV2A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC1,5m,INV2A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC2,5m,INV2A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC3,5m,INV2A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC4,5m,INV2A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC5,5m,INV2A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC6,5m,INV2A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC7,5m,INV2A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC8,5m,INV2A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC9,5m,INV2A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC10,5m,INV2A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC11,5m,INV2A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC12,5m,INV2A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC13,5m,INV2A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC14,5m,INV2A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC15,5m,INV2A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC16,5m,INV2A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC17,5m,INV2A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC18,5m,INV2A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC19,5m,INV2A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC20,5m,INV2A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC21,5m,INV2A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC22,5m,INV2A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC23,5m,INV2A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC24,5m,INV2A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC25,5m,INV2A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC26,5m,INV2A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC27,5m,INV2A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC28,5m,INV2A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC29,5m,INV2A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC30,5m,INV2A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC31,5m,INV2A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV1_SMU08,IDC32,5m,INV2A_SMU8_IDC32\n",
        "output": "str",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "cf99b9b8ef7e41c7"
            ]
        ]
    },
    {
        "id": "87d4f5a0fd589e51",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 720,
        "wires": [
            [
                "123a0161b8d54253"
            ]
        ]
    },
    {
        "id": "5529615113713956",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 550,
        "y": 640,
        "wires": [
            [
                "87d4f5a0fd589e51",
                "5c40c3ae50e01178"
            ]
        ]
    },
    {
        "id": "123a0161b8d54253",
        "type": "influxdb in",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 650,
        "y": 720,
        "wires": [
            [
                "15f81d06f529a76a"
            ]
        ]
    },
    {
        "id": "5c40c3ae50e01178",
        "type": "change",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "15f81d06f529a76a"
            ]
        ]
    },
    {
        "id": "a4d3512427428abb",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 640,
        "wires": [
            [
                "69066af1455ff022"
            ]
        ]
    },
    {
        "id": "d54ed3b0ba32e7f2",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "e22332ac2b5bd634"
            ]
        ]
    },
    {
        "id": "e22332ac2b5bd634",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 680,
        "wires": [
            [
                "d5fe3474554b2e96",
                "c18333e6bb06c595"
            ]
        ]
    },
    {
        "id": "15f81d06f529a76a",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 680,
        "wires": [
            [
                "d54ed3b0ba32e7f2"
            ]
        ]
    },
    {
        "id": "10443914eaea19d4",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 760,
        "wires": []
    },
    {
        "id": "d5fe3474554b2e96",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "84cff165f5e558a0"
            ]
        ]
    },
    {
        "id": "84cff165f5e558a0",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 760,
        "wires": [
            [
                "4a7e88be67086948"
            ]
        ]
    },
    {
        "id": "4a7e88be67086948",
        "type": "file",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "10443914eaea19d4"
            ]
        ]
    },
    {
        "id": "69066af1455ff022",
        "type": "delay",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 620,
        "wires": [
            [
                "623545f7d99370f3"
            ]
        ]
    },
    {
        "id": "807d763016f3a1e8",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "debug 1850",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "0afb32330de95751",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 900,
        "wires": [
            [
                "807d763016f3a1e8"
            ]
        ]
    },
    {
        "id": "70540db1b86893ee",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "0afb32330de95751"
            ]
        ]
    },
    {
        "id": "f9649f7a4178388f",
        "type": "file in",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 900,
        "wires": [
            [
                "70540db1b86893ee"
            ]
        ]
    },
    {
        "id": "93cdb55157928a47",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 900,
        "wires": [
            [
                "f9649f7a4178388f"
            ]
        ]
    },
    {
        "id": "8c3639f792243204",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 320,
        "y": 900,
        "wires": [
            [
                "93cdb55157928a47"
            ]
        ]
    },
    {
        "id": "399f5c286ca94602",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "debug 1851",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3333832453f0e453",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "399f5c286ca94602"
            ]
        ]
    },
    {
        "id": "a9af638138b48fde",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "filename",
        "func": "\nvar today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "3333832453f0e453"
            ]
        ]
    },
    {
        "id": "90d8b2b41e985775",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "f6ece1f5cedc28b7",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "a9af638138b48fde"
            ]
        ]
    },
    {
        "id": "c18333e6bb06c595",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 640,
        "wires": []
    },
    {
        "id": "623545f7d99370f3",
        "type": "template",
        "z": "13bf10f7424e875b",
        "g": "b6ca363017cbb0c1",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC1,5m,INV2B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC2,5m,INV2B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC3,5m,INV2B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC4,5m,INV2B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC5,5m,INV2B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC6,5m,INV2B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC7,5m,INV2B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC8,5m,INV2B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC9,5m,INV2B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC10,5m,INV2B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC11,5m,INV2B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC12,5m,INV2B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC13,5m,INV2B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC14,5m,INV2B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC15,5m,INV2B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC16,5m,INV2B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC17,5m,INV2B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC18,5m,INV2B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC19,5m,INV2B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC20,5m,INV2B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC21,5m,INV2B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC22,5m,INV2B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC23,5m,INV2B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU09,IDC24,5m,INV2B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC1,5m,INV2B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC2,5m,INV2B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC3,5m,INV2B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC4,5m,INV2B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC5,5m,INV2B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC6,5m,INV2B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC7,5m,INV2B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC8,5m,INV2B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC9,5m,INV2B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC10,5m,INV2B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC11,5m,INV2B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC12,5m,INV2B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC13,5m,INV2B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC14,5m,INV2B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC15,5m,INV2B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC16,5m,INV2B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC17,5m,INV2B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC18,5m,INV2B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC19,5m,INV2B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC20,5m,INV2B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC21,5m,INV2B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC22,5m,INV2B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC23,5m,INV2B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU10,IDC24,5m,INV2B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC1,5m,INV2B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC2,5m,INV2B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC3,5m,INV2B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC4,5m,INV2B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC5,5m,INV2B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC6,5m,INV2B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC7,5m,INV2B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC8,5m,INV2B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC9,5m,INV2B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC10,5m,INV2B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC11,5m,INV2B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC12,5m,INV2B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC13,5m,INV2B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC14,5m,INV2B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC15,5m,INV2B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC16,5m,INV2B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC17,5m,INV2B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC18,5m,INV2B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC19,5m,INV2B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC20,5m,INV2B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC21,5m,INV2B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC22,5m,INV2B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC23,5m,INV2B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU11,IDC24,5m,INV2B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC1,5m,INV2B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC2,5m,INV2B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC3,5m,INV2B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC4,5m,INV2B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC5,5m,INV2B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC6,5m,INV2B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC7,5m,INV2B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC8,5m,INV2B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC9,5m,INV2B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC10,5m,INV2B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC11,5m,INV2B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC12,5m,INV2B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC13,5m,INV2B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC14,5m,INV2B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC15,5m,INV2B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC16,5m,INV2B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC17,5m,INV2B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC18,5m,INV2B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC19,5m,INV2B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC20,5m,INV2B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC21,5m,INV2B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC22,5m,INV2B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC23,5m,INV2B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU12,IDC24,5m,INV2B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC1,5m,INV2B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC2,5m,INV2B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC3,5m,INV2B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC4,5m,INV2B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC5,5m,INV2B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC6,5m,INV2B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC7,5m,INV2B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC8,5m,INV2B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC9,5m,INV2B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC10,5m,INV2B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC11,5m,INV2B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC12,5m,INV2B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC13,5m,INV2B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC14,5m,INV2B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC15,5m,INV2B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC16,5m,INV2B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC17,5m,INV2B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC18,5m,INV2B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC19,5m,INV2B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC20,5m,INV2B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC21,5m,INV2B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC22,5m,INV2B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC23,5m,INV2B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU13,IDC24,5m,INV2B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC1,5m,INV2B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC2,5m,INV2B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC3,5m,INV2B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC4,5m,INV2B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC5,5m,INV2B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC6,5m,INV2B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC7,5m,INV2B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC8,5m,INV2B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC9,5m,INV2B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC10,5m,INV2B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC11,5m,INV2B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC12,5m,INV2B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC13,5m,INV2B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC14,5m,INV2B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC15,5m,INV2B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC16,5m,INV2B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC17,5m,INV2B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC18,5m,INV2B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC19,5m,INV2B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC20,5m,INV2B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC21,5m,INV2B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC22,5m,INV2B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC23,5m,INV2B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU14,IDC24,5m,INV2B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC1,5m,INV2B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC2,5m,INV2B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC3,5m,INV2B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC4,5m,INV2B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC5,5m,INV2B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC6,5m,INV2B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC7,5m,INV2B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC8,5m,INV2B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC9,5m,INV2B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC10,5m,INV2B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC11,5m,INV2B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC12,5m,INV2B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC13,5m,INV2B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC14,5m,INV2B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC15,5m,INV2B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC16,5m,INV2B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC17,5m,INV2B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC18,5m,INV2B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC19,5m,INV2B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC20,5m,INV2B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC21,5m,INV2B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC22,5m,INV2B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC23,5m,INV2B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU15,IDC24,5m,INV2B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC1,5m,INV2B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC2,5m,INV2B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC3,5m,INV2B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC4,5m,INV2B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC5,5m,INV2B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC6,5m,INV2B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC7,5m,INV2B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC8,5m,INV2B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC9,5m,INV2B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC10,5m,INV2B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC11,5m,INV2B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC12,5m,INV2B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC13,5m,INV2B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC14,5m,INV2B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC15,5m,INV2B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC16,5m,INV2B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC17,5m,INV2B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC18,5m,INV2B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC19,5m,INV2B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC20,5m,INV2B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC21,5m,INV2B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC22,5m,INV2B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC23,5m,INV2B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC24,5m,INV2B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC25,5m,INV2B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC26,5m,INV2B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC27,5m,INV2B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC28,5m,INV2B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC29,5m,INV2B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC30,5m,INV2B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC31,5m,INV2B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV2_SMU16,IDC32,5m,INV2B_SMU8_IDC32\n",
        "output": "str",
        "x": 410,
        "y": 640,
        "wires": [
            [
                "5529615113713956"
            ]
        ]
    },
    {
        "id": "aeeb4042f33af342",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1300,
        "wires": [
            [
                "1befe0c50f279ef3"
            ]
        ]
    },
    {
        "id": "f874aaabab71297e",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 550,
        "y": 1220,
        "wires": [
            [
                "aeeb4042f33af342",
                "bfc7ca6fdc4692cd"
            ]
        ]
    },
    {
        "id": "1befe0c50f279ef3",
        "type": "influxdb in",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 650,
        "y": 1300,
        "wires": [
            [
                "68a989b9d9028b4b"
            ]
        ]
    },
    {
        "id": "bfc7ca6fdc4692cd",
        "type": "change",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "68a989b9d9028b4b"
            ]
        ]
    },
    {
        "id": "8bbb869d1bf7de4c",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "21ece9e3c3b2985d"
            ]
        ]
    },
    {
        "id": "91bfb337007fa533",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1260,
        "wires": [
            [
                "f169518c905d8847"
            ]
        ]
    },
    {
        "id": "f169518c905d8847",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1260,
        "wires": [
            [
                "67a77bdb498ad8a9",
                "699f89aa4e6463b2"
            ]
        ]
    },
    {
        "id": "68a989b9d9028b4b",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1260,
        "wires": [
            [
                "91bfb337007fa533"
            ]
        ]
    },
    {
        "id": "5ae9a3d50867a9b4",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1340,
        "wires": []
    },
    {
        "id": "67a77bdb498ad8a9",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1310,
        "y": 1260,
        "wires": [
            [
                "ff219c1a3739bb30"
            ]
        ]
    },
    {
        "id": "ff219c1a3739bb30",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1340,
        "wires": [
            [
                "f51e6127fd796d26"
            ]
        ]
    },
    {
        "id": "f51e6127fd796d26",
        "type": "file",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1200,
        "y": 1340,
        "wires": [
            [
                "5ae9a3d50867a9b4"
            ]
        ]
    },
    {
        "id": "21ece9e3c3b2985d",
        "type": "delay",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 1200,
        "wires": [
            [
                "0734609d437a10f6"
            ]
        ]
    },
    {
        "id": "f6270001250e73e8",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "debug 1852",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1480,
        "wires": []
    },
    {
        "id": "feffe37383c63b61",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 1480,
        "wires": [
            [
                "f6270001250e73e8"
            ]
        ]
    },
    {
        "id": "ac7e69914dac3409",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1480,
        "wires": [
            [
                "feffe37383c63b61"
            ]
        ]
    },
    {
        "id": "15d6fdfc9f128892",
        "type": "file in",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 1480,
        "wires": [
            [
                "ac7e69914dac3409"
            ]
        ]
    },
    {
        "id": "9a213b0c9813e3ec",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1480,
        "wires": [
            [
                "15d6fdfc9f128892"
            ]
        ]
    },
    {
        "id": "fad86878ac27d6a9",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 320,
        "y": 1480,
        "wires": [
            [
                "9a213b0c9813e3ec"
            ]
        ]
    },
    {
        "id": "2e6361dca485a48f",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "debug 1853",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1580,
        "wires": []
    },
    {
        "id": "64ed133f27394ccf",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 1580,
        "wires": [
            [
                "2e6361dca485a48f"
            ]
        ]
    },
    {
        "id": "21e341d16fa521d5",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "filename",
        "func": "\nvar today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1580,
        "wires": [
            [
                "64ed133f27394ccf"
            ]
        ]
    },
    {
        "id": "50ec4a6387cd1144",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "71473f342d74240e",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 450,
        "y": 1580,
        "wires": [
            [
                "21e341d16fa521d5"
            ]
        ]
    },
    {
        "id": "699f89aa4e6463b2",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1220,
        "wires": []
    },
    {
        "id": "0734609d437a10f6",
        "type": "template",
        "z": "13bf10f7424e875b",
        "g": "71056b46f16f8e11",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC1,5m,INV2C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC2,5m,INV2C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC3,5m,INV2C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC4,5m,INV2C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC5,5m,INV2C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC6,5m,INV2C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC7,5m,INV2C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC8,5m,INV2C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC9,5m,INV2C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC10,5m,INV2C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC11,5m,INV2C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC12,5m,INV2C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC13,5m,INV2C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC14,5m,INV2C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC15,5m,INV2C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC16,5m,INV2C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC17,5m,INV2C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC18,5m,INV2C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC19,5m,INV2C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC20,5m,INV2C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC21,5m,INV2C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC22,5m,INV2C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC23,5m,INV2C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU17,IDC24,5m,INV2C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC1,5m,INV2C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC2,5m,INV2C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC3,5m,INV2C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC4,5m,INV2C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC5,5m,INV2C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC6,5m,INV2C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC7,5m,INV2C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC8,5m,INV2C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC9,5m,INV2C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC10,5m,INV2C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC11,5m,INV2C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC12,5m,INV2C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC13,5m,INV2C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC14,5m,INV2C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC15,5m,INV2C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC16,5m,INV2C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC17,5m,INV2C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC18,5m,INV2C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC19,5m,INV2C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC20,5m,INV2C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC21,5m,INV2C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC22,5m,INV2C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC23,5m,INV2C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU18,IDC24,5m,INV2C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC1,5m,INV2C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC2,5m,INV2C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC3,5m,INV2C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC4,5m,INV2C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC5,5m,INV2C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC6,5m,INV2C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC7,5m,INV2C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC8,5m,INV2C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC9,5m,INV2C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC10,5m,INV2C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC11,5m,INV2C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC12,5m,INV2C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC13,5m,INV2C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC14,5m,INV2C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC15,5m,INV2C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC16,5m,INV2C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC17,5m,INV2C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC18,5m,INV2C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC19,5m,INV2C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC20,5m,INV2C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC21,5m,INV2C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC22,5m,INV2C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC23,5m,INV2C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU19,IDC24,5m,INV2C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC1,5m,INV2C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC2,5m,INV2C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC3,5m,INV2C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC4,5m,INV2C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC5,5m,INV2C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC6,5m,INV2C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC7,5m,INV2C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC8,5m,INV2C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC9,5m,INV2C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC10,5m,INV2C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC11,5m,INV2C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC12,5m,INV2C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC13,5m,INV2C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC14,5m,INV2C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC15,5m,INV2C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC16,5m,INV2C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC17,5m,INV2C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC18,5m,INV2C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC19,5m,INV2C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC20,5m,INV2C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC21,5m,INV2C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC22,5m,INV2C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC23,5m,INV2C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU20,IDC24,5m,INV2C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC1,5m,INV2C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC2,5m,INV2C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC3,5m,INV2C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC4,5m,INV2C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC5,5m,INV2C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC6,5m,INV2C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC7,5m,INV2C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC8,5m,INV2C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC9,5m,INV2C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC10,5m,INV2C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC11,5m,INV2C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC12,5m,INV2C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC13,5m,INV2C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC14,5m,INV2C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC15,5m,INV2C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC16,5m,INV2C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC17,5m,INV2C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC18,5m,INV2C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC19,5m,INV2C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC20,5m,INV2C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC21,5m,INV2C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC22,5m,INV2C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC23,5m,INV2C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU21,IDC24,5m,INV2C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC1,5m,INV2C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC2,5m,INV2C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC3,5m,INV2C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC4,5m,INV2C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC5,5m,INV2C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC6,5m,INV2C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC7,5m,INV2C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC8,5m,INV2C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC9,5m,INV2C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC10,5m,INV2C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC11,5m,INV2C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC12,5m,INV2C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC13,5m,INV2C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC14,5m,INV2C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC15,5m,INV2C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC16,5m,INV2C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC17,5m,INV2C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC18,5m,INV2C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC19,5m,INV2C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC20,5m,INV2C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC21,5m,INV2C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC22,5m,INV2C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC23,5m,INV2C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU22,IDC24,5m,INV2C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC1,5m,INV2C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC2,5m,INV2C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC3,5m,INV2C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC4,5m,INV2C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC5,5m,INV2C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC6,5m,INV2C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC7,5m,INV2C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC8,5m,INV2C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC9,5m,INV2C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC10,5m,INV2C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC11,5m,INV2C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC12,5m,INV2C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC13,5m,INV2C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC14,5m,INV2C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC15,5m,INV2C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC16,5m,INV2C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC17,5m,INV2C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC18,5m,INV2C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC19,5m,INV2C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC20,5m,INV2C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC21,5m,INV2C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC22,5m,INV2C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC23,5m,INV2C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU23,IDC24,5m,INV2C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC1,5m,INV2C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC2,5m,INV2C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC3,5m,INV2C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC4,5m,INV2C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC5,5m,INV2C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC6,5m,INV2C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC7,5m,INV2C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC8,5m,INV2C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC9,5m,INV2C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC10,5m,INV2C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC11,5m,INV2C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC12,5m,INV2C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC13,5m,INV2C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC14,5m,INV2C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC15,5m,INV2C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC16,5m,INV2C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC17,5m,INV2C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC18,5m,INV2C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC19,5m,INV2C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC20,5m,INV2C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC21,5m,INV2C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC22,5m,INV2C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC23,5m,INV2C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC24,5m,INV2C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC25,5m,INV2C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC26,5m,INV2C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC27,5m,INV2C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC28,5m,INV2C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC29,5m,INV2C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC30,5m,INV2C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC31,5m,INV2C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV3_SMU24,IDC32,5m,INV2C_SMU8_IDC32\n",
        "output": "str",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "f874aaabab71297e"
            ]
        ]
    },
    {
        "id": "fb711d40239d4d77",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1900,
        "wires": [
            [
                "7e0ebd02ad7e4338"
            ]
        ]
    },
    {
        "id": "37a3496a18e04d6b",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 550,
        "y": 1820,
        "wires": [
            [
                "fb711d40239d4d77",
                "038ef3b09f36da34"
            ]
        ]
    },
    {
        "id": "7e0ebd02ad7e4338",
        "type": "influxdb in",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 650,
        "y": 1900,
        "wires": [
            [
                "e826eaf4a710a3e8"
            ]
        ]
    },
    {
        "id": "038ef3b09f36da34",
        "type": "change",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1820,
        "wires": [
            [
                "e826eaf4a710a3e8"
            ]
        ]
    },
    {
        "id": "2add7561831ee528",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "6155542b3c37370c"
            ]
        ]
    },
    {
        "id": "57c643b2eccba5bf",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1860,
        "wires": [
            [
                "67deb2e2d7198538"
            ]
        ]
    },
    {
        "id": "67deb2e2d7198538",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1860,
        "wires": [
            [
                "e2faabcb77b92a9d",
                "dbd40e0416e42a5a"
            ]
        ]
    },
    {
        "id": "e826eaf4a710a3e8",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1860,
        "wires": [
            [
                "57c643b2eccba5bf"
            ]
        ]
    },
    {
        "id": "6c64f6741cef0143",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1940,
        "wires": []
    },
    {
        "id": "e2faabcb77b92a9d",
        "type": "csv",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1310,
        "y": 1860,
        "wires": [
            [
                "1522b36295eeb1ec"
            ]
        ]
    },
    {
        "id": "1522b36295eeb1ec",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1940,
        "wires": [
            [
                "fa46e599958cff6e"
            ]
        ]
    },
    {
        "id": "fa46e599958cff6e",
        "type": "file",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1200,
        "y": 1940,
        "wires": [
            [
                "6c64f6741cef0143"
            ]
        ]
    },
    {
        "id": "6155542b3c37370c",
        "type": "delay",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 1800,
        "wires": [
            [
                "739148fd2b2c4157"
            ]
        ]
    },
    {
        "id": "820eedeb9e589898",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "debug 1854",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2080,
        "wires": []
    },
    {
        "id": "60c54c0dae3f274a",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 2080,
        "wires": [
            [
                "820eedeb9e589898"
            ]
        ]
    },
    {
        "id": "8e507d0ea4f757df",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2080,
        "wires": [
            [
                "60c54c0dae3f274a"
            ]
        ]
    },
    {
        "id": "e42a063b307576e9",
        "type": "file in",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 2080,
        "wires": [
            [
                "8e507d0ea4f757df"
            ]
        ]
    },
    {
        "id": "ee23770442bf71b1",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV2D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2080,
        "wires": [
            [
                "e42a063b307576e9"
            ]
        ]
    },
    {
        "id": "1b80d026586b3661",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 320,
        "y": 2080,
        "wires": [
            [
                "ee23770442bf71b1"
            ]
        ]
    },
    {
        "id": "e89c25fa0e75a263",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "debug 1855",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2180,
        "wires": []
    },
    {
        "id": "93cb284dba18a6b1",
        "type": "ftp in",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 810,
        "y": 2180,
        "wires": [
            [
                "e89c25fa0e75a263"
            ]
        ]
    },
    {
        "id": "1a82a1e408d9e487",
        "type": "function",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\n\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV2D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2180,
        "wires": [
            [
                "93cb284dba18a6b1"
            ]
        ]
    },
    {
        "id": "b657ad6d30a635fe",
        "type": "cronplus",
        "z": "13bf10f7424e875b",
        "g": "033d3ef7431f1893",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 450,
        "y": 2180,
        "wires": [
            [
                "1a82a1e408d9e487"
            ]
        ]
    },
    {
        "id": "dbd40e0416e42a5a",
        "type": "debug",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1820,
        "wires": []
    },
    {
        "id": "739148fd2b2c4157",
        "type": "template",
        "z": "13bf10f7424e875b",
        "g": "16162f02d93d094e",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC1,5m,INV2D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC2,5m,INV2D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC3,5m,INV2D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC4,5m,INV2D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC5,5m,INV2D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC6,5m,INV2D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC7,5m,INV2D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC8,5m,INV2D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC9,5m,INV2D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC10,5m,INV2D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC11,5m,INV2D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC12,5m,INV2D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC13,5m,INV2D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC14,5m,INV2D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC15,5m,INV2D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC16,5m,INV2D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC17,5m,INV2D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC18,5m,INV2D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC19,5m,INV2D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC20,5m,INV2D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC21,5m,INV2D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC22,5m,INV2D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC23,5m,INV2D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU25,IDC24,5m,INV2D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC1,5m,INV2D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC2,5m,INV2D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC3,5m,INV2D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC4,5m,INV2D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC5,5m,INV2D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC6,5m,INV2D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC7,5m,INV2D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC8,5m,INV2D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC9,5m,INV2D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC10,5m,INV2D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC11,5m,INV2D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC12,5m,INV2D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC13,5m,INV2D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC14,5m,INV2D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC15,5m,INV2D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC16,5m,INV2D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC17,5m,INV2D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC18,5m,INV2D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC19,5m,INV2D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC20,5m,INV2D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC21,5m,INV2D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC22,5m,INV2D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC23,5m,INV2D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU26,IDC24,5m,INV2D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC1,5m,INV2D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC2,5m,INV2D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC3,5m,INV2D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC4,5m,INV2D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC5,5m,INV2D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC6,5m,INV2D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC7,5m,INV2D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC8,5m,INV2D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC9,5m,INV2D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC10,5m,INV2D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC11,5m,INV2D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC12,5m,INV2D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC13,5m,INV2D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC14,5m,INV2D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC15,5m,INV2D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC16,5m,INV2D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC17,5m,INV2D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC18,5m,INV2D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC19,5m,INV2D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC20,5m,INV2D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC21,5m,INV2D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC22,5m,INV2D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC23,5m,INV2D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU27,IDC24,5m,INV2D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC1,5m,INV2D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC2,5m,INV2D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC3,5m,INV2D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC4,5m,INV2D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC5,5m,INV2D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC6,5m,INV2D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC7,5m,INV2D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC8,5m,INV2D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC9,5m,INV2D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC10,5m,INV2D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC11,5m,INV2D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC12,5m,INV2D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC13,5m,INV2D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC14,5m,INV2D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC15,5m,INV2D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC16,5m,INV2D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC17,5m,INV2D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC18,5m,INV2D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC19,5m,INV2D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC20,5m,INV2D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC21,5m,INV2D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC22,5m,INV2D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC23,5m,INV2D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU28,IDC24,5m,INV2D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC1,5m,INV2D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC2,5m,INV2D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC3,5m,INV2D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC4,5m,INV2D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC5,5m,INV2D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC6,5m,INV2D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC7,5m,INV2D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC8,5m,INV2D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC9,5m,INV2D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC10,5m,INV2D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC11,5m,INV2D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC12,5m,INV2D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC13,5m,INV2D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC14,5m,INV2D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC15,5m,INV2D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC16,5m,INV2D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC17,5m,INV2D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC18,5m,INV2D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC19,5m,INV2D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC20,5m,INV2D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC21,5m,INV2D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC22,5m,INV2D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC23,5m,INV2D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU29,IDC24,5m,INV2D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC1,5m,INV2D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC2,5m,INV2D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC3,5m,INV2D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC4,5m,INV2D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC5,5m,INV2D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC6,5m,INV2D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC7,5m,INV2D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC8,5m,INV2D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC9,5m,INV2D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC10,5m,INV2D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC11,5m,INV2D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC12,5m,INV2D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC13,5m,INV2D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC14,5m,INV2D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC15,5m,INV2D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC16,5m,INV2D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC17,5m,INV2D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC18,5m,INV2D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC19,5m,INV2D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC20,5m,INV2D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC21,5m,INV2D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC22,5m,INV2D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC23,5m,INV2D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU30,IDC24,5m,INV2D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC1,5m,INV2D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC2,5m,INV2D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC3,5m,INV2D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC4,5m,INV2D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC5,5m,INV2D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC6,5m,INV2D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC7,5m,INV2D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC8,5m,INV2D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC9,5m,INV2D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC10,5m,INV2D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC11,5m,INV2D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC12,5m,INV2D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC13,5m,INV2D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC14,5m,INV2D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC15,5m,INV2D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC16,5m,INV2D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC17,5m,INV2D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC18,5m,INV2D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC19,5m,INV2D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC20,5m,INV2D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC21,5m,INV2D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC22,5m,INV2D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC23,5m,INV2D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU31,IDC24,5m,INV2D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC1,5m,INV2D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC2,5m,INV2D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC3,5m,INV2D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC4,5m,INV2D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC5,5m,INV2D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC6,5m,INV2D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC7,5m,INV2D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC8,5m,INV2D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC9,5m,INV2D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC10,5m,INV2D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC11,5m,INV2D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC12,5m,INV2D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC13,5m,INV2D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC14,5m,INV2D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC15,5m,INV2D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC16,5m,INV2D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC17,5m,INV2D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC18,5m,INV2D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC19,5m,INV2D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC20,5m,INV2D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC21,5m,INV2D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC22,5m,INV2D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC23,5m,INV2D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC24,5m,INV2D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC25,5m,INV2D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC26,5m,INV2D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC27,5m,INV2D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC28,5m,INV2D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC29,5m,INV2D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC30,5m,INV2D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC31,5m,INV2D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 2,B02_INV4_SMU32,IDC32,5m,INV2D_SMU8_IDC32\n",
        "output": "str",
        "x": 410,
        "y": 1820,
        "wires": [
            [
                "37a3496a18e04d6b"
            ]
        ]
    },
    {
        "id": "4724424aea48c5d3",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "ee7c354d4cbc7249"
            ]
        ]
    },
    {
        "id": "45c98a035593e3ec",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "4724424aea48c5d3",
                "e609df3b540af7b7"
            ]
        ]
    },
    {
        "id": "ee7c354d4cbc7249",
        "type": "influxdb in",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 750,
        "y": 200,
        "wires": [
            [
                "8e1b180aa4f77355"
            ]
        ]
    },
    {
        "id": "e609df3b540af7b7",
        "type": "change",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 120,
        "wires": [
            [
                "8e1b180aa4f77355"
            ]
        ]
    },
    {
        "id": "f03c38e85784199c",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "90657fc2ec69ebd7"
            ]
        ]
    },
    {
        "id": "11a63901d067474c",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 160,
        "wires": [
            [
                "d536e286f1dc4f16"
            ]
        ]
    },
    {
        "id": "d536e286f1dc4f16",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 160,
        "wires": [
            [
                "2af4903655aec714",
                "37d2339e1f11da5f"
            ]
        ]
    },
    {
        "id": "8e1b180aa4f77355",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 160,
        "wires": [
            [
                "11a63901d067474c"
            ]
        ]
    },
    {
        "id": "ad2c5f92de6f44e3",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 240,
        "wires": []
    },
    {
        "id": "2af4903655aec714",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1410,
        "y": 160,
        "wires": [
            [
                "0c1d4d0676934c7a"
            ]
        ]
    },
    {
        "id": "0c1d4d0676934c7a",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "6a641bfebba8a297"
            ]
        ]
    },
    {
        "id": "6a641bfebba8a297",
        "type": "file",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "ad2c5f92de6f44e3"
            ]
        ]
    },
    {
        "id": "90657fc2ec69ebd7",
        "type": "delay",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 100,
        "wires": [
            [
                "e0a1c236b736310f"
            ]
        ]
    },
    {
        "id": "9c160436a2c1c601",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "debug 1856",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 380,
        "wires": []
    },
    {
        "id": "c3dbf0547baf33f9",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "9c160436a2c1c601"
            ]
        ]
    },
    {
        "id": "e11626b25f07edc2",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 380,
        "wires": [
            [
                "c3dbf0547baf33f9"
            ]
        ]
    },
    {
        "id": "a07ee1cbf3febd41",
        "type": "file in",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 380,
        "wires": [
            [
                "e11626b25f07edc2"
            ]
        ]
    },
    {
        "id": "68a8de3a921923e5",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "a07ee1cbf3febd41"
            ]
        ]
    },
    {
        "id": "6bd53c4632d30a45",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "68a8de3a921923e5"
            ]
        ]
    },
    {
        "id": "d289336aae4ffacf",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "debug 1857",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 480,
        "wires": []
    },
    {
        "id": "98f1035e32838e19",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 480,
        "wires": [
            [
                "d289336aae4ffacf"
            ]
        ]
    },
    {
        "id": "4282f921d57b7bdd",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3A_SMU\"\nmsg.date=TodaysDate\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 480,
        "wires": [
            [
                "98f1035e32838e19"
            ]
        ]
    },
    {
        "id": "84a417a041ff6c4c",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "230f744e9f1a0c1f",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 550,
        "y": 480,
        "wires": [
            [
                "4282f921d57b7bdd"
            ]
        ]
    },
    {
        "id": "37d2339e1f11da5f",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 120,
        "wires": []
    },
    {
        "id": "e0a1c236b736310f",
        "type": "template",
        "z": "bdb6362ab82f896f",
        "g": "f8c320b4bcc04f6f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC1,5m,INV3A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC2,5m,INV3A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC3,5m,INV3A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC4,5m,INV3A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC5,5m,INV3A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC6,5m,INV3A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC7,5m,INV3A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC8,5m,INV3A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC9,5m,INV3A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC10,5m,INV3A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC11,5m,INV3A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC12,5m,INV3A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC13,5m,INV3A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC14,5m,INV3A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC15,5m,INV3A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC16,5m,INV3A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC17,5m,INV3A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC18,5m,INV3A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC19,5m,INV3A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC20,5m,INV3A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC21,5m,INV3A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC22,5m,INV3A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC23,5m,INV3A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU01,IDC24,5m,INV3A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC1,5m,INV3A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC2,5m,INV3A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC3,5m,INV3A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC4,5m,INV3A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC5,5m,INV3A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC6,5m,INV3A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC7,5m,INV3A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC8,5m,INV3A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC9,5m,INV3A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC10,5m,INV3A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC11,5m,INV3A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC12,5m,INV3A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC13,5m,INV3A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC14,5m,INV3A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC15,5m,INV3A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC16,5m,INV3A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC17,5m,INV3A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC18,5m,INV3A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC19,5m,INV3A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC20,5m,INV3A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC21,5m,INV3A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC22,5m,INV3A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC23,5m,INV3A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU02,IDC24,5m,INV3A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC1,5m,INV3A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC2,5m,INV3A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC3,5m,INV3A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC4,5m,INV3A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC5,5m,INV3A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC6,5m,INV3A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC7,5m,INV3A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC8,5m,INV3A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC9,5m,INV3A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC10,5m,INV3A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC11,5m,INV3A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC12,5m,INV3A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC13,5m,INV3A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC14,5m,INV3A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC15,5m,INV3A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC16,5m,INV3A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC17,5m,INV3A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC18,5m,INV3A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC19,5m,INV3A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC20,5m,INV3A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC21,5m,INV3A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC22,5m,INV3A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC23,5m,INV3A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU03,IDC24,5m,INV3A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC1,5m,INV3A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC2,5m,INV3A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC3,5m,INV3A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC4,5m,INV3A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC5,5m,INV3A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC6,5m,INV3A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC7,5m,INV3A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC8,5m,INV3A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC9,5m,INV3A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC10,5m,INV3A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC11,5m,INV3A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC12,5m,INV3A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC13,5m,INV3A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC14,5m,INV3A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC15,5m,INV3A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC16,5m,INV3A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC17,5m,INV3A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC18,5m,INV3A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC19,5m,INV3A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC20,5m,INV3A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC21,5m,INV3A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC22,5m,INV3A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC23,5m,INV3A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU04,IDC24,5m,INV3A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC1,5m,INV3A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC2,5m,INV3A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC3,5m,INV3A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC4,5m,INV3A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC5,5m,INV3A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC6,5m,INV3A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC7,5m,INV3A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC8,5m,INV3A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC9,5m,INV3A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC10,5m,INV3A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC11,5m,INV3A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC12,5m,INV3A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC13,5m,INV3A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC14,5m,INV3A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC15,5m,INV3A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC16,5m,INV3A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC17,5m,INV3A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC18,5m,INV3A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC19,5m,INV3A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC20,5m,INV3A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC21,5m,INV3A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC22,5m,INV3A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC23,5m,INV3A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU05,IDC24,5m,INV3A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC1,5m,INV3A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC2,5m,INV3A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC3,5m,INV3A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC4,5m,INV3A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC5,5m,INV3A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC6,5m,INV3A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC7,5m,INV3A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC8,5m,INV3A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC9,5m,INV3A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC10,5m,INV3A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC11,5m,INV3A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC12,5m,INV3A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC13,5m,INV3A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC14,5m,INV3A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC15,5m,INV3A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC16,5m,INV3A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC17,5m,INV3A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC18,5m,INV3A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC19,5m,INV3A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC20,5m,INV3A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC21,5m,INV3A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC22,5m,INV3A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC23,5m,INV3A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU06,IDC24,5m,INV3A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC1,5m,INV3A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC2,5m,INV3A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC3,5m,INV3A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC4,5m,INV3A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC5,5m,INV3A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC6,5m,INV3A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC7,5m,INV3A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC8,5m,INV3A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC9,5m,INV3A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC10,5m,INV3A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC11,5m,INV3A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC12,5m,INV3A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC13,5m,INV3A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC14,5m,INV3A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC15,5m,INV3A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC16,5m,INV3A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC17,5m,INV3A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC18,5m,INV3A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC19,5m,INV3A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC20,5m,INV3A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC21,5m,INV3A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC22,5m,INV3A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC23,5m,INV3A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU07,IDC24,5m,INV3A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC1,5m,INV3A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC2,5m,INV3A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC3,5m,INV3A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC4,5m,INV3A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC5,5m,INV3A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC6,5m,INV3A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC7,5m,INV3A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC8,5m,INV3A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC9,5m,INV3A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC10,5m,INV3A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC11,5m,INV3A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC12,5m,INV3A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC13,5m,INV3A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC14,5m,INV3A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC15,5m,INV3A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC16,5m,INV3A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC17,5m,INV3A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC18,5m,INV3A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC19,5m,INV3A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC20,5m,INV3A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC21,5m,INV3A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC22,5m,INV3A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC23,5m,INV3A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC24,5m,INV3A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC25,5m,INV3A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC26,5m,INV3A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC27,5m,INV3A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC28,5m,INV3A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC29,5m,INV3A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC30,5m,INV3A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC31,5m,INV3A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV1_SMU08,IDC32,5m,INV3A_SMU8_IDC32\n",
        "output": "str",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "45c98a035593e3ec"
            ]
        ]
    },
    {
        "id": "62f72251b1ec17e6",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "30868d5a11169fc4"
            ]
        ]
    },
    {
        "id": "2ebdcd2e89b3cae9",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 650,
        "y": 660,
        "wires": [
            [
                "62f72251b1ec17e6",
                "4d360e420ac1d8d5"
            ]
        ]
    },
    {
        "id": "30868d5a11169fc4",
        "type": "influxdb in",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 750,
        "y": 740,
        "wires": [
            [
                "17bc1562b84313eb"
            ]
        ]
    },
    {
        "id": "4d360e420ac1d8d5",
        "type": "change",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "17bc1562b84313eb"
            ]
        ]
    },
    {
        "id": "10202b1c74b5d1c7",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 660,
        "wires": [
            [
                "15d50c126e7966ea"
            ]
        ]
    },
    {
        "id": "570116e28fdbecee",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 700,
        "wires": [
            [
                "53e8310c08bc1591"
            ]
        ]
    },
    {
        "id": "53e8310c08bc1591",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 700,
        "wires": [
            [
                "5474263efeb56245",
                "d768dfa7282c3793"
            ]
        ]
    },
    {
        "id": "17bc1562b84313eb",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 700,
        "wires": [
            [
                "570116e28fdbecee"
            ]
        ]
    },
    {
        "id": "9ab3c5e1df5d3d3c",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 780,
        "wires": []
    },
    {
        "id": "5474263efeb56245",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1410,
        "y": 700,
        "wires": [
            [
                "8d114c6c4f2f3d66"
            ]
        ]
    },
    {
        "id": "8d114c6c4f2f3d66",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 780,
        "wires": [
            [
                "29996369720246cf"
            ]
        ]
    },
    {
        "id": "29996369720246cf",
        "type": "file",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 780,
        "wires": [
            [
                "9ab3c5e1df5d3d3c"
            ]
        ]
    },
    {
        "id": "15d50c126e7966ea",
        "type": "delay",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 640,
        "wires": [
            [
                "77d708bdb3845928"
            ]
        ]
    },
    {
        "id": "d120515d9d15dfa0",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "debug 1858",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "3485df977c5e2b50",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "d120515d9d15dfa0"
            ]
        ]
    },
    {
        "id": "d19e212b51b32616",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 920,
        "wires": [
            [
                "3485df977c5e2b50"
            ]
        ]
    },
    {
        "id": "a1f6767077d0b42d",
        "type": "file in",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 920,
        "wires": [
            [
                "d19e212b51b32616"
            ]
        ]
    },
    {
        "id": "ce0b22f059895e9a",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 920,
        "wires": [
            [
                "a1f6767077d0b42d"
            ]
        ]
    },
    {
        "id": "7e603b7ff07f197d",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 420,
        "y": 920,
        "wires": [
            [
                "ce0b22f059895e9a"
            ]
        ]
    },
    {
        "id": "19978acc66f97286",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "debug 1859",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0240b6aced2f15a0",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "19978acc66f97286"
            ]
        ]
    },
    {
        "id": "0dc9141e2f13766e",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1020,
        "wires": [
            [
                "0240b6aced2f15a0"
            ]
        ]
    },
    {
        "id": "16829e584ea41110",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "8fe756677d860780",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 550,
        "y": 1020,
        "wires": [
            [
                "0dc9141e2f13766e"
            ]
        ]
    },
    {
        "id": "d768dfa7282c3793",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 660,
        "wires": []
    },
    {
        "id": "77d708bdb3845928",
        "type": "template",
        "z": "bdb6362ab82f896f",
        "g": "5507aa51ee6934b1",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC1,5m,INV3B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC2,5m,INV3B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC3,5m,INV3B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC4,5m,INV3B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC5,5m,INV3B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC6,5m,INV3B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC7,5m,INV3B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC8,5m,INV3B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC9,5m,INV3B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC10,5m,INV3B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC11,5m,INV3B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC12,5m,INV3B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC13,5m,INV3B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC14,5m,INV3B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC15,5m,INV3B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC16,5m,INV3B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC17,5m,INV3B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC18,5m,INV3B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC19,5m,INV3B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC20,5m,INV3B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC21,5m,INV3B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC22,5m,INV3B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC23,5m,INV3B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU09,IDC24,5m,INV3B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC1,5m,INV3B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC2,5m,INV3B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC3,5m,INV3B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC4,5m,INV3B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC5,5m,INV3B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC6,5m,INV3B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC7,5m,INV3B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC8,5m,INV3B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC9,5m,INV3B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC10,5m,INV3B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC11,5m,INV3B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC12,5m,INV3B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC13,5m,INV3B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC14,5m,INV3B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC15,5m,INV3B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC16,5m,INV3B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC17,5m,INV3B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC18,5m,INV3B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC19,5m,INV3B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC20,5m,INV3B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC21,5m,INV3B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC22,5m,INV3B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC23,5m,INV3B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU10,IDC24,5m,INV3B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC1,5m,INV3B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC2,5m,INV3B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC3,5m,INV3B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC4,5m,INV3B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC5,5m,INV3B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC6,5m,INV3B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC7,5m,INV3B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC8,5m,INV3B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC9,5m,INV3B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC10,5m,INV3B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC11,5m,INV3B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC12,5m,INV3B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC13,5m,INV3B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC14,5m,INV3B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC15,5m,INV3B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC16,5m,INV3B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC17,5m,INV3B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC18,5m,INV3B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC19,5m,INV3B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC20,5m,INV3B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC21,5m,INV3B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC22,5m,INV3B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC23,5m,INV3B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU11,IDC24,5m,INV3B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC1,5m,INV3B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC2,5m,INV3B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC3,5m,INV3B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC4,5m,INV3B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC5,5m,INV3B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC6,5m,INV3B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC7,5m,INV3B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC8,5m,INV3B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC9,5m,INV3B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC10,5m,INV3B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC11,5m,INV3B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC12,5m,INV3B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC13,5m,INV3B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC14,5m,INV3B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC15,5m,INV3B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC16,5m,INV3B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC17,5m,INV3B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC18,5m,INV3B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC19,5m,INV3B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC20,5m,INV3B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC21,5m,INV3B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC22,5m,INV3B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC23,5m,INV3B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU12,IDC24,5m,INV3B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC1,5m,INV3B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC2,5m,INV3B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC3,5m,INV3B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC4,5m,INV3B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC5,5m,INV3B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC6,5m,INV3B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC7,5m,INV3B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC8,5m,INV3B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC9,5m,INV3B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC10,5m,INV3B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC11,5m,INV3B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC12,5m,INV3B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC13,5m,INV3B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC14,5m,INV3B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC15,5m,INV3B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC16,5m,INV3B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC17,5m,INV3B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC18,5m,INV3B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC19,5m,INV3B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC20,5m,INV3B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC21,5m,INV3B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC22,5m,INV3B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC23,5m,INV3B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU13,IDC24,5m,INV3B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC1,5m,INV3B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC2,5m,INV3B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC3,5m,INV3B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC4,5m,INV3B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC5,5m,INV3B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC6,5m,INV3B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC7,5m,INV3B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC8,5m,INV3B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC9,5m,INV3B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC10,5m,INV3B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC11,5m,INV3B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC12,5m,INV3B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC13,5m,INV3B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC14,5m,INV3B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC15,5m,INV3B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC16,5m,INV3B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC17,5m,INV3B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC18,5m,INV3B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC19,5m,INV3B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC20,5m,INV3B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC21,5m,INV3B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC22,5m,INV3B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC23,5m,INV3B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU14,IDC24,5m,INV3B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC1,5m,INV3B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC2,5m,INV3B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC3,5m,INV3B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC4,5m,INV3B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC5,5m,INV3B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC6,5m,INV3B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC7,5m,INV3B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC8,5m,INV3B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC9,5m,INV3B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC10,5m,INV3B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC11,5m,INV3B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC12,5m,INV3B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC13,5m,INV3B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC14,5m,INV3B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC15,5m,INV3B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC16,5m,INV3B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC17,5m,INV3B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC18,5m,INV3B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC19,5m,INV3B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC20,5m,INV3B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC21,5m,INV3B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC22,5m,INV3B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC23,5m,INV3B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU15,IDC24,5m,INV3B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC1,5m,INV3B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC2,5m,INV3B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC3,5m,INV3B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC4,5m,INV3B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC5,5m,INV3B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC6,5m,INV3B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC7,5m,INV3B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC8,5m,INV3B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC9,5m,INV3B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC10,5m,INV3B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC11,5m,INV3B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC12,5m,INV3B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC13,5m,INV3B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC14,5m,INV3B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC15,5m,INV3B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC16,5m,INV3B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC17,5m,INV3B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC18,5m,INV3B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC19,5m,INV3B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC20,5m,INV3B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC21,5m,INV3B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC22,5m,INV3B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC23,5m,INV3B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC24,5m,INV3B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC25,5m,INV3B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC26,5m,INV3B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC27,5m,INV3B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC28,5m,INV3B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC29,5m,INV3B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC30,5m,INV3B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC31,5m,INV3B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV2_SMU16,IDC32,5m,INV3B_SMU8_IDC32\n",
        "output": "str",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "2ebdcd2e89b3cae9"
            ]
        ]
    },
    {
        "id": "699b53b689f72da1",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1320,
        "wires": [
            [
                "81e32d8cbf33fd9a"
            ]
        ]
    },
    {
        "id": "9599ad6b4c250370",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 650,
        "y": 1240,
        "wires": [
            [
                "699b53b689f72da1",
                "f77603c5ae750fd1"
            ]
        ]
    },
    {
        "id": "81e32d8cbf33fd9a",
        "type": "influxdb in",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 750,
        "y": 1320,
        "wires": [
            [
                "a9502094e72fcb7c"
            ]
        ]
    },
    {
        "id": "f77603c5ae750fd1",
        "type": "change",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 1240,
        "wires": [
            [
                "a9502094e72fcb7c"
            ]
        ]
    },
    {
        "id": "e8c23ad94e920841",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "61f0d7ca7ddcc163"
            ]
        ]
    },
    {
        "id": "a6a7faf26a98e203",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1280,
        "wires": [
            [
                "4366407fc6775cb3"
            ]
        ]
    },
    {
        "id": "4366407fc6775cb3",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1280,
        "wires": [
            [
                "ddae32ef63017d1f",
                "7ba614e60ddea5ec"
            ]
        ]
    },
    {
        "id": "a9502094e72fcb7c",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1280,
        "wires": [
            [
                "a6a7faf26a98e203"
            ]
        ]
    },
    {
        "id": "147cbc15455e5e08",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "ddae32ef63017d1f",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1410,
        "y": 1280,
        "wires": [
            [
                "7842e45db85aa8e8"
            ]
        ]
    },
    {
        "id": "7842e45db85aa8e8",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1360,
        "wires": [
            [
                "a4a3eab8455cb0a9"
            ]
        ]
    },
    {
        "id": "a4a3eab8455cb0a9",
        "type": "file",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 1360,
        "wires": [
            [
                "147cbc15455e5e08"
            ]
        ]
    },
    {
        "id": "61f0d7ca7ddcc163",
        "type": "delay",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "14ba17f4c55e62dc"
            ]
        ]
    },
    {
        "id": "e578ff4e255f2d1f",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "debug 1860",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d0f25bea05700a51",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1010,
        "y": 1500,
        "wires": [
            [
                "e578ff4e255f2d1f"
            ]
        ]
    },
    {
        "id": "b8edc980485fa1b4",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1500,
        "wires": [
            [
                "d0f25bea05700a51"
            ]
        ]
    },
    {
        "id": "892b3816a01688e8",
        "type": "file in",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 1500,
        "wires": [
            [
                "b8edc980485fa1b4"
            ]
        ]
    },
    {
        "id": "fee4d1f92b40ec1e",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1500,
        "wires": [
            [
                "892b3816a01688e8"
            ]
        ]
    },
    {
        "id": "545c9b32917a5cba",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 420,
        "y": 1500,
        "wires": [
            [
                "fee4d1f92b40ec1e"
            ]
        ]
    },
    {
        "id": "0985a1a4be4933ed",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "debug 1861",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e94453355dadc823",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 1600,
        "wires": [
            [
                "0985a1a4be4933ed"
            ]
        ]
    },
    {
        "id": "35d3d631ddd94afe",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1600,
        "wires": [
            [
                "e94453355dadc823"
            ]
        ]
    },
    {
        "id": "4a31bedd0f22fcd2",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "c7897e187752cbf7",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 550,
        "y": 1600,
        "wires": [
            [
                "35d3d631ddd94afe"
            ]
        ]
    },
    {
        "id": "7ba614e60ddea5ec",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1240,
        "wires": []
    },
    {
        "id": "14ba17f4c55e62dc",
        "type": "template",
        "z": "bdb6362ab82f896f",
        "g": "98122507ca08ea60",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC1,5m,INV3C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC2,5m,INV3C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC3,5m,INV3C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC4,5m,INV3C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC5,5m,INV3C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC6,5m,INV3C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC7,5m,INV3C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC8,5m,INV3C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC9,5m,INV3C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC10,5m,INV3C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC11,5m,INV3C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC12,5m,INV3C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC13,5m,INV3C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC14,5m,INV3C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC15,5m,INV3C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC16,5m,INV3C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC17,5m,INV3C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC18,5m,INV3C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC19,5m,INV3C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC20,5m,INV3C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC21,5m,INV3C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC22,5m,INV3C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC23,5m,INV3C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU17,IDC24,5m,INV3C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC1,5m,INV3C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC2,5m,INV3C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC3,5m,INV3C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC4,5m,INV3C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC5,5m,INV3C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC6,5m,INV3C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC7,5m,INV3C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC8,5m,INV3C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC9,5m,INV3C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC10,5m,INV3C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC11,5m,INV3C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC12,5m,INV3C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC13,5m,INV3C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC14,5m,INV3C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC15,5m,INV3C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC16,5m,INV3C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC17,5m,INV3C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC18,5m,INV3C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC19,5m,INV3C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC20,5m,INV3C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC21,5m,INV3C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC22,5m,INV3C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC23,5m,INV3C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU18,IDC24,5m,INV3C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC1,5m,INV3C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC2,5m,INV3C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC3,5m,INV3C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC4,5m,INV3C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC5,5m,INV3C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC6,5m,INV3C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC7,5m,INV3C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC8,5m,INV3C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC9,5m,INV3C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC10,5m,INV3C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC11,5m,INV3C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC12,5m,INV3C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC13,5m,INV3C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC14,5m,INV3C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC15,5m,INV3C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC16,5m,INV3C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC17,5m,INV3C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC18,5m,INV3C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC19,5m,INV3C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC20,5m,INV3C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC21,5m,INV3C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC22,5m,INV3C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC23,5m,INV3C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU19,IDC24,5m,INV3C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC1,5m,INV3C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC2,5m,INV3C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC3,5m,INV3C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC4,5m,INV3C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC5,5m,INV3C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC6,5m,INV3C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC7,5m,INV3C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC8,5m,INV3C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC9,5m,INV3C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC10,5m,INV3C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC11,5m,INV3C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC12,5m,INV3C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC13,5m,INV3C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC14,5m,INV3C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC15,5m,INV3C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC16,5m,INV3C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC17,5m,INV3C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC18,5m,INV3C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC19,5m,INV3C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC20,5m,INV3C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC21,5m,INV3C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC22,5m,INV3C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC23,5m,INV3C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU20,IDC24,5m,INV3C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC1,5m,INV3C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC2,5m,INV3C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC3,5m,INV3C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC4,5m,INV3C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC5,5m,INV3C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC6,5m,INV3C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC7,5m,INV3C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC8,5m,INV3C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC9,5m,INV3C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC10,5m,INV3C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC11,5m,INV3C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC12,5m,INV3C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC13,5m,INV3C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC14,5m,INV3C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC15,5m,INV3C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC16,5m,INV3C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC17,5m,INV3C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC18,5m,INV3C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC19,5m,INV3C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC20,5m,INV3C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC21,5m,INV3C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC22,5m,INV3C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC23,5m,INV3C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU21,IDC24,5m,INV3C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC1,5m,INV3C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC2,5m,INV3C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC3,5m,INV3C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC4,5m,INV3C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC5,5m,INV3C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC6,5m,INV3C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC7,5m,INV3C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC8,5m,INV3C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC9,5m,INV3C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC10,5m,INV3C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC11,5m,INV3C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC12,5m,INV3C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC13,5m,INV3C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC14,5m,INV3C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC15,5m,INV3C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC16,5m,INV3C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC17,5m,INV3C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC18,5m,INV3C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC19,5m,INV3C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC20,5m,INV3C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC21,5m,INV3C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC22,5m,INV3C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC23,5m,INV3C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU22,IDC24,5m,INV3C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC1,5m,INV3C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC2,5m,INV3C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC3,5m,INV3C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC4,5m,INV3C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC5,5m,INV3C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC6,5m,INV3C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC7,5m,INV3C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC8,5m,INV3C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC9,5m,INV3C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC10,5m,INV3C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC11,5m,INV3C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC12,5m,INV3C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC13,5m,INV3C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC14,5m,INV3C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC15,5m,INV3C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC16,5m,INV3C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC17,5m,INV3C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC18,5m,INV3C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC19,5m,INV3C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC20,5m,INV3C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC21,5m,INV3C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC22,5m,INV3C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC23,5m,INV3C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU23,IDC24,5m,INV3C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC1,5m,INV3C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC2,5m,INV3C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC3,5m,INV3C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC4,5m,INV3C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC5,5m,INV3C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC6,5m,INV3C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC7,5m,INV3C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC8,5m,INV3C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC9,5m,INV3C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC10,5m,INV3C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC11,5m,INV3C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC12,5m,INV3C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC13,5m,INV3C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC14,5m,INV3C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC15,5m,INV3C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC16,5m,INV3C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC17,5m,INV3C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC18,5m,INV3C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC19,5m,INV3C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC20,5m,INV3C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC21,5m,INV3C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC22,5m,INV3C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC23,5m,INV3C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC24,5m,INV3C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC25,5m,INV3C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC26,5m,INV3C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC27,5m,INV3C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC28,5m,INV3C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC29,5m,INV3C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC30,5m,INV3C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC31,5m,INV3C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV3_SMU24,IDC32,5m,INV3C_SMU8_IDC32\n",
        "output": "str",
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "9599ad6b4c250370"
            ]
        ]
    },
    {
        "id": "d3fcce1448a61542",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "d0f8b8a36ce2bdae"
            ]
        ]
    },
    {
        "id": "7d69bd81bd874771",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 650,
        "y": 1840,
        "wires": [
            [
                "d3fcce1448a61542",
                "a4d3e2a1e6efa546"
            ]
        ]
    },
    {
        "id": "d0f8b8a36ce2bdae",
        "type": "influxdb in",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 750,
        "y": 1920,
        "wires": [
            [
                "494370a966cd9261"
            ]
        ]
    },
    {
        "id": "a4d3e2a1e6efa546",
        "type": "change",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 1840,
        "wires": [
            [
                "494370a966cd9261"
            ]
        ]
    },
    {
        "id": "4743a09b12d37f68",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 1840,
        "wires": [
            [
                "aecf11ae4447954b"
            ]
        ]
    },
    {
        "id": "d1a907c7723fc09e",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1880,
        "wires": [
            [
                "168fe5aa755b8313"
            ]
        ]
    },
    {
        "id": "168fe5aa755b8313",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1880,
        "wires": [
            [
                "39435c7a063eab20",
                "7824797d31139c45"
            ]
        ]
    },
    {
        "id": "494370a966cd9261",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1880,
        "wires": [
            [
                "d1a907c7723fc09e"
            ]
        ]
    },
    {
        "id": "a5c034e5cc13b7ab",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1960,
        "wires": []
    },
    {
        "id": "39435c7a063eab20",
        "type": "csv",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1410,
        "y": 1880,
        "wires": [
            [
                "9414a6ca730c52aa"
            ]
        ]
    },
    {
        "id": "9414a6ca730c52aa",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1960,
        "wires": [
            [
                "b3a7ce1f5d4ec804"
            ]
        ]
    },
    {
        "id": "b3a7ce1f5d4ec804",
        "type": "file",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 1960,
        "wires": [
            [
                "a5c034e5cc13b7ab"
            ]
        ]
    },
    {
        "id": "aecf11ae4447954b",
        "type": "delay",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 1820,
        "wires": [
            [
                "25979f00b544d15d"
            ]
        ]
    },
    {
        "id": "e6f6dfdf50ef9636",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "debug 1862",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2100,
        "wires": []
    },
    {
        "id": "5d58ec5d72d7a1ea",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1010,
        "y": 2100,
        "wires": [
            [
                "e6f6dfdf50ef9636"
            ]
        ]
    },
    {
        "id": "a38134480efba630",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2100,
        "wires": [
            [
                "5d58ec5d72d7a1ea"
            ]
        ]
    },
    {
        "id": "f022dea4967f7a2c",
        "type": "file in",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 2100,
        "wires": [
            [
                "a38134480efba630"
            ]
        ]
    },
    {
        "id": "f3222f4349e9433e",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV3D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2100,
        "wires": [
            [
                "f022dea4967f7a2c"
            ]
        ]
    },
    {
        "id": "ba17cd726b5e40ce",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 420,
        "y": 2100,
        "wires": [
            [
                "f3222f4349e9433e"
            ]
        ]
    },
    {
        "id": "70b33aec1e97d728",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "debug 1863",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 2200,
        "wires": []
    },
    {
        "id": "b4d0c3668f4cd2ba",
        "type": "ftp in",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 910,
        "y": 2200,
        "wires": [
            [
                "70b33aec1e97d728"
            ]
        ]
    },
    {
        "id": "f0c978bc9475ed2d",
        "type": "function",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV3D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2200,
        "wires": [
            [
                "b4d0c3668f4cd2ba"
            ]
        ]
    },
    {
        "id": "9b19a819d3703f58",
        "type": "cronplus",
        "z": "bdb6362ab82f896f",
        "g": "68dfdcc51cdd039e",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 550,
        "y": 2200,
        "wires": [
            [
                "f0c978bc9475ed2d"
            ]
        ]
    },
    {
        "id": "7824797d31139c45",
        "type": "debug",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1840,
        "wires": []
    },
    {
        "id": "25979f00b544d15d",
        "type": "template",
        "z": "bdb6362ab82f896f",
        "g": "7625d46eadb0d068",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC1,5m,INV3D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC2,5m,INV3D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC3,5m,INV3D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC4,5m,INV3D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC5,5m,INV3D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC6,5m,INV3D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC7,5m,INV3D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC8,5m,INV3D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC9,5m,INV3D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC10,5m,INV3D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC11,5m,INV3D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC12,5m,INV3D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC13,5m,INV3D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC14,5m,INV3D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC15,5m,INV3D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC16,5m,INV3D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC17,5m,INV3D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC18,5m,INV3D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC19,5m,INV3D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC20,5m,INV3D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC21,5m,INV3D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC22,5m,INV3D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC23,5m,INV3D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU25,IDC24,5m,INV3D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC1,5m,INV3D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC2,5m,INV3D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC3,5m,INV3D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC4,5m,INV3D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC5,5m,INV3D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC6,5m,INV3D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC7,5m,INV3D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC8,5m,INV3D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC9,5m,INV3D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC10,5m,INV3D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC11,5m,INV3D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC12,5m,INV3D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC13,5m,INV3D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC14,5m,INV3D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC15,5m,INV3D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC16,5m,INV3D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC17,5m,INV3D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC18,5m,INV3D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC19,5m,INV3D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC20,5m,INV3D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC21,5m,INV3D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC22,5m,INV3D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC23,5m,INV3D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU26,IDC24,5m,INV3D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC1,5m,INV3D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC2,5m,INV3D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC3,5m,INV3D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC4,5m,INV3D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC5,5m,INV3D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC6,5m,INV3D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC7,5m,INV3D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC8,5m,INV3D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC9,5m,INV3D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC10,5m,INV3D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC11,5m,INV3D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC12,5m,INV3D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC13,5m,INV3D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC14,5m,INV3D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC15,5m,INV3D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC16,5m,INV3D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC17,5m,INV3D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC18,5m,INV3D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC19,5m,INV3D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC20,5m,INV3D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC21,5m,INV3D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC22,5m,INV3D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC23,5m,INV3D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU27,IDC24,5m,INV3D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC1,5m,INV3D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC2,5m,INV3D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC3,5m,INV3D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC4,5m,INV3D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC5,5m,INV3D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC6,5m,INV3D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC7,5m,INV3D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC8,5m,INV3D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC9,5m,INV3D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC10,5m,INV3D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC11,5m,INV3D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC12,5m,INV3D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC13,5m,INV3D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC14,5m,INV3D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC15,5m,INV3D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC16,5m,INV3D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC17,5m,INV3D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC18,5m,INV3D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC19,5m,INV3D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC20,5m,INV3D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC21,5m,INV3D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC22,5m,INV3D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC23,5m,INV3D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU28,IDC24,5m,INV3D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC1,5m,INV3D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC2,5m,INV3D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC3,5m,INV3D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC4,5m,INV3D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC5,5m,INV3D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC6,5m,INV3D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC7,5m,INV3D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC8,5m,INV3D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC9,5m,INV3D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC10,5m,INV3D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC11,5m,INV3D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC12,5m,INV3D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC13,5m,INV3D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC14,5m,INV3D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC15,5m,INV3D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC16,5m,INV3D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC17,5m,INV3D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC18,5m,INV3D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC19,5m,INV3D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC20,5m,INV3D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC21,5m,INV3D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC22,5m,INV3D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC23,5m,INV3D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU29,IDC24,5m,INV3D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC1,5m,INV3D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC2,5m,INV3D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC3,5m,INV3D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC4,5m,INV3D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC5,5m,INV3D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC6,5m,INV3D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC7,5m,INV3D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC8,5m,INV3D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC9,5m,INV3D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC10,5m,INV3D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC11,5m,INV3D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC12,5m,INV3D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC13,5m,INV3D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC14,5m,INV3D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC15,5m,INV3D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC16,5m,INV3D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC17,5m,INV3D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC18,5m,INV3D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC19,5m,INV3D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC20,5m,INV3D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC21,5m,INV3D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC22,5m,INV3D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC23,5m,INV3D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU30,IDC24,5m,INV3D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC1,5m,INV3D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC2,5m,INV3D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC3,5m,INV3D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC4,5m,INV3D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC5,5m,INV3D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC6,5m,INV3D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC7,5m,INV3D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC8,5m,INV3D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC9,5m,INV3D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC10,5m,INV3D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC11,5m,INV3D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC12,5m,INV3D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC13,5m,INV3D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC14,5m,INV3D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC15,5m,INV3D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC16,5m,INV3D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC17,5m,INV3D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC18,5m,INV3D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC19,5m,INV3D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC20,5m,INV3D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC21,5m,INV3D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC22,5m,INV3D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC23,5m,INV3D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU31,IDC24,5m,INV3D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC1,5m,INV3D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC2,5m,INV3D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC3,5m,INV3D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC4,5m,INV3D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC5,5m,INV3D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC6,5m,INV3D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC7,5m,INV3D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC8,5m,INV3D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC9,5m,INV3D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC10,5m,INV3D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC11,5m,INV3D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC12,5m,INV3D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC13,5m,INV3D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC14,5m,INV3D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC15,5m,INV3D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC16,5m,INV3D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC17,5m,INV3D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC18,5m,INV3D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC19,5m,INV3D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC20,5m,INV3D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC21,5m,INV3D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC22,5m,INV3D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC23,5m,INV3D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC24,5m,INV3D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC25,5m,INV3D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC26,5m,INV3D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC27,5m,INV3D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC28,5m,INV3D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC29,5m,INV3D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC30,5m,INV3D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC31,5m,INV3D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 3,B03_INV4_SMU32,IDC32,5m,INV3D_SMU8_IDC32\n",
        "output": "str",
        "x": 510,
        "y": 1840,
        "wires": [
            [
                "7d69bd81bd874771"
            ]
        ]
    },
    {
        "id": "500df65c064dc7e4",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "9e7d2aa962ce97c7"
            ]
        ]
    },
    {
        "id": "a2bb19fdaeb9dd64",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "500df65c064dc7e4",
                "06568e72e4d55ed3"
            ]
        ]
    },
    {
        "id": "9e7d2aa962ce97c7",
        "type": "influxdb in",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 200,
        "wires": [
            [
                "4d55f069ec7878f9"
            ]
        ]
    },
    {
        "id": "06568e72e4d55ed3",
        "type": "change",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 120,
        "wires": [
            [
                "4d55f069ec7878f9"
            ]
        ]
    },
    {
        "id": "bb881b6b2824d8c0",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 120,
        "wires": [
            [
                "2a1981186a9a4bdc"
            ]
        ]
    },
    {
        "id": "9936487e32a306e6",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "7ca2407d3fa7e8da"
            ]
        ]
    },
    {
        "id": "7ca2407d3fa7e8da",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 160,
        "wires": [
            [
                "f94c45461b458ade",
                "8818ea920b0cd533"
            ]
        ]
    },
    {
        "id": "4d55f069ec7878f9",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "9936487e32a306e6"
            ]
        ]
    },
    {
        "id": "a7a886991167d75f",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 240,
        "wires": []
    },
    {
        "id": "f94c45461b458ade",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "3cf4c6a6e1a4feea"
            ]
        ]
    },
    {
        "id": "3cf4c6a6e1a4feea",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "c2c85c618506e2f8"
            ]
        ]
    },
    {
        "id": "c2c85c618506e2f8",
        "type": "file",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 240,
        "wires": [
            [
                "a7a886991167d75f"
            ]
        ]
    },
    {
        "id": "2a1981186a9a4bdc",
        "type": "delay",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "aa4a1aa3e6c2e9c2"
            ]
        ]
    },
    {
        "id": "52aa44c0f9deb6bb",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "debug 1864",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "59cfe6cb2c356bfb",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 380,
        "wires": [
            [
                "52aa44c0f9deb6bb"
            ]
        ]
    },
    {
        "id": "1d49c5f07cd324d9",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "59cfe6cb2c356bfb"
            ]
        ]
    },
    {
        "id": "cd5b99069f17dbf1",
        "type": "file in",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 380,
        "wires": [
            [
                "1d49c5f07cd324d9"
            ]
        ]
    },
    {
        "id": "d74fc00cea183b44",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "cd5b99069f17dbf1"
            ]
        ]
    },
    {
        "id": "4fe2c99ece213210",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "d74fc00cea183b44"
            ]
        ]
    },
    {
        "id": "a1696da36d5c14f3",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "debug 1865",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "58c493abf26a3f91",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "a1696da36d5c14f3"
            ]
        ]
    },
    {
        "id": "3f82e6287f451ad9",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "58c493abf26a3f91"
            ]
        ]
    },
    {
        "id": "919dfbd69c5f44e6",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "c6e0d43482042f2f",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "3f82e6287f451ad9"
            ]
        ]
    },
    {
        "id": "8818ea920b0cd533",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 120,
        "wires": []
    },
    {
        "id": "aa4a1aa3e6c2e9c2",
        "type": "template",
        "z": "981d83ec85c3dad4",
        "g": "2a99dfd7ecd31f18",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC1,5m,INV4A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC2,5m,INV4A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC3,5m,INV4A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC4,5m,INV4A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC5,5m,INV4A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC6,5m,INV4A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC7,5m,INV4A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC8,5m,INV4A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC9,5m,INV4A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC10,5m,INV4A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC11,5m,INV4A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC12,5m,INV4A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC13,5m,INV4A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC14,5m,INV4A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC15,5m,INV4A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC16,5m,INV4A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC17,5m,INV4A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC18,5m,INV4A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC19,5m,INV4A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC20,5m,INV4A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC21,5m,INV4A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC22,5m,INV4A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC23,5m,INV4A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU01,IDC24,5m,INV4A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC1,5m,INV4A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC2,5m,INV4A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC3,5m,INV4A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC4,5m,INV4A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC5,5m,INV4A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC6,5m,INV4A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC7,5m,INV4A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC8,5m,INV4A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC9,5m,INV4A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC10,5m,INV4A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC11,5m,INV4A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC12,5m,INV4A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC13,5m,INV4A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC14,5m,INV4A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC15,5m,INV4A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC16,5m,INV4A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC17,5m,INV4A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC18,5m,INV4A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC19,5m,INV4A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC20,5m,INV4A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC21,5m,INV4A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC22,5m,INV4A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC23,5m,INV4A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU02,IDC24,5m,INV4A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC1,5m,INV4A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC2,5m,INV4A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC3,5m,INV4A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC4,5m,INV4A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC5,5m,INV4A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC6,5m,INV4A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC7,5m,INV4A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC8,5m,INV4A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC9,5m,INV4A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC10,5m,INV4A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC11,5m,INV4A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC12,5m,INV4A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC13,5m,INV4A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC14,5m,INV4A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC15,5m,INV4A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC16,5m,INV4A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC17,5m,INV4A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC18,5m,INV4A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC19,5m,INV4A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC20,5m,INV4A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC21,5m,INV4A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC22,5m,INV4A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC23,5m,INV4A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU03,IDC24,5m,INV4A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC1,5m,INV4A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC2,5m,INV4A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC3,5m,INV4A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC4,5m,INV4A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC5,5m,INV4A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC6,5m,INV4A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC7,5m,INV4A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC8,5m,INV4A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC9,5m,INV4A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC10,5m,INV4A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC11,5m,INV4A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC12,5m,INV4A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC13,5m,INV4A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC14,5m,INV4A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC15,5m,INV4A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC16,5m,INV4A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC17,5m,INV4A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC18,5m,INV4A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC19,5m,INV4A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC20,5m,INV4A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC21,5m,INV4A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC22,5m,INV4A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC23,5m,INV4A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU04,IDC24,5m,INV4A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC1,5m,INV4A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC2,5m,INV4A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC3,5m,INV4A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC4,5m,INV4A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC5,5m,INV4A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC6,5m,INV4A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC7,5m,INV4A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC8,5m,INV4A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC9,5m,INV4A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC10,5m,INV4A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC11,5m,INV4A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC12,5m,INV4A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC13,5m,INV4A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC14,5m,INV4A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC15,5m,INV4A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC16,5m,INV4A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC17,5m,INV4A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC18,5m,INV4A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC19,5m,INV4A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC20,5m,INV4A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC21,5m,INV4A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC22,5m,INV4A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC23,5m,INV4A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU05,IDC24,5m,INV4A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC1,5m,INV4A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC2,5m,INV4A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC3,5m,INV4A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC4,5m,INV4A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC5,5m,INV4A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC6,5m,INV4A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC7,5m,INV4A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC8,5m,INV4A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC9,5m,INV4A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC10,5m,INV4A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC11,5m,INV4A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC12,5m,INV4A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC13,5m,INV4A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC14,5m,INV4A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC15,5m,INV4A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC16,5m,INV4A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC17,5m,INV4A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC18,5m,INV4A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC19,5m,INV4A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC20,5m,INV4A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC21,5m,INV4A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC22,5m,INV4A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC23,5m,INV4A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU06,IDC24,5m,INV4A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC1,5m,INV4A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC2,5m,INV4A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC3,5m,INV4A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC4,5m,INV4A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC5,5m,INV4A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC6,5m,INV4A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC7,5m,INV4A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC8,5m,INV4A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC9,5m,INV4A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC10,5m,INV4A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC11,5m,INV4A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC12,5m,INV4A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC13,5m,INV4A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC14,5m,INV4A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC15,5m,INV4A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC16,5m,INV4A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC17,5m,INV4A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC18,5m,INV4A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC19,5m,INV4A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC20,5m,INV4A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC21,5m,INV4A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC22,5m,INV4A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC23,5m,INV4A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU07,IDC24,5m,INV4A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC1,5m,INV4A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC2,5m,INV4A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC3,5m,INV4A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC4,5m,INV4A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC5,5m,INV4A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC6,5m,INV4A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC7,5m,INV4A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC8,5m,INV4A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC9,5m,INV4A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC10,5m,INV4A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC11,5m,INV4A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC12,5m,INV4A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC13,5m,INV4A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC14,5m,INV4A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC15,5m,INV4A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC16,5m,INV4A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC17,5m,INV4A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC18,5m,INV4A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC19,5m,INV4A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC20,5m,INV4A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC21,5m,INV4A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC22,5m,INV4A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC23,5m,INV4A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC24,5m,INV4A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC25,5m,INV4A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC26,5m,INV4A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC27,5m,INV4A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC28,5m,INV4A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC29,5m,INV4A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC30,5m,INV4A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC31,5m,INV4A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV1_SMU08,IDC32,5m,INV4A_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "a2bb19fdaeb9dd64"
            ]
        ]
    },
    {
        "id": "9fbff932e8af77a7",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 740,
        "wires": [
            [
                "27237608b33b677a"
            ]
        ]
    },
    {
        "id": "790267158cb1e6f5",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 660,
        "wires": [
            [
                "9fbff932e8af77a7",
                "9c915517a1f879b8"
            ]
        ]
    },
    {
        "id": "27237608b33b677a",
        "type": "influxdb in",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 740,
        "wires": [
            [
                "35df2d9019305b6f"
            ]
        ]
    },
    {
        "id": "9c915517a1f879b8",
        "type": "change",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 660,
        "wires": [
            [
                "35df2d9019305b6f"
            ]
        ]
    },
    {
        "id": "0087b2d13f15a0bb",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 660,
        "wires": [
            [
                "8b01efdab939d09a"
            ]
        ]
    },
    {
        "id": "572381bab61bd3c6",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "c942d9a9c5240925"
            ]
        ]
    },
    {
        "id": "c942d9a9c5240925",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 700,
        "wires": [
            [
                "409f0e6a74e32e20",
                "a58acb80e602c7c0"
            ]
        ]
    },
    {
        "id": "35df2d9019305b6f",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 700,
        "wires": [
            [
                "572381bab61bd3c6"
            ]
        ]
    },
    {
        "id": "25b15cbee709ca68",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 780,
        "wires": []
    },
    {
        "id": "409f0e6a74e32e20",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 700,
        "wires": [
            [
                "06c8f40fa5c323c1"
            ]
        ]
    },
    {
        "id": "06c8f40fa5c323c1",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "a1716943cb5fdb13"
            ]
        ]
    },
    {
        "id": "a1716943cb5fdb13",
        "type": "file",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 780,
        "wires": [
            [
                "25b15cbee709ca68"
            ]
        ]
    },
    {
        "id": "8b01efdab939d09a",
        "type": "delay",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 640,
        "wires": [
            [
                "a4223bca32afc2b5"
            ]
        ]
    },
    {
        "id": "05a09ce72790a7d8",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "debug 1866",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 920,
        "wires": []
    },
    {
        "id": "9e5f3bddda231a23",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 920,
        "wires": [
            [
                "05a09ce72790a7d8"
            ]
        ]
    },
    {
        "id": "59120d3381bff83f",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 920,
        "wires": [
            [
                "9e5f3bddda231a23"
            ]
        ]
    },
    {
        "id": "589ca429fd3b0ee9",
        "type": "file in",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 920,
        "wires": [
            [
                "59120d3381bff83f"
            ]
        ]
    },
    {
        "id": "f02d24a0694ed16a",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 920,
        "wires": [
            [
                "589ca429fd3b0ee9"
            ]
        ]
    },
    {
        "id": "fbc51ba3ce6f3210",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 920,
        "wires": [
            [
                "f02d24a0694ed16a"
            ]
        ]
    },
    {
        "id": "bc86985ea70f39e6",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "debug 1867",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b5d32c9f4000ef1f",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "bc86985ea70f39e6"
            ]
        ]
    },
    {
        "id": "5c6aa514b204279a",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "b5d32c9f4000ef1f"
            ]
        ]
    },
    {
        "id": "4388f80bb15377c3",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "5ce0f05af8d5623f",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "5c6aa514b204279a"
            ]
        ]
    },
    {
        "id": "a58acb80e602c7c0",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 660,
        "wires": []
    },
    {
        "id": "a4223bca32afc2b5",
        "type": "template",
        "z": "981d83ec85c3dad4",
        "g": "e2fd5d2bf284130c",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC1,5m,INV4B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC2,5m,INV4B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC3,5m,INV4B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC4,5m,INV4B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC5,5m,INV4B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC6,5m,INV4B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC7,5m,INV4B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC8,5m,INV4B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC9,5m,INV4B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC10,5m,INV4B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC11,5m,INV4B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC12,5m,INV4B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC13,5m,INV4B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC14,5m,INV4B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC15,5m,INV4B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC16,5m,INV4B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC17,5m,INV4B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC18,5m,INV4B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC19,5m,INV4B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC20,5m,INV4B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC21,5m,INV4B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC22,5m,INV4B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC23,5m,INV4B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU09,IDC24,5m,INV4B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC1,5m,INV4B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC2,5m,INV4B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC3,5m,INV4B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC4,5m,INV4B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC5,5m,INV4B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC6,5m,INV4B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC7,5m,INV4B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC8,5m,INV4B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC9,5m,INV4B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC10,5m,INV4B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC11,5m,INV4B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC12,5m,INV4B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC13,5m,INV4B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC14,5m,INV4B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC15,5m,INV4B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC16,5m,INV4B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC17,5m,INV4B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC18,5m,INV4B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC19,5m,INV4B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC20,5m,INV4B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC21,5m,INV4B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC22,5m,INV4B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC23,5m,INV4B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU10,IDC24,5m,INV4B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC1,5m,INV4B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC2,5m,INV4B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC3,5m,INV4B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC4,5m,INV4B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC5,5m,INV4B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC6,5m,INV4B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC7,5m,INV4B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC8,5m,INV4B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC9,5m,INV4B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC10,5m,INV4B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC11,5m,INV4B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC12,5m,INV4B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC13,5m,INV4B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC14,5m,INV4B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC15,5m,INV4B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC16,5m,INV4B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC17,5m,INV4B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC18,5m,INV4B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC19,5m,INV4B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC20,5m,INV4B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC21,5m,INV4B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC22,5m,INV4B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC23,5m,INV4B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU11,IDC24,5m,INV4B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC1,5m,INV4B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC2,5m,INV4B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC3,5m,INV4B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC4,5m,INV4B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC5,5m,INV4B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC6,5m,INV4B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC7,5m,INV4B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC8,5m,INV4B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC9,5m,INV4B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC10,5m,INV4B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC11,5m,INV4B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC12,5m,INV4B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC13,5m,INV4B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC14,5m,INV4B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC15,5m,INV4B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC16,5m,INV4B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC17,5m,INV4B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC18,5m,INV4B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC19,5m,INV4B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC20,5m,INV4B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC21,5m,INV4B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC22,5m,INV4B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC23,5m,INV4B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU12,IDC24,5m,INV4B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC1,5m,INV4B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC2,5m,INV4B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC3,5m,INV4B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC4,5m,INV4B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC5,5m,INV4B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC6,5m,INV4B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC7,5m,INV4B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC8,5m,INV4B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC9,5m,INV4B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC10,5m,INV4B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC11,5m,INV4B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC12,5m,INV4B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC13,5m,INV4B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC14,5m,INV4B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC15,5m,INV4B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC16,5m,INV4B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC17,5m,INV4B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC18,5m,INV4B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC19,5m,INV4B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC20,5m,INV4B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC21,5m,INV4B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC22,5m,INV4B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC23,5m,INV4B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU13,IDC24,5m,INV4B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC1,5m,INV4B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC2,5m,INV4B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC3,5m,INV4B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC4,5m,INV4B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC5,5m,INV4B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC6,5m,INV4B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC7,5m,INV4B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC8,5m,INV4B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC9,5m,INV4B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC10,5m,INV4B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC11,5m,INV4B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC12,5m,INV4B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC13,5m,INV4B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC14,5m,INV4B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC15,5m,INV4B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC16,5m,INV4B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC17,5m,INV4B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC18,5m,INV4B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC19,5m,INV4B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC20,5m,INV4B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC21,5m,INV4B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC22,5m,INV4B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC23,5m,INV4B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU14,IDC24,5m,INV4B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC1,5m,INV4B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC2,5m,INV4B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC3,5m,INV4B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC4,5m,INV4B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC5,5m,INV4B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC6,5m,INV4B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC7,5m,INV4B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC8,5m,INV4B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC9,5m,INV4B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC10,5m,INV4B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC11,5m,INV4B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC12,5m,INV4B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC13,5m,INV4B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC14,5m,INV4B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC15,5m,INV4B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC16,5m,INV4B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC17,5m,INV4B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC18,5m,INV4B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC19,5m,INV4B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC20,5m,INV4B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC21,5m,INV4B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC22,5m,INV4B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC23,5m,INV4B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU15,IDC24,5m,INV4B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC1,5m,INV4B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC2,5m,INV4B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC3,5m,INV4B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC4,5m,INV4B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC5,5m,INV4B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC6,5m,INV4B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC7,5m,INV4B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC8,5m,INV4B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC9,5m,INV4B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC10,5m,INV4B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC11,5m,INV4B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC12,5m,INV4B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC13,5m,INV4B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC14,5m,INV4B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC15,5m,INV4B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC16,5m,INV4B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC17,5m,INV4B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC18,5m,INV4B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC19,5m,INV4B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC20,5m,INV4B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC21,5m,INV4B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC22,5m,INV4B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC23,5m,INV4B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC24,5m,INV4B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC25,5m,INV4B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC26,5m,INV4B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC27,5m,INV4B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC28,5m,INV4B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC29,5m,INV4B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC30,5m,INV4B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC31,5m,INV4B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV2_SMU16,IDC32,5m,INV4B_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 660,
        "wires": [
            [
                "790267158cb1e6f5"
            ]
        ]
    },
    {
        "id": "443bc15a78dc6d38",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "4d61fdf822e229fa"
            ]
        ]
    },
    {
        "id": "bc81110eacfaace3",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 1240,
        "wires": [
            [
                "443bc15a78dc6d38",
                "0226a3ca8a4d0b1a"
            ]
        ]
    },
    {
        "id": "4d61fdf822e229fa",
        "type": "influxdb in",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "b14d7d730d731182"
            ]
        ]
    },
    {
        "id": "0226a3ca8a4d0b1a",
        "type": "change",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "b14d7d730d731182"
            ]
        ]
    },
    {
        "id": "643d3fe7548d5a3b",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "6c173ed8e24771cc"
            ]
        ]
    },
    {
        "id": "ace1d2ab2eaebde8",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1280,
        "wires": [
            [
                "fead5d862480db56"
            ]
        ]
    },
    {
        "id": "fead5d862480db56",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1280,
        "wires": [
            [
                "0485e0561ef95f91",
                "d9c542365d6bc7c0"
            ]
        ]
    },
    {
        "id": "b14d7d730d731182",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1280,
        "wires": [
            [
                "ace1d2ab2eaebde8"
            ]
        ]
    },
    {
        "id": "f3d6e4d15602487b",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1360,
        "wires": []
    },
    {
        "id": "0485e0561ef95f91",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 1280,
        "wires": [
            [
                "2c2b3ceb98eb12af"
            ]
        ]
    },
    {
        "id": "2c2b3ceb98eb12af",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1360,
        "wires": [
            [
                "389ce88f87116f7c"
            ]
        ]
    },
    {
        "id": "389ce88f87116f7c",
        "type": "file",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 1360,
        "wires": [
            [
                "f3d6e4d15602487b"
            ]
        ]
    },
    {
        "id": "6c173ed8e24771cc",
        "type": "delay",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "2e99d0b36faa39f5"
            ]
        ]
    },
    {
        "id": "87462d09e939d615",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "debug 1868",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1500,
        "wires": []
    },
    {
        "id": "cce31333ad97d00b",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 1500,
        "wires": [
            [
                "87462d09e939d615"
            ]
        ]
    },
    {
        "id": "4c5ec5925f6728fa",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1500,
        "wires": [
            [
                "cce31333ad97d00b"
            ]
        ]
    },
    {
        "id": "fe9b07ff961ccc47",
        "type": "file in",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "4c5ec5925f6728fa"
            ]
        ]
    },
    {
        "id": "5883d1e7cd77448b",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1500,
        "wires": [
            [
                "fe9b07ff961ccc47"
            ]
        ]
    },
    {
        "id": "f99323c0d9054cf5",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 1500,
        "wires": [
            [
                "5883d1e7cd77448b"
            ]
        ]
    },
    {
        "id": "3567d4b878adfd32",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "debug 1869",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1600,
        "wires": []
    },
    {
        "id": "27da0d1ea72de2d9",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "3567d4b878adfd32"
            ]
        ]
    },
    {
        "id": "c0761dfbbaeb32b0",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1600,
        "wires": [
            [
                "27da0d1ea72de2d9"
            ]
        ]
    },
    {
        "id": "923bd668a36298d0",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "8412b17af673e671",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 1600,
        "wires": [
            [
                "c0761dfbbaeb32b0"
            ]
        ]
    },
    {
        "id": "d9c542365d6bc7c0",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2e99d0b36faa39f5",
        "type": "template",
        "z": "981d83ec85c3dad4",
        "g": "8e6119a3e520929f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC1,5m,INV4C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC2,5m,INV4C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC3,5m,INV4C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC4,5m,INV4C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC5,5m,INV4C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC6,5m,INV4C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC7,5m,INV4C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC8,5m,INV4C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC9,5m,INV4C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC10,5m,INV4C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC11,5m,INV4C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC12,5m,INV4C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC13,5m,INV4C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC14,5m,INV4C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC15,5m,INV4C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC16,5m,INV4C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC17,5m,INV4C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC18,5m,INV4C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC19,5m,INV4C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC20,5m,INV4C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC21,5m,INV4C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC22,5m,INV4C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC23,5m,INV4C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU17,IDC24,5m,INV4C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC1,5m,INV4C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC2,5m,INV4C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC3,5m,INV4C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC4,5m,INV4C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC5,5m,INV4C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC6,5m,INV4C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC7,5m,INV4C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC8,5m,INV4C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC9,5m,INV4C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC10,5m,INV4C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC11,5m,INV4C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC12,5m,INV4C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC13,5m,INV4C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC14,5m,INV4C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC15,5m,INV4C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC16,5m,INV4C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC17,5m,INV4C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC18,5m,INV4C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC19,5m,INV4C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC20,5m,INV4C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC21,5m,INV4C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC22,5m,INV4C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC23,5m,INV4C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU18,IDC24,5m,INV4C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC1,5m,INV4C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC2,5m,INV4C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC3,5m,INV4C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC4,5m,INV4C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC5,5m,INV4C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC6,5m,INV4C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC7,5m,INV4C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC8,5m,INV4C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC9,5m,INV4C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC10,5m,INV4C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC11,5m,INV4C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC12,5m,INV4C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC13,5m,INV4C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC14,5m,INV4C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC15,5m,INV4C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC16,5m,INV4C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC17,5m,INV4C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC18,5m,INV4C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC19,5m,INV4C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC20,5m,INV4C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC21,5m,INV4C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC22,5m,INV4C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC23,5m,INV4C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU19,IDC24,5m,INV4C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC1,5m,INV4C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC2,5m,INV4C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC3,5m,INV4C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC4,5m,INV4C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC5,5m,INV4C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC6,5m,INV4C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC7,5m,INV4C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC8,5m,INV4C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC9,5m,INV4C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC10,5m,INV4C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC11,5m,INV4C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC12,5m,INV4C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC13,5m,INV4C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC14,5m,INV4C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC15,5m,INV4C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC16,5m,INV4C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC17,5m,INV4C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC18,5m,INV4C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC19,5m,INV4C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC20,5m,INV4C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC21,5m,INV4C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC22,5m,INV4C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC23,5m,INV4C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU20,IDC24,5m,INV4C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC1,5m,INV4C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC2,5m,INV4C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC3,5m,INV4C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC4,5m,INV4C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC5,5m,INV4C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC6,5m,INV4C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC7,5m,INV4C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC8,5m,INV4C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC9,5m,INV4C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC10,5m,INV4C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC11,5m,INV4C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC12,5m,INV4C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC13,5m,INV4C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC14,5m,INV4C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC15,5m,INV4C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC16,5m,INV4C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC17,5m,INV4C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC18,5m,INV4C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC19,5m,INV4C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC20,5m,INV4C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC21,5m,INV4C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC22,5m,INV4C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC23,5m,INV4C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU21,IDC24,5m,INV4C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC1,5m,INV4C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC2,5m,INV4C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC3,5m,INV4C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC4,5m,INV4C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC5,5m,INV4C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC6,5m,INV4C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC7,5m,INV4C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC8,5m,INV4C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC9,5m,INV4C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC10,5m,INV4C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC11,5m,INV4C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC12,5m,INV4C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC13,5m,INV4C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC14,5m,INV4C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC15,5m,INV4C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC16,5m,INV4C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC17,5m,INV4C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC18,5m,INV4C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC19,5m,INV4C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC20,5m,INV4C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC21,5m,INV4C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC22,5m,INV4C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC23,5m,INV4C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU22,IDC24,5m,INV4C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC1,5m,INV4C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC2,5m,INV4C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC3,5m,INV4C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC4,5m,INV4C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC5,5m,INV4C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC6,5m,INV4C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC7,5m,INV4C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC8,5m,INV4C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC9,5m,INV4C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC10,5m,INV4C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC11,5m,INV4C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC12,5m,INV4C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC13,5m,INV4C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC14,5m,INV4C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC15,5m,INV4C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC16,5m,INV4C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC17,5m,INV4C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC18,5m,INV4C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC19,5m,INV4C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC20,5m,INV4C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC21,5m,INV4C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC22,5m,INV4C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC23,5m,INV4C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU23,IDC24,5m,INV4C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC1,5m,INV4C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC2,5m,INV4C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC3,5m,INV4C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC4,5m,INV4C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC5,5m,INV4C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC6,5m,INV4C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC7,5m,INV4C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC8,5m,INV4C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC9,5m,INV4C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC10,5m,INV4C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC11,5m,INV4C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC12,5m,INV4C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC13,5m,INV4C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC14,5m,INV4C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC15,5m,INV4C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC16,5m,INV4C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC17,5m,INV4C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC18,5m,INV4C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC19,5m,INV4C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC20,5m,INV4C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC21,5m,INV4C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC22,5m,INV4C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC23,5m,INV4C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC24,5m,INV4C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC25,5m,INV4C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC26,5m,INV4C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC27,5m,INV4C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC28,5m,INV4C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC29,5m,INV4C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC30,5m,INV4C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC31,5m,INV4C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV3_SMU24,IDC32,5m,INV4C_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 1240,
        "wires": [
            [
                "bc81110eacfaace3"
            ]
        ]
    },
    {
        "id": "345f288b726f5e75",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1920,
        "wires": [
            [
                "b3d4bb6b98d7a741"
            ]
        ]
    },
    {
        "id": "04a313e02a3d1ec8",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 1840,
        "wires": [
            [
                "345f288b726f5e75",
                "bde1bcfb65350f32"
            ]
        ]
    },
    {
        "id": "b3d4bb6b98d7a741",
        "type": "influxdb in",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 1920,
        "wires": [
            [
                "f84ee7d7a49a587e"
            ]
        ]
    },
    {
        "id": "bde1bcfb65350f32",
        "type": "change",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "f84ee7d7a49a587e"
            ]
        ]
    },
    {
        "id": "ce8b40d73be61b74",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1840,
        "wires": [
            [
                "e07b0e2a56b8d836"
            ]
        ]
    },
    {
        "id": "4d432aef684af1c9",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1880,
        "wires": [
            [
                "399f9a69a861583f"
            ]
        ]
    },
    {
        "id": "399f9a69a861583f",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1880,
        "wires": [
            [
                "1ccd32e5f9fb2d78",
                "ed93c4599fd453a3"
            ]
        ]
    },
    {
        "id": "f84ee7d7a49a587e",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1880,
        "wires": [
            [
                "4d432aef684af1c9"
            ]
        ]
    },
    {
        "id": "6bb0a2887423e081",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1960,
        "wires": []
    },
    {
        "id": "1ccd32e5f9fb2d78",
        "type": "csv",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 1880,
        "wires": [
            [
                "e559ec3d4a20e711"
            ]
        ]
    },
    {
        "id": "e559ec3d4a20e711",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1960,
        "wires": [
            [
                "9a031ef937d1cf35"
            ]
        ]
    },
    {
        "id": "9a031ef937d1cf35",
        "type": "file",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 1960,
        "wires": [
            [
                "6bb0a2887423e081"
            ]
        ]
    },
    {
        "id": "e07b0e2a56b8d836",
        "type": "delay",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1820,
        "wires": [
            [
                "4d41d79372c4d103"
            ]
        ]
    },
    {
        "id": "7725f18363333ae0",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "debug 1870",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 2100,
        "wires": []
    },
    {
        "id": "8afa16dd36db3e2e",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 2100,
        "wires": [
            [
                "7725f18363333ae0"
            ]
        ]
    },
    {
        "id": "944e7d644b52d373",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2100,
        "wires": [
            [
                "8afa16dd36db3e2e"
            ]
        ]
    },
    {
        "id": "7753a0395c29bcff",
        "type": "file in",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 2100,
        "wires": [
            [
                "944e7d644b52d373"
            ]
        ]
    },
    {
        "id": "be0e357539485af2",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV4D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2100,
        "wires": [
            [
                "7753a0395c29bcff"
            ]
        ]
    },
    {
        "id": "2640838dd01b2e54",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 2100,
        "wires": [
            [
                "be0e357539485af2"
            ]
        ]
    },
    {
        "id": "7a1b65f65cfed281",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "debug 1871",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2200,
        "wires": []
    },
    {
        "id": "b2200760a175bcd0",
        "type": "ftp in",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 2200,
        "wires": [
            [
                "7a1b65f65cfed281"
            ]
        ]
    },
    {
        "id": "6bd2f9b61887e399",
        "type": "function",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV4D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2200,
        "wires": [
            [
                "b2200760a175bcd0"
            ]
        ]
    },
    {
        "id": "6bbe33d6f2ef8301",
        "type": "cronplus",
        "z": "981d83ec85c3dad4",
        "g": "385013456eef8ef7",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 2200,
        "wires": [
            [
                "6bd2f9b61887e399"
            ]
        ]
    },
    {
        "id": "ed93c4599fd453a3",
        "type": "debug",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1840,
        "wires": []
    },
    {
        "id": "4d41d79372c4d103",
        "type": "template",
        "z": "981d83ec85c3dad4",
        "g": "c9b3c5e11bce21ee",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC1,5m,INV4D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC2,5m,INV4D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC3,5m,INV4D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC4,5m,INV4D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC5,5m,INV4D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC6,5m,INV4D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC7,5m,INV4D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC8,5m,INV4D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC9,5m,INV4D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC10,5m,INV4D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC11,5m,INV4D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC12,5m,INV4D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC13,5m,INV4D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC14,5m,INV4D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC15,5m,INV4D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC16,5m,INV4D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC17,5m,INV4D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC18,5m,INV4D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC19,5m,INV4D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC20,5m,INV4D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC21,5m,INV4D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC22,5m,INV4D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC23,5m,INV4D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU25,IDC24,5m,INV4D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC1,5m,INV4D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC2,5m,INV4D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC3,5m,INV4D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC4,5m,INV4D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC5,5m,INV4D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC6,5m,INV4D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC7,5m,INV4D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC8,5m,INV4D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC9,5m,INV4D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC10,5m,INV4D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC11,5m,INV4D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC12,5m,INV4D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC13,5m,INV4D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC14,5m,INV4D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC15,5m,INV4D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC16,5m,INV4D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC17,5m,INV4D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC18,5m,INV4D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC19,5m,INV4D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC20,5m,INV4D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC21,5m,INV4D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC22,5m,INV4D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC23,5m,INV4D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU26,IDC24,5m,INV4D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC1,5m,INV4D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC2,5m,INV4D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC3,5m,INV4D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC4,5m,INV4D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC5,5m,INV4D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC6,5m,INV4D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC7,5m,INV4D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC8,5m,INV4D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC9,5m,INV4D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC10,5m,INV4D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC11,5m,INV4D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC12,5m,INV4D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC13,5m,INV4D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC14,5m,INV4D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC15,5m,INV4D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC16,5m,INV4D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC17,5m,INV4D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC18,5m,INV4D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC19,5m,INV4D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC20,5m,INV4D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC21,5m,INV4D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC22,5m,INV4D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC23,5m,INV4D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU27,IDC24,5m,INV4D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC1,5m,INV4D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC2,5m,INV4D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC3,5m,INV4D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC4,5m,INV4D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC5,5m,INV4D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC6,5m,INV4D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC7,5m,INV4D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC8,5m,INV4D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC9,5m,INV4D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC10,5m,INV4D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC11,5m,INV4D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC12,5m,INV4D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC13,5m,INV4D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC14,5m,INV4D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC15,5m,INV4D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC16,5m,INV4D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC17,5m,INV4D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC18,5m,INV4D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC19,5m,INV4D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC20,5m,INV4D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC21,5m,INV4D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC22,5m,INV4D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC23,5m,INV4D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU28,IDC24,5m,INV4D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC1,5m,INV4D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC2,5m,INV4D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC3,5m,INV4D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC4,5m,INV4D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC5,5m,INV4D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC6,5m,INV4D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC7,5m,INV4D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC8,5m,INV4D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC9,5m,INV4D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC10,5m,INV4D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC11,5m,INV4D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC12,5m,INV4D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC13,5m,INV4D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC14,5m,INV4D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC15,5m,INV4D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC16,5m,INV4D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC17,5m,INV4D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC18,5m,INV4D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC19,5m,INV4D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC20,5m,INV4D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC21,5m,INV4D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC22,5m,INV4D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC23,5m,INV4D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU29,IDC24,5m,INV4D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC1,5m,INV4D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC2,5m,INV4D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC3,5m,INV4D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC4,5m,INV4D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC5,5m,INV4D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC6,5m,INV4D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC7,5m,INV4D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC8,5m,INV4D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC9,5m,INV4D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC10,5m,INV4D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC11,5m,INV4D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC12,5m,INV4D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC13,5m,INV4D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC14,5m,INV4D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC15,5m,INV4D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC16,5m,INV4D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC17,5m,INV4D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC18,5m,INV4D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC19,5m,INV4D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC20,5m,INV4D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC21,5m,INV4D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC22,5m,INV4D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC23,5m,INV4D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU30,IDC24,5m,INV4D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC1,5m,INV4D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC2,5m,INV4D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC3,5m,INV4D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC4,5m,INV4D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC5,5m,INV4D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC6,5m,INV4D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC7,5m,INV4D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC8,5m,INV4D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC9,5m,INV4D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC10,5m,INV4D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC11,5m,INV4D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC12,5m,INV4D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC13,5m,INV4D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC14,5m,INV4D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC15,5m,INV4D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC16,5m,INV4D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC17,5m,INV4D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC18,5m,INV4D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC19,5m,INV4D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC20,5m,INV4D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC21,5m,INV4D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC22,5m,INV4D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC23,5m,INV4D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU31,IDC24,5m,INV4D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC1,5m,INV4D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC2,5m,INV4D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC3,5m,INV4D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC4,5m,INV4D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC5,5m,INV4D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC6,5m,INV4D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC7,5m,INV4D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC8,5m,INV4D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC9,5m,INV4D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC10,5m,INV4D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC11,5m,INV4D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC12,5m,INV4D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC13,5m,INV4D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC14,5m,INV4D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC15,5m,INV4D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC16,5m,INV4D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC17,5m,INV4D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC18,5m,INV4D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC19,5m,INV4D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC20,5m,INV4D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC21,5m,INV4D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC22,5m,INV4D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC23,5m,INV4D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC24,5m,INV4D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC25,5m,INV4D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC26,5m,INV4D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC27,5m,INV4D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC28,5m,INV4D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC29,5m,INV4D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC30,5m,INV4D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC31,5m,INV4D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block A 4,B04_INV4_SMU32,IDC32,5m,INV4D_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 1840,
        "wires": [
            [
                "04a313e02a3d1ec8"
            ]
        ]
    },
    {
        "id": "60876d8cd1f53d31",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "ee796681b671843e"
            ]
        ]
    },
    {
        "id": "0c262bee2f7ae970",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "60876d8cd1f53d31",
                "d892f834b735b223"
            ]
        ]
    },
    {
        "id": "ee796681b671843e",
        "type": "influxdb in",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 200,
        "wires": [
            [
                "e2fbf1936faf5e06"
            ]
        ]
    },
    {
        "id": "d892f834b735b223",
        "type": "change",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 120,
        "wires": [
            [
                "e2fbf1936faf5e06"
            ]
        ]
    },
    {
        "id": "be27ad812ed3612f",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 120,
        "wires": [
            [
                "e6577cebd701b36d"
            ]
        ]
    },
    {
        "id": "fea10f8a997c41b9",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "a0f41c57bdb5d074"
            ]
        ]
    },
    {
        "id": "a0f41c57bdb5d074",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 160,
        "wires": [
            [
                "30fb3314575d45e6",
                "618228f80ce09498"
            ]
        ]
    },
    {
        "id": "e2fbf1936faf5e06",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "fea10f8a997c41b9"
            ]
        ]
    },
    {
        "id": "74e67a73faf65faa",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 240,
        "wires": []
    },
    {
        "id": "30fb3314575d45e6",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "2a2c32d5d14f002c"
            ]
        ]
    },
    {
        "id": "2a2c32d5d14f002c",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "37f2578562640dd8"
            ]
        ]
    },
    {
        "id": "37f2578562640dd8",
        "type": "file",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 240,
        "wires": [
            [
                "74e67a73faf65faa"
            ]
        ]
    },
    {
        "id": "e6577cebd701b36d",
        "type": "delay",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "3f71a33ef59a0247"
            ]
        ]
    },
    {
        "id": "02aa15b03ed39c81",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "debug 1872",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "a36aa6559dd0d055",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 380,
        "wires": [
            [
                "02aa15b03ed39c81"
            ]
        ]
    },
    {
        "id": "59dc254085b2c8df",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "a36aa6559dd0d055"
            ]
        ]
    },
    {
        "id": "6455b468c583a72e",
        "type": "file in",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 380,
        "wires": [
            [
                "59dc254085b2c8df"
            ]
        ]
    },
    {
        "id": "da7bf40fc7db1e73",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "6455b468c583a72e"
            ]
        ]
    },
    {
        "id": "8362ef3e078b4b2d",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "da7bf40fc7db1e73"
            ]
        ]
    },
    {
        "id": "de132915f9f8b97b",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "debug 1873",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "3f656a81d1454a5e",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "de132915f9f8b97b"
            ]
        ]
    },
    {
        "id": "7f85e5e174b66a8c",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "filename",
        "func": "\nvar today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "3f656a81d1454a5e"
            ]
        ]
    },
    {
        "id": "18b56ddbcfdf7f95",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "02025c254100f34a",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "7f85e5e174b66a8c"
            ]
        ]
    },
    {
        "id": "618228f80ce09498",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 120,
        "wires": []
    },
    {
        "id": "3f71a33ef59a0247",
        "type": "template",
        "z": "a86c721b13d34fc6",
        "g": "50342b1532f418b9",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC1,5m,INV5A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC2,5m,INV5A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC3,5m,INV5A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC4,5m,INV5A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC5,5m,INV5A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC6,5m,INV5A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC7,5m,INV5A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC8,5m,INV5A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC9,5m,INV5A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC10,5m,INV5A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC11,5m,INV5A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC12,5m,INV5A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC13,5m,INV5A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC14,5m,INV5A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC15,5m,INV5A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC16,5m,INV5A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC17,5m,INV5A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC18,5m,INV5A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC19,5m,INV5A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC20,5m,INV5A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC21,5m,INV5A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC22,5m,INV5A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC23,5m,INV5A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU01,IDC24,5m,INV5A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC1,5m,INV5A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC2,5m,INV5A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC3,5m,INV5A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC4,5m,INV5A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC5,5m,INV5A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC6,5m,INV5A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC7,5m,INV5A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC8,5m,INV5A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC9,5m,INV5A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC10,5m,INV5A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC11,5m,INV5A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC12,5m,INV5A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC13,5m,INV5A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC14,5m,INV5A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC15,5m,INV5A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC16,5m,INV5A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC17,5m,INV5A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC18,5m,INV5A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC19,5m,INV5A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC20,5m,INV5A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC21,5m,INV5A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC22,5m,INV5A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC23,5m,INV5A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU02,IDC24,5m,INV5A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC1,5m,INV5A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC2,5m,INV5A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC3,5m,INV5A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC4,5m,INV5A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC5,5m,INV5A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC6,5m,INV5A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC7,5m,INV5A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC8,5m,INV5A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC9,5m,INV5A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC10,5m,INV5A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC11,5m,INV5A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC12,5m,INV5A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC13,5m,INV5A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC14,5m,INV5A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC15,5m,INV5A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC16,5m,INV5A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC17,5m,INV5A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC18,5m,INV5A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC19,5m,INV5A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC20,5m,INV5A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC21,5m,INV5A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC22,5m,INV5A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC23,5m,INV5A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU03,IDC24,5m,INV5A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC1,5m,INV5A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC2,5m,INV5A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC3,5m,INV5A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC4,5m,INV5A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC5,5m,INV5A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC6,5m,INV5A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC7,5m,INV5A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC8,5m,INV5A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC9,5m,INV5A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC10,5m,INV5A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC11,5m,INV5A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC12,5m,INV5A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC13,5m,INV5A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC14,5m,INV5A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC15,5m,INV5A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC16,5m,INV5A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC17,5m,INV5A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC18,5m,INV5A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC19,5m,INV5A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC20,5m,INV5A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC21,5m,INV5A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC22,5m,INV5A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC23,5m,INV5A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU04,IDC24,5m,INV5A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC1,5m,INV5A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC2,5m,INV5A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC3,5m,INV5A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC4,5m,INV5A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC5,5m,INV5A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC6,5m,INV5A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC7,5m,INV5A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC8,5m,INV5A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC9,5m,INV5A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC10,5m,INV5A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC11,5m,INV5A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC12,5m,INV5A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC13,5m,INV5A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC14,5m,INV5A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC15,5m,INV5A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC16,5m,INV5A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC17,5m,INV5A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC18,5m,INV5A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC19,5m,INV5A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC20,5m,INV5A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC21,5m,INV5A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC22,5m,INV5A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC23,5m,INV5A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU05,IDC24,5m,INV5A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC1,5m,INV5A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC2,5m,INV5A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC3,5m,INV5A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC4,5m,INV5A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC5,5m,INV5A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC6,5m,INV5A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC7,5m,INV5A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC8,5m,INV5A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC9,5m,INV5A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC10,5m,INV5A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC11,5m,INV5A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC12,5m,INV5A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC13,5m,INV5A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC14,5m,INV5A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC15,5m,INV5A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC16,5m,INV5A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC17,5m,INV5A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC18,5m,INV5A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC19,5m,INV5A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC20,5m,INV5A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC21,5m,INV5A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC22,5m,INV5A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC23,5m,INV5A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU06,IDC24,5m,INV5A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC1,5m,INV5A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC2,5m,INV5A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC3,5m,INV5A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC4,5m,INV5A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC5,5m,INV5A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC6,5m,INV5A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC7,5m,INV5A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC8,5m,INV5A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC9,5m,INV5A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC10,5m,INV5A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC11,5m,INV5A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC12,5m,INV5A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC13,5m,INV5A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC14,5m,INV5A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC15,5m,INV5A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC16,5m,INV5A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC17,5m,INV5A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC18,5m,INV5A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC19,5m,INV5A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC20,5m,INV5A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC21,5m,INV5A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC22,5m,INV5A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC23,5m,INV5A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU07,IDC24,5m,INV5A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC1,5m,INV5A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC2,5m,INV5A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC3,5m,INV5A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC4,5m,INV5A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC5,5m,INV5A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC6,5m,INV5A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC7,5m,INV5A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC8,5m,INV5A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC9,5m,INV5A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC10,5m,INV5A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC11,5m,INV5A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC12,5m,INV5A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC13,5m,INV5A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC14,5m,INV5A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC15,5m,INV5A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC16,5m,INV5A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC17,5m,INV5A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC18,5m,INV5A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC19,5m,INV5A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC20,5m,INV5A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC21,5m,INV5A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC22,5m,INV5A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC23,5m,INV5A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC24,5m,INV5A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC25,5m,INV5A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC26,5m,INV5A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC27,5m,INV5A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC28,5m,INV5A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC29,5m,INV5A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC30,5m,INV5A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC31,5m,INV5A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV1_SMU08,IDC32,5m,INV5A_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "0c262bee2f7ae970"
            ]
        ]
    },
    {
        "id": "038d489c9d05f4ec",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 740,
        "wires": [
            [
                "dae1336a4e395cec"
            ]
        ]
    },
    {
        "id": "29086b525939af6d",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 660,
        "wires": [
            [
                "038d489c9d05f4ec",
                "75d2508406a80e7c"
            ]
        ]
    },
    {
        "id": "dae1336a4e395cec",
        "type": "influxdb in",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 740,
        "wires": [
            [
                "9fb82f7907751614"
            ]
        ]
    },
    {
        "id": "75d2508406a80e7c",
        "type": "change",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 660,
        "wires": [
            [
                "9fb82f7907751614"
            ]
        ]
    },
    {
        "id": "25a63bc3d4ce9eed",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 660,
        "wires": [
            [
                "4f5b6d763aa43f2b"
            ]
        ]
    },
    {
        "id": "9b4433880eae0593",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "abee72f7955740fd"
            ]
        ]
    },
    {
        "id": "abee72f7955740fd",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 700,
        "wires": [
            [
                "ae150273a0a46c89",
                "21c5bcfb80c37191"
            ]
        ]
    },
    {
        "id": "9fb82f7907751614",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 700,
        "wires": [
            [
                "9b4433880eae0593"
            ]
        ]
    },
    {
        "id": "4139733f7d597c90",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 780,
        "wires": []
    },
    {
        "id": "ae150273a0a46c89",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 700,
        "wires": [
            [
                "f4246a16e26f8355"
            ]
        ]
    },
    {
        "id": "f4246a16e26f8355",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "95cbbeef7af48d53"
            ]
        ]
    },
    {
        "id": "95cbbeef7af48d53",
        "type": "file",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 780,
        "wires": [
            [
                "4139733f7d597c90"
            ]
        ]
    },
    {
        "id": "4f5b6d763aa43f2b",
        "type": "delay",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 640,
        "wires": [
            [
                "7f60a43eee8fce8a"
            ]
        ]
    },
    {
        "id": "b5ced2dc69cae30e",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "debug 1874",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 920,
        "wires": []
    },
    {
        "id": "35a7b3272341b9d3",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 920,
        "wires": [
            [
                "b5ced2dc69cae30e"
            ]
        ]
    },
    {
        "id": "33a9ce69ee7056dc",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 920,
        "wires": [
            [
                "35a7b3272341b9d3"
            ]
        ]
    },
    {
        "id": "66606e827e01dbd6",
        "type": "file in",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 920,
        "wires": [
            [
                "33a9ce69ee7056dc"
            ]
        ]
    },
    {
        "id": "abbfbdec7bd7d32e",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 920,
        "wires": [
            [
                "66606e827e01dbd6"
            ]
        ]
    },
    {
        "id": "954ae4b0e9645d3b",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 920,
        "wires": [
            [
                "abbfbdec7bd7d32e"
            ]
        ]
    },
    {
        "id": "67b98bf144247355",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "debug 1875",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5939d3576de0e73d",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "67b98bf144247355"
            ]
        ]
    },
    {
        "id": "345b3f463726aaeb",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "5939d3576de0e73d"
            ]
        ]
    },
    {
        "id": "7f53df628173e4a1",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "301bedb4eff4371a",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "345b3f463726aaeb"
            ]
        ]
    },
    {
        "id": "21c5bcfb80c37191",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 660,
        "wires": []
    },
    {
        "id": "7f60a43eee8fce8a",
        "type": "template",
        "z": "a86c721b13d34fc6",
        "g": "e29b4a78e8e6888b",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC1,5m,INV5B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC2,5m,INV5B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC3,5m,INV5B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC4,5m,INV5B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC5,5m,INV5B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC6,5m,INV5B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC7,5m,INV5B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC8,5m,INV5B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC9,5m,INV5B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC10,5m,INV5B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC11,5m,INV5B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC12,5m,INV5B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC13,5m,INV5B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC14,5m,INV5B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC15,5m,INV5B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC16,5m,INV5B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC17,5m,INV5B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC18,5m,INV5B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC19,5m,INV5B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC20,5m,INV5B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC21,5m,INV5B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC22,5m,INV5B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC23,5m,INV5B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU09,IDC24,5m,INV5B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC1,5m,INV5B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC2,5m,INV5B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC3,5m,INV5B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC4,5m,INV5B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC5,5m,INV5B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC6,5m,INV5B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC7,5m,INV5B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC8,5m,INV5B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC9,5m,INV5B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC10,5m,INV5B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC11,5m,INV5B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC12,5m,INV5B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC13,5m,INV5B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC14,5m,INV5B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC15,5m,INV5B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC16,5m,INV5B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC17,5m,INV5B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC18,5m,INV5B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC19,5m,INV5B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC20,5m,INV5B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC21,5m,INV5B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC22,5m,INV5B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC23,5m,INV5B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU10,IDC24,5m,INV5B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC1,5m,INV5B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC2,5m,INV5B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC3,5m,INV5B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC4,5m,INV5B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC5,5m,INV5B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC6,5m,INV5B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC7,5m,INV5B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC8,5m,INV5B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC9,5m,INV5B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC10,5m,INV5B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC11,5m,INV5B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC12,5m,INV5B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC13,5m,INV5B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC14,5m,INV5B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC15,5m,INV5B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC16,5m,INV5B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC17,5m,INV5B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC18,5m,INV5B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC19,5m,INV5B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC20,5m,INV5B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC21,5m,INV5B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC22,5m,INV5B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC23,5m,INV5B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU11,IDC24,5m,INV5B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC1,5m,INV5B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC2,5m,INV5B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC3,5m,INV5B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC4,5m,INV5B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC5,5m,INV5B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC6,5m,INV5B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC7,5m,INV5B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC8,5m,INV5B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC9,5m,INV5B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC10,5m,INV5B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC11,5m,INV5B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC12,5m,INV5B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC13,5m,INV5B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC14,5m,INV5B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC15,5m,INV5B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC16,5m,INV5B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC17,5m,INV5B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC18,5m,INV5B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC19,5m,INV5B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC20,5m,INV5B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC21,5m,INV5B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC22,5m,INV5B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC23,5m,INV5B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU12,IDC24,5m,INV5B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC1,5m,INV5B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC2,5m,INV5B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC3,5m,INV5B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC4,5m,INV5B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC5,5m,INV5B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC6,5m,INV5B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC7,5m,INV5B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC8,5m,INV5B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC9,5m,INV5B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC10,5m,INV5B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC11,5m,INV5B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC12,5m,INV5B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC13,5m,INV5B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC14,5m,INV5B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC15,5m,INV5B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC16,5m,INV5B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC17,5m,INV5B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC18,5m,INV5B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC19,5m,INV5B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC20,5m,INV5B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC21,5m,INV5B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC22,5m,INV5B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC23,5m,INV5B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU13,IDC24,5m,INV5B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC1,5m,INV5B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC2,5m,INV5B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC3,5m,INV5B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC4,5m,INV5B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC5,5m,INV5B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC6,5m,INV5B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC7,5m,INV5B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC8,5m,INV5B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC9,5m,INV5B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC10,5m,INV5B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC11,5m,INV5B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC12,5m,INV5B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC13,5m,INV5B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC14,5m,INV5B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC15,5m,INV5B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC16,5m,INV5B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC17,5m,INV5B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC18,5m,INV5B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC19,5m,INV5B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC20,5m,INV5B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC21,5m,INV5B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC22,5m,INV5B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC23,5m,INV5B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU14,IDC24,5m,INV5B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC1,5m,INV5B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC2,5m,INV5B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC3,5m,INV5B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC4,5m,INV5B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC5,5m,INV5B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC6,5m,INV5B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC7,5m,INV5B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC8,5m,INV5B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC9,5m,INV5B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC10,5m,INV5B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC11,5m,INV5B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC12,5m,INV5B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC13,5m,INV5B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC14,5m,INV5B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC15,5m,INV5B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC16,5m,INV5B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC17,5m,INV5B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC18,5m,INV5B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC19,5m,INV5B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC20,5m,INV5B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC21,5m,INV5B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC22,5m,INV5B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC23,5m,INV5B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU15,IDC24,5m,INV5B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC1,5m,INV5B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC2,5m,INV5B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC3,5m,INV5B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC4,5m,INV5B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC5,5m,INV5B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC6,5m,INV5B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC7,5m,INV5B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC8,5m,INV5B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC9,5m,INV5B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC10,5m,INV5B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC11,5m,INV5B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC12,5m,INV5B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC13,5m,INV5B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC14,5m,INV5B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC15,5m,INV5B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC16,5m,INV5B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC17,5m,INV5B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC18,5m,INV5B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC19,5m,INV5B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC20,5m,INV5B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC21,5m,INV5B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC22,5m,INV5B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC23,5m,INV5B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC24,5m,INV5B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC25,5m,INV5B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC26,5m,INV5B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC27,5m,INV5B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC28,5m,INV5B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC29,5m,INV5B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC30,5m,INV5B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC31,5m,INV5B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV2_SMU16,IDC32,5m,INV5B_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 660,
        "wires": [
            [
                "29086b525939af6d"
            ]
        ]
    },
    {
        "id": "59125be4f9971c0a",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "848c61f0566e9d81"
            ]
        ]
    },
    {
        "id": "880737fefe5a5e93",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 1240,
        "wires": [
            [
                "59125be4f9971c0a",
                "da5560dee488ac29"
            ]
        ]
    },
    {
        "id": "848c61f0566e9d81",
        "type": "influxdb in",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "83a90b785149cbe5"
            ]
        ]
    },
    {
        "id": "da5560dee488ac29",
        "type": "change",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "83a90b785149cbe5"
            ]
        ]
    },
    {
        "id": "d2bfd1156167d5c9",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "ae0f42f716c50409"
            ]
        ]
    },
    {
        "id": "070815b4d4c5b4a8",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1280,
        "wires": [
            [
                "dc6c8c30ff3171da"
            ]
        ]
    },
    {
        "id": "dc6c8c30ff3171da",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1280,
        "wires": [
            [
                "2a5ebdaf69340606",
                "09810144f98a7552"
            ]
        ]
    },
    {
        "id": "83a90b785149cbe5",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1280,
        "wires": [
            [
                "070815b4d4c5b4a8"
            ]
        ]
    },
    {
        "id": "cc92beb6856848af",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2a5ebdaf69340606",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 1280,
        "wires": [
            [
                "afe6541598aa67ef"
            ]
        ]
    },
    {
        "id": "afe6541598aa67ef",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1360,
        "wires": [
            [
                "52145f645ba9a3fc"
            ]
        ]
    },
    {
        "id": "52145f645ba9a3fc",
        "type": "file",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 1360,
        "wires": [
            [
                "cc92beb6856848af"
            ]
        ]
    },
    {
        "id": "ae0f42f716c50409",
        "type": "delay",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "f6d3f14822f24661"
            ]
        ]
    },
    {
        "id": "56a3a78481093965",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "debug 1876",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1500,
        "wires": []
    },
    {
        "id": "54dbaf8c16bec830",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 1500,
        "wires": [
            [
                "56a3a78481093965"
            ]
        ]
    },
    {
        "id": "3a9d53925d7726d7",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1500,
        "wires": [
            [
                "54dbaf8c16bec830"
            ]
        ]
    },
    {
        "id": "6b635a2a684fdb23",
        "type": "file in",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "3a9d53925d7726d7"
            ]
        ]
    },
    {
        "id": "208138db0e968ad1",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1500,
        "wires": [
            [
                "6b635a2a684fdb23"
            ]
        ]
    },
    {
        "id": "21df0a1be435af71",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 1500,
        "wires": [
            [
                "208138db0e968ad1"
            ]
        ]
    },
    {
        "id": "7181297222dd5cfc",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "debug 1877",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e78cb840e95d814a",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "7181297222dd5cfc"
            ]
        ]
    },
    {
        "id": "c6bb5adfe54af4ab",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1600,
        "wires": [
            [
                "e78cb840e95d814a"
            ]
        ]
    },
    {
        "id": "0e9160a7a2db76d6",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "f487a3e2b41bd969",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 1600,
        "wires": [
            [
                "c6bb5adfe54af4ab"
            ]
        ]
    },
    {
        "id": "09810144f98a7552",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f6d3f14822f24661",
        "type": "template",
        "z": "a86c721b13d34fc6",
        "g": "621905e91e8429b4",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC1,5m,INV5C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC2,5m,INV5C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC3,5m,INV5C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC4,5m,INV5C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC5,5m,INV5C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC6,5m,INV5C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC7,5m,INV5C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC8,5m,INV5C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC9,5m,INV5C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC10,5m,INV5C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC11,5m,INV5C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC12,5m,INV5C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC13,5m,INV5C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC14,5m,INV5C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC15,5m,INV5C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC16,5m,INV5C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC17,5m,INV5C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC18,5m,INV5C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC19,5m,INV5C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC20,5m,INV5C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC21,5m,INV5C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC22,5m,INV5C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC23,5m,INV5C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU17,IDC24,5m,INV5C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC1,5m,INV5C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC2,5m,INV5C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC3,5m,INV5C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC4,5m,INV5C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC5,5m,INV5C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC6,5m,INV5C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC7,5m,INV5C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC8,5m,INV5C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC9,5m,INV5C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC10,5m,INV5C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC11,5m,INV5C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC12,5m,INV5C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC13,5m,INV5C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC14,5m,INV5C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC15,5m,INV5C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC16,5m,INV5C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC17,5m,INV5C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC18,5m,INV5C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC19,5m,INV5C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC20,5m,INV5C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC21,5m,INV5C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC22,5m,INV5C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC23,5m,INV5C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU18,IDC24,5m,INV5C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC1,5m,INV5C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC2,5m,INV5C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC3,5m,INV5C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC4,5m,INV5C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC5,5m,INV5C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC6,5m,INV5C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC7,5m,INV5C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC8,5m,INV5C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC9,5m,INV5C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC10,5m,INV5C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC11,5m,INV5C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC12,5m,INV5C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC13,5m,INV5C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC14,5m,INV5C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC15,5m,INV5C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC16,5m,INV5C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC17,5m,INV5C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC18,5m,INV5C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC19,5m,INV5C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC20,5m,INV5C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC21,5m,INV5C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC22,5m,INV5C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC23,5m,INV5C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU19,IDC24,5m,INV5C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC1,5m,INV5C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC2,5m,INV5C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC3,5m,INV5C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC4,5m,INV5C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC5,5m,INV5C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC6,5m,INV5C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC7,5m,INV5C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC8,5m,INV5C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC9,5m,INV5C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC10,5m,INV5C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC11,5m,INV5C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC12,5m,INV5C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC13,5m,INV5C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC14,5m,INV5C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC15,5m,INV5C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC16,5m,INV5C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC17,5m,INV5C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC18,5m,INV5C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC19,5m,INV5C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC20,5m,INV5C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC21,5m,INV5C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC22,5m,INV5C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC23,5m,INV5C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU20,IDC24,5m,INV5C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC1,5m,INV5C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC2,5m,INV5C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC3,5m,INV5C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC4,5m,INV5C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC5,5m,INV5C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC6,5m,INV5C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC7,5m,INV5C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC8,5m,INV5C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC9,5m,INV5C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC10,5m,INV5C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC11,5m,INV5C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC12,5m,INV5C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC13,5m,INV5C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC14,5m,INV5C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC15,5m,INV5C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC16,5m,INV5C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC17,5m,INV5C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC18,5m,INV5C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC19,5m,INV5C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC20,5m,INV5C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC21,5m,INV5C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC22,5m,INV5C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC23,5m,INV5C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU21,IDC24,5m,INV5C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC1,5m,INV5C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC2,5m,INV5C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC3,5m,INV5C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC4,5m,INV5C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC5,5m,INV5C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC6,5m,INV5C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC7,5m,INV5C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC8,5m,INV5C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC9,5m,INV5C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC10,5m,INV5C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC11,5m,INV5C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC12,5m,INV5C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC13,5m,INV5C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC14,5m,INV5C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC15,5m,INV5C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC16,5m,INV5C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC17,5m,INV5C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC18,5m,INV5C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC19,5m,INV5C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC20,5m,INV5C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC21,5m,INV5C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC22,5m,INV5C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC23,5m,INV5C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU22,IDC24,5m,INV5C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC1,5m,INV5C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC2,5m,INV5C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC3,5m,INV5C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC4,5m,INV5C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC5,5m,INV5C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC6,5m,INV5C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC7,5m,INV5C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC8,5m,INV5C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC9,5m,INV5C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC10,5m,INV5C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC11,5m,INV5C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC12,5m,INV5C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC13,5m,INV5C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC14,5m,INV5C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC15,5m,INV5C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC16,5m,INV5C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC17,5m,INV5C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC18,5m,INV5C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC19,5m,INV5C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC20,5m,INV5C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC21,5m,INV5C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC22,5m,INV5C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC23,5m,INV5C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU23,IDC24,5m,INV5C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC1,5m,INV5C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC2,5m,INV5C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC3,5m,INV5C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC4,5m,INV5C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC5,5m,INV5C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC6,5m,INV5C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC7,5m,INV5C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC8,5m,INV5C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC9,5m,INV5C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC10,5m,INV5C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC11,5m,INV5C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC12,5m,INV5C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC13,5m,INV5C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC14,5m,INV5C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC15,5m,INV5C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC16,5m,INV5C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC17,5m,INV5C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC18,5m,INV5C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC19,5m,INV5C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC20,5m,INV5C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC21,5m,INV5C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC22,5m,INV5C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC23,5m,INV5C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC24,5m,INV5C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC25,5m,INV5C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC26,5m,INV5C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC27,5m,INV5C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC28,5m,INV5C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC29,5m,INV5C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC30,5m,INV5C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC31,5m,INV5C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV3_SMU24,IDC32,5m,INV5C_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 1240,
        "wires": [
            [
                "880737fefe5a5e93"
            ]
        ]
    },
    {
        "id": "97f722e18a7289f0",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1920,
        "wires": [
            [
                "fb9a0747c907ab02"
            ]
        ]
    },
    {
        "id": "f657b55080f30d3b",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 1840,
        "wires": [
            [
                "97f722e18a7289f0",
                "745941a8c7cc5aeb"
            ]
        ]
    },
    {
        "id": "fb9a0747c907ab02",
        "type": "influxdb in",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 670,
        "y": 1920,
        "wires": [
            [
                "b5b14f18d9ec78dd"
            ]
        ]
    },
    {
        "id": "745941a8c7cc5aeb",
        "type": "change",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "b5b14f18d9ec78dd"
            ]
        ]
    },
    {
        "id": "985db26d17dde3b1",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1840,
        "wires": [
            [
                "dcfc9665b24612fc"
            ]
        ]
    },
    {
        "id": "89fa07800bcdb47d",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1880,
        "wires": [
            [
                "66a3fd8b55e8dbf3"
            ]
        ]
    },
    {
        "id": "66a3fd8b55e8dbf3",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1880,
        "wires": [
            [
                "118203edac7f0145",
                "b59c9e47e314eae9"
            ]
        ]
    },
    {
        "id": "b5b14f18d9ec78dd",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1880,
        "wires": [
            [
                "89fa07800bcdb47d"
            ]
        ]
    },
    {
        "id": "aa7213f6c50ac48d",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1960,
        "wires": []
    },
    {
        "id": "118203edac7f0145",
        "type": "csv",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1330,
        "y": 1880,
        "wires": [
            [
                "d2cacc1f5b8180b1"
            ]
        ]
    },
    {
        "id": "d2cacc1f5b8180b1",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1960,
        "wires": [
            [
                "c466318cb552a52e"
            ]
        ]
    },
    {
        "id": "c466318cb552a52e",
        "type": "file",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 1960,
        "wires": [
            [
                "aa7213f6c50ac48d"
            ]
        ]
    },
    {
        "id": "dcfc9665b24612fc",
        "type": "delay",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1820,
        "wires": [
            [
                "7ce9429885a1a680"
            ]
        ]
    },
    {
        "id": "071ddc9ebe2d68cc",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "debug 1878",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 2100,
        "wires": []
    },
    {
        "id": "e156ceb868d16737",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 930,
        "y": 2100,
        "wires": [
            [
                "071ddc9ebe2d68cc"
            ]
        ]
    },
    {
        "id": "0832f38e2c81a3e8",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2100,
        "wires": [
            [
                "e156ceb868d16737"
            ]
        ]
    },
    {
        "id": "326225590deca6e4",
        "type": "file in",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 2100,
        "wires": [
            [
                "0832f38e2c81a3e8"
            ]
        ]
    },
    {
        "id": "3b3a959de18729bf",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV5D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2100,
        "wires": [
            [
                "326225590deca6e4"
            ]
        ]
    },
    {
        "id": "d64a41e80d33ca1b",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 340,
        "y": 2100,
        "wires": [
            [
                "3b3a959de18729bf"
            ]
        ]
    },
    {
        "id": "c267f855500ae9e4",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "debug 1879",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2200,
        "wires": []
    },
    {
        "id": "a213abf81eba9701",
        "type": "ftp in",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 830,
        "y": 2200,
        "wires": [
            [
                "c267f855500ae9e4"
            ]
        ]
    },
    {
        "id": "6a33ff825bb0b05a",
        "type": "function",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV5D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2200,
        "wires": [
            [
                "a213abf81eba9701"
            ]
        ]
    },
    {
        "id": "9bf5469ffd90260f",
        "type": "cronplus",
        "z": "a86c721b13d34fc6",
        "g": "74fab9e8df404a4c",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 470,
        "y": 2200,
        "wires": [
            [
                "6a33ff825bb0b05a"
            ]
        ]
    },
    {
        "id": "b59c9e47e314eae9",
        "type": "debug",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1840,
        "wires": []
    },
    {
        "id": "7ce9429885a1a680",
        "type": "template",
        "z": "a86c721b13d34fc6",
        "g": "4c271d5389cf694a",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC1,5m,INV5D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC2,5m,INV5D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC3,5m,INV5D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC4,5m,INV5D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC5,5m,INV5D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC6,5m,INV5D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC7,5m,INV5D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC8,5m,INV5D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC9,5m,INV5D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC10,5m,INV5D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC11,5m,INV5D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC12,5m,INV5D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC13,5m,INV5D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC14,5m,INV5D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC15,5m,INV5D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC16,5m,INV5D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC17,5m,INV5D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC18,5m,INV5D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC19,5m,INV5D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC20,5m,INV5D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC21,5m,INV5D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC22,5m,INV5D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC23,5m,INV5D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU25,IDC24,5m,INV5D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC1,5m,INV5D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC2,5m,INV5D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC3,5m,INV5D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC4,5m,INV5D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC5,5m,INV5D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC6,5m,INV5D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC7,5m,INV5D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC8,5m,INV5D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC9,5m,INV5D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC10,5m,INV5D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC11,5m,INV5D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC12,5m,INV5D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC13,5m,INV5D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC14,5m,INV5D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC15,5m,INV5D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC16,5m,INV5D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC17,5m,INV5D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC18,5m,INV5D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC19,5m,INV5D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC20,5m,INV5D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC21,5m,INV5D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC22,5m,INV5D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC23,5m,INV5D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU26,IDC24,5m,INV5D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC1,5m,INV5D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC2,5m,INV5D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC3,5m,INV5D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC4,5m,INV5D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC5,5m,INV5D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC6,5m,INV5D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC7,5m,INV5D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC8,5m,INV5D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC9,5m,INV5D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC10,5m,INV5D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC11,5m,INV5D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC12,5m,INV5D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC13,5m,INV5D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC14,5m,INV5D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC15,5m,INV5D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC16,5m,INV5D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC17,5m,INV5D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC18,5m,INV5D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC19,5m,INV5D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC20,5m,INV5D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC21,5m,INV5D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC22,5m,INV5D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC23,5m,INV5D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU27,IDC24,5m,INV5D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC1,5m,INV5D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC2,5m,INV5D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC3,5m,INV5D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC4,5m,INV5D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC5,5m,INV5D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC6,5m,INV5D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC7,5m,INV5D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC8,5m,INV5D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC9,5m,INV5D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC10,5m,INV5D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC11,5m,INV5D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC12,5m,INV5D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC13,5m,INV5D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC14,5m,INV5D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC15,5m,INV5D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC16,5m,INV5D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC17,5m,INV5D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC18,5m,INV5D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC19,5m,INV5D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC20,5m,INV5D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC21,5m,INV5D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC22,5m,INV5D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC23,5m,INV5D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU28,IDC24,5m,INV5D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC1,5m,INV5D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC2,5m,INV5D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC3,5m,INV5D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC4,5m,INV5D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC5,5m,INV5D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC6,5m,INV5D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC7,5m,INV5D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC8,5m,INV5D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC9,5m,INV5D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC10,5m,INV5D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC11,5m,INV5D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC12,5m,INV5D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC13,5m,INV5D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC14,5m,INV5D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC15,5m,INV5D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC16,5m,INV5D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC17,5m,INV5D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC18,5m,INV5D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC19,5m,INV5D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC20,5m,INV5D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC21,5m,INV5D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC22,5m,INV5D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC23,5m,INV5D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU29,IDC24,5m,INV5D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC1,5m,INV5D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC2,5m,INV5D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC3,5m,INV5D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC4,5m,INV5D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC5,5m,INV5D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC6,5m,INV5D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC7,5m,INV5D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC8,5m,INV5D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC9,5m,INV5D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC10,5m,INV5D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC11,5m,INV5D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC12,5m,INV5D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC13,5m,INV5D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC14,5m,INV5D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC15,5m,INV5D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC16,5m,INV5D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC17,5m,INV5D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC18,5m,INV5D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC19,5m,INV5D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC20,5m,INV5D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC21,5m,INV5D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC22,5m,INV5D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC23,5m,INV5D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU30,IDC24,5m,INV5D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC1,5m,INV5D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC2,5m,INV5D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC3,5m,INV5D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC4,5m,INV5D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC5,5m,INV5D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC6,5m,INV5D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC7,5m,INV5D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC8,5m,INV5D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC9,5m,INV5D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC10,5m,INV5D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC11,5m,INV5D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC12,5m,INV5D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC13,5m,INV5D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC14,5m,INV5D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC15,5m,INV5D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC16,5m,INV5D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC17,5m,INV5D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC18,5m,INV5D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC19,5m,INV5D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC20,5m,INV5D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC21,5m,INV5D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC22,5m,INV5D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC23,5m,INV5D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU31,IDC24,5m,INV5D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC1,5m,INV5D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC2,5m,INV5D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC3,5m,INV5D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC4,5m,INV5D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC5,5m,INV5D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC6,5m,INV5D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC7,5m,INV5D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC8,5m,INV5D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC9,5m,INV5D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC10,5m,INV5D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC11,5m,INV5D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC12,5m,INV5D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC13,5m,INV5D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC14,5m,INV5D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC15,5m,INV5D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC16,5m,INV5D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC17,5m,INV5D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC18,5m,INV5D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC19,5m,INV5D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC20,5m,INV5D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC21,5m,INV5D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC22,5m,INV5D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC23,5m,INV5D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC24,5m,INV5D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC25,5m,INV5D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC26,5m,INV5D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC27,5m,INV5D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC28,5m,INV5D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC29,5m,INV5D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC30,5m,INV5D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC31,5m,INV5D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 5,B05_INV4_SMU32,IDC32,5m,INV5D_SMU8_IDC32\n",
        "output": "str",
        "x": 430,
        "y": 1840,
        "wires": [
            [
                "f657b55080f30d3b"
            ]
        ]
    },
    {
        "id": "064546a31655ed51",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "899e3f1510a91176"
            ]
        ]
    },
    {
        "id": "42123c67d18dd688",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "064546a31655ed51",
                "5c57d4662f39cfb2"
            ]
        ]
    },
    {
        "id": "899e3f1510a91176",
        "type": "influxdb in",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "112b5fd83c5de73d"
            ]
        ]
    },
    {
        "id": "5c57d4662f39cfb2",
        "type": "change",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "112b5fd83c5de73d"
            ]
        ]
    },
    {
        "id": "61e83461669b5d4f",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 140,
        "wires": [
            [
                "2c322a1b33a90246"
            ]
        ]
    },
    {
        "id": "982096e9778eee6f",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "da6ad10bec9dd983"
            ]
        ]
    },
    {
        "id": "da6ad10bec9dd983",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "85975dfddca0408f",
                "752dc896f3075440"
            ]
        ]
    },
    {
        "id": "112b5fd83c5de73d",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "982096e9778eee6f"
            ]
        ]
    },
    {
        "id": "c354788eb4e6bfde",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 260,
        "wires": []
    },
    {
        "id": "85975dfddca0408f",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "ce3dcf7bf5ce1004"
            ]
        ]
    },
    {
        "id": "ce3dcf7bf5ce1004",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "cfa8bb1ed5a865c9"
            ]
        ]
    },
    {
        "id": "cfa8bb1ed5a865c9",
        "type": "file",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 260,
        "wires": [
            [
                "c354788eb4e6bfde"
            ]
        ]
    },
    {
        "id": "2c322a1b33a90246",
        "type": "delay",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "5dda6ada64ec38d0"
            ]
        ]
    },
    {
        "id": "fc5c26c6135e6a3c",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "debug 1880",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "38be2a96ab7485e7",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 400,
        "wires": [
            [
                "fc5c26c6135e6a3c"
            ]
        ]
    },
    {
        "id": "753ac0d7669dc805",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 400,
        "wires": [
            [
                "38be2a96ab7485e7"
            ]
        ]
    },
    {
        "id": "bdc408db32086b68",
        "type": "file in",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "753ac0d7669dc805"
            ]
        ]
    },
    {
        "id": "cea3f23192193a76",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 400,
        "wires": [
            [
                "bdc408db32086b68"
            ]
        ]
    },
    {
        "id": "4b9c3de47845cc23",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "cea3f23192193a76"
            ]
        ]
    },
    {
        "id": "e7015ebb24bb5c38",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "debug 1881",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "e54bbd42f21bb76a",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 500,
        "wires": [
            [
                "e7015ebb24bb5c38"
            ]
        ]
    },
    {
        "id": "da3936bbe8d74abc",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "e54bbd42f21bb76a"
            ]
        ]
    },
    {
        "id": "d58ae2e0192abee4",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "a61c4a8cb28adb1a",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "da3936bbe8d74abc"
            ]
        ]
    },
    {
        "id": "752dc896f3075440",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 140,
        "wires": []
    },
    {
        "id": "5dda6ada64ec38d0",
        "type": "template",
        "z": "f63309332e4729d6",
        "g": "ea859589138a5591",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC1,5m,INV6A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC2,5m,INV6A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC3,5m,INV6A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC4,5m,INV6A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC5,5m,INV6A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC6,5m,INV6A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC7,5m,INV6A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC8,5m,INV6A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC9,5m,INV6A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC10,5m,INV6A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC11,5m,INV6A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC12,5m,INV6A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC13,5m,INV6A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC14,5m,INV6A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC15,5m,INV6A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC16,5m,INV6A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC17,5m,INV6A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC18,5m,INV6A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC19,5m,INV6A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC20,5m,INV6A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC21,5m,INV6A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC22,5m,INV6A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC23,5m,INV6A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU01,IDC24,5m,INV6A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC1,5m,INV6A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC2,5m,INV6A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC3,5m,INV6A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC4,5m,INV6A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC5,5m,INV6A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC6,5m,INV6A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC7,5m,INV6A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC8,5m,INV6A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC9,5m,INV6A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC10,5m,INV6A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC11,5m,INV6A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC12,5m,INV6A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC13,5m,INV6A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC14,5m,INV6A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC15,5m,INV6A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC16,5m,INV6A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC17,5m,INV6A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC18,5m,INV6A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC19,5m,INV6A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC20,5m,INV6A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC21,5m,INV6A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC22,5m,INV6A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC23,5m,INV6A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU02,IDC24,5m,INV6A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC1,5m,INV6A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC2,5m,INV6A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC3,5m,INV6A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC4,5m,INV6A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC5,5m,INV6A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC6,5m,INV6A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC7,5m,INV6A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC8,5m,INV6A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC9,5m,INV6A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC10,5m,INV6A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC11,5m,INV6A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC12,5m,INV6A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC13,5m,INV6A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC14,5m,INV6A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC15,5m,INV6A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC16,5m,INV6A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC17,5m,INV6A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC18,5m,INV6A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC19,5m,INV6A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC20,5m,INV6A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC21,5m,INV6A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC22,5m,INV6A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC23,5m,INV6A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU03,IDC24,5m,INV6A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC1,5m,INV6A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC2,5m,INV6A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC3,5m,INV6A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC4,5m,INV6A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC5,5m,INV6A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC6,5m,INV6A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC7,5m,INV6A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC8,5m,INV6A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC9,5m,INV6A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC10,5m,INV6A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC11,5m,INV6A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC12,5m,INV6A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC13,5m,INV6A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC14,5m,INV6A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC15,5m,INV6A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC16,5m,INV6A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC17,5m,INV6A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC18,5m,INV6A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC19,5m,INV6A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC20,5m,INV6A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC21,5m,INV6A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC22,5m,INV6A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC23,5m,INV6A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU04,IDC24,5m,INV6A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC1,5m,INV6A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC2,5m,INV6A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC3,5m,INV6A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC4,5m,INV6A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC5,5m,INV6A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC6,5m,INV6A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC7,5m,INV6A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC8,5m,INV6A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC9,5m,INV6A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC10,5m,INV6A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC11,5m,INV6A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC12,5m,INV6A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC13,5m,INV6A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC14,5m,INV6A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC15,5m,INV6A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC16,5m,INV6A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC17,5m,INV6A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC18,5m,INV6A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC19,5m,INV6A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC20,5m,INV6A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC21,5m,INV6A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC22,5m,INV6A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC23,5m,INV6A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU05,IDC24,5m,INV6A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC1,5m,INV6A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC2,5m,INV6A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC3,5m,INV6A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC4,5m,INV6A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC5,5m,INV6A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC6,5m,INV6A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC7,5m,INV6A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC8,5m,INV6A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC9,5m,INV6A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC10,5m,INV6A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC11,5m,INV6A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC12,5m,INV6A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC13,5m,INV6A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC14,5m,INV6A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC15,5m,INV6A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC16,5m,INV6A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC17,5m,INV6A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC18,5m,INV6A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC19,5m,INV6A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC20,5m,INV6A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC21,5m,INV6A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC22,5m,INV6A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC23,5m,INV6A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU06,IDC24,5m,INV6A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC1,5m,INV6A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC2,5m,INV6A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC3,5m,INV6A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC4,5m,INV6A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC5,5m,INV6A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC6,5m,INV6A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC7,5m,INV6A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC8,5m,INV6A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC9,5m,INV6A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC10,5m,INV6A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC11,5m,INV6A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC12,5m,INV6A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC13,5m,INV6A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC14,5m,INV6A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC15,5m,INV6A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC16,5m,INV6A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC17,5m,INV6A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC18,5m,INV6A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC19,5m,INV6A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC20,5m,INV6A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC21,5m,INV6A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC22,5m,INV6A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC23,5m,INV6A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU07,IDC24,5m,INV6A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC1,5m,INV6A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC2,5m,INV6A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC3,5m,INV6A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC4,5m,INV6A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC5,5m,INV6A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC6,5m,INV6A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC7,5m,INV6A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC8,5m,INV6A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC9,5m,INV6A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC10,5m,INV6A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC11,5m,INV6A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC12,5m,INV6A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC13,5m,INV6A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC14,5m,INV6A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC15,5m,INV6A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC16,5m,INV6A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC17,5m,INV6A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC18,5m,INV6A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC19,5m,INV6A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC20,5m,INV6A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC21,5m,INV6A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC22,5m,INV6A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC23,5m,INV6A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC24,5m,INV6A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC25,5m,INV6A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC26,5m,INV6A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC27,5m,INV6A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC28,5m,INV6A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC29,5m,INV6A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC30,5m,INV6A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC31,5m,INV6A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV1_SMU08,IDC32,5m,INV6A_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 140,
        "wires": [
            [
                "42123c67d18dd688"
            ]
        ]
    },
    {
        "id": "87eb2c020ccf558a",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 760,
        "wires": [
            [
                "a908fca9ed570f16"
            ]
        ]
    },
    {
        "id": "ee701a093527144e",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 680,
        "wires": [
            [
                "87eb2c020ccf558a",
                "c5edfb00ad4fab2d"
            ]
        ]
    },
    {
        "id": "a908fca9ed570f16",
        "type": "influxdb in",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 760,
        "wires": [
            [
                "df3665e55c1a487e"
            ]
        ]
    },
    {
        "id": "c5edfb00ad4fab2d",
        "type": "change",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 680,
        "wires": [
            [
                "df3665e55c1a487e"
            ]
        ]
    },
    {
        "id": "0cee3848f242813c",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 680,
        "wires": [
            [
                "2597936e9c934162"
            ]
        ]
    },
    {
        "id": "d20df0e3131124ea",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 720,
        "wires": [
            [
                "c3a603b45339d633"
            ]
        ]
    },
    {
        "id": "c3a603b45339d633",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "0e3892bf234232ea",
                "e2824234d8a9bc5f"
            ]
        ]
    },
    {
        "id": "df3665e55c1a487e",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 720,
        "wires": [
            [
                "d20df0e3131124ea"
            ]
        ]
    },
    {
        "id": "940276e0f67668e9",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 800,
        "wires": []
    },
    {
        "id": "0e3892bf234232ea",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "f128cd569e9c7f60"
            ]
        ]
    },
    {
        "id": "f128cd569e9c7f60",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "a00f8fdfd8e84f29"
            ]
        ]
    },
    {
        "id": "a00f8fdfd8e84f29",
        "type": "file",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 800,
        "wires": [
            [
                "940276e0f67668e9"
            ]
        ]
    },
    {
        "id": "2597936e9c934162",
        "type": "delay",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 660,
        "wires": [
            [
                "9edfd80994115eab"
            ]
        ]
    },
    {
        "id": "cfd9aca115233f94",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "debug 1882",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 940,
        "wires": []
    },
    {
        "id": "d927bb5d99950b74",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 940,
        "wires": [
            [
                "cfd9aca115233f94"
            ]
        ]
    },
    {
        "id": "8f86fea787723553",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 940,
        "wires": [
            [
                "d927bb5d99950b74"
            ]
        ]
    },
    {
        "id": "348d8b55f0f1eada",
        "type": "file in",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 940,
        "wires": [
            [
                "8f86fea787723553"
            ]
        ]
    },
    {
        "id": "c6b0b1a5bb4682ba",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 940,
        "wires": [
            [
                "348d8b55f0f1eada"
            ]
        ]
    },
    {
        "id": "0f2b6d9133614746",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "c6b0b1a5bb4682ba"
            ]
        ]
    },
    {
        "id": "d4bc593f890efd2c",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "debug 1883",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f231122ec2267cb4",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "d4bc593f890efd2c"
            ]
        ]
    },
    {
        "id": "01ef54423fb21b2a",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1040,
        "wires": [
            [
                "f231122ec2267cb4"
            ]
        ]
    },
    {
        "id": "5fd290f1578c6c53",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "843f88b79bc5d34b",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "01ef54423fb21b2a"
            ]
        ]
    },
    {
        "id": "e2824234d8a9bc5f",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 680,
        "wires": []
    },
    {
        "id": "9edfd80994115eab",
        "type": "template",
        "z": "f63309332e4729d6",
        "g": "75b9240b6b258f9f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC1,5m,INV6B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC2,5m,INV6B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC3,5m,INV6B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC4,5m,INV6B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC5,5m,INV6B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC6,5m,INV6B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC7,5m,INV6B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC8,5m,INV6B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC9,5m,INV6B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC10,5m,INV6B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC11,5m,INV6B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC12,5m,INV6B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC13,5m,INV6B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC14,5m,INV6B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC15,5m,INV6B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC16,5m,INV6B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC17,5m,INV6B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC18,5m,INV6B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC19,5m,INV6B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC20,5m,INV6B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC21,5m,INV6B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC22,5m,INV6B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC23,5m,INV6B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU09,IDC24,5m,INV6B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC1,5m,INV6B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC2,5m,INV6B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC3,5m,INV6B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC4,5m,INV6B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC5,5m,INV6B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC6,5m,INV6B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC7,5m,INV6B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC8,5m,INV6B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC9,5m,INV6B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC10,5m,INV6B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC11,5m,INV6B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC12,5m,INV6B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC13,5m,INV6B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC14,5m,INV6B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC15,5m,INV6B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC16,5m,INV6B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC17,5m,INV6B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC18,5m,INV6B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC19,5m,INV6B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC20,5m,INV6B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC21,5m,INV6B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC22,5m,INV6B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC23,5m,INV6B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU10,IDC24,5m,INV6B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC1,5m,INV6B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC2,5m,INV6B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC3,5m,INV6B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC4,5m,INV6B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC5,5m,INV6B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC6,5m,INV6B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC7,5m,INV6B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC8,5m,INV6B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC9,5m,INV6B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC10,5m,INV6B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC11,5m,INV6B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC12,5m,INV6B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC13,5m,INV6B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC14,5m,INV6B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC15,5m,INV6B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC16,5m,INV6B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC17,5m,INV6B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC18,5m,INV6B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC19,5m,INV6B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC20,5m,INV6B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC21,5m,INV6B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC22,5m,INV6B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC23,5m,INV6B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU11,IDC24,5m,INV6B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC1,5m,INV6B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC2,5m,INV6B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC3,5m,INV6B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC4,5m,INV6B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC5,5m,INV6B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC6,5m,INV6B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC7,5m,INV6B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC8,5m,INV6B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC9,5m,INV6B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC10,5m,INV6B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC11,5m,INV6B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC12,5m,INV6B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC13,5m,INV6B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC14,5m,INV6B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC15,5m,INV6B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC16,5m,INV6B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC17,5m,INV6B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC18,5m,INV6B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC19,5m,INV6B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC20,5m,INV6B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC21,5m,INV6B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC22,5m,INV6B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC23,5m,INV6B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU12,IDC24,5m,INV6B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC1,5m,INV6B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC2,5m,INV6B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC3,5m,INV6B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC4,5m,INV6B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC5,5m,INV6B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC6,5m,INV6B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC7,5m,INV6B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC8,5m,INV6B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC9,5m,INV6B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC10,5m,INV6B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC11,5m,INV6B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC12,5m,INV6B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC13,5m,INV6B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC14,5m,INV6B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC15,5m,INV6B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC16,5m,INV6B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC17,5m,INV6B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC18,5m,INV6B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC19,5m,INV6B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC20,5m,INV6B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC21,5m,INV6B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC22,5m,INV6B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC23,5m,INV6B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU13,IDC24,5m,INV6B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC1,5m,INV6B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC2,5m,INV6B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC3,5m,INV6B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC4,5m,INV6B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC5,5m,INV6B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC6,5m,INV6B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC7,5m,INV6B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC8,5m,INV6B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC9,5m,INV6B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC10,5m,INV6B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC11,5m,INV6B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC12,5m,INV6B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC13,5m,INV6B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC14,5m,INV6B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC15,5m,INV6B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC16,5m,INV6B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC17,5m,INV6B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC18,5m,INV6B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC19,5m,INV6B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC20,5m,INV6B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC21,5m,INV6B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC22,5m,INV6B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC23,5m,INV6B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU14,IDC24,5m,INV6B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC1,5m,INV6B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC2,5m,INV6B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC3,5m,INV6B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC4,5m,INV6B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC5,5m,INV6B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC6,5m,INV6B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC7,5m,INV6B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC8,5m,INV6B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC9,5m,INV6B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC10,5m,INV6B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC11,5m,INV6B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC12,5m,INV6B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC13,5m,INV6B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC14,5m,INV6B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC15,5m,INV6B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC16,5m,INV6B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC17,5m,INV6B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC18,5m,INV6B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC19,5m,INV6B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC20,5m,INV6B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC21,5m,INV6B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC22,5m,INV6B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC23,5m,INV6B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU15,IDC24,5m,INV6B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC1,5m,INV6B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC2,5m,INV6B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC3,5m,INV6B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC4,5m,INV6B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC5,5m,INV6B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC6,5m,INV6B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC7,5m,INV6B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC8,5m,INV6B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC9,5m,INV6B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC10,5m,INV6B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC11,5m,INV6B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC12,5m,INV6B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC13,5m,INV6B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC14,5m,INV6B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC15,5m,INV6B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC16,5m,INV6B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC17,5m,INV6B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC18,5m,INV6B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC19,5m,INV6B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC20,5m,INV6B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC21,5m,INV6B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC22,5m,INV6B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC23,5m,INV6B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC24,5m,INV6B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC25,5m,INV6B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC26,5m,INV6B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC27,5m,INV6B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC28,5m,INV6B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC29,5m,INV6B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC30,5m,INV6B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC31,5m,INV6B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV2_SMU16,IDC32,5m,INV6B_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "ee701a093527144e"
            ]
        ]
    },
    {
        "id": "8dfd06a4c1df6a48",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "fd1c02cc50f19e80"
            ]
        ]
    },
    {
        "id": "ade2476dda8863b3",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "8dfd06a4c1df6a48",
                "3a3bd7b66993cce6"
            ]
        ]
    },
    {
        "id": "fd1c02cc50f19e80",
        "type": "influxdb in",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "0d321b9adccded8a"
            ]
        ]
    },
    {
        "id": "3a3bd7b66993cce6",
        "type": "change",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1260,
        "wires": [
            [
                "0d321b9adccded8a"
            ]
        ]
    },
    {
        "id": "71b42a39f1f4169d",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "150a91886b4629af"
            ]
        ]
    },
    {
        "id": "581572bf02fe4b62",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1300,
        "wires": [
            [
                "156952e7c655f842"
            ]
        ]
    },
    {
        "id": "156952e7c655f842",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1300,
        "wires": [
            [
                "f1074160324e421b",
                "a26ba6d0629fe260"
            ]
        ]
    },
    {
        "id": "0d321b9adccded8a",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1300,
        "wires": [
            [
                "581572bf02fe4b62"
            ]
        ]
    },
    {
        "id": "15f30e4613ca6e14",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f1074160324e421b",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1300,
        "wires": [
            [
                "39f8e0982b757f59"
            ]
        ]
    },
    {
        "id": "39f8e0982b757f59",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "f213721d650242b8"
            ]
        ]
    },
    {
        "id": "f213721d650242b8",
        "type": "file",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1380,
        "wires": [
            [
                "15f30e4613ca6e14"
            ]
        ]
    },
    {
        "id": "150a91886b4629af",
        "type": "delay",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1240,
        "wires": [
            [
                "0c070845e5e184aa"
            ]
        ]
    },
    {
        "id": "ccfe90276283c6c9",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "debug 1884",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f6dc87dd41887a87",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 1520,
        "wires": [
            [
                "ccfe90276283c6c9"
            ]
        ]
    },
    {
        "id": "fa63fdadc45e155c",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1520,
        "wires": [
            [
                "f6dc87dd41887a87"
            ]
        ]
    },
    {
        "id": "4067a7faaeb8bac5",
        "type": "file in",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 1520,
        "wires": [
            [
                "fa63fdadc45e155c"
            ]
        ]
    },
    {
        "id": "f84edaee959a8ab5",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1520,
        "wires": [
            [
                "4067a7faaeb8bac5"
            ]
        ]
    },
    {
        "id": "4328bb3746c76f93",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 1520,
        "wires": [
            [
                "f84edaee959a8ab5"
            ]
        ]
    },
    {
        "id": "8872747ece26a538",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "debug 1885",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1620,
        "wires": []
    },
    {
        "id": "109d01cc4d38e050",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1620,
        "wires": [
            [
                "8872747ece26a538"
            ]
        ]
    },
    {
        "id": "6489ea5fee268cb9",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1620,
        "wires": [
            [
                "109d01cc4d38e050"
            ]
        ]
    },
    {
        "id": "ba6e3823dc364936",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "42b12ed780153d86",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "6489ea5fee268cb9"
            ]
        ]
    },
    {
        "id": "a26ba6d0629fe260",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0c070845e5e184aa",
        "type": "template",
        "z": "f63309332e4729d6",
        "g": "9f65a1fba23e57a7",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC1,5m,INV6C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC2,5m,INV6C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC3,5m,INV6C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC4,5m,INV6C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC5,5m,INV6C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC6,5m,INV6C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC7,5m,INV6C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC8,5m,INV6C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC9,5m,INV6C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC10,5m,INV6C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC11,5m,INV6C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC12,5m,INV6C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC13,5m,INV6C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC14,5m,INV6C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC15,5m,INV6C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC16,5m,INV6C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC17,5m,INV6C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC18,5m,INV6C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC19,5m,INV6C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC20,5m,INV6C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC21,5m,INV6C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC22,5m,INV6C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC23,5m,INV6C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU17,IDC24,5m,INV6C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC1,5m,INV6C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC2,5m,INV6C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC3,5m,INV6C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC4,5m,INV6C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC5,5m,INV6C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC6,5m,INV6C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC7,5m,INV6C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC8,5m,INV6C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC9,5m,INV6C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC10,5m,INV6C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC11,5m,INV6C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC12,5m,INV6C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC13,5m,INV6C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC14,5m,INV6C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC15,5m,INV6C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC16,5m,INV6C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC17,5m,INV6C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC18,5m,INV6C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC19,5m,INV6C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC20,5m,INV6C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC21,5m,INV6C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC22,5m,INV6C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC23,5m,INV6C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU18,IDC24,5m,INV6C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC1,5m,INV6C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC2,5m,INV6C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC3,5m,INV6C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC4,5m,INV6C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC5,5m,INV6C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC6,5m,INV6C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC7,5m,INV6C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC8,5m,INV6C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC9,5m,INV6C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC10,5m,INV6C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC11,5m,INV6C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC12,5m,INV6C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC13,5m,INV6C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC14,5m,INV6C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC15,5m,INV6C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC16,5m,INV6C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC17,5m,INV6C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC18,5m,INV6C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC19,5m,INV6C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC20,5m,INV6C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC21,5m,INV6C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC22,5m,INV6C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC23,5m,INV6C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU19,IDC24,5m,INV6C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC1,5m,INV6C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC2,5m,INV6C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC3,5m,INV6C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC4,5m,INV6C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC5,5m,INV6C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC6,5m,INV6C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC7,5m,INV6C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC8,5m,INV6C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC9,5m,INV6C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC10,5m,INV6C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC11,5m,INV6C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC12,5m,INV6C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC13,5m,INV6C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC14,5m,INV6C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC15,5m,INV6C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC16,5m,INV6C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC17,5m,INV6C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC18,5m,INV6C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC19,5m,INV6C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC20,5m,INV6C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC21,5m,INV6C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC22,5m,INV6C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC23,5m,INV6C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU20,IDC24,5m,INV6C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC1,5m,INV6C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC2,5m,INV6C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC3,5m,INV6C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC4,5m,INV6C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC5,5m,INV6C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC6,5m,INV6C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC7,5m,INV6C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC8,5m,INV6C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC9,5m,INV6C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC10,5m,INV6C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC11,5m,INV6C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC12,5m,INV6C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC13,5m,INV6C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC14,5m,INV6C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC15,5m,INV6C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC16,5m,INV6C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC17,5m,INV6C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC18,5m,INV6C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC19,5m,INV6C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC20,5m,INV6C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC21,5m,INV6C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC22,5m,INV6C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC23,5m,INV6C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU21,IDC24,5m,INV6C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC1,5m,INV6C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC2,5m,INV6C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC3,5m,INV6C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC4,5m,INV6C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC5,5m,INV6C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC6,5m,INV6C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC7,5m,INV6C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC8,5m,INV6C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC9,5m,INV6C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC10,5m,INV6C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC11,5m,INV6C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC12,5m,INV6C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC13,5m,INV6C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC14,5m,INV6C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC15,5m,INV6C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC16,5m,INV6C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC17,5m,INV6C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC18,5m,INV6C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC19,5m,INV6C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC20,5m,INV6C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC21,5m,INV6C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC22,5m,INV6C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC23,5m,INV6C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU22,IDC24,5m,INV6C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC1,5m,INV6C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC2,5m,INV6C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC3,5m,INV6C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC4,5m,INV6C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC5,5m,INV6C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC6,5m,INV6C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC7,5m,INV6C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC8,5m,INV6C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC9,5m,INV6C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC10,5m,INV6C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC11,5m,INV6C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC12,5m,INV6C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC13,5m,INV6C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC14,5m,INV6C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC15,5m,INV6C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC16,5m,INV6C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC17,5m,INV6C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC18,5m,INV6C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC19,5m,INV6C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC20,5m,INV6C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC21,5m,INV6C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC22,5m,INV6C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC23,5m,INV6C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU23,IDC24,5m,INV6C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC1,5m,INV6C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC2,5m,INV6C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC3,5m,INV6C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC4,5m,INV6C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC5,5m,INV6C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC6,5m,INV6C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC7,5m,INV6C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC8,5m,INV6C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC9,5m,INV6C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC10,5m,INV6C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC11,5m,INV6C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC12,5m,INV6C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC13,5m,INV6C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC14,5m,INV6C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC15,5m,INV6C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC16,5m,INV6C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC17,5m,INV6C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC18,5m,INV6C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC19,5m,INV6C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC20,5m,INV6C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC21,5m,INV6C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC22,5m,INV6C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC23,5m,INV6C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC24,5m,INV6C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC25,5m,INV6C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC26,5m,INV6C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC27,5m,INV6C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC28,5m,INV6C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC29,5m,INV6C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC30,5m,INV6C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC31,5m,INV6C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV3_SMU24,IDC32,5m,INV6C_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "ade2476dda8863b3"
            ]
        ]
    },
    {
        "id": "fbd7a029019adb49",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1940,
        "wires": [
            [
                "da272e422b35ff35"
            ]
        ]
    },
    {
        "id": "b33c124353e28813",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "fbd7a029019adb49",
                "25c7601e5854640c"
            ]
        ]
    },
    {
        "id": "da272e422b35ff35",
        "type": "influxdb in",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1940,
        "wires": [
            [
                "e5bb2a2df6f0e1ef"
            ]
        ]
    },
    {
        "id": "25c7601e5854640c",
        "type": "change",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1860,
        "wires": [
            [
                "e5bb2a2df6f0e1ef"
            ]
        ]
    },
    {
        "id": "86c06541e1965432",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1860,
        "wires": [
            [
                "dd64214139d4e49d"
            ]
        ]
    },
    {
        "id": "a5db711e571a6ff2",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1900,
        "wires": [
            [
                "8b8c9b97e05cab2f"
            ]
        ]
    },
    {
        "id": "8b8c9b97e05cab2f",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1900,
        "wires": [
            [
                "f43fba24c66e232c",
                "3b447637eee400e9"
            ]
        ]
    },
    {
        "id": "e5bb2a2df6f0e1ef",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1900,
        "wires": [
            [
                "a5db711e571a6ff2"
            ]
        ]
    },
    {
        "id": "06542b2d44cd2d37",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1980,
        "wires": []
    },
    {
        "id": "f43fba24c66e232c",
        "type": "csv",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1900,
        "wires": [
            [
                "532477b8992c2ba7"
            ]
        ]
    },
    {
        "id": "532477b8992c2ba7",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1980,
        "wires": [
            [
                "06969246dd7a5126"
            ]
        ]
    },
    {
        "id": "06969246dd7a5126",
        "type": "file",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1980,
        "wires": [
            [
                "06542b2d44cd2d37"
            ]
        ]
    },
    {
        "id": "dd64214139d4e49d",
        "type": "delay",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1840,
        "wires": [
            [
                "27b735315a66c0a9"
            ]
        ]
    },
    {
        "id": "0c535f22d8c7163b",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "debug 1886",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 2120,
        "wires": []
    },
    {
        "id": "e7ece92978c7f9a7",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 2120,
        "wires": [
            [
                "0c535f22d8c7163b"
            ]
        ]
    },
    {
        "id": "2c5240f4e4a28ac1",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2120,
        "wires": [
            [
                "e7ece92978c7f9a7"
            ]
        ]
    },
    {
        "id": "cd903a49c3e74601",
        "type": "file in",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 2120,
        "wires": [
            [
                "2c5240f4e4a28ac1"
            ]
        ]
    },
    {
        "id": "e5c69ea6939dc2f9",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV6D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2120,
        "wires": [
            [
                "cd903a49c3e74601"
            ]
        ]
    },
    {
        "id": "6ecadea613711a99",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 2120,
        "wires": [
            [
                "e5c69ea6939dc2f9"
            ]
        ]
    },
    {
        "id": "4aa2290c98545ef7",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "debug 1887",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2220,
        "wires": []
    },
    {
        "id": "50a2be659170f5a2",
        "type": "ftp in",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 2220,
        "wires": [
            [
                "4aa2290c98545ef7"
            ]
        ]
    },
    {
        "id": "2dca30b05895db59",
        "type": "function",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV6D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2220,
        "wires": [
            [
                "50a2be659170f5a2"
            ]
        ]
    },
    {
        "id": "2c255fa6fd30080f",
        "type": "cronplus",
        "z": "f63309332e4729d6",
        "g": "93f34ce184ce78f0",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 2220,
        "wires": [
            [
                "2dca30b05895db59"
            ]
        ]
    },
    {
        "id": "3b447637eee400e9",
        "type": "debug",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1860,
        "wires": []
    },
    {
        "id": "27b735315a66c0a9",
        "type": "template",
        "z": "f63309332e4729d6",
        "g": "4072f6d6f4708b10",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC1,5m,INV6D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC2,5m,INV6D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC3,5m,INV6D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC4,5m,INV6D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC5,5m,INV6D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC6,5m,INV6D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC7,5m,INV6D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC8,5m,INV6D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC9,5m,INV6D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC10,5m,INV6D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC11,5m,INV6D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC12,5m,INV6D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC13,5m,INV6D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC14,5m,INV6D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC15,5m,INV6D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC16,5m,INV6D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC17,5m,INV6D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC18,5m,INV6D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC19,5m,INV6D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC20,5m,INV6D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC21,5m,INV6D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC22,5m,INV6D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC23,5m,INV6D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU25,IDC24,5m,INV6D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC1,5m,INV6D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC2,5m,INV6D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC3,5m,INV6D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC4,5m,INV6D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC5,5m,INV6D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC6,5m,INV6D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC7,5m,INV6D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC8,5m,INV6D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC9,5m,INV6D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC10,5m,INV6D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC11,5m,INV6D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC12,5m,INV6D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC13,5m,INV6D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC14,5m,INV6D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC15,5m,INV6D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC16,5m,INV6D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC17,5m,INV6D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC18,5m,INV6D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC19,5m,INV6D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC20,5m,INV6D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC21,5m,INV6D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC22,5m,INV6D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC23,5m,INV6D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU26,IDC24,5m,INV6D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC1,5m,INV6D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC2,5m,INV6D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC3,5m,INV6D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC4,5m,INV6D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC5,5m,INV6D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC6,5m,INV6D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC7,5m,INV6D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC8,5m,INV6D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC9,5m,INV6D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC10,5m,INV6D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC11,5m,INV6D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC12,5m,INV6D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC13,5m,INV6D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC14,5m,INV6D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC15,5m,INV6D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC16,5m,INV6D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC17,5m,INV6D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC18,5m,INV6D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC19,5m,INV6D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC20,5m,INV6D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC21,5m,INV6D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC22,5m,INV6D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC23,5m,INV6D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU27,IDC24,5m,INV6D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC1,5m,INV6D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC2,5m,INV6D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC3,5m,INV6D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC4,5m,INV6D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC5,5m,INV6D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC6,5m,INV6D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC7,5m,INV6D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC8,5m,INV6D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC9,5m,INV6D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC10,5m,INV6D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC11,5m,INV6D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC12,5m,INV6D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC13,5m,INV6D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC14,5m,INV6D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC15,5m,INV6D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC16,5m,INV6D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC17,5m,INV6D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC18,5m,INV6D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC19,5m,INV6D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC20,5m,INV6D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC21,5m,INV6D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC22,5m,INV6D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC23,5m,INV6D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU28,IDC24,5m,INV6D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC1,5m,INV6D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC2,5m,INV6D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC3,5m,INV6D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC4,5m,INV6D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC5,5m,INV6D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC6,5m,INV6D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC7,5m,INV6D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC8,5m,INV6D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC9,5m,INV6D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC10,5m,INV6D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC11,5m,INV6D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC12,5m,INV6D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC13,5m,INV6D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC14,5m,INV6D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC15,5m,INV6D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC16,5m,INV6D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC17,5m,INV6D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC18,5m,INV6D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC19,5m,INV6D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC20,5m,INV6D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC21,5m,INV6D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC22,5m,INV6D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC23,5m,INV6D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU29,IDC24,5m,INV6D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC1,5m,INV6D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC2,5m,INV6D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC3,5m,INV6D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC4,5m,INV6D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC5,5m,INV6D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC6,5m,INV6D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC7,5m,INV6D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC8,5m,INV6D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC9,5m,INV6D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC10,5m,INV6D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC11,5m,INV6D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC12,5m,INV6D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC13,5m,INV6D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC14,5m,INV6D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC15,5m,INV6D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC16,5m,INV6D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC17,5m,INV6D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC18,5m,INV6D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC19,5m,INV6D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC20,5m,INV6D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC21,5m,INV6D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC22,5m,INV6D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC23,5m,INV6D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU30,IDC24,5m,INV6D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC1,5m,INV6D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC2,5m,INV6D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC3,5m,INV6D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC4,5m,INV6D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC5,5m,INV6D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC6,5m,INV6D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC7,5m,INV6D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC8,5m,INV6D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC9,5m,INV6D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC10,5m,INV6D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC11,5m,INV6D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC12,5m,INV6D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC13,5m,INV6D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC14,5m,INV6D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC15,5m,INV6D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC16,5m,INV6D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC17,5m,INV6D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC18,5m,INV6D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC19,5m,INV6D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC20,5m,INV6D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC21,5m,INV6D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC22,5m,INV6D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC23,5m,INV6D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU31,IDC24,5m,INV6D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC1,5m,INV6D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC2,5m,INV6D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC3,5m,INV6D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC4,5m,INV6D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC5,5m,INV6D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC6,5m,INV6D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC7,5m,INV6D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC8,5m,INV6D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC9,5m,INV6D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC10,5m,INV6D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC11,5m,INV6D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC12,5m,INV6D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC13,5m,INV6D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC14,5m,INV6D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC15,5m,INV6D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC16,5m,INV6D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC17,5m,INV6D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC18,5m,INV6D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC19,5m,INV6D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC20,5m,INV6D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC21,5m,INV6D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC22,5m,INV6D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC23,5m,INV6D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC24,5m,INV6D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC25,5m,INV6D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC26,5m,INV6D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC27,5m,INV6D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC28,5m,INV6D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC29,5m,INV6D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC30,5m,INV6D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC31,5m,INV6D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 6,B06_INV4_SMU32,IDC32,5m,INV6D_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1860,
        "wires": [
            [
                "b33c124353e28813"
            ]
        ]
    },
    {
        "id": "2deab2e3648d7511",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "4fe2016edf32b121"
            ]
        ]
    },
    {
        "id": "fb25253f93d6cd72",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2deab2e3648d7511",
                "75bca8c4b23f5eb1"
            ]
        ]
    },
    {
        "id": "4fe2016edf32b121",
        "type": "influxdb in",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "72cc5ac3e5133ee9"
            ]
        ]
    },
    {
        "id": "75bca8c4b23f5eb1",
        "type": "change",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 120,
        "wires": [
            [
                "72cc5ac3e5133ee9"
            ]
        ]
    },
    {
        "id": "fa09b97cc46ef96c",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "23492419d88bf58c"
            ]
        ]
    },
    {
        "id": "dd05c320653b3e07",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 160,
        "wires": [
            [
                "2ba90ddbc7b8da67"
            ]
        ]
    },
    {
        "id": "2ba90ddbc7b8da67",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 160,
        "wires": [
            [
                "db38c1f9b0acfea9",
                "d8bb81a47e75c537"
            ]
        ]
    },
    {
        "id": "72cc5ac3e5133ee9",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 160,
        "wires": [
            [
                "dd05c320653b3e07"
            ]
        ]
    },
    {
        "id": "585cd317c8103bd4",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 240,
        "wires": []
    },
    {
        "id": "db38c1f9b0acfea9",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1390,
        "y": 160,
        "wires": [
            [
                "a46bc8aa1e4a3ea5"
            ]
        ]
    },
    {
        "id": "a46bc8aa1e4a3ea5",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "486ae5a937ffc233"
            ]
        ]
    },
    {
        "id": "486ae5a937ffc233",
        "type": "file",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 240,
        "wires": [
            [
                "585cd317c8103bd4"
            ]
        ]
    },
    {
        "id": "23492419d88bf58c",
        "type": "delay",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "47b2f4b614105312"
            ]
        ]
    },
    {
        "id": "3ff737dbe1cec06c",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "debug 1888",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 380,
        "wires": []
    },
    {
        "id": "c9863802efedee23",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 380,
        "wires": [
            [
                "3ff737dbe1cec06c"
            ]
        ]
    },
    {
        "id": "ed4b208f3376683c",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 380,
        "wires": [
            [
                "c9863802efedee23"
            ]
        ]
    },
    {
        "id": "0a6db426b08b53be",
        "type": "file in",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 380,
        "wires": [
            [
                "ed4b208f3376683c"
            ]
        ]
    },
    {
        "id": "654b79d36675be1d",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "0a6db426b08b53be"
            ]
        ]
    },
    {
        "id": "a94ae53b5a0db983",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "654b79d36675be1d"
            ]
        ]
    },
    {
        "id": "b47203b2bedc3022",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "debug 1889",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 480,
        "wires": []
    },
    {
        "id": "6f70f35e2f11b856",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 480,
        "wires": [
            [
                "b47203b2bedc3022"
            ]
        ]
    },
    {
        "id": "cd463ed568082ccb",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "6f70f35e2f11b856"
            ]
        ]
    },
    {
        "id": "1b4473b2d53d7b9c",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "1e22255fae1965c0",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "cd463ed568082ccb"
            ]
        ]
    },
    {
        "id": "d8bb81a47e75c537",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 120,
        "wires": []
    },
    {
        "id": "47b2f4b614105312",
        "type": "template",
        "z": "437bcfccf5b218c3",
        "g": "4cee22ef41632015",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC1,5m,INV7A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC2,5m,INV7A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC3,5m,INV7A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC4,5m,INV7A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC5,5m,INV7A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC6,5m,INV7A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC7,5m,INV7A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC8,5m,INV7A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC9,5m,INV7A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC10,5m,INV7A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC11,5m,INV7A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC12,5m,INV7A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC13,5m,INV7A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC14,5m,INV7A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC15,5m,INV7A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC16,5m,INV7A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC17,5m,INV7A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC18,5m,INV7A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC19,5m,INV7A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC20,5m,INV7A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC21,5m,INV7A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC22,5m,INV7A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC23,5m,INV7A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU01,IDC24,5m,INV7A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC1,5m,INV7A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC2,5m,INV7A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC3,5m,INV7A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC4,5m,INV7A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC5,5m,INV7A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC6,5m,INV7A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC7,5m,INV7A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC8,5m,INV7A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC9,5m,INV7A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC10,5m,INV7A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC11,5m,INV7A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC12,5m,INV7A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC13,5m,INV7A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC14,5m,INV7A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC15,5m,INV7A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC16,5m,INV7A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC17,5m,INV7A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC18,5m,INV7A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC19,5m,INV7A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC20,5m,INV7A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC21,5m,INV7A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC22,5m,INV7A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC23,5m,INV7A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU02,IDC24,5m,INV7A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC1,5m,INV7A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC2,5m,INV7A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC3,5m,INV7A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC4,5m,INV7A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC5,5m,INV7A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC6,5m,INV7A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC7,5m,INV7A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC8,5m,INV7A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC9,5m,INV7A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC10,5m,INV7A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC11,5m,INV7A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC12,5m,INV7A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC13,5m,INV7A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC14,5m,INV7A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC15,5m,INV7A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC16,5m,INV7A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC17,5m,INV7A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC18,5m,INV7A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC19,5m,INV7A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC20,5m,INV7A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC21,5m,INV7A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC22,5m,INV7A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC23,5m,INV7A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU03,IDC24,5m,INV7A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC1,5m,INV7A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC2,5m,INV7A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC3,5m,INV7A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC4,5m,INV7A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC5,5m,INV7A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC6,5m,INV7A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC7,5m,INV7A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC8,5m,INV7A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC9,5m,INV7A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC10,5m,INV7A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC11,5m,INV7A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC12,5m,INV7A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC13,5m,INV7A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC14,5m,INV7A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC15,5m,INV7A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC16,5m,INV7A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC17,5m,INV7A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC18,5m,INV7A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC19,5m,INV7A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC20,5m,INV7A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC21,5m,INV7A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC22,5m,INV7A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC23,5m,INV7A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU04,IDC24,5m,INV7A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC1,5m,INV7A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC2,5m,INV7A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC3,5m,INV7A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC4,5m,INV7A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC5,5m,INV7A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC6,5m,INV7A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC7,5m,INV7A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC8,5m,INV7A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC9,5m,INV7A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC10,5m,INV7A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC11,5m,INV7A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC12,5m,INV7A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC13,5m,INV7A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC14,5m,INV7A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC15,5m,INV7A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC16,5m,INV7A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC17,5m,INV7A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC18,5m,INV7A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC19,5m,INV7A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC20,5m,INV7A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC21,5m,INV7A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC22,5m,INV7A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC23,5m,INV7A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU05,IDC24,5m,INV7A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC1,5m,INV7A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC2,5m,INV7A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC3,5m,INV7A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC4,5m,INV7A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC5,5m,INV7A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC6,5m,INV7A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC7,5m,INV7A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC8,5m,INV7A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC9,5m,INV7A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC10,5m,INV7A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC11,5m,INV7A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC12,5m,INV7A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC13,5m,INV7A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC14,5m,INV7A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC15,5m,INV7A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC16,5m,INV7A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC17,5m,INV7A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC18,5m,INV7A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC19,5m,INV7A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC20,5m,INV7A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC21,5m,INV7A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC22,5m,INV7A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC23,5m,INV7A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU06,IDC24,5m,INV7A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC1,5m,INV7A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC2,5m,INV7A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC3,5m,INV7A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC4,5m,INV7A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC5,5m,INV7A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC6,5m,INV7A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC7,5m,INV7A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC8,5m,INV7A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC9,5m,INV7A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC10,5m,INV7A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC11,5m,INV7A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC12,5m,INV7A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC13,5m,INV7A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC14,5m,INV7A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC15,5m,INV7A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC16,5m,INV7A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC17,5m,INV7A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC18,5m,INV7A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC19,5m,INV7A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC20,5m,INV7A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC21,5m,INV7A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC22,5m,INV7A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC23,5m,INV7A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU07,IDC24,5m,INV7A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC1,5m,INV7A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC2,5m,INV7A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC3,5m,INV7A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC4,5m,INV7A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC5,5m,INV7A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC6,5m,INV7A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC7,5m,INV7A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC8,5m,INV7A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC9,5m,INV7A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC10,5m,INV7A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC11,5m,INV7A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC12,5m,INV7A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC13,5m,INV7A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC14,5m,INV7A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC15,5m,INV7A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC16,5m,INV7A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC17,5m,INV7A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC18,5m,INV7A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC19,5m,INV7A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC20,5m,INV7A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC21,5m,INV7A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC22,5m,INV7A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC23,5m,INV7A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC24,5m,INV7A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC25,5m,INV7A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC26,5m,INV7A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC27,5m,INV7A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC28,5m,INV7A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC29,5m,INV7A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC30,5m,INV7A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC31,5m,INV7A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV1_SMU08,IDC32,5m,INV7A_SMU8_IDC32\n",
        "output": "str",
        "x": 490,
        "y": 120,
        "wires": [
            [
                "fb25253f93d6cd72"
            ]
        ]
    },
    {
        "id": "da70b25f7137e576",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 740,
        "wires": [
            [
                "70b22837cb132ed5"
            ]
        ]
    },
    {
        "id": "b091bd04e855c971",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 630,
        "y": 660,
        "wires": [
            [
                "da70b25f7137e576",
                "2394c01f556147e1"
            ]
        ]
    },
    {
        "id": "70b22837cb132ed5",
        "type": "influxdb in",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "127b0f7a6db955ce"
            ]
        ]
    },
    {
        "id": "2394c01f556147e1",
        "type": "change",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 660,
        "wires": [
            [
                "127b0f7a6db955ce"
            ]
        ]
    },
    {
        "id": "8b54b187a51587a6",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 220,
        "y": 660,
        "wires": [
            [
                "1e4e92c83e457abc"
            ]
        ]
    },
    {
        "id": "1ce27b3c10cb3564",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 700,
        "wires": [
            [
                "e39a86d68d0a9591"
            ]
        ]
    },
    {
        "id": "e39a86d68d0a9591",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 700,
        "wires": [
            [
                "252b3681961ebcf0",
                "16e23ef70dcafadc"
            ]
        ]
    },
    {
        "id": "127b0f7a6db955ce",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 700,
        "wires": [
            [
                "1ce27b3c10cb3564"
            ]
        ]
    },
    {
        "id": "54c4a900661fef13",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 780,
        "wires": []
    },
    {
        "id": "252b3681961ebcf0",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1390,
        "y": 700,
        "wires": [
            [
                "9d65817fc7adae13"
            ]
        ]
    },
    {
        "id": "9d65817fc7adae13",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 780,
        "wires": [
            [
                "8cab19e1685cd033"
            ]
        ]
    },
    {
        "id": "8cab19e1685cd033",
        "type": "file",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 780,
        "wires": [
            [
                "54c4a900661fef13"
            ]
        ]
    },
    {
        "id": "1e4e92c83e457abc",
        "type": "delay",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 640,
        "wires": [
            [
                "bf8a64df8b693b6f"
            ]
        ]
    },
    {
        "id": "7e608b15dfd951e0",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "debug 1890",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 920,
        "wires": []
    },
    {
        "id": "edc961345cb19d0b",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 920,
        "wires": [
            [
                "7e608b15dfd951e0"
            ]
        ]
    },
    {
        "id": "1d831275f2f36a9b",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 920,
        "wires": [
            [
                "edc961345cb19d0b"
            ]
        ]
    },
    {
        "id": "f0a23e9db9ee9070",
        "type": "file in",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 920,
        "wires": [
            [
                "1d831275f2f36a9b"
            ]
        ]
    },
    {
        "id": "5ba376438ba190ed",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 920,
        "wires": [
            [
                "f0a23e9db9ee9070"
            ]
        ]
    },
    {
        "id": "6b90ce852ea6795d",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 400,
        "y": 920,
        "wires": [
            [
                "5ba376438ba190ed"
            ]
        ]
    },
    {
        "id": "c28249b109631c1a",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "debug 1891",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0c0392c393977b96",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 1020,
        "wires": [
            [
                "c28249b109631c1a"
            ]
        ]
    },
    {
        "id": "2bf05a4549b9f227",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "filename",
        "func": "\nvar today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1020,
        "wires": [
            [
                "0c0392c393977b96"
            ]
        ]
    },
    {
        "id": "585d5e8378581021",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "faf0d036a6315781",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "2bf05a4549b9f227"
            ]
        ]
    },
    {
        "id": "16e23ef70dcafadc",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 660,
        "wires": []
    },
    {
        "id": "bf8a64df8b693b6f",
        "type": "template",
        "z": "437bcfccf5b218c3",
        "g": "1be85b2c1fbf2c62",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC1,5m,INV7B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC2,5m,INV7B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC3,5m,INV7B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC4,5m,INV7B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC5,5m,INV7B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC6,5m,INV7B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC7,5m,INV7B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC8,5m,INV7B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC9,5m,INV7B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC10,5m,INV7B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC11,5m,INV7B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC12,5m,INV7B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC13,5m,INV7B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC14,5m,INV7B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC15,5m,INV7B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC16,5m,INV7B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC17,5m,INV7B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC18,5m,INV7B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC19,5m,INV7B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC20,5m,INV7B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC21,5m,INV7B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC22,5m,INV7B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC23,5m,INV7B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU09,IDC24,5m,INV7B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC1,5m,INV7B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC2,5m,INV7B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC3,5m,INV7B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC4,5m,INV7B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC5,5m,INV7B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC6,5m,INV7B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC7,5m,INV7B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC8,5m,INV7B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC9,5m,INV7B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC10,5m,INV7B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC11,5m,INV7B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC12,5m,INV7B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC13,5m,INV7B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC14,5m,INV7B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC15,5m,INV7B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC16,5m,INV7B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC17,5m,INV7B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC18,5m,INV7B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC19,5m,INV7B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC20,5m,INV7B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC21,5m,INV7B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC22,5m,INV7B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC23,5m,INV7B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU10,IDC24,5m,INV7B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC1,5m,INV7B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC2,5m,INV7B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC3,5m,INV7B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC4,5m,INV7B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC5,5m,INV7B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC6,5m,INV7B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC7,5m,INV7B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC8,5m,INV7B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC9,5m,INV7B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC10,5m,INV7B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC11,5m,INV7B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC12,5m,INV7B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC13,5m,INV7B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC14,5m,INV7B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC15,5m,INV7B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC16,5m,INV7B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC17,5m,INV7B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC18,5m,INV7B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC19,5m,INV7B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC20,5m,INV7B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC21,5m,INV7B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC22,5m,INV7B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC23,5m,INV7B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU11,IDC24,5m,INV7B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC1,5m,INV7B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC2,5m,INV7B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC3,5m,INV7B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC4,5m,INV7B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC5,5m,INV7B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC6,5m,INV7B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC7,5m,INV7B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC8,5m,INV7B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC9,5m,INV7B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC10,5m,INV7B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC11,5m,INV7B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC12,5m,INV7B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC13,5m,INV7B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC14,5m,INV7B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC15,5m,INV7B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC16,5m,INV7B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC17,5m,INV7B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC18,5m,INV7B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC19,5m,INV7B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC20,5m,INV7B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC21,5m,INV7B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC22,5m,INV7B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC23,5m,INV7B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU12,IDC24,5m,INV7B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC1,5m,INV7B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC2,5m,INV7B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC3,5m,INV7B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC4,5m,INV7B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC5,5m,INV7B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC6,5m,INV7B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC7,5m,INV7B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC8,5m,INV7B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC9,5m,INV7B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC10,5m,INV7B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC11,5m,INV7B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC12,5m,INV7B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC13,5m,INV7B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC14,5m,INV7B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC15,5m,INV7B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC16,5m,INV7B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC17,5m,INV7B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC18,5m,INV7B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC19,5m,INV7B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC20,5m,INV7B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC21,5m,INV7B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC22,5m,INV7B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC23,5m,INV7B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU13,IDC24,5m,INV7B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC1,5m,INV7B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC2,5m,INV7B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC3,5m,INV7B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC4,5m,INV7B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC5,5m,INV7B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC6,5m,INV7B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC7,5m,INV7B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC8,5m,INV7B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC9,5m,INV7B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC10,5m,INV7B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC11,5m,INV7B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC12,5m,INV7B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC13,5m,INV7B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC14,5m,INV7B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC15,5m,INV7B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC16,5m,INV7B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC17,5m,INV7B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC18,5m,INV7B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC19,5m,INV7B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC20,5m,INV7B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC21,5m,INV7B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC22,5m,INV7B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC23,5m,INV7B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU14,IDC24,5m,INV7B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC1,5m,INV7B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC2,5m,INV7B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC3,5m,INV7B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC4,5m,INV7B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC5,5m,INV7B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC6,5m,INV7B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC7,5m,INV7B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC8,5m,INV7B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC9,5m,INV7B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC10,5m,INV7B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC11,5m,INV7B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC12,5m,INV7B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC13,5m,INV7B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC14,5m,INV7B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC15,5m,INV7B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC16,5m,INV7B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC17,5m,INV7B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC18,5m,INV7B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC19,5m,INV7B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC20,5m,INV7B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC21,5m,INV7B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC22,5m,INV7B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC23,5m,INV7B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU15,IDC24,5m,INV7B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC1,5m,INV7B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC2,5m,INV7B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC3,5m,INV7B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC4,5m,INV7B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC5,5m,INV7B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC6,5m,INV7B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC7,5m,INV7B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC8,5m,INV7B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC9,5m,INV7B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC10,5m,INV7B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC11,5m,INV7B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC12,5m,INV7B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC13,5m,INV7B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC14,5m,INV7B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC15,5m,INV7B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC16,5m,INV7B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC17,5m,INV7B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC18,5m,INV7B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC19,5m,INV7B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC20,5m,INV7B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC21,5m,INV7B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC22,5m,INV7B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC23,5m,INV7B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC24,5m,INV7B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC25,5m,INV7B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC26,5m,INV7B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC27,5m,INV7B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC28,5m,INV7B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC29,5m,INV7B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC30,5m,INV7B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC31,5m,INV7B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV2_SMU16,IDC32,5m,INV7B_SMU8_IDC32\n",
        "output": "str",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "b091bd04e855c971"
            ]
        ]
    },
    {
        "id": "31e076880af1d497",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1320,
        "wires": [
            [
                "4663c9594eb70a7e"
            ]
        ]
    },
    {
        "id": "f9b832378d0f55be",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 630,
        "y": 1240,
        "wires": [
            [
                "31e076880af1d497",
                "2cc470442ee652c3"
            ]
        ]
    },
    {
        "id": "4663c9594eb70a7e",
        "type": "influxdb in",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 730,
        "y": 1320,
        "wires": [
            [
                "f2a3f7cd6f19fdaa"
            ]
        ]
    },
    {
        "id": "2cc470442ee652c3",
        "type": "change",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1240,
        "wires": [
            [
                "f2a3f7cd6f19fdaa"
            ]
        ]
    },
    {
        "id": "91c0191ed7fa0c38",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 220,
        "y": 1240,
        "wires": [
            [
                "335bf3de6fa516e2"
            ]
        ]
    },
    {
        "id": "9697bfdb0be7ccce",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1280,
        "wires": [
            [
                "e5c7e713954dcbd3"
            ]
        ]
    },
    {
        "id": "e5c7e713954dcbd3",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1280,
        "wires": [
            [
                "238d048f18ee5f79",
                "335759c5b4f01cb3"
            ]
        ]
    },
    {
        "id": "f2a3f7cd6f19fdaa",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1280,
        "wires": [
            [
                "9697bfdb0be7ccce"
            ]
        ]
    },
    {
        "id": "c06b6470711a8da5",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1360,
        "wires": []
    },
    {
        "id": "238d048f18ee5f79",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1390,
        "y": 1280,
        "wires": [
            [
                "88b88c6792eabaed"
            ]
        ]
    },
    {
        "id": "88b88c6792eabaed",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1360,
        "wires": [
            [
                "e5f239a2236962ac"
            ]
        ]
    },
    {
        "id": "e5f239a2236962ac",
        "type": "file",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 1360,
        "wires": [
            [
                "c06b6470711a8da5"
            ]
        ]
    },
    {
        "id": "335bf3de6fa516e2",
        "type": "delay",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "912c65c1fd154ee2"
            ]
        ]
    },
    {
        "id": "c01d49c418f64c8e",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "debug 1892",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1500,
        "wires": []
    },
    {
        "id": "7760a97f6cddef59",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "c01d49c418f64c8e"
            ]
        ]
    },
    {
        "id": "c421e2c064500ed5",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1500,
        "wires": [
            [
                "7760a97f6cddef59"
            ]
        ]
    },
    {
        "id": "2a239fefc43edd11",
        "type": "file in",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 1500,
        "wires": [
            [
                "c421e2c064500ed5"
            ]
        ]
    },
    {
        "id": "55404bbbb0bf1b70",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1500,
        "wires": [
            [
                "2a239fefc43edd11"
            ]
        ]
    },
    {
        "id": "e3118f71aea9d5bd",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "55404bbbb0bf1b70"
            ]
        ]
    },
    {
        "id": "36e9bc36b7b97589",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "debug 1893",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1600,
        "wires": []
    },
    {
        "id": "1b2d74fc3c85822a",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 1600,
        "wires": [
            [
                "36e9bc36b7b97589"
            ]
        ]
    },
    {
        "id": "f823335976653f70",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "filename",
        "func": "\nvar today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1600,
        "wires": [
            [
                "1b2d74fc3c85822a"
            ]
        ]
    },
    {
        "id": "56fe9ef4f4400602",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "3388ab54980ecd67",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "f823335976653f70"
            ]
        ]
    },
    {
        "id": "335759c5b4f01cb3",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1240,
        "wires": []
    },
    {
        "id": "912c65c1fd154ee2",
        "type": "template",
        "z": "437bcfccf5b218c3",
        "g": "50e8318acee2eea9",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC1,5m,INV7C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC2,5m,INV7C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC3,5m,INV7C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC4,5m,INV7C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC5,5m,INV7C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC6,5m,INV7C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC7,5m,INV7C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC8,5m,INV7C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC9,5m,INV7C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC10,5m,INV7C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC11,5m,INV7C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC12,5m,INV7C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC13,5m,INV7C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC14,5m,INV7C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC15,5m,INV7C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC16,5m,INV7C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC17,5m,INV7C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC18,5m,INV7C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC19,5m,INV7C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC20,5m,INV7C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC21,5m,INV7C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC22,5m,INV7C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC23,5m,INV7C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU17,IDC24,5m,INV7C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC1,5m,INV7C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC2,5m,INV7C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC3,5m,INV7C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC4,5m,INV7C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC5,5m,INV7C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC6,5m,INV7C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC7,5m,INV7C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC8,5m,INV7C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC9,5m,INV7C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC10,5m,INV7C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC11,5m,INV7C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC12,5m,INV7C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC13,5m,INV7C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC14,5m,INV7C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC15,5m,INV7C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC16,5m,INV7C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC17,5m,INV7C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC18,5m,INV7C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC19,5m,INV7C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC20,5m,INV7C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC21,5m,INV7C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC22,5m,INV7C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC23,5m,INV7C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU18,IDC24,5m,INV7C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC1,5m,INV7C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC2,5m,INV7C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC3,5m,INV7C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC4,5m,INV7C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC5,5m,INV7C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC6,5m,INV7C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC7,5m,INV7C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC8,5m,INV7C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC9,5m,INV7C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC10,5m,INV7C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC11,5m,INV7C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC12,5m,INV7C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC13,5m,INV7C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC14,5m,INV7C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC15,5m,INV7C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC16,5m,INV7C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC17,5m,INV7C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC18,5m,INV7C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC19,5m,INV7C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC20,5m,INV7C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC21,5m,INV7C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC22,5m,INV7C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC23,5m,INV7C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU19,IDC24,5m,INV7C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC1,5m,INV7C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC2,5m,INV7C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC3,5m,INV7C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC4,5m,INV7C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC5,5m,INV7C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC6,5m,INV7C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC7,5m,INV7C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC8,5m,INV7C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC9,5m,INV7C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC10,5m,INV7C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC11,5m,INV7C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC12,5m,INV7C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC13,5m,INV7C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC14,5m,INV7C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC15,5m,INV7C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC16,5m,INV7C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC17,5m,INV7C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC18,5m,INV7C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC19,5m,INV7C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC20,5m,INV7C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC21,5m,INV7C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC22,5m,INV7C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC23,5m,INV7C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU20,IDC24,5m,INV7C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC1,5m,INV7C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC2,5m,INV7C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC3,5m,INV7C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC4,5m,INV7C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC5,5m,INV7C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC6,5m,INV7C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC7,5m,INV7C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC8,5m,INV7C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC9,5m,INV7C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC10,5m,INV7C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC11,5m,INV7C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC12,5m,INV7C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC13,5m,INV7C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC14,5m,INV7C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC15,5m,INV7C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC16,5m,INV7C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC17,5m,INV7C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC18,5m,INV7C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC19,5m,INV7C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC20,5m,INV7C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC21,5m,INV7C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC22,5m,INV7C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC23,5m,INV7C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU21,IDC24,5m,INV7C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC1,5m,INV7C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC2,5m,INV7C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC3,5m,INV7C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC4,5m,INV7C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC5,5m,INV7C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC6,5m,INV7C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC7,5m,INV7C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC8,5m,INV7C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC9,5m,INV7C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC10,5m,INV7C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC11,5m,INV7C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC12,5m,INV7C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC13,5m,INV7C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC14,5m,INV7C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC15,5m,INV7C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC16,5m,INV7C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC17,5m,INV7C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC18,5m,INV7C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC19,5m,INV7C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC20,5m,INV7C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC21,5m,INV7C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC22,5m,INV7C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC23,5m,INV7C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU22,IDC24,5m,INV7C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC1,5m,INV7C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC2,5m,INV7C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC3,5m,INV7C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC4,5m,INV7C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC5,5m,INV7C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC6,5m,INV7C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC7,5m,INV7C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC8,5m,INV7C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC9,5m,INV7C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC10,5m,INV7C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC11,5m,INV7C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC12,5m,INV7C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC13,5m,INV7C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC14,5m,INV7C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC15,5m,INV7C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC16,5m,INV7C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC17,5m,INV7C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC18,5m,INV7C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC19,5m,INV7C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC20,5m,INV7C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC21,5m,INV7C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC22,5m,INV7C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC23,5m,INV7C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU23,IDC24,5m,INV7C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC1,5m,INV7C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC2,5m,INV7C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC3,5m,INV7C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC4,5m,INV7C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC5,5m,INV7C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC6,5m,INV7C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC7,5m,INV7C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC8,5m,INV7C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC9,5m,INV7C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC10,5m,INV7C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC11,5m,INV7C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC12,5m,INV7C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC13,5m,INV7C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC14,5m,INV7C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC15,5m,INV7C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC16,5m,INV7C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC17,5m,INV7C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC18,5m,INV7C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC19,5m,INV7C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC20,5m,INV7C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC21,5m,INV7C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC22,5m,INV7C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC23,5m,INV7C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC24,5m,INV7C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC25,5m,INV7C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC26,5m,INV7C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC27,5m,INV7C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC28,5m,INV7C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC29,5m,INV7C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC30,5m,INV7C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC31,5m,INV7C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV3_SMU24,IDC32,5m,INV7C_SMU8_IDC32\n",
        "output": "str",
        "x": 490,
        "y": 1240,
        "wires": [
            [
                "f9b832378d0f55be"
            ]
        ]
    },
    {
        "id": "d4bc51e293abf997",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1920,
        "wires": [
            [
                "4d66b88a5fe1bd41"
            ]
        ]
    },
    {
        "id": "3ce19c6aa5d28549",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 630,
        "y": 1840,
        "wires": [
            [
                "d4bc51e293abf997",
                "66c7110a016ad407"
            ]
        ]
    },
    {
        "id": "4d66b88a5fe1bd41",
        "type": "influxdb in",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 730,
        "y": 1920,
        "wires": [
            [
                "9d8906d5a331ab26"
            ]
        ]
    },
    {
        "id": "66c7110a016ad407",
        "type": "change",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "9d8906d5a331ab26"
            ]
        ]
    },
    {
        "id": "5b5f496900407871",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 220,
        "y": 1840,
        "wires": [
            [
                "7f76e32e94ce5d24"
            ]
        ]
    },
    {
        "id": "ad7acd59cc92eb50",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1880,
        "wires": [
            [
                "4c79ec06e8971d18"
            ]
        ]
    },
    {
        "id": "4c79ec06e8971d18",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1880,
        "wires": [
            [
                "32ac594397100013",
                "0e0886fb1d22ec1a"
            ]
        ]
    },
    {
        "id": "9d8906d5a331ab26",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1880,
        "wires": [
            [
                "ad7acd59cc92eb50"
            ]
        ]
    },
    {
        "id": "6b98e9cfc01fd082",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1960,
        "wires": []
    },
    {
        "id": "32ac594397100013",
        "type": "csv",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1390,
        "y": 1880,
        "wires": [
            [
                "e328bd4392cb66e1"
            ]
        ]
    },
    {
        "id": "e328bd4392cb66e1",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1960,
        "wires": [
            [
                "42dcb0c9c976683a"
            ]
        ]
    },
    {
        "id": "42dcb0c9c976683a",
        "type": "file",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 1960,
        "wires": [
            [
                "6b98e9cfc01fd082"
            ]
        ]
    },
    {
        "id": "7f76e32e94ce5d24",
        "type": "delay",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 1820,
        "wires": [
            [
                "aa7fa141b5e8037c"
            ]
        ]
    },
    {
        "id": "0afdbc373f7337aa",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "debug 1894",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2100,
        "wires": []
    },
    {
        "id": "24b08287f8ac1706",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 2100,
        "wires": [
            [
                "0afdbc373f7337aa"
            ]
        ]
    },
    {
        "id": "6bd41702d962317b",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2100,
        "wires": [
            [
                "24b08287f8ac1706"
            ]
        ]
    },
    {
        "id": "8d22c5f2952393c3",
        "type": "file in",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 2100,
        "wires": [
            [
                "6bd41702d962317b"
            ]
        ]
    },
    {
        "id": "c234dc3b8d49db03",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV7D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2100,
        "wires": [
            [
                "8d22c5f2952393c3"
            ]
        ]
    },
    {
        "id": "16db009f4a9b19bf",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 400,
        "y": 2100,
        "wires": [
            [
                "c234dc3b8d49db03"
            ]
        ]
    },
    {
        "id": "61b4f83581c8c3d3",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "debug 1895",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2200,
        "wires": []
    },
    {
        "id": "0df6bc421121fb90",
        "type": "ftp in",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 890,
        "y": 2200,
        "wires": [
            [
                "61b4f83581c8c3d3"
            ]
        ]
    },
    {
        "id": "78ba27c7dca61d7f",
        "type": "function",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV7D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2200,
        "wires": [
            [
                "0df6bc421121fb90"
            ]
        ]
    },
    {
        "id": "e6277104166341f1",
        "type": "cronplus",
        "z": "437bcfccf5b218c3",
        "g": "b0e5fdd1bf3c5317",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 530,
        "y": 2200,
        "wires": [
            [
                "78ba27c7dca61d7f"
            ]
        ]
    },
    {
        "id": "0e0886fb1d22ec1a",
        "type": "debug",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1840,
        "wires": []
    },
    {
        "id": "aa7fa141b5e8037c",
        "type": "template",
        "z": "437bcfccf5b218c3",
        "g": "cf7d40e0411e1af3",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC1,5m,INV7D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC2,5m,INV7D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC3,5m,INV7D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC4,5m,INV7D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC5,5m,INV7D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC6,5m,INV7D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC7,5m,INV7D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC8,5m,INV7D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC9,5m,INV7D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC10,5m,INV7D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC11,5m,INV7D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC12,5m,INV7D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC13,5m,INV7D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC14,5m,INV7D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC15,5m,INV7D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC16,5m,INV7D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC17,5m,INV7D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC18,5m,INV7D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC19,5m,INV7D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC20,5m,INV7D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC21,5m,INV7D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC22,5m,INV7D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC23,5m,INV7D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU25,IDC24,5m,INV7D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC1,5m,INV7D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC2,5m,INV7D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC3,5m,INV7D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC4,5m,INV7D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC5,5m,INV7D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC6,5m,INV7D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC7,5m,INV7D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC8,5m,INV7D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC9,5m,INV7D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC10,5m,INV7D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC11,5m,INV7D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC12,5m,INV7D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC13,5m,INV7D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC14,5m,INV7D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC15,5m,INV7D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC16,5m,INV7D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC17,5m,INV7D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC18,5m,INV7D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC19,5m,INV7D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC20,5m,INV7D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC21,5m,INV7D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC22,5m,INV7D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC23,5m,INV7D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU26,IDC24,5m,INV7D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC1,5m,INV7D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC2,5m,INV7D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC3,5m,INV7D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC4,5m,INV7D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC5,5m,INV7D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC6,5m,INV7D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC7,5m,INV7D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC8,5m,INV7D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC9,5m,INV7D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC10,5m,INV7D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC11,5m,INV7D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC12,5m,INV7D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC13,5m,INV7D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC14,5m,INV7D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC15,5m,INV7D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC16,5m,INV7D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC17,5m,INV7D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC18,5m,INV7D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC19,5m,INV7D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC20,5m,INV7D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC21,5m,INV7D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC22,5m,INV7D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC23,5m,INV7D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU27,IDC24,5m,INV7D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC1,5m,INV7D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC2,5m,INV7D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC3,5m,INV7D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC4,5m,INV7D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC5,5m,INV7D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC6,5m,INV7D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC7,5m,INV7D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC8,5m,INV7D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC9,5m,INV7D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC10,5m,INV7D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC11,5m,INV7D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC12,5m,INV7D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC13,5m,INV7D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC14,5m,INV7D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC15,5m,INV7D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC16,5m,INV7D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC17,5m,INV7D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC18,5m,INV7D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC19,5m,INV7D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC20,5m,INV7D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC21,5m,INV7D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC22,5m,INV7D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC23,5m,INV7D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU28,IDC24,5m,INV7D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC1,5m,INV7D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC2,5m,INV7D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC3,5m,INV7D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC4,5m,INV7D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC5,5m,INV7D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC6,5m,INV7D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC7,5m,INV7D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC8,5m,INV7D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC9,5m,INV7D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC10,5m,INV7D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC11,5m,INV7D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC12,5m,INV7D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC13,5m,INV7D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC14,5m,INV7D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC15,5m,INV7D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC16,5m,INV7D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC17,5m,INV7D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC18,5m,INV7D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC19,5m,INV7D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC20,5m,INV7D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC21,5m,INV7D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC22,5m,INV7D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC23,5m,INV7D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU29,IDC24,5m,INV7D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC1,5m,INV7D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC2,5m,INV7D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC3,5m,INV7D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC4,5m,INV7D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC5,5m,INV7D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC6,5m,INV7D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC7,5m,INV7D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC8,5m,INV7D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC9,5m,INV7D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC10,5m,INV7D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC11,5m,INV7D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC12,5m,INV7D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC13,5m,INV7D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC14,5m,INV7D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC15,5m,INV7D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC16,5m,INV7D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC17,5m,INV7D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC18,5m,INV7D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC19,5m,INV7D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC20,5m,INV7D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC21,5m,INV7D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC22,5m,INV7D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC23,5m,INV7D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU30,IDC24,5m,INV7D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC1,5m,INV7D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC2,5m,INV7D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC3,5m,INV7D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC4,5m,INV7D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC5,5m,INV7D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC6,5m,INV7D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC7,5m,INV7D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC8,5m,INV7D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC9,5m,INV7D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC10,5m,INV7D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC11,5m,INV7D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC12,5m,INV7D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC13,5m,INV7D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC14,5m,INV7D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC15,5m,INV7D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC16,5m,INV7D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC17,5m,INV7D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC18,5m,INV7D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC19,5m,INV7D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC20,5m,INV7D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC21,5m,INV7D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC22,5m,INV7D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC23,5m,INV7D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU31,IDC24,5m,INV7D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC1,5m,INV7D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC2,5m,INV7D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC3,5m,INV7D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC4,5m,INV7D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC5,5m,INV7D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC6,5m,INV7D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC7,5m,INV7D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC8,5m,INV7D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC9,5m,INV7D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC10,5m,INV7D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC11,5m,INV7D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC12,5m,INV7D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC13,5m,INV7D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC14,5m,INV7D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC15,5m,INV7D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC16,5m,INV7D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC17,5m,INV7D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC18,5m,INV7D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC19,5m,INV7D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC20,5m,INV7D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC21,5m,INV7D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC22,5m,INV7D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC23,5m,INV7D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC24,5m,INV7D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC25,5m,INV7D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC26,5m,INV7D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC27,5m,INV7D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC28,5m,INV7D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC29,5m,INV7D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC30,5m,INV7D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC31,5m,INV7D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 7,B07_INV4_SMU32,IDC32,5m,INV7D_SMU8_IDC32\n",
        "output": "str",
        "x": 490,
        "y": 1840,
        "wires": [
            [
                "3ce19c6aa5d28549"
            ]
        ]
    },
    {
        "id": "7f60698bde36711f",
        "type": "catch",
        "z": "437bcfccf5b218c3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 660,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "baafcd63ed003138",
        "type": "function",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "1ffa627aef96695c"
            ]
        ]
    },
    {
        "id": "1d09c40bf568dee6",
        "type": "csv",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "baafcd63ed003138",
                "73b692021beb089e"
            ]
        ]
    },
    {
        "id": "1ffa627aef96695c",
        "type": "influxdb in",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 160,
        "wires": [
            [
                "dbee1a351db62f74"
            ]
        ]
    },
    {
        "id": "73b692021beb089e",
        "type": "change",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "dbee1a351db62f74"
            ]
        ]
    },
    {
        "id": "b70bc2f4861045cc",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "1a58f46423ca6c81"
            ]
        ]
    },
    {
        "id": "9d54acb4ac8919cb",
        "type": "function",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "da1aa561a334f92a"
            ]
        ]
    },
    {
        "id": "da1aa561a334f92a",
        "type": "function",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 120,
        "wires": [
            [
                "ab4d47516b020161",
                "2da54513be6c3386"
            ]
        ]
    },
    {
        "id": "dbee1a351db62f74",
        "type": "function",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 120,
        "wires": [
            [
                "9d54acb4ac8919cb"
            ]
        ]
    },
    {
        "id": "366b246d6af591d2",
        "type": "debug",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 200,
        "wires": []
    },
    {
        "id": "ab4d47516b020161",
        "type": "csv",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 120,
        "wires": [
            [
                "9c0f5a3d34eadcc7"
            ]
        ]
    },
    {
        "id": "9c0f5a3d34eadcc7",
        "type": "function",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "bdcff9d3a1f1a09d"
            ]
        ]
    },
    {
        "id": "bdcff9d3a1f1a09d",
        "type": "file",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 200,
        "wires": [
            [
                "366b246d6af591d2"
            ]
        ]
    },
    {
        "id": "1a58f46423ca6c81",
        "type": "delay",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 60,
        "wires": [
            [
                "7464f0c333a460f7"
            ]
        ]
    },
    {
        "id": "73e91b83121db7ba",
        "type": "debug",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "debug 1896",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "6e5c04bf35630d7a",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 340,
        "wires": [
            [
                "73e91b83121db7ba"
            ]
        ]
    },
    {
        "id": "2252b74cf744f1fe",
        "type": "function",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 340,
        "wires": [
            [
                "6e5c04bf35630d7a"
            ]
        ]
    },
    {
        "id": "b9fd1d6666223c4f",
        "type": "file in",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "2252b74cf744f1fe"
            ]
        ]
    },
    {
        "id": "a201ecd91e28e36a",
        "type": "function",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "b9fd1d6666223c4f"
            ]
        ]
    },
    {
        "id": "088f42a155323c20",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "a201ecd91e28e36a"
            ]
        ]
    },
    {
        "id": "4d4efc1bf9422b78",
        "type": "debug",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "debug 1897",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 440,
        "wires": []
    },
    {
        "id": "99992ee66f1fc631",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 440,
        "wires": [
            [
                "4d4efc1bf9422b78"
            ]
        ]
    },
    {
        "id": "e101a3120c80d28b",
        "type": "function",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "99992ee66f1fc631"
            ]
        ]
    },
    {
        "id": "cecf316f59e02e88",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "33a5802de6a8bbb5",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 440,
        "wires": [
            [
                "e101a3120c80d28b"
            ]
        ]
    },
    {
        "id": "2da54513be6c3386",
        "type": "debug",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 80,
        "wires": []
    },
    {
        "id": "7464f0c333a460f7",
        "type": "template",
        "z": "731933204433520c",
        "g": "1e602217e210d308",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC1,5m,INV8A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC2,5m,INV8A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC3,5m,INV8A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC4,5m,INV8A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC5,5m,INV8A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC6,5m,INV8A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC7,5m,INV8A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC8,5m,INV8A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC9,5m,INV8A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC10,5m,INV8A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC11,5m,INV8A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC12,5m,INV8A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC13,5m,INV8A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC14,5m,INV8A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC15,5m,INV8A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC16,5m,INV8A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC17,5m,INV8A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC18,5m,INV8A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC19,5m,INV8A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC20,5m,INV8A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC21,5m,INV8A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC22,5m,INV8A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC23,5m,INV8A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU01,IDC24,5m,INV8A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC1,5m,INV8A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC2,5m,INV8A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC3,5m,INV8A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC4,5m,INV8A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC5,5m,INV8A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC6,5m,INV8A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC7,5m,INV8A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC8,5m,INV8A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC9,5m,INV8A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC10,5m,INV8A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC11,5m,INV8A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC12,5m,INV8A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC13,5m,INV8A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC14,5m,INV8A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC15,5m,INV8A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC16,5m,INV8A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC17,5m,INV8A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC18,5m,INV8A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC19,5m,INV8A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC20,5m,INV8A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC21,5m,INV8A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC22,5m,INV8A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC23,5m,INV8A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU02,IDC24,5m,INV8A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC1,5m,INV8A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC2,5m,INV8A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC3,5m,INV8A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC4,5m,INV8A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC5,5m,INV8A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC6,5m,INV8A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC7,5m,INV8A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC8,5m,INV8A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC9,5m,INV8A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC10,5m,INV8A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC11,5m,INV8A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC12,5m,INV8A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC13,5m,INV8A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC14,5m,INV8A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC15,5m,INV8A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC16,5m,INV8A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC17,5m,INV8A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC18,5m,INV8A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC19,5m,INV8A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC20,5m,INV8A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC21,5m,INV8A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC22,5m,INV8A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC23,5m,INV8A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU03,IDC24,5m,INV8A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC1,5m,INV8A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC2,5m,INV8A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC3,5m,INV8A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC4,5m,INV8A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC5,5m,INV8A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC6,5m,INV8A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC7,5m,INV8A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC8,5m,INV8A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC9,5m,INV8A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC10,5m,INV8A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC11,5m,INV8A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC12,5m,INV8A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC13,5m,INV8A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC14,5m,INV8A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC15,5m,INV8A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC16,5m,INV8A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC17,5m,INV8A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC18,5m,INV8A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC19,5m,INV8A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC20,5m,INV8A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC21,5m,INV8A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC22,5m,INV8A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC23,5m,INV8A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU04,IDC24,5m,INV8A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC1,5m,INV8A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC2,5m,INV8A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC3,5m,INV8A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC4,5m,INV8A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC5,5m,INV8A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC6,5m,INV8A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC7,5m,INV8A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC8,5m,INV8A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC9,5m,INV8A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC10,5m,INV8A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC11,5m,INV8A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC12,5m,INV8A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC13,5m,INV8A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC14,5m,INV8A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC15,5m,INV8A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC16,5m,INV8A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC17,5m,INV8A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC18,5m,INV8A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC19,5m,INV8A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC20,5m,INV8A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC21,5m,INV8A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC22,5m,INV8A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC23,5m,INV8A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU05,IDC24,5m,INV8A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC1,5m,INV8A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC2,5m,INV8A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC3,5m,INV8A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC4,5m,INV8A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC5,5m,INV8A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC6,5m,INV8A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC7,5m,INV8A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC8,5m,INV8A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC9,5m,INV8A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC10,5m,INV8A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC11,5m,INV8A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC12,5m,INV8A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC13,5m,INV8A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC14,5m,INV8A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC15,5m,INV8A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC16,5m,INV8A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC17,5m,INV8A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC18,5m,INV8A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC19,5m,INV8A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC20,5m,INV8A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC21,5m,INV8A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC22,5m,INV8A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC23,5m,INV8A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU06,IDC24,5m,INV8A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC1,5m,INV8A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC2,5m,INV8A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC3,5m,INV8A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC4,5m,INV8A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC5,5m,INV8A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC6,5m,INV8A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC7,5m,INV8A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC8,5m,INV8A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC9,5m,INV8A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC10,5m,INV8A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC11,5m,INV8A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC12,5m,INV8A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC13,5m,INV8A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC14,5m,INV8A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC15,5m,INV8A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC16,5m,INV8A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC17,5m,INV8A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC18,5m,INV8A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC19,5m,INV8A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC20,5m,INV8A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC21,5m,INV8A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC22,5m,INV8A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC23,5m,INV8A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU07,IDC24,5m,INV8A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC1,5m,INV8A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC2,5m,INV8A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC3,5m,INV8A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC4,5m,INV8A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC5,5m,INV8A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC6,5m,INV8A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC7,5m,INV8A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC8,5m,INV8A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC9,5m,INV8A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC10,5m,INV8A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC11,5m,INV8A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC12,5m,INV8A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC13,5m,INV8A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC14,5m,INV8A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC15,5m,INV8A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC16,5m,INV8A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC17,5m,INV8A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC18,5m,INV8A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC19,5m,INV8A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC20,5m,INV8A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC21,5m,INV8A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC22,5m,INV8A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC23,5m,INV8A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC24,5m,INV8A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC25,5m,INV8A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC26,5m,INV8A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC27,5m,INV8A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC28,5m,INV8A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC29,5m,INV8A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC30,5m,INV8A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC31,5m,INV8A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV1_SMU08,IDC32,5m,INV8A_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 80,
        "wires": [
            [
                "1d09c40bf568dee6"
            ]
        ]
    },
    {
        "id": "e6b77398b3153da6",
        "type": "function",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 700,
        "wires": [
            [
                "8842c471376b2573"
            ]
        ]
    },
    {
        "id": "41a07c1d8163a673",
        "type": "csv",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "e6b77398b3153da6",
                "be9666642993a963"
            ]
        ]
    },
    {
        "id": "8842c471376b2573",
        "type": "influxdb in",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 700,
        "wires": [
            [
                "356a911cea61bf6b"
            ]
        ]
    },
    {
        "id": "be9666642993a963",
        "type": "change",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 620,
        "wires": [
            [
                "356a911cea61bf6b"
            ]
        ]
    },
    {
        "id": "5091b57c1748fd2d",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 620,
        "wires": [
            [
                "2cdcee80a8d55dfc"
            ]
        ]
    },
    {
        "id": "d96b17ecdd0239a7",
        "type": "function",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 660,
        "wires": [
            [
                "f2f4d5ba0482a0e5"
            ]
        ]
    },
    {
        "id": "f2f4d5ba0482a0e5",
        "type": "function",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 660,
        "wires": [
            [
                "7588f8e6dea9a292",
                "a8f33029f5aab544"
            ]
        ]
    },
    {
        "id": "356a911cea61bf6b",
        "type": "function",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 660,
        "wires": [
            [
                "d96b17ecdd0239a7"
            ]
        ]
    },
    {
        "id": "ac97453e9bb2bc02",
        "type": "debug",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 740,
        "wires": []
    },
    {
        "id": "7588f8e6dea9a292",
        "type": "csv",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 660,
        "wires": [
            [
                "d97cfdc3760e72bb"
            ]
        ]
    },
    {
        "id": "d97cfdc3760e72bb",
        "type": "function",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "492d7e2e45fa0fe2"
            ]
        ]
    },
    {
        "id": "492d7e2e45fa0fe2",
        "type": "file",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 740,
        "wires": [
            [
                "ac97453e9bb2bc02"
            ]
        ]
    },
    {
        "id": "2cdcee80a8d55dfc",
        "type": "delay",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "5bceaacc77e515af"
            ]
        ]
    },
    {
        "id": "5c01e2113499f3e2",
        "type": "debug",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "debug 1898",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 880,
        "wires": []
    },
    {
        "id": "6bf32a4b6c6ececd",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 880,
        "wires": [
            [
                "5c01e2113499f3e2"
            ]
        ]
    },
    {
        "id": "311c5d11dfb4824f",
        "type": "function",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 880,
        "wires": [
            [
                "6bf32a4b6c6ececd"
            ]
        ]
    },
    {
        "id": "df520c594f4d3cf3",
        "type": "file in",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 880,
        "wires": [
            [
                "311c5d11dfb4824f"
            ]
        ]
    },
    {
        "id": "9da49f3a76caae29",
        "type": "function",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "df520c594f4d3cf3"
            ]
        ]
    },
    {
        "id": "afc910a94c831c52",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 880,
        "wires": [
            [
                "9da49f3a76caae29"
            ]
        ]
    },
    {
        "id": "590fb03b7ec7edbf",
        "type": "debug",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "debug 1899",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "3c64c38eb85e6722",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 980,
        "wires": [
            [
                "590fb03b7ec7edbf"
            ]
        ]
    },
    {
        "id": "86731d7d0ed1c164",
        "type": "function",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 980,
        "wires": [
            [
                "3c64c38eb85e6722"
            ]
        ]
    },
    {
        "id": "d2cbdb508a3298c8",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "12ed85b933f27d94",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 980,
        "wires": [
            [
                "86731d7d0ed1c164"
            ]
        ]
    },
    {
        "id": "a8f33029f5aab544",
        "type": "debug",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 620,
        "wires": []
    },
    {
        "id": "5bceaacc77e515af",
        "type": "template",
        "z": "731933204433520c",
        "g": "f4758734fe48b316",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC1,5m,INV8B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC2,5m,INV8B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC3,5m,INV8B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC4,5m,INV8B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC5,5m,INV8B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC6,5m,INV8B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC7,5m,INV8B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC8,5m,INV8B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC9,5m,INV8B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC10,5m,INV8B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC11,5m,INV8B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC12,5m,INV8B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC13,5m,INV8B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC14,5m,INV8B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC15,5m,INV8B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC16,5m,INV8B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC17,5m,INV8B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC18,5m,INV8B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC19,5m,INV8B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC20,5m,INV8B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC21,5m,INV8B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC22,5m,INV8B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC23,5m,INV8B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU09,IDC24,5m,INV8B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC1,5m,INV8B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC2,5m,INV8B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC3,5m,INV8B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC4,5m,INV8B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC5,5m,INV8B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC6,5m,INV8B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC7,5m,INV8B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC8,5m,INV8B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC9,5m,INV8B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC10,5m,INV8B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC11,5m,INV8B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC12,5m,INV8B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC13,5m,INV8B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC14,5m,INV8B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC15,5m,INV8B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC16,5m,INV8B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC17,5m,INV8B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC18,5m,INV8B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC19,5m,INV8B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC20,5m,INV8B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC21,5m,INV8B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC22,5m,INV8B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC23,5m,INV8B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU10,IDC24,5m,INV8B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC1,5m,INV8B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC2,5m,INV8B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC3,5m,INV8B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC4,5m,INV8B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC5,5m,INV8B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC6,5m,INV8B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC7,5m,INV8B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC8,5m,INV8B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC9,5m,INV8B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC10,5m,INV8B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC11,5m,INV8B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC12,5m,INV8B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC13,5m,INV8B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC14,5m,INV8B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC15,5m,INV8B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC16,5m,INV8B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC17,5m,INV8B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC18,5m,INV8B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC19,5m,INV8B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC20,5m,INV8B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC21,5m,INV8B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC22,5m,INV8B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC23,5m,INV8B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU11,IDC24,5m,INV8B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC1,5m,INV8B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC2,5m,INV8B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC3,5m,INV8B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC4,5m,INV8B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC5,5m,INV8B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC6,5m,INV8B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC7,5m,INV8B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC8,5m,INV8B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC9,5m,INV8B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC10,5m,INV8B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC11,5m,INV8B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC12,5m,INV8B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC13,5m,INV8B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC14,5m,INV8B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC15,5m,INV8B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC16,5m,INV8B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC17,5m,INV8B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC18,5m,INV8B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC19,5m,INV8B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC20,5m,INV8B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC21,5m,INV8B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC22,5m,INV8B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC23,5m,INV8B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU12,IDC24,5m,INV8B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC1,5m,INV8B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC2,5m,INV8B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC3,5m,INV8B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC4,5m,INV8B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC5,5m,INV8B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC6,5m,INV8B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC7,5m,INV8B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC8,5m,INV8B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC9,5m,INV8B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC10,5m,INV8B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC11,5m,INV8B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC12,5m,INV8B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC13,5m,INV8B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC14,5m,INV8B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC15,5m,INV8B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC16,5m,INV8B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC17,5m,INV8B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC18,5m,INV8B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC19,5m,INV8B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC20,5m,INV8B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC21,5m,INV8B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC22,5m,INV8B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC23,5m,INV8B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU13,IDC24,5m,INV8B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC1,5m,INV8B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC2,5m,INV8B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC3,5m,INV8B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC4,5m,INV8B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC5,5m,INV8B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC6,5m,INV8B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC7,5m,INV8B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC8,5m,INV8B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC9,5m,INV8B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC10,5m,INV8B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC11,5m,INV8B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC12,5m,INV8B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC13,5m,INV8B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC14,5m,INV8B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC15,5m,INV8B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC16,5m,INV8B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC17,5m,INV8B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC18,5m,INV8B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC19,5m,INV8B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC20,5m,INV8B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC21,5m,INV8B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC22,5m,INV8B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC23,5m,INV8B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU14,IDC24,5m,INV8B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC1,5m,INV8B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC2,5m,INV8B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC3,5m,INV8B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC4,5m,INV8B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC5,5m,INV8B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC6,5m,INV8B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC7,5m,INV8B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC8,5m,INV8B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC9,5m,INV8B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC10,5m,INV8B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC11,5m,INV8B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC12,5m,INV8B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC13,5m,INV8B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC14,5m,INV8B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC15,5m,INV8B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC16,5m,INV8B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC17,5m,INV8B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC18,5m,INV8B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC19,5m,INV8B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC20,5m,INV8B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC21,5m,INV8B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC22,5m,INV8B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC23,5m,INV8B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU15,IDC24,5m,INV8B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC1,5m,INV8B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC2,5m,INV8B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC3,5m,INV8B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC4,5m,INV8B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC5,5m,INV8B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC6,5m,INV8B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC7,5m,INV8B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC8,5m,INV8B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC9,5m,INV8B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC10,5m,INV8B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC11,5m,INV8B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC12,5m,INV8B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC13,5m,INV8B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC14,5m,INV8B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC15,5m,INV8B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC16,5m,INV8B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC17,5m,INV8B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC18,5m,INV8B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC19,5m,INV8B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC20,5m,INV8B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC21,5m,INV8B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC22,5m,INV8B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC23,5m,INV8B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC24,5m,INV8B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC25,5m,INV8B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC26,5m,INV8B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC27,5m,INV8B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC28,5m,INV8B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC29,5m,INV8B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC30,5m,INV8B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC31,5m,INV8B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV2_SMU16,IDC32,5m,INV8B_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "41a07c1d8163a673"
            ]
        ]
    },
    {
        "id": "467a9fbffa4d7d44",
        "type": "function",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1280,
        "wires": [
            [
                "cfb1d5728532a5b6"
            ]
        ]
    },
    {
        "id": "0427296e01340d89",
        "type": "csv",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1200,
        "wires": [
            [
                "467a9fbffa4d7d44",
                "facc96d0b14a751f"
            ]
        ]
    },
    {
        "id": "cfb1d5728532a5b6",
        "type": "influxdb in",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "18e386fa7480fc94"
            ]
        ]
    },
    {
        "id": "facc96d0b14a751f",
        "type": "change",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1200,
        "wires": [
            [
                "18e386fa7480fc94"
            ]
        ]
    },
    {
        "id": "04e0d789f80247ac",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1200,
        "wires": [
            [
                "006698d7d667efbe"
            ]
        ]
    },
    {
        "id": "e743aeeb0264b769",
        "type": "function",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "a4e2f61f699df82d"
            ]
        ]
    },
    {
        "id": "a4e2f61f699df82d",
        "type": "function",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1240,
        "wires": [
            [
                "d2e79c3269eaf59c",
                "345f9bd2d20521b8"
            ]
        ]
    },
    {
        "id": "18e386fa7480fc94",
        "type": "function",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1240,
        "wires": [
            [
                "e743aeeb0264b769"
            ]
        ]
    },
    {
        "id": "7e94a15607b52652",
        "type": "debug",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1320,
        "wires": []
    },
    {
        "id": "d2e79c3269eaf59c",
        "type": "csv",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1240,
        "wires": [
            [
                "b0d6f681080e9ef8"
            ]
        ]
    },
    {
        "id": "b0d6f681080e9ef8",
        "type": "function",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1320,
        "wires": [
            [
                "8ed670b881cff6e7"
            ]
        ]
    },
    {
        "id": "8ed670b881cff6e7",
        "type": "file",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1320,
        "wires": [
            [
                "7e94a15607b52652"
            ]
        ]
    },
    {
        "id": "006698d7d667efbe",
        "type": "delay",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "7e63b120ee750e7f"
            ]
        ]
    },
    {
        "id": "cefb5a9c0cb42046",
        "type": "debug",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "debug 1900",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f9f7a23552a02263",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 1460,
        "wires": [
            [
                "cefb5a9c0cb42046"
            ]
        ]
    },
    {
        "id": "7f8d6964eb3138ab",
        "type": "function",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8C_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1460,
        "wires": [
            [
                "f9f7a23552a02263"
            ]
        ]
    },
    {
        "id": "7d253b3bef241609",
        "type": "file in",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "7f8d6964eb3138ab"
            ]
        ]
    },
    {
        "id": "ae1c31f8d7d38735",
        "type": "function",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8C_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1460,
        "wires": [
            [
                "7d253b3bef241609"
            ]
        ]
    },
    {
        "id": "c96d5ad1d0e73107",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 1460,
        "wires": [
            [
                "ae1c31f8d7d38735"
            ]
        ]
    },
    {
        "id": "5b0637ba9d89c451",
        "type": "debug",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "debug 1901",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1560,
        "wires": []
    },
    {
        "id": "07fd1b839d5ac2dc",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 1560,
        "wires": [
            [
                "5b0637ba9d89c451"
            ]
        ]
    },
    {
        "id": "be362b8de394d4b7",
        "type": "function",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8C_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1560,
        "wires": [
            [
                "07fd1b839d5ac2dc"
            ]
        ]
    },
    {
        "id": "fae0dcdc9a0439f0",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "6430553224d0448f",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "be362b8de394d4b7"
            ]
        ]
    },
    {
        "id": "345f9bd2d20521b8",
        "type": "debug",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7e63b120ee750e7f",
        "type": "template",
        "z": "731933204433520c",
        "g": "4f10f09341e5f1ce",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC1,5m,INV8C_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC2,5m,INV8C_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC3,5m,INV8C_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC4,5m,INV8C_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC5,5m,INV8C_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC6,5m,INV8C_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC7,5m,INV8C_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC8,5m,INV8C_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC9,5m,INV8C_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC10,5m,INV8C_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC11,5m,INV8C_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC12,5m,INV8C_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC13,5m,INV8C_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC14,5m,INV8C_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC15,5m,INV8C_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC16,5m,INV8C_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC17,5m,INV8C_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC18,5m,INV8C_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC19,5m,INV8C_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC20,5m,INV8C_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC21,5m,INV8C_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC22,5m,INV8C_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC23,5m,INV8C_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU17,IDC24,5m,INV8C_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC1,5m,INV8C_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC2,5m,INV8C_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC3,5m,INV8C_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC4,5m,INV8C_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC5,5m,INV8C_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC6,5m,INV8C_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC7,5m,INV8C_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC8,5m,INV8C_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC9,5m,INV8C_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC10,5m,INV8C_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC11,5m,INV8C_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC12,5m,INV8C_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC13,5m,INV8C_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC14,5m,INV8C_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC15,5m,INV8C_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC16,5m,INV8C_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC17,5m,INV8C_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC18,5m,INV8C_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC19,5m,INV8C_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC20,5m,INV8C_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC21,5m,INV8C_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC22,5m,INV8C_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC23,5m,INV8C_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU18,IDC24,5m,INV8C_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC1,5m,INV8C_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC2,5m,INV8C_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC3,5m,INV8C_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC4,5m,INV8C_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC5,5m,INV8C_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC6,5m,INV8C_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC7,5m,INV8C_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC8,5m,INV8C_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC9,5m,INV8C_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC10,5m,INV8C_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC11,5m,INV8C_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC12,5m,INV8C_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC13,5m,INV8C_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC14,5m,INV8C_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC15,5m,INV8C_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC16,5m,INV8C_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC17,5m,INV8C_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC18,5m,INV8C_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC19,5m,INV8C_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC20,5m,INV8C_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC21,5m,INV8C_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC22,5m,INV8C_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC23,5m,INV8C_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU19,IDC24,5m,INV8C_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC1,5m,INV8C_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC2,5m,INV8C_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC3,5m,INV8C_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC4,5m,INV8C_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC5,5m,INV8C_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC6,5m,INV8C_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC7,5m,INV8C_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC8,5m,INV8C_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC9,5m,INV8C_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC10,5m,INV8C_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC11,5m,INV8C_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC12,5m,INV8C_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC13,5m,INV8C_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC14,5m,INV8C_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC15,5m,INV8C_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC16,5m,INV8C_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC17,5m,INV8C_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC18,5m,INV8C_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC19,5m,INV8C_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC20,5m,INV8C_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC21,5m,INV8C_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC22,5m,INV8C_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC23,5m,INV8C_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU20,IDC24,5m,INV8C_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC1,5m,INV8C_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC2,5m,INV8C_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC3,5m,INV8C_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC4,5m,INV8C_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC5,5m,INV8C_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC6,5m,INV8C_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC7,5m,INV8C_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC8,5m,INV8C_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC9,5m,INV8C_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC10,5m,INV8C_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC11,5m,INV8C_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC12,5m,INV8C_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC13,5m,INV8C_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC14,5m,INV8C_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC15,5m,INV8C_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC16,5m,INV8C_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC17,5m,INV8C_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC18,5m,INV8C_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC19,5m,INV8C_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC20,5m,INV8C_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC21,5m,INV8C_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC22,5m,INV8C_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC23,5m,INV8C_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU21,IDC24,5m,INV8C_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC1,5m,INV8C_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC2,5m,INV8C_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC3,5m,INV8C_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC4,5m,INV8C_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC5,5m,INV8C_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC6,5m,INV8C_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC7,5m,INV8C_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC8,5m,INV8C_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC9,5m,INV8C_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC10,5m,INV8C_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC11,5m,INV8C_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC12,5m,INV8C_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC13,5m,INV8C_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC14,5m,INV8C_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC15,5m,INV8C_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC16,5m,INV8C_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC17,5m,INV8C_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC18,5m,INV8C_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC19,5m,INV8C_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC20,5m,INV8C_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC21,5m,INV8C_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC22,5m,INV8C_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC23,5m,INV8C_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU22,IDC24,5m,INV8C_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC1,5m,INV8C_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC2,5m,INV8C_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC3,5m,INV8C_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC4,5m,INV8C_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC5,5m,INV8C_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC6,5m,INV8C_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC7,5m,INV8C_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC8,5m,INV8C_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC9,5m,INV8C_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC10,5m,INV8C_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC11,5m,INV8C_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC12,5m,INV8C_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC13,5m,INV8C_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC14,5m,INV8C_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC15,5m,INV8C_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC16,5m,INV8C_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC17,5m,INV8C_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC18,5m,INV8C_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC19,5m,INV8C_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC20,5m,INV8C_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC21,5m,INV8C_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC22,5m,INV8C_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC23,5m,INV8C_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU23,IDC24,5m,INV8C_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC1,5m,INV8C_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC2,5m,INV8C_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC3,5m,INV8C_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC4,5m,INV8C_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC5,5m,INV8C_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC6,5m,INV8C_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC7,5m,INV8C_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC8,5m,INV8C_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC9,5m,INV8C_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC10,5m,INV8C_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC11,5m,INV8C_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC12,5m,INV8C_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC13,5m,INV8C_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC14,5m,INV8C_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC15,5m,INV8C_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC16,5m,INV8C_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC17,5m,INV8C_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC18,5m,INV8C_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC19,5m,INV8C_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC20,5m,INV8C_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC21,5m,INV8C_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC22,5m,INV8C_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC23,5m,INV8C_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC24,5m,INV8C_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC25,5m,INV8C_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC26,5m,INV8C_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC27,5m,INV8C_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC28,5m,INV8C_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC29,5m,INV8C_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC30,5m,INV8C_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC31,5m,INV8C_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV3_SMU24,IDC32,5m,INV8C_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "0427296e01340d89"
            ]
        ]
    },
    {
        "id": "0477c421a8b4ed54",
        "type": "function",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1880,
        "wires": [
            [
                "d5e260b32abbde5e"
            ]
        ]
    },
    {
        "id": "cf67e9f006ae4344",
        "type": "csv",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 1800,
        "wires": [
            [
                "0477c421a8b4ed54",
                "42358f342c76928f"
            ]
        ]
    },
    {
        "id": "d5e260b32abbde5e",
        "type": "influxdb in",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 690,
        "y": 1880,
        "wires": [
            [
                "3d835ac44ad80e7a"
            ]
        ]
    },
    {
        "id": "42358f342c76928f",
        "type": "change",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1800,
        "wires": [
            [
                "3d835ac44ad80e7a"
            ]
        ]
    },
    {
        "id": "cd463acd27c716ec",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1800,
        "wires": [
            [
                "d95553d651dc17f0"
            ]
        ]
    },
    {
        "id": "9869eae51c0130cd",
        "type": "function",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1840,
        "wires": [
            [
                "2d7e07814c9debac"
            ]
        ]
    },
    {
        "id": "2d7e07814c9debac",
        "type": "function",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1840,
        "wires": [
            [
                "4fd57ded0b9ab073",
                "1ce6266c510a87b8"
            ]
        ]
    },
    {
        "id": "3d835ac44ad80e7a",
        "type": "function",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1840,
        "wires": [
            [
                "9869eae51c0130cd"
            ]
        ]
    },
    {
        "id": "5647eeab4ea47550",
        "type": "debug",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1920,
        "wires": []
    },
    {
        "id": "4fd57ded0b9ab073",
        "type": "csv",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1350,
        "y": 1840,
        "wires": [
            [
                "6208e149a1ad94b4"
            ]
        ]
    },
    {
        "id": "6208e149a1ad94b4",
        "type": "function",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1920,
        "wires": [
            [
                "d089d3af7d4dbd05"
            ]
        ]
    },
    {
        "id": "d089d3af7d4dbd05",
        "type": "file",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1920,
        "wires": [
            [
                "5647eeab4ea47550"
            ]
        ]
    },
    {
        "id": "d95553d651dc17f0",
        "type": "delay",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 1780,
        "wires": [
            [
                "8f0aeff139bdea7b"
            ]
        ]
    },
    {
        "id": "918a8ff64b574dbe",
        "type": "debug",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "debug 1902",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 2060,
        "wires": []
    },
    {
        "id": "06d50da2e66ac6ac",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 2060,
        "wires": [
            [
                "918a8ff64b574dbe"
            ]
        ]
    },
    {
        "id": "7d121e3451efbf05",
        "type": "function",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8D_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2060,
        "wires": [
            [
                "06d50da2e66ac6ac"
            ]
        ]
    },
    {
        "id": "6c7f5348ba59db91",
        "type": "file in",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 2060,
        "wires": [
            [
                "7d121e3451efbf05"
            ]
        ]
    },
    {
        "id": "ce0b202a28a5b0f4",
        "type": "function",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV8D_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2060,
        "wires": [
            [
                "6c7f5348ba59db91"
            ]
        ]
    },
    {
        "id": "a8e3e6de51efb3cf",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 360,
        "y": 2060,
        "wires": [
            [
                "ce0b202a28a5b0f4"
            ]
        ]
    },
    {
        "id": "76fff7b5134543f1",
        "type": "debug",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "debug 1903",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2160,
        "wires": []
    },
    {
        "id": "d967a3661e710466",
        "type": "ftp in",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 850,
        "y": 2160,
        "wires": [
            [
                "76fff7b5134543f1"
            ]
        ]
    },
    {
        "id": "5805c9388fe6ba76",
        "type": "function",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "filename",
        "func": "var today = new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV8D_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2160,
        "wires": [
            [
                "d967a3661e710466"
            ]
        ]
    },
    {
        "id": "f10b213289d063df",
        "type": "cronplus",
        "z": "731933204433520c",
        "g": "256fc2ec2e4d450e",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 490,
        "y": 2160,
        "wires": [
            [
                "5805c9388fe6ba76"
            ]
        ]
    },
    {
        "id": "1ce6266c510a87b8",
        "type": "debug",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8f0aeff139bdea7b",
        "type": "template",
        "z": "731933204433520c",
        "g": "86a1d960695e6a5f",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC1,5m,INV8D_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC2,5m,INV8D_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC3,5m,INV8D_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC4,5m,INV8D_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC5,5m,INV8D_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC6,5m,INV8D_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC7,5m,INV8D_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC8,5m,INV8D_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC9,5m,INV8D_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC10,5m,INV8D_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC11,5m,INV8D_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC12,5m,INV8D_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC13,5m,INV8D_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC14,5m,INV8D_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC15,5m,INV8D_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC16,5m,INV8D_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC17,5m,INV8D_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC18,5m,INV8D_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC19,5m,INV8D_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC20,5m,INV8D_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC21,5m,INV8D_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC22,5m,INV8D_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC23,5m,INV8D_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU25,IDC24,5m,INV8D_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC1,5m,INV8D_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC2,5m,INV8D_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC3,5m,INV8D_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC4,5m,INV8D_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC5,5m,INV8D_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC6,5m,INV8D_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC7,5m,INV8D_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC8,5m,INV8D_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC9,5m,INV8D_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC10,5m,INV8D_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC11,5m,INV8D_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC12,5m,INV8D_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC13,5m,INV8D_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC14,5m,INV8D_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC15,5m,INV8D_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC16,5m,INV8D_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC17,5m,INV8D_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC18,5m,INV8D_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC19,5m,INV8D_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC20,5m,INV8D_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC21,5m,INV8D_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC22,5m,INV8D_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC23,5m,INV8D_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU26,IDC24,5m,INV8D_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC1,5m,INV8D_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC2,5m,INV8D_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC3,5m,INV8D_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC4,5m,INV8D_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC5,5m,INV8D_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC6,5m,INV8D_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC7,5m,INV8D_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC8,5m,INV8D_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC9,5m,INV8D_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC10,5m,INV8D_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC11,5m,INV8D_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC12,5m,INV8D_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC13,5m,INV8D_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC14,5m,INV8D_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC15,5m,INV8D_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC16,5m,INV8D_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC17,5m,INV8D_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC18,5m,INV8D_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC19,5m,INV8D_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC20,5m,INV8D_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC21,5m,INV8D_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC22,5m,INV8D_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC23,5m,INV8D_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU27,IDC24,5m,INV8D_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC1,5m,INV8D_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC2,5m,INV8D_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC3,5m,INV8D_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC4,5m,INV8D_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC5,5m,INV8D_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC6,5m,INV8D_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC7,5m,INV8D_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC8,5m,INV8D_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC9,5m,INV8D_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC10,5m,INV8D_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC11,5m,INV8D_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC12,5m,INV8D_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC13,5m,INV8D_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC14,5m,INV8D_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC15,5m,INV8D_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC16,5m,INV8D_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC17,5m,INV8D_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC18,5m,INV8D_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC19,5m,INV8D_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC20,5m,INV8D_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC21,5m,INV8D_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC22,5m,INV8D_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC23,5m,INV8D_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU28,IDC24,5m,INV8D_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC1,5m,INV8D_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC2,5m,INV8D_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC3,5m,INV8D_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC4,5m,INV8D_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC5,5m,INV8D_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC6,5m,INV8D_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC7,5m,INV8D_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC8,5m,INV8D_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC9,5m,INV8D_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC10,5m,INV8D_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC11,5m,INV8D_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC12,5m,INV8D_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC13,5m,INV8D_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC14,5m,INV8D_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC15,5m,INV8D_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC16,5m,INV8D_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC17,5m,INV8D_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC18,5m,INV8D_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC19,5m,INV8D_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC20,5m,INV8D_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC21,5m,INV8D_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC22,5m,INV8D_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC23,5m,INV8D_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU29,IDC24,5m,INV8D_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC1,5m,INV8D_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC2,5m,INV8D_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC3,5m,INV8D_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC4,5m,INV8D_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC5,5m,INV8D_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC6,5m,INV8D_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC7,5m,INV8D_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC8,5m,INV8D_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC9,5m,INV8D_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC10,5m,INV8D_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC11,5m,INV8D_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC12,5m,INV8D_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC13,5m,INV8D_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC14,5m,INV8D_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC15,5m,INV8D_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC16,5m,INV8D_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC17,5m,INV8D_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC18,5m,INV8D_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC19,5m,INV8D_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC20,5m,INV8D_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC21,5m,INV8D_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC22,5m,INV8D_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC23,5m,INV8D_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU30,IDC24,5m,INV8D_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC1,5m,INV8D_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC2,5m,INV8D_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC3,5m,INV8D_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC4,5m,INV8D_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC5,5m,INV8D_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC6,5m,INV8D_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC7,5m,INV8D_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC8,5m,INV8D_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC9,5m,INV8D_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC10,5m,INV8D_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC11,5m,INV8D_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC12,5m,INV8D_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC13,5m,INV8D_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC14,5m,INV8D_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC15,5m,INV8D_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC16,5m,INV8D_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC17,5m,INV8D_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC18,5m,INV8D_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC19,5m,INV8D_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC20,5m,INV8D_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC21,5m,INV8D_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC22,5m,INV8D_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC23,5m,INV8D_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU31,IDC24,5m,INV8D_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC1,5m,INV8D_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC2,5m,INV8D_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC3,5m,INV8D_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC4,5m,INV8D_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC5,5m,INV8D_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC6,5m,INV8D_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC7,5m,INV8D_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC8,5m,INV8D_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC9,5m,INV8D_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC10,5m,INV8D_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC11,5m,INV8D_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC12,5m,INV8D_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC13,5m,INV8D_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC14,5m,INV8D_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC15,5m,INV8D_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC16,5m,INV8D_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC17,5m,INV8D_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC18,5m,INV8D_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC19,5m,INV8D_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC20,5m,INV8D_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC21,5m,INV8D_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC22,5m,INV8D_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC23,5m,INV8D_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC24,5m,INV8D_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC25,5m,INV8D_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC26,5m,INV8D_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC27,5m,INV8D_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC28,5m,INV8D_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC29,5m,INV8D_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC30,5m,INV8D_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC31,5m,INV8D_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block B 8,B08_INV4_SMU32,IDC32,5m,INV8D_SMU8_IDC32\n",
        "output": "str",
        "x": 450,
        "y": 1800,
        "wires": [
            [
                "cf67e9f006ae4344"
            ]
        ]
    },
    {
        "id": "31e677fc50d9a966",
        "type": "catch",
        "z": "731933204433520c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 692.7916870117188,
        "y": 2297.333251953125,
        "wires": [
            []
        ]
    },
    {
        "id": "7dd0619be4818e53",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 200,
        "wires": [
            [
                "f51ef8b97ce69d56"
            ]
        ]
    },
    {
        "id": "f3b401ed6263dfa2",
        "type": "csv",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 690,
        "y": 120,
        "wires": [
            [
                "7dd0619be4818e53",
                "3458568e9f3405c4"
            ]
        ]
    },
    {
        "id": "f51ef8b97ce69d56",
        "type": "influxdb in",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "09107c68d67398cb"
            ]
        ]
    },
    {
        "id": "3458568e9f3405c4",
        "type": "change",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 120,
        "wires": [
            [
                "09107c68d67398cb"
            ]
        ]
    },
    {
        "id": "5fdcfde91b7bddb9",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 280,
        "y": 120,
        "wires": [
            [
                "be2f242f453aa09f"
            ]
        ]
    },
    {
        "id": "ac8748440df3a423",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "e605587513639894"
            ]
        ]
    },
    {
        "id": "e605587513639894",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "0cc26ea426259887",
                "ea370db53b4bad01"
            ]
        ]
    },
    {
        "id": "09107c68d67398cb",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "ac8748440df3a423"
            ]
        ]
    },
    {
        "id": "96fe769ef5976e49",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 240,
        "wires": []
    },
    {
        "id": "0cc26ea426259887",
        "type": "csv",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1450,
        "y": 160,
        "wires": [
            [
                "6f88280e514d9fda"
            ]
        ]
    },
    {
        "id": "6f88280e514d9fda",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV9A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "43d96f9e97ab1f6c"
            ]
        ]
    },
    {
        "id": "43d96f9e97ab1f6c",
        "type": "file",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1340,
        "y": 240,
        "wires": [
            [
                "96fe769ef5976e49"
            ]
        ]
    },
    {
        "id": "be2f242f453aa09f",
        "type": "delay",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "c2af863abff33247"
            ]
        ]
    },
    {
        "id": "82569ffce052c9a2",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "debug 1904",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "6626fe85251dfeb1",
        "type": "ftp in",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "82569ffce052c9a2"
            ]
        ]
    },
    {
        "id": "27eac3724f040808",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV9A_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 380,
        "wires": [
            [
                "6626fe85251dfeb1"
            ]
        ]
    },
    {
        "id": "0266e6fb85cab35f",
        "type": "file in",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 380,
        "wires": [
            [
                "27eac3724f040808"
            ]
        ]
    },
    {
        "id": "fc85cd41bf3eb292",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV9A_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "0266e6fb85cab35f"
            ]
        ]
    },
    {
        "id": "033f418712b4cc19",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "fc85cd41bf3eb292"
            ]
        ]
    },
    {
        "id": "9f93e5e97cc11524",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "debug 1905",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 480,
        "wires": []
    },
    {
        "id": "7f20fe5003411d86",
        "type": "ftp in",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 480,
        "wires": [
            [
                "9f93e5e97cc11524"
            ]
        ]
    },
    {
        "id": "b8f2fc57bf0f79b3",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV9A_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "7f20fe5003411d86"
            ]
        ]
    },
    {
        "id": "810d32d3ed46157e",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "a6079ec9039a81d9",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "b8f2fc57bf0f79b3"
            ]
        ]
    },
    {
        "id": "ea370db53b4bad01",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 120,
        "wires": []
    },
    {
        "id": "c2af863abff33247",
        "type": "template",
        "z": "ff096b0e7876967d",
        "g": "7e03b30b192452f8",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC1,5m,INV9A_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC2,5m,INV9A_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC3,5m,INV9A_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC4,5m,INV9A_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC5,5m,INV9A_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC6,5m,INV9A_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC7,5m,INV9A_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC8,5m,INV9A_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC9,5m,INV9A_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC10,5m,INV9A_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC11,5m,INV9A_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC12,5m,INV9A_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC13,5m,INV9A_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC14,5m,INV9A_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC15,5m,INV9A_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC16,5m,INV9A_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC17,5m,INV9A_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC18,5m,INV9A_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC19,5m,INV9A_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC20,5m,INV9A_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC21,5m,INV9A_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC22,5m,INV9A_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC23,5m,INV9A_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU01,IDC24,5m,INV9A_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC1,5m,INV9A_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC2,5m,INV9A_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC3,5m,INV9A_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC4,5m,INV9A_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC5,5m,INV9A_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC6,5m,INV9A_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC7,5m,INV9A_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC8,5m,INV9A_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC9,5m,INV9A_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC10,5m,INV9A_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC11,5m,INV9A_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC12,5m,INV9A_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC13,5m,INV9A_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC14,5m,INV9A_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC15,5m,INV9A_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC16,5m,INV9A_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC17,5m,INV9A_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC18,5m,INV9A_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC19,5m,INV9A_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC20,5m,INV9A_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC21,5m,INV9A_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC22,5m,INV9A_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC23,5m,INV9A_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU02,IDC24,5m,INV9A_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC1,5m,INV9A_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC2,5m,INV9A_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC3,5m,INV9A_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC4,5m,INV9A_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC5,5m,INV9A_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC6,5m,INV9A_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC7,5m,INV9A_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC8,5m,INV9A_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC9,5m,INV9A_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC10,5m,INV9A_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC11,5m,INV9A_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC12,5m,INV9A_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC13,5m,INV9A_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC14,5m,INV9A_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC15,5m,INV9A_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC16,5m,INV9A_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC17,5m,INV9A_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC18,5m,INV9A_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC19,5m,INV9A_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC20,5m,INV9A_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC21,5m,INV9A_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC22,5m,INV9A_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC23,5m,INV9A_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU03,IDC24,5m,INV9A_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC1,5m,INV9A_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC2,5m,INV9A_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC3,5m,INV9A_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC4,5m,INV9A_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC5,5m,INV9A_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC6,5m,INV9A_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC7,5m,INV9A_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC8,5m,INV9A_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC9,5m,INV9A_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC10,5m,INV9A_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC11,5m,INV9A_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC12,5m,INV9A_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC13,5m,INV9A_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC14,5m,INV9A_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC15,5m,INV9A_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC16,5m,INV9A_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC17,5m,INV9A_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC18,5m,INV9A_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC19,5m,INV9A_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC20,5m,INV9A_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC21,5m,INV9A_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC22,5m,INV9A_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC23,5m,INV9A_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU04,IDC24,5m,INV9A_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC1,5m,INV9A_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC2,5m,INV9A_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC3,5m,INV9A_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC4,5m,INV9A_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC5,5m,INV9A_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC6,5m,INV9A_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC7,5m,INV9A_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC8,5m,INV9A_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC9,5m,INV9A_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC10,5m,INV9A_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC11,5m,INV9A_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC12,5m,INV9A_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC13,5m,INV9A_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC14,5m,INV9A_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC15,5m,INV9A_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC16,5m,INV9A_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC17,5m,INV9A_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC18,5m,INV9A_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC19,5m,INV9A_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC20,5m,INV9A_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC21,5m,INV9A_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC22,5m,INV9A_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC23,5m,INV9A_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU05,IDC24,5m,INV9A_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC1,5m,INV9A_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC2,5m,INV9A_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC3,5m,INV9A_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC4,5m,INV9A_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC5,5m,INV9A_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC6,5m,INV9A_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC7,5m,INV9A_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC8,5m,INV9A_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC9,5m,INV9A_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC10,5m,INV9A_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC11,5m,INV9A_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC12,5m,INV9A_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC13,5m,INV9A_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC14,5m,INV9A_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC15,5m,INV9A_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC16,5m,INV9A_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC17,5m,INV9A_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC18,5m,INV9A_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC19,5m,INV9A_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC20,5m,INV9A_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC21,5m,INV9A_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC22,5m,INV9A_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC23,5m,INV9A_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU06,IDC24,5m,INV9A_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC1,5m,INV9A_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC2,5m,INV9A_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC3,5m,INV9A_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC4,5m,INV9A_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC5,5m,INV9A_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC6,5m,INV9A_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC7,5m,INV9A_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC8,5m,INV9A_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC9,5m,INV9A_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC10,5m,INV9A_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC11,5m,INV9A_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC12,5m,INV9A_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC13,5m,INV9A_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC14,5m,INV9A_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC15,5m,INV9A_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC16,5m,INV9A_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC17,5m,INV9A_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC18,5m,INV9A_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC19,5m,INV9A_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC20,5m,INV9A_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC21,5m,INV9A_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC22,5m,INV9A_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC23,5m,INV9A_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU07,IDC24,5m,INV9A_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC1,5m,INV9A_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC2,5m,INV9A_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC3,5m,INV9A_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC4,5m,INV9A_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC5,5m,INV9A_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC6,5m,INV9A_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC7,5m,INV9A_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC8,5m,INV9A_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC9,5m,INV9A_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC10,5m,INV9A_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC11,5m,INV9A_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC12,5m,INV9A_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC13,5m,INV9A_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC14,5m,INV9A_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC15,5m,INV9A_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC16,5m,INV9A_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC17,5m,INV9A_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC18,5m,INV9A_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC19,5m,INV9A_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC20,5m,INV9A_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC21,5m,INV9A_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC22,5m,INV9A_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC23,5m,INV9A_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC24,5m,INV9A_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC25,5m,INV9A_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC26,5m,INV9A_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC27,5m,INV9A_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC28,5m,INV9A_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC29,5m,INV9A_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC30,5m,INV9A_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC31,5m,INV9A_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV1_SMU08,IDC32,5m,INV9A_SMU8_IDC32\n",
        "output": "str",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "f3b401ed6263dfa2"
            ]
        ]
    },
    {
        "id": "b073f3d7fa116036",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "query ",
        "func": "let queries = []; // Array to store query strings\n\nfor (let i = 0; i < msg.payload.length; i++) {\nlet P = msg.payload[i].P\nlet BD = msg.payload[i].BD\nlet device = msg.payload[i].device\nlet field = msg.payload[i].field\nlet Bucket = msg.payload[i].Bucket\nlet Table = msg.payload[i].Table\nlet Frequency = msg.payload[i].Frequency\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar tstart = d.getTime();\n// Get the current date and time\nconst timeNow = Date.now();\n\n// Round to the previous 5th minute\nconst roundedTimestamp = new Date(Math.floor(timeNow / (5 * 60 * 1000)) * (5 * 60 * 1000));\n\n// Set the minutes to the start of the last 60-minute interval and seconds/milliseconds to 0\n//currentDate.setMinutes(currentDate.getMinutes() - 15, 0, 0);\n\n//var tstart = currentDate.getTime();\nlet tend = roundedTimestamp.getTime()\n\nconst startTimestamp = new Date(tstart).toISOString(); // Replace with your start epoch timestamp\nconst endTimestamp = new Date(tend).toISOString(); // Use current time as the end timestamp\n\n    let q = `from(bucket: \"${Bucket}\") |> range(start:${startTimestamp}, stop:${endTimestamp}) |> filter(fn: (r) => r[\"_measurement\"] == \"${Table}\") |> filter(fn: (r) => r[\"p\"] == \"${P}\") |> filter(fn: (r) => r[\"bd\"] == \"${BD}\") |> filter(fn: (r) => r[\"d\"] == \"${device}\") |> filter(fn: (r) => r[\"f\"] == \"${field}\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: ${Frequency}, fn: last, createEmpty: true) |> yield(name: \"${device}_${field}\")`\n\nqueries.push(q); // Add the query to the array\n}\n\n// Join the array of queries with a semicolon and assign to msg.query\nmsg.query = queries.join('');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 740,
        "wires": [
            [
                "7e4f4fec5ba53912"
            ]
        ]
    },
    {
        "id": "8e3c862676efdb3d",
        "type": "csv",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 690,
        "y": 660,
        "wires": [
            [
                "b073f3d7fa116036",
                "9705b77306c48711"
            ]
        ]
    },
    {
        "id": "7e4f4fec5ba53912",
        "type": "influxdb in",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "influxdb": "97aa7216add6f559",
        "name": "influx*",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ampluslakeasia",
        "x": 790,
        "y": 740,
        "wires": [
            [
                "315261d1e35d8e51"
            ]
        ]
    },
    {
        "id": "9705b77306c48711",
        "type": "change",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "keys",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "keys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "315261d1e35d8e51"
            ]
        ]
    },
    {
        "id": "46313f7fb99076d0",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */2 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 280,
        "y": 660,
        "wires": [
            [
                "49d4ff85a3b6df19"
            ]
        ]
    },
    {
        "id": "23bbff10df5d76ca",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "csv structurising",
        "func": "let keys = msg.payload.keys;\n\n// Function to extract values for a specific device and field\nfunction extractValues(data, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        var keyObject = keys[i];\n\n        // Check if the data matches the specified device and field\n        if (data.d == keyObject.device && data.f == keyObject.field) {\n            // Build the key for the result\n            let Column_Name = keyObject.Column_Name;\n            let value = data._value;\n            if (value !== undefined && value !== \"\") {\n                return { Column_Name: Column_Name, value: value };\n            }\n        }\n    }\n}\n\n// Assume msg.payload.influx is an array of arrays\nvar inputArrays = msg.payload.influx;\n\n// Initialize an object to store combined data\nvar combinedData = {};\n\n// Maintain the order of keys\nvar outputKeys = [\"Date_Time\"].concat(keys.map(function (keyObject) {\n    return keyObject.Column_Name;\n}));\n\n// Iterate through each object in the inputArrays\nfor (var i = 0; i < inputArrays.length; i++) {\n    // Get the current object\n    var currentObject = inputArrays[i];\n\n    // Extract Date_Time and value from the current object using the new keys array\n    var Date_Time = new Date(currentObject._time).toISOString().slice(0, 16);\n    var keyValue = extractValues(currentObject, keys);\n    var dateObject = new Date(currentObject._time);\n\n    dateObject.setMinutes(dateObject.getMinutes() - 5);\n    var formattedDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()} ${(\"0\" + dateObject.getHours()).slice(-2)}:${(\"0\" + dateObject.getMinutes()).slice(-2)}`;\n    var TodaysDate = `${(\"0\" + dateObject.getDate()).slice(-2)}-${(\"0\" + (dateObject.getMonth() + 1)).slice(-2)}-${dateObject.getFullYear()}`;\n\n    // Check if the Date_Time already exists in the combinedData object\n    if (!combinedData[Date_Time]) {\n        // If not, create an entry for that Date_Time\n        combinedData[Date_Time] = {\n            Date_Time: formattedDate\n        };\n    }\n\n    // Add the key-value pair to the object for the Date_Time\n    if (keyValue !== undefined) {\n        combinedData[Date_Time][keyValue.Column_Name] = keyValue.value;\n    }\n}\n\n// Output the final result maintaining the order of keys\nmsg.payload = Object.values(combinedData).map(function (entry) {\n    var orderedEntry = {};\n    outputKeys.forEach(function (key) {\n        orderedEntry[key] = entry[key];\n    });\n    return orderedEntry;\n});\nflow.set(\"date\",TodaysDate)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "20c709bd94c235a3"
            ]
        ]
    },
    {
        "id": "20c709bd94c235a3",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "fill null",
        "func": "function replaceUndefinedWithNull(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'undefined') {\n      obj[key] = null;\n    }\n  }\n  return obj; // Return the modified object\n}\n\nlet payload = msg.payload;\n\nif (Array.isArray(payload)) {\n  for (let i = 0; i < payload.length; i++) {\n    if (payload[i] && typeof payload[i] === 'object') {\n      msg.payload[i] = replaceUndefinedWithNull(payload[i]);\n    }\n  }\n} else if (payload && typeof payload === 'object') {\n  msg.payload = replaceUndefinedWithNull(payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 700,
        "wires": [
            [
                "d046cc607284f625",
                "7673b3c4e6d284b3"
            ]
        ]
    },
    {
        "id": "315261d1e35d8e51",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.topic){\n    case \"influx\":\n        context.data.influx = msg.payload;\n        msg = null;\n        break;\n    case \"keys\":\n        context.data.keys = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.influx != null && context.data.keys != null){\n    var data_combine = {\n        \"influx\": context.data.influx,\n        \"keys\": context.data.keys\n       \n    }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "23bbff10df5d76ca"
            ]
        ]
    },
    {
        "id": "9eb0ec95919b1c43",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 780,
        "wires": []
    },
    {
        "id": "d046cc607284f625",
        "type": "csv",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1450,
        "y": 700,
        "wires": [
            [
                "0fdb35e045b5788a"
            ]
        ]
    },
    {
        "id": "0fdb35e045b5788a",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV9B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 780,
        "wires": [
            [
                "bdceff44787a61c3"
            ]
        ]
    },
    {
        "id": "bdceff44787a61c3",
        "type": "file",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "file save",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1340,
        "y": 780,
        "wires": [
            [
                "9eb0ec95919b1c43"
            ]
        ]
    },
    {
        "id": "49d4ff85a3b6df19",
        "type": "delay",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "60s",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 640,
        "wires": [
            [
                "b9f774b647023e57"
            ]
        ]
    },
    {
        "id": "0e7be28a7fdeefd7",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "debug 1906",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 920,
        "wires": []
    },
    {
        "id": "dc7d8d33fe2584a5",
        "type": "ftp in",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "0e7be28a7fdeefd7"
            ]
        ]
    },
    {
        "id": "22063c2209cab917",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "filename",
        "func": "\nvar date = flow.get(\"date\")\nconst inputDate = date;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.localFilename = msg.payload\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV9B_SMU/\" + date + \".csv\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 920,
        "wires": [
            [
                "dc7d8d33fe2584a5"
            ]
        ]
    },
    {
        "id": "51af6ced0629f69e",
        "type": "file in",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 920,
        "wires": [
            [
                "22063c2209cab917"
            ]
        ]
    },
    {
        "id": "d871cb4f4002a07d",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\n\nvar path = \"/data/ftp/AMP34_INV9B_SMU/\" + date + \".csv\"\nmsg.filename = path\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 920,
        "wires": [
            [
                "51af6ced0629f69e"
            ]
        ]
    },
    {
        "id": "a7a0b4c57eb9dc63",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 460,
        "y": 920,
        "wires": [
            [
                "d871cb4f4002a07d"
            ]
        ]
    },
    {
        "id": "132a7336e62134ec",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "debug 1907",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e21de3c987336cd8",
        "type": "ftp in",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "ftp": "39b7f82a69c06ae4",
        "operation": "mkdir",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 950,
        "y": 1020,
        "wires": [
            [
                "132a7336e62134ec"
            ]
        ]
    },
    {
        "id": "4f5d1db6ee479909",
        "type": "function",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "filename",
        "func": "var today=new Date()\n\nvar TodaysDate = `${(\"0\" + today.getDate()).slice(-2)}-${(\"0\" + (today.getMonth() + 1)).slice(-2)}-${today.getFullYear()}`;\n\nconst inputDate = TodaysDate;\nconst [day, month, year] = inputDate.split(\"-\");\n\n// Create a Date object using the parsed values\nconst dateObject = new Date(`${year}-${month}-${day}`);\n\n// Get the month abbreviation (e.g., \"Nov\")\nconst monthAbbreviation = dateObject.toLocaleString('default', { month: 'short' });\n\n// Formatted result\nconst Month_Year = `${monthAbbreviation}_${year}`;\n\nmsg.filename = \"/IPLON/\" + Month_Year + \"/AMP34_INV9B_SMU\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1020,
        "wires": [
            [
                "e21de3c987336cd8"
            ]
        ]
    },
    {
        "id": "39b93cb2c32e618e",
        "type": "cronplus",
        "z": "ff096b0e7876967d",
        "g": "36ad634535c1b67e",
        "name": "mkdir",
        "outputField": "payload",
        "timeZone": "",
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "influx",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "30 0 1 * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 590,
        "y": 1020,
        "wires": [
            [
                "4f5d1db6ee479909"
            ]
        ]
    },
    {
        "id": "7673b3c4e6d284b3",
        "type": "debug",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 660,
        "wires": []
    },
    {
        "id": "b9f774b647023e57",
        "type": "template",
        "z": "ff096b0e7876967d",
        "g": "e795ace9c4d5854a",
        "name": "config file*",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,Bucket,Table ,P,BD,device,field,Frequency,Column_Name\n1,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC1,5m,INV9B_SMU1_IDC1\n2,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC2,5m,INV9B_SMU1_IDC2\n3,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC3,5m,INV9B_SMU1_IDC3\n4,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC4,5m,INV9B_SMU1_IDC4\n5,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC5,5m,INV9B_SMU1_IDC5\n6,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC6,5m,INV9B_SMU1_IDC6\n7,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC7,5m,INV9B_SMU1_IDC7\n8,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC8,5m,INV9B_SMU1_IDC8\n9,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC9,5m,INV9B_SMU1_IDC9\n10,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC10,5m,INV9B_SMU1_IDC10\n11,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC11,5m,INV9B_SMU1_IDC11\n12,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC12,5m,INV9B_SMU1_IDC12\n13,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC13,5m,INV9B_SMU1_IDC13\n14,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC14,5m,INV9B_SMU1_IDC14\n15,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC15,5m,INV9B_SMU1_IDC15\n16,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC16,5m,INV9B_SMU1_IDC16\n17,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC17,5m,INV9B_SMU1_IDC17\n18,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC18,5m,INV9B_SMU1_IDC18\n19,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC19,5m,INV9B_SMU1_IDC19\n20,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC20,5m,INV9B_SMU1_IDC20\n21,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC21,5m,INV9B_SMU1_IDC21\n22,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC22,5m,INV9B_SMU1_IDC22\n23,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC23,5m,INV9B_SMU1_IDC23\n24,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU09,IDC24,5m,INV9B_SMU1_IDC24\n25,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC1,5m,INV9B_SMU2_IDC1\n26,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC2,5m,INV9B_SMU2_IDC2\n27,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC3,5m,INV9B_SMU2_IDC3\n28,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC4,5m,INV9B_SMU2_IDC4\n29,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC5,5m,INV9B_SMU2_IDC5\n30,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC6,5m,INV9B_SMU2_IDC6\n31,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC7,5m,INV9B_SMU2_IDC7\n32,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC8,5m,INV9B_SMU2_IDC8\n33,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC9,5m,INV9B_SMU2_IDC9\n34,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC10,5m,INV9B_SMU2_IDC10\n35,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC11,5m,INV9B_SMU2_IDC11\n36,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC12,5m,INV9B_SMU2_IDC12\n37,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC13,5m,INV9B_SMU2_IDC13\n38,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC14,5m,INV9B_SMU2_IDC14\n39,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC15,5m,INV9B_SMU2_IDC15\n40,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC16,5m,INV9B_SMU2_IDC16\n41,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC17,5m,INV9B_SMU2_IDC17\n42,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC18,5m,INV9B_SMU2_IDC18\n43,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC19,5m,INV9B_SMU2_IDC19\n44,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC20,5m,INV9B_SMU2_IDC20\n45,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC21,5m,INV9B_SMU2_IDC21\n46,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC22,5m,INV9B_SMU2_IDC22\n47,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC23,5m,INV9B_SMU2_IDC23\n48,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU10,IDC24,5m,INV9B_SMU2_IDC24\n49,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC1,5m,INV9B_SMU3_IDC1\n50,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC2,5m,INV9B_SMU3_IDC2\n51,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC3,5m,INV9B_SMU3_IDC3\n52,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC4,5m,INV9B_SMU3_IDC4\n53,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC5,5m,INV9B_SMU3_IDC5\n54,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC6,5m,INV9B_SMU3_IDC6\n55,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC7,5m,INV9B_SMU3_IDC7\n56,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC8,5m,INV9B_SMU3_IDC8\n57,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC9,5m,INV9B_SMU3_IDC9\n58,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC10,5m,INV9B_SMU3_IDC10\n59,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC11,5m,INV9B_SMU3_IDC11\n60,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC12,5m,INV9B_SMU3_IDC12\n61,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC13,5m,INV9B_SMU3_IDC13\n62,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC14,5m,INV9B_SMU3_IDC14\n63,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC15,5m,INV9B_SMU3_IDC15\n64,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC16,5m,INV9B_SMU3_IDC16\n65,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC17,5m,INV9B_SMU3_IDC17\n66,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC18,5m,INV9B_SMU3_IDC18\n67,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC19,5m,INV9B_SMU3_IDC19\n68,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC20,5m,INV9B_SMU3_IDC20\n69,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC21,5m,INV9B_SMU3_IDC21\n70,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC22,5m,INV9B_SMU3_IDC22\n71,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC23,5m,INV9B_SMU3_IDC23\n72,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU11,IDC24,5m,INV9B_SMU3_IDC24\n73,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC1,5m,INV9B_SMU4_IDC1\n74,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC2,5m,INV9B_SMU4_IDC2\n75,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC3,5m,INV9B_SMU4_IDC3\n76,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC4,5m,INV9B_SMU4_IDC4\n77,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC5,5m,INV9B_SMU4_IDC5\n78,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC6,5m,INV9B_SMU4_IDC6\n79,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC7,5m,INV9B_SMU4_IDC7\n80,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC8,5m,INV9B_SMU4_IDC8\n81,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC9,5m,INV9B_SMU4_IDC9\n82,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC10,5m,INV9B_SMU4_IDC10\n83,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC11,5m,INV9B_SMU4_IDC11\n84,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC12,5m,INV9B_SMU4_IDC12\n85,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC13,5m,INV9B_SMU4_IDC13\n86,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC14,5m,INV9B_SMU4_IDC14\n87,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC15,5m,INV9B_SMU4_IDC15\n88,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC16,5m,INV9B_SMU4_IDC16\n89,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC17,5m,INV9B_SMU4_IDC17\n90,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC18,5m,INV9B_SMU4_IDC18\n91,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC19,5m,INV9B_SMU4_IDC19\n92,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC20,5m,INV9B_SMU4_IDC20\n93,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC21,5m,INV9B_SMU4_IDC21\n94,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC22,5m,INV9B_SMU4_IDC22\n95,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC23,5m,INV9B_SMU4_IDC23\n96,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU12,IDC24,5m,INV9B_SMU4_IDC24\n97,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC1,5m,INV9B_SMU5_IDC1\n98,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC2,5m,INV9B_SMU5_IDC2\n99,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC3,5m,INV9B_SMU5_IDC3\n100,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC4,5m,INV9B_SMU5_IDC4\n101,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC5,5m,INV9B_SMU5_IDC5\n102,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC6,5m,INV9B_SMU5_IDC6\n103,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC7,5m,INV9B_SMU5_IDC7\n104,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC8,5m,INV9B_SMU5_IDC8\n105,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC9,5m,INV9B_SMU5_IDC9\n106,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC10,5m,INV9B_SMU5_IDC10\n107,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC11,5m,INV9B_SMU5_IDC11\n108,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC12,5m,INV9B_SMU5_IDC12\n109,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC13,5m,INV9B_SMU5_IDC13\n110,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC14,5m,INV9B_SMU5_IDC14\n111,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC15,5m,INV9B_SMU5_IDC15\n112,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC16,5m,INV9B_SMU5_IDC16\n113,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC17,5m,INV9B_SMU5_IDC17\n114,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC18,5m,INV9B_SMU5_IDC18\n115,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC19,5m,INV9B_SMU5_IDC19\n116,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC20,5m,INV9B_SMU5_IDC20\n117,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC21,5m,INV9B_SMU5_IDC21\n118,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC22,5m,INV9B_SMU5_IDC22\n119,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC23,5m,INV9B_SMU5_IDC23\n120,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU13,IDC24,5m,INV9B_SMU5_IDC24\n121,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC1,5m,INV9B_SMU6_IDC1\n122,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC2,5m,INV9B_SMU6_IDC2\n123,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC3,5m,INV9B_SMU6_IDC3\n124,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC4,5m,INV9B_SMU6_IDC4\n125,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC5,5m,INV9B_SMU6_IDC5\n126,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC6,5m,INV9B_SMU6_IDC6\n127,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC7,5m,INV9B_SMU6_IDC7\n128,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC8,5m,INV9B_SMU6_IDC8\n129,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC9,5m,INV9B_SMU6_IDC9\n130,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC10,5m,INV9B_SMU6_IDC10\n131,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC11,5m,INV9B_SMU6_IDC11\n132,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC12,5m,INV9B_SMU6_IDC12\n133,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC13,5m,INV9B_SMU6_IDC13\n134,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC14,5m,INV9B_SMU6_IDC14\n135,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC15,5m,INV9B_SMU6_IDC15\n136,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC16,5m,INV9B_SMU6_IDC16\n137,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC17,5m,INV9B_SMU6_IDC17\n138,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC18,5m,INV9B_SMU6_IDC18\n139,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC19,5m,INV9B_SMU6_IDC19\n140,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC20,5m,INV9B_SMU6_IDC20\n141,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC21,5m,INV9B_SMU6_IDC21\n142,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC22,5m,INV9B_SMU6_IDC22\n143,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC23,5m,INV9B_SMU6_IDC23\n144,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU14,IDC24,5m,INV9B_SMU6_IDC24\n145,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC1,5m,INV9B_SMU7_IDC1\n146,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC2,5m,INV9B_SMU7_IDC2\n147,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC3,5m,INV9B_SMU7_IDC3\n148,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC4,5m,INV9B_SMU7_IDC4\n149,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC5,5m,INV9B_SMU7_IDC5\n150,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC6,5m,INV9B_SMU7_IDC6\n151,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC7,5m,INV9B_SMU7_IDC7\n152,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC8,5m,INV9B_SMU7_IDC8\n153,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC9,5m,INV9B_SMU7_IDC9\n154,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC10,5m,INV9B_SMU7_IDC10\n155,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC11,5m,INV9B_SMU7_IDC11\n156,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC12,5m,INV9B_SMU7_IDC12\n157,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC13,5m,INV9B_SMU7_IDC13\n158,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC14,5m,INV9B_SMU7_IDC14\n159,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC15,5m,INV9B_SMU7_IDC15\n160,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC16,5m,INV9B_SMU7_IDC16\n161,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC17,5m,INV9B_SMU7_IDC17\n162,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC18,5m,INV9B_SMU7_IDC18\n163,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC19,5m,INV9B_SMU7_IDC19\n164,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC20,5m,INV9B_SMU7_IDC20\n165,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC21,5m,INV9B_SMU7_IDC21\n166,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC22,5m,INV9B_SMU7_IDC22\n167,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC23,5m,INV9B_SMU7_IDC23\n168,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU15,IDC24,5m,INV9B_SMU7_IDC24\n169,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC1,5m,INV9B_SMU8_IDC1\n170,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC2,5m,INV9B_SMU8_IDC2\n171,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC3,5m,INV9B_SMU8_IDC3\n172,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC4,5m,INV9B_SMU8_IDC4\n173,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC5,5m,INV9B_SMU8_IDC5\n174,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC6,5m,INV9B_SMU8_IDC6\n175,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC7,5m,INV9B_SMU8_IDC7\n176,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC8,5m,INV9B_SMU8_IDC8\n177,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC9,5m,INV9B_SMU8_IDC9\n178,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC10,5m,INV9B_SMU8_IDC10\n179,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC11,5m,INV9B_SMU8_IDC11\n180,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC12,5m,INV9B_SMU8_IDC12\n181,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC13,5m,INV9B_SMU8_IDC13\n182,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC14,5m,INV9B_SMU8_IDC14\n183,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC15,5m,INV9B_SMU8_IDC15\n184,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC16,5m,INV9B_SMU8_IDC16\n185,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC17,5m,INV9B_SMU8_IDC17\n186,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC18,5m,INV9B_SMU8_IDC18\n187,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC19,5m,INV9B_SMU8_IDC19\n188,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC20,5m,INV9B_SMU8_IDC20\n189,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC21,5m,INV9B_SMU8_IDC21\n190,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC22,5m,INV9B_SMU8_IDC22\n191,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC23,5m,INV9B_SMU8_IDC23\n192,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC24,5m,INV9B_SMU8_IDC24\n193,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC25,5m,INV9B_SMU8_IDC25\n194,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC26,5m,INV9B_SMU8_IDC26\n195,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC27,5m,INV9B_SMU8_IDC27\n196,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC28,5m,INV9B_SMU8_IDC28\n197,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC29,5m,INV9B_SMU8_IDC29\n198,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC30,5m,INV9B_SMU8_IDC30\n199,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC31,5m,INV9B_SMU8_IDC31\n200,ampluslargeutility,v,Amplus_34MW,Block C 9,B09_INV2_SMU16,IDC32,5m,INV9B_SMU8_IDC32\n",
        "output": "str",
        "x": 550,
        "y": 660,
        "wires": [
            [
                "8e3c862676efdb3d"
            ]
        ]
    },
    {
        "id": "59a296c0b76f3b5f",
        "type": "catch",
        "z": "ff096b0e7876967d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 430,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "91e5a8a9a60753d2",
        "type": "ftp in",
        "z": "6b8fe5f0d8849996",
        "ftp": "39b7f82a69c06ae4",
        "operation": "put",
        "filename": "",
        "localFilename": "",
        "name": "",
        "x": 990,
        "y": 160,
        "wires": [
            [
                "8892095c7f1d39db"
            ]
        ]
    },
    {
        "id": "8892095c7f1d39db",
        "type": "debug",
        "z": "6b8fe5f0d8849996",
        "name": "debug 1910",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "f608b8702710938c",
        "type": "function",
        "z": "6b8fe5f0d8849996",
        "name": "local path*",
        "func": "\nvar date = flow.get(\"date\")\nfor(var i=10;i<25;i++)\n{\nvar path = `/data/ftp/AMP34_INV8D_SMU/${i}-01-2024.csv`\n\n    msg.filename = path\n    node.send(msg)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 160,
        "wires": [
            [
                "70d59adfcc8cdc62"
            ]
        ]
    },
    {
        "id": "70d59adfcc8cdc62",
        "type": "file in",
        "z": "6b8fe5f0d8849996",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 160,
        "wires": [
            [
                "9c974c5b0981c3bd"
            ]
        ]
    },
    {
        "id": "9c974c5b0981c3bd",
        "type": "function",
        "z": "6b8fe5f0d8849996",
        "name": "filename",
        "func": "const filePath = msg.filename;\nconst fileName = filePath.slice(filePath.lastIndexOf('/') + 1);\n\nvar path = `/IPLON/Jan_2024/AMP34_INV8D_SMU/${fileName}`\n    msg.localFilename = msg.payload\n    msg.filename = path\n    node.send(msg)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "3a241624110135f4"
            ]
        ]
    },
    {
        "id": "c7c21a9b468e8192",
        "type": "inject",
        "z": "6b8fe5f0d8849996",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "f608b8702710938c"
            ]
        ]
    },
    {
        "id": "3a241624110135f4",
        "type": "delay",
        "z": "6b8fe5f0d8849996",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 160,
        "wires": [
            [
                "91e5a8a9a60753d2"
            ]
        ]
    }
]
