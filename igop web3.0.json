[
    {
        "id": "3834f97f18cce9c3",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a6dbce1f496ecb79",
        "type": "tab",
        "label": "IGOP web3.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3932f5c7e7a8c8a4",
        "type": "tab",
        "label": "IGOP web4.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "625008ad79be5f82",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9bb7160e32e22f02",
        "type": "tab",
        "label": "JD THOMAS PLANTS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2b1ce87ff7b4b7f",
        "type": "tab",
        "label": "Ezee_Ben_Plants",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fb5bfb14f47e3d76",
        "type": "tab",
        "label": "wierig plants",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1383feb76aecd501",
        "type": "tab",
        "label": "BKW ohne ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e25992b067a6e46",
        "type": "tab",
        "label": "STUHLMACHER  PLANT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "293ee0eba4be6517",
        "type": "tab",
        "label": "pletzinger ohne plants",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfa355920aed1577",
        "type": "tab",
        "label": "csv header correction",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c0dc6fb5c257728c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "mglasia",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://mglasia5.influx.svc.cluster.local",
        "rejectUnauthorized": true
    },
    {
        "id": "0829fbfbcf5b2407",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8087",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8087",
        "rejectUnauthorized": true
    },
    {
        "id": "c956bf2451113f4c",
        "type": "modbus-client",
        "name": "modscan",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.81.203",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "2",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "202746a15c1b5e18",
        "type": "function",
        "z": "3834f97f18cce9c3",
        "name": "multiple measurement points",
        "func": "\nfor (var i = 0; i < msg.payload.length; i++) {\n    var inv_sum = msg.payload[i].inv_sum\n    var time = new Date(msg.payload[i].TIME).getTime()\n    var obj = {};\n    obj.payload =\n\n        [\n            {\n                measurement: \"INV_SUM1\",\n\n                fields: {\n\n                    value: inv_sum\n                },\n                tags: {\n                \n\n                },\n\n                timestamp: time\n            }\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 420,
        "wires": [
            [
                "f99d8c4af31870b0"
            ]
        ]
    },
    {
        "id": "b14954fb859aa1fa",
        "type": "cronplus",
        "z": "3834f97f18cce9c3",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "20ba7bbedd8c5226"
            ]
        ]
    },
    {
        "id": "f99d8c4af31870b0",
        "type": "influxdb batch",
        "z": "3834f97f18cce9c3",
        "influxdb": "c0dc6fb5c257728c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microgridfivelakeasia",
        "bucket": "hysolwin",
        "x": 1040,
        "y": 420,
        "wires": []
    },
    {
        "id": "9c396b8e25ac45e6",
        "type": "function",
        "z": "3834f97f18cce9c3",
        "name": "function 115",
        "func": "\nvar plant = msg.payload.plant;\n//var iid = msg.payload.iid;\nvar device = msg.payload.device;\nvar field = msg.payload.field;\nvar measurement = msg.payload.measurement;\nvar factor = msg.payload.factor;\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate()-10);\nd.setHours(0, 0, 0, 0);\nvar d1 = new Date($today);\nvar tstart = new Date(d).toISOString();\nvar tend = new Date(d1).toISOString();\n\n\n\n//var q = ' from(bucket: \"hysolwin\") |> range(start:-10d)  |>filter(fn: (r)=>r[\"_measurement\"]== \\\"' + measurement + '\\\")|>filter(fn:(r)=>r[\"p\"]== \\\"' + plant + '\\\")|>filter(fn:(r)=>r[\"dt\"]== \\\"' + device + '\\\")|>filter(fn:(r)=>r[\"f\"]== \\\"' + field + '\\\") |> aggregateWindow(every: 5m, fn: last, createEmpty: false)|>yield(name:\"last\")'\nvar q = ' from(bucket: \"hysolwin\")|> range(start: -10d) |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"' + plant + '\\\") |> filter(fn: (r) => r[\"d\"] == \\\"' + device + '\\\") |> filter(fn: (r) => r[\"f\"] == \\\"' + field +'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> aggregateWindow(every: 5m,fn: last,)|> fill(column: \"_value\", usePrevious: true) |> yield(name: \"last\")'\n\nmsg.query = q\nmsg.payload=d\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "25480b3f5090c831",
        "type": "csv",
        "z": "3834f97f18cce9c3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "9c396b8e25ac45e6"
            ]
        ]
    },
    {
        "id": "20ba7bbedd8c5226",
        "type": "template",
        "z": "3834f97f18cce9c3",
        "name": "CSV data",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "plant,measurement,iid,device,field,factor\nhysolwin,v,5231,INV01,TOTAL_INV_EAE_DAY,1.0\nhysolwin,v,5231,INV22,TOTAL_INV_EAE_DAY,1.0\nhysolwin,v,5231,INV08,TOTAL_INV_EAE_DAY,1.0\nhysolwin,v,5231,INV14,TOTAL_INV_EAE_DAY,1.0",
        "output": "str",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "25480b3f5090c831"
            ]
        ]
    },
    {
        "id": "a5a394a6d710e783",
        "type": "influxdb in",
        "z": "3834f97f18cce9c3",
        "influxdb": "c0dc6fb5c257728c",
        "name": "hysolwin",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "microgridfivelakeasia",
        "x": 720,
        "y": 260,
        "wires": [
            [
                "b94488143284fa59"
            ]
        ]
    },
    {
        "id": "3ba055c71fd1e474",
        "type": "debug",
        "z": "3834f97f18cce9c3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 260,
        "wires": []
    },
    {
        "id": "b94488143284fa59",
        "type": "join",
        "z": "3834f97f18cce9c3",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "01bc2d9d9ed192e7"
            ]
        ]
    },
    {
        "id": "01bc2d9d9ed192e7",
        "type": "function",
        "z": "3834f97f18cce9c3",
        "name": "function 9",
        "func": "let plantObj\n\nplantObj = []\n\n//for (var j = 0; j < msg.payload[0].length; j++)\nfor (var i = 1; i < msg.payload[0].length; i++)\n// for (var k = 0; k < msg.payload[2].length; k++) \n//for (var l = 0; k < msg.payload[3].length; l++) \n{\n    var time0 = (msg.payload[0][i]._time).slice(0,16)\n    var time1 = (msg.payload[1][i]._time).slice(0,16)\n    var time2 = (msg.payload[2][i]._time).slice(0,16)\n    var time3 = (msg.payload[3][i]._time).slice(0,16)\n    var inv01 = msg.payload[0][i]._value\n    var inv22 = msg.payload[1][i]._value\n    var inv08 = msg.payload[2][i]._value\n    var inv14 = msg.payload[3][i]._value\n\n    if ((time0 == time1 && time2 && time3)) {\n        {\n            var inv_sum = inv01 + inv22 + inv08 + inv14\n\n            // if (inv01&&inv22&&inv08&&inv14== \"null\")\n\n            //  {inv_sum=\"null\"}\n            //node.send(obj);\n            var obj = {\n                TIME: msg.payload[0][i]._time,time0,\n                inv01,\n                inv08,\n                inv14,\n                inv22,\n                inv_sum\n\n            }\n\n            plantObj.push(obj)\n        }\n    }\n}\nmsg.payload = plantObj\n//return null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "3ba055c71fd1e474",
                "202746a15c1b5e18"
            ]
        ]
    },
    {
        "id": "98ae925539d83e7e",
        "type": "debug",
        "z": "3834f97f18cce9c3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "71162e0eee6b079d",
        "type": "inject",
        "z": "3834f97f18cce9c3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "ef9cbf9343b06609"
            ]
        ]
    },
    {
        "id": "05f7e8b60427f3fb",
        "type": "debug",
        "z": "3834f97f18cce9c3",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 740,
        "wires": []
    },
    {
        "id": "134bc1d40957fbce",
        "type": "function",
        "z": "3834f97f18cce9c3",
        "name": "function 129",
        "func": "msg.payload=[6,7,8]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ed0fa199b5b10ae0",
        "type": "function",
        "z": "3834f97f18cce9c3",
        "name": "write uint32",
        "func": "var fc = 16;\nfor (var i = 0; i < 3; i++)\n{  \n        var ads1 = msg.payload[i].ADDRESS \n var qnty = 2;\n var data_type = msg.payload[i].Datatype\n\n if (data_type == 'US32')\n { \n //create buffer\n var buf = Buffer.alloc(4);\n buf.writeUInt32BE(msg.payload[i].VALUE);\n var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]] \n var msg1 = {}; \n msg1.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': ads1, 'quantity': qnty }; \n node.send(msg1);\n }\n if(data_type == 'S32')\n {\n var buf = Buffer.alloc(4);\n buf.writeInt32BE(msg.payload[i].VALUE);\n var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n var msg2 = {};\n msg2.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': ads1, 'quantity': qnty };\n node.send(msg2);\n }\n \n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ef9cbf9343b06609",
        "type": "template",
        "z": "3834f97f18cce9c3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "ADDRESS,ADDRESS_WRITE,VALUE,node_id ,browsename,displayName,Datatype\n2100,1000,1000,Active.Power.AP,Active_Power,AP,US32\n2102,1002,0,Reactive.Power.RP,Reactive_Power,RP,S32\n2104,1004,0,PowerFactor.PF,Power_Factor,PF,S32",
        "output": "str",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "5f35c3a01bd7c6fe"
            ]
        ]
    },
    {
        "id": "5f35c3a01bd7c6fe",
        "type": "csv",
        "z": "3834f97f18cce9c3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "ed0fa199b5b10ae0"
            ]
        ]
    },
    {
        "id": "d31a07ce5c153015",
        "type": "fs-ops-dir",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/meters",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 300,
        "y": 520,
        "wires": [
            [
                "e8eb014869157c05"
            ]
        ]
    },
    {
        "id": "54941110191b9675",
        "type": "inject",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "d31a07ce5c153015"
            ]
        ]
    },
    {
        "id": "4a197391c1243435",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/meters/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 520,
        "wires": [
            [
                "465cda62bb363149",
                "f0dc69f5060978df",
                "c41c7cde1f841b92",
                "fc0524647a0d3fc6",
                "31b13ef317a0158c",
                "88b4ebc81bf8bd8b"
            ]
        ]
    },
    {
        "id": "e8eb014869157c05",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 520,
        "wires": [
            [
                "4a197391c1243435"
            ]
        ]
    },
    {
        "id": "465cda62bb363149",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "6cdbd358a0582f5a",
        "type": "file in",
        "z": "a6dbce1f496ecb79",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/JD THOMAS NAME LIST.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 980,
        "wires": [
            [
                "b5fd69ee4fc5e63c"
            ]
        ]
    },
    {
        "id": "b5fd69ee4fc5e63c",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 470,
        "y": 980,
        "wires": [
            [
                "055573b20d28bda5"
            ]
        ]
    },
    {
        "id": "055573b20d28bda5",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "comparison with ref csv",
        "func": "var live_plant=flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\nvar inv_array=[]\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i].WR13) || \"null\",\n                             parseFloat(msg.payload[i].WR14) || \"null\",\n                             parseFloat(msg.payload[i].WR15) || \"null\",\n                             parseFloat(msg.payload[i].WR16) || \"null\",\n                             parseFloat(msg.payload[i].WR17) || \"null\",\n                             parseFloat(msg.payload[i].WR18) || \"null\",\n                             parseFloat(msg.payload[i].WR19) || \"null\",\n                             parseFloat(msg.payload[i].WR20) || \"null\",\n                             parseFloat(msg.payload[i].WR21) || \"null\",\n                             parseFloat(msg.payload[i].WR22) || \"null\",\n                             parseFloat(msg.payload[i].WR23) || \"null\",\n                             parseFloat(msg.payload[i].WR24) || \"null\",\n                             parseFloat(msg.payload[i].WR25) || \"null\",\n                             parseFloat(msg.payload[i].WR26) || \"null\",\n                             parseFloat(msg.payload[i].WR27) || \"null\",\n                             parseFloat(msg.payload[i].WR28) || \"null\",\n                             parseFloat(msg.payload[i].WR29) || \"null\",\n                             parseFloat(msg.payload[i].WR30) || \"null\",\n                             parseFloat(msg.payload[i].WR31) || \"null\",\n                             parseFloat(msg.payload[i].WR32) || \"null\",\n                             parseFloat(msg.payload[i].WR33) || \"null\",\n                             parseFloat(msg.payload[i].WR34) || \"null\",\n                             parseFloat(msg.payload[i].WR35) || \"null\",\n                             parseFloat(msg.payload[i].WR36) || \"null\",\n                             parseFloat(msg.payload[i].WR37) || \"null\",\n                             parseFloat(msg.payload[i].WR38) || \"null\",\n                             parseFloat(msg.payload[i].WR39) || \"null\",\n                             parseFloat(msg.payload[i].WR40) || \"null\",\n                             parseFloat(msg.payload[i].WR41) || \"null\",\n                             parseFloat(msg.payload[i].WR42) || \"null\",\n                             parseFloat(msg.payload[i].WR43) || \"null\",\n                             parseFloat(msg.payload[i].WR44) || \"null\",\n                             parseFloat(msg.payload[i].WR45) || \"null\",\n                             parseFloat(msg.payload[i].WR46) || \"null\",\n                             parseFloat(msg.payload[i].WR47) || \"null\",\n                             parseFloat(msg.payload[i].WR48) || \"null\",\n                             parseFloat(msg.payload[i].WR49) || \"null\",\n                             parseFloat(msg.payload[i].WR50) || \"null\"]\n                             \n                                  \n         \n        for (var j = 1; j <= INV_NO; j++) {\n            inv_array.push(\"WR\" + j)\n        }\n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\nflow.set(\"inv_array\", inv_array)\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 980,
        "wires": [
            [
                "68583396b7f07f26"
            ]
        ]
    },
    {
        "id": "31b13ef317a0158c",
        "type": "file in",
        "z": "a6dbce1f496ecb79",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 210,
        "y": 660,
        "wires": [
            [
                "f66f25f5d78ee904"
            ]
        ]
    },
    {
        "id": "b87eba4b7ea075fb",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "calculation logic",
        "func": "var inv_cap=flow.get(\"INV_CAPACITY\");\nvar array=[]\n var Total_exp_WR1=0\n var Total_exp_WR2=0\n var Total_exp_WR3=0\n var Total_exp_WR4=0\n var Total_exp_WR5=0\n var Total_exp_WR6=0\n var Total_exp_WR7=0\n var Total_exp_WR8=0\n var Total_exp_WR9=0\n var Total_exp_WR10=0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR13 = 0\nvar Total_exp_WR14 = 0\nvar Total_exp_WR15 = 0\nvar Total_exp_WR16 = 0\nvar Total_exp_WR17 = 0\nvar Total_exp_WR18 = 0\nvar Total_exp_WR19 = 0\nvar Total_exp_WR20 = 0\nvar Total_exp_WR21 = 0\nvar Total_exp_WR22 = 0\nvar Total_exp_WR23 = 0\nvar Total_exp_WR24 = 0\nvar Total_exp_WR25 = 0\nvar Total_exp_WR26 = 0\nvar Total_exp_WR27 = 0\nvar Total_exp_WR28 = 0\nvar Total_exp_WR29 = 0\nvar Total_exp_WR30 = 0\nvar Total_exp_WR31 = 0\nvar Total_exp_WR32 = 0\nvar Total_exp_WR33 = 0\nvar Total_exp_WR34 = 0\nvar Total_exp_WR35 = 0\nvar Total_exp_WR36 = 0\nvar Total_exp_WR37 = 0\nvar Total_exp_WR38 = 0\nvar Total_exp_WR39 = 0\nvar Total_exp_WR40 = 0\nvar Total_exp_WR41 = 0\nvar Total_exp_WR42 = 0\nvar Total_exp_WR43 = 0\nvar Total_exp_WR44 = 0\nvar Total_exp_WR45 = 0\nvar Total_exp_WR46 = 0\nvar Total_exp_WR47 = 0\nvar Total_exp_WR48 = 0\nvar Total_exp_WR49 = 0\nvar Total_exp_WR50 = 0\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4=0\nvar Total_ACT_WR5=0\nvar Total_ACT_WR6=0\nvar Total_ACT_WR7=0\nvar Total_ACT_WR8=0\nvar Total_ACT_WR9=0\nvar Total_ACT_WR10=0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR13 = 0\nvar Total_ACT_WR14 = 0\nvar Total_ACT_WR15 = 0\nvar Total_ACT_WR16 = 0\nvar Total_ACT_WR17 = 0\nvar Total_ACT_WR18 = 0\nvar Total_ACT_WR19 = 0\nvar Total_ACT_WR20 = 0\nvar Total_ACT_WR21 = 0\nvar Total_ACT_WR22 = 0\nvar Total_ACT_WR23 = 0\nvar Total_ACT_WR24 = 0\nvar Total_ACT_WR25 = 0\nvar Total_ACT_WR26 = 0\nvar Total_ACT_WR27 = 0\nvar Total_ACT_WR28 = 0\nvar Total_ACT_WR29 = 0\nvar Total_ACT_WR30 = 0\nvar Total_ACT_WR31 = 0\nvar Total_ACT_WR32 = 0\nvar Total_ACT_WR33 = 0\nvar Total_ACT_WR34 = 0\nvar Total_ACT_WR35 = 0\nvar Total_ACT_WR36 = 0\nvar Total_ACT_WR37 = 0\nvar Total_ACT_WR38 = 0\nvar Total_ACT_WR39 = 0\nvar Total_ACT_WR40 = 0\nvar Total_ACT_WR41 = 0\nvar Total_ACT_WR42 = 0\nvar Total_ACT_WR43 = 0\nvar Total_ACT_WR44 = 0\nvar Total_ACT_WR45 = 0\nvar Total_ACT_WR46 = 0\nvar Total_ACT_WR47 = 0\nvar Total_ACT_WR48 = 0\nvar Total_ACT_WR49 = 0\nvar Total_ACT_WR50 = 0\n\nvar Total_gen_loss_WR1=0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4=0\nvar Total_gen_loss_WR5=0\nvar Total_gen_loss_WR6=0\nvar Total_gen_loss_WR7=0\nvar Total_gen_loss_WR8=0\nvar Total_gen_loss_WR9=0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR13 = 0\nvar Total_gen_loss_WR14 = 0\nvar Total_gen_loss_WR15 = 0\nvar Total_gen_loss_WR16 = 0\nvar Total_gen_loss_WR17 = 0\nvar Total_gen_loss_WR18 = 0\nvar Total_gen_loss_WR19 = 0\nvar Total_gen_loss_WR20 = 0\nvar Total_gen_loss_WR21 = 0\nvar Total_gen_loss_WR22 = 0\nvar Total_gen_loss_WR23 = 0\nvar Total_gen_loss_WR24 = 0\nvar Total_gen_loss_WR25 = 0\nvar Total_gen_loss_WR26 = 0\nvar Total_gen_loss_WR27 = 0\nvar Total_gen_loss_WR28 = 0\nvar Total_gen_loss_WR29 = 0\nvar Total_gen_loss_WR30 = 0\nvar Total_gen_loss_WR31 = 0\nvar Total_gen_loss_WR32 = 0\nvar Total_gen_loss_WR33 = 0\nvar Total_gen_loss_WR34 = 0\nvar Total_gen_loss_WR35 = 0\nvar Total_gen_loss_WR36 = 0\nvar Total_gen_loss_WR37 = 0\nvar Total_gen_loss_WR38 = 0\nvar Total_gen_loss_WR39 = 0\nvar Total_gen_loss_WR40 = 0\nvar Total_gen_loss_WR41 = 0\nvar Total_gen_loss_WR42 = 0\nvar Total_gen_loss_WR43 = 0\nvar Total_gen_loss_WR44 = 0\nvar Total_gen_loss_WR45 = 0\nvar Total_gen_loss_WR46 = 0\nvar Total_gen_loss_WR47 = 0\nvar Total_gen_loss_WR48 = 0\nvar Total_gen_loss_WR49 = 0\nvar Total_gen_loss_WR50 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++)\n{  if(i<msg.payload.length){\n    var DATE = msg.payload[i].date\n    var WR_1_kwh = (msg.payload[i].WR1)/1000 \n    var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_1(kWh / kWp)\"] \n    var WR_2_kwh = (msg.payload[i].WR2)/1000 \n    var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_2(kWh / kWp)\"] \n    var WR_3_kwh = (msg.payload[i].WR3)/1000 \n    var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_3(kWh / kWp)\"] \n    var WR_4_kwh = (msg.payload[i].WR4)/1000 \n    var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_4(kWh / kWp)\"] \n    var WR_5_kwh = (msg.payload[i].WR5)/1000 \n    var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_5(kWh / kWp)\"] \n    var WR_6_kwh = (msg.payload[i].WR6)/1000 \n    var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_6(kWh / kWp)\"] \n    var WR_7_kwh = (msg.payload[i].WR7)/1000 \n    var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_7(kWh / kWp)\"] \n    var WR_8_kwh = (msg.payload[i].WR8)/1000 \n    var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_8(kWh / kWp)\"] \n    var WR_9_kwh = (msg.payload[i].WR9)/1000 \n    var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_9(kWh / kWp)\"] \n    var WR_10_kwh = (msg.payload[i].WR10)/1000 \n    var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_10(kWh / kWp)\"] \n    var WR_11_kwh = (msg.payload[i].WR11) / 1000\n    var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_11(kWh / kWp)\"]\n    var WR_12_kwh = (msg.payload[i].WR12) / 1000\n    var WR_12_Sp_Y = msg.payload[i][\"Specific Yield_12(kWh / kWp)\"]\n    var WR_13_kwh = (msg.payload[i].WR13) / 1000\n    var WR_13_Sp_Y = msg.payload[i][\"Specific Yield_13(kWh / kWp)\"]\n    var WR_14_kwh = (msg.payload[i].WR14) / 1000\n    var WR_14_Sp_Y = msg.payload[i][\"Specific Yield_14(kWh / kWp)\"]\n    var WR_15_kwh = (msg.payload[i].WR15) / 1000\n    var WR_15_Sp_Y = msg.payload[i][\"Specific Yield_15(kWh / kWp)\"]\n    var WR_16_kwh = (msg.payload[i].WR16) / 1000\n    var WR_16_Sp_Y = msg.payload[i][\"Specific Yield_16(kWh / kWp)\"]\n    var WR_17_kwh = (msg.payload[i].WR17) / 1000\n    var WR_17_Sp_Y = msg.payload[i][\"Specific Yield_17(kWh / kWp)\"]\n    var WR_18_kwh = (msg.payload[i].WR18) / 1000\n    var WR_18_Sp_Y = msg.payload[i][\"Specific Yield_18(kWh / kWp)\"]\n    var WR_19_kwh = (msg.payload[i].WR19) / 1000\n    var WR_19_Sp_Y = msg.payload[i][\"Specific Yield_19(kWh / kWp)\"]\n    var WR_20_kwh = (msg.payload[i].WR20) / 1000\n    var WR_20_Sp_Y = msg.payload[i][\"Specific Yield_20(kWh / kWp)\"] \n    var WR_21_kwh = (msg.payload[i].WR21) / 1000\n    var WR_21_Sp_Y = msg.payload[i][\"Specific Yield_21(kWh / kWp)\"]\n    var WR_22_kwh = (msg.payload[i].WR22) / 1000\n    var WR_22_Sp_Y = msg.payload[i][\"Specific Yield_22(kWh / kWp)\"]\n    var WR_23_kwh = (msg.payload[i].WR23) / 1000\n    var WR_23_Sp_Y = msg.payload[i][\"Specific Yield_23(kWh / kWp)\"]\n    var WR_24_kwh = (msg.payload[i].WR24) / 1000\n    var WR_24_Sp_Y = msg.payload[i][\"Specific Yield_24(kWh / kWp)\"]\n    var WR_25_kwh = (msg.payload[i].WR25) / 1000\n    var WR_25_Sp_Y = msg.payload[i][\"Specific Yield_25(kWh / kWp)\"]\n    var WR_26_kwh = (msg.payload[i].WR26) / 1000\n    var WR_26_Sp_Y = msg.payload[i][\"Specific Yield_26(kWh / kWp)\"]\n    var WR_27_kwh = (msg.payload[i].WR27) / 1000\n    var WR_27_Sp_Y = msg.payload[i][\"Specific Yield_27(kWh / kWp)\"]\n    var WR_28_kwh = (msg.payload[i].WR28) / 1000\n    var WR_28_Sp_Y = msg.payload[i][\"Specific Yield_28(kWh / kWp)\"]\n    var WR_29_kwh = (msg.payload[i].WR29) / 1000\n    var WR_29_Sp_Y = msg.payload[i][\"Specific Yield_29(kWh / kWp)\"]\n    var WR_30_kwh = (msg.payload[i].WR30) / 1000\n    var WR_30_Sp_Y = msg.payload[i][\"Specific Yield_30(kWh / kWp)\"] \n    var WR_31_kwh = (msg.payload[i].WR31) / 1000\n    var WR_31_Sp_Y = msg.payload[i][\"Specific Yield_31(kWh / kWp)\"]\n    var WR_32_kwh = (msg.payload[i].WR32) / 1000\n    var WR_32_Sp_Y = msg.payload[i][\"Specific Yield_32(kWh / kWp)\"]\n    var WR_33_kwh = (msg.payload[i].WR33) / 1000\n    var WR_33_Sp_Y = msg.payload[i][\"Specific Yield_33(kWh / kWp)\"]\n    var WR_34_kwh = (msg.payload[i].WR34) / 1000\n    var WR_34_Sp_Y = msg.payload[i][\"Specific Yield_34(kWh / kWp)\"]\n    var WR_35_kwh = (msg.payload[i].WR35) / 1000\n    var WR_35_Sp_Y = msg.payload[i][\"Specific Yield_35(kWh / kWp)\"]\n    var WR_36_kwh = (msg.payload[i].WR36) / 1000\n    var WR_36_Sp_Y = msg.payload[i][\"Specific Yield_36(kWh / kWp)\"]\n    var WR_37_kwh = (msg.payload[i].WR37) / 1000\n    var WR_37_Sp_Y = msg.payload[i][\"Specific Yield_37(kWh / kWp)\"]\n    var WR_38_kwh = (msg.payload[i].WR38) / 1000\n    var WR_38_Sp_Y = msg.payload[i][\"Specific Yield_38(kWh / kWp)\"]\n    var WR_39_kwh = (msg.payload[i].WR39) / 1000\n    var WR_39_Sp_Y = msg.payload[i][\"Specific Yield_39(kWh / kWp)\"]\n    var WR_40_kwh = (msg.payload[i].WR40) / 1000\n    var WR_40_Sp_Y = msg.payload[i][\"Specific Yield_40(kWh / kWp)\"] \n    var WR_41_kwh = (msg.payload[i].WR41) / 1000\n    var WR_41_Sp_Y = msg.payload[i][\"Specific Yield_41(kWh / kWp)\"]\n    var WR_42_kwh = (msg.payload[i].WR42) / 1000\n    var WR_42_Sp_Y = msg.payload[i][\"Specific Yield_42(kWh / kWp)\"]\n    var WR_43_kwh = (msg.payload[i].WR43) / 1000\n    var WR_43_Sp_Y = msg.payload[i][\"Specific Yield_43(kWh / kWp)\"]\n    var WR_44_kwh = (msg.payload[i].WR44) / 1000\n    var WR_44_Sp_Y = msg.payload[i][\"Specific Yield_44(kWh / kWp)\"]\n    var WR_45_kwh = (msg.payload[i].WR45) / 1000\n    var WR_45_Sp_Y = msg.payload[i][\"Specific Yield_45(kWh / kWp)\"]\n    var WR_46_kwh = (msg.payload[i].WR46) / 1000\n    var WR_46_Sp_Y = msg.payload[i][\"Specific Yield_46(kWh / kWp)\"]\n    var WR_47_kwh = (msg.payload[i].WR47) / 1000\n    var WR_47_Sp_Y = msg.payload[i][\"Specific Yield_47(kWh / kWp)\"]\n    var WR_48_kwh = (msg.payload[i].WR48) / 1000\n    var WR_48_Sp_Y = msg.payload[i][\"Specific Yield_48(kWh / kWp)\"]\n    var WR_49_kwh = (msg.payload[i].WR49) / 1000\n    var WR_49_Sp_Y = msg.payload[i][\"Specific Yield_49(kWh / kWp)\"]\n    var WR_50_kwh = (msg.payload[i].WR50) / 1000\n    var WR_50_Sp_Y = msg.payload[i][\"Specific Yield_50(kWh / kWp)\"] \n    \n\n    var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n        WR_11_Sp_Y || 0, WR_12_Sp_Y || 0, WR_13_Sp_Y || 0, WR_14_Sp_Y || 0, WR_15_Sp_Y || 0, WR_16_Sp_Y || 0, WR_17_Sp_Y || 0, WR_18_Sp_Y || 0, WR_19_Sp_Y || 0, WR_20_Sp_Y || 0,\n        WR_21_Sp_Y || 0, WR_22_Sp_Y || 0, WR_23_Sp_Y || 0, WR_24_Sp_Y || 0, WR_25_Sp_Y || 0, WR_26_Sp_Y || 0, WR_27_Sp_Y || 0, WR_28_Sp_Y || 0, WR_29_Sp_Y || 0, WR_30_Sp_Y || 0,\n        WR_31_Sp_Y || 0, WR_32_Sp_Y || 0, WR_33_Sp_Y || 0, WR_34_Sp_Y || 0, WR_35_Sp_Y || 0, WR_36_Sp_Y || 0, WR_37_Sp_Y || 0, WR_38_Sp_Y || 0, WR_39_Sp_Y || 0, WR_40_Sp_Y || 0,\n        WR_41_Sp_Y || 0, WR_42_Sp_Y || 0, WR_43_Sp_Y || 0, WR_44_Sp_Y || 0, WR_45_Sp_Y || 0, WR_46_Sp_Y || 0, WR_47_Sp_Y || 0, WR_48_Sp_Y || 0, WR_49_Sp_Y || 0, WR_50_Sp_Y || 0)\n\n    var WR1_INV_CAPACITY=inv_cap[0]\n    var WR2_INV_CAPACITY = inv_cap[1]\n    var WR3_INV_CAPACITY = inv_cap[2]\n    var WR4_INV_CAPACITY = inv_cap[3]\n    var WR5_INV_CAPACITY = inv_cap[4]\n    var WR6_INV_CAPACITY = inv_cap[5]\n    var WR7_INV_CAPACITY = inv_cap[6]\n    var WR8_INV_CAPACITY = inv_cap[7]\n    var WR9_INV_CAPACITY = inv_cap[8]\n    var WR10_INV_CAPACITY = inv_cap[9]\n    var WR11_INV_CAPACITY = inv_cap[10]\n    var WR12_INV_CAPACITY = inv_cap[11]\n    var WR13_INV_CAPACITY = inv_cap[12]\n    var WR14_INV_CAPACITY = inv_cap[13]\n    var WR15_INV_CAPACITY = inv_cap[14]\n    var WR16_INV_CAPACITY = inv_cap[15]\n    var WR17_INV_CAPACITY = inv_cap[16]\n    var WR18_INV_CAPACITY = inv_cap[17]\n    var WR19_INV_CAPACITY = inv_cap[18]\n    var WR20_INV_CAPACITY = inv_cap[19]\n    var WR21_INV_CAPACITY = inv_cap[20]\n    var WR22_INV_CAPACITY = inv_cap[21]\n    var WR23_INV_CAPACITY = inv_cap[22]\n    var WR24_INV_CAPACITY = inv_cap[23]\n    var WR25_INV_CAPACITY = inv_cap[24]\n    var WR26_INV_CAPACITY = inv_cap[25]\n    var WR27_INV_CAPACITY = inv_cap[26]\n    var WR28_INV_CAPACITY = inv_cap[27]\n    var WR29_INV_CAPACITY = inv_cap[28]\n    var WR30_INV_CAPACITY = inv_cap[29]\n    var WR31_INV_CAPACITY = inv_cap[30]\n    var WR32_INV_CAPACITY = inv_cap[31]\n    var WR33_INV_CAPACITY = inv_cap[32]\n    var WR34_INV_CAPACITY = inv_cap[33]\n    var WR35_INV_CAPACITY = inv_cap[34]\n    var WR36_INV_CAPACITY = inv_cap[35]\n    var WR37_INV_CAPACITY = inv_cap[36]\n    var WR38_INV_CAPACITY = inv_cap[37]\n    var WR39_INV_CAPACITY = inv_cap[38]\n    var WR40_INV_CAPACITY = inv_cap[39]\n    var WR41_INV_CAPACITY = inv_cap[40]\n    var WR42_INV_CAPACITY = inv_cap[41]\n    var WR43_INV_CAPACITY = inv_cap[42]\n    var WR44_INV_CAPACITY = inv_cap[43]\n    var WR45_INV_CAPACITY = inv_cap[44]\n    var WR46_INV_CAPACITY = inv_cap[45]\n    var WR47_INV_CAPACITY = inv_cap[46]\n    var WR48_INV_CAPACITY = inv_cap[47]\n    var WR49_INV_CAPACITY = inv_cap[48]\n    var WR50_INV_CAPACITY = inv_cap[49]\n\n    var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n    var Expected_gen_WR2 =Max_sy * WR2_INV_CAPACITY\n    var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n    var Expected_gen_WR4= Max_sy * WR4_INV_CAPACITY\n    var Expected_gen_WR5= Max_sy * WR5_INV_CAPACITY\n    var Expected_gen_WR6= Max_sy * WR6_INV_CAPACITY\n    var Expected_gen_WR7= Max_sy * WR7_INV_CAPACITY\n    var Expected_gen_WR8= Max_sy * WR8_INV_CAPACITY\n    var Expected_gen_WR9= Max_sy * WR9_INV_CAPACITY\n    var Expected_gen_WR10= Max_sy * WR10_INV_CAPACITY\n    var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n    var Expected_gen_WR12 = Max_sy * WR12_INV_CAPACITY\n    var Expected_gen_WR13 = Max_sy * WR13_INV_CAPACITY\n    var Expected_gen_WR14 = Max_sy * WR14_INV_CAPACITY\n    var Expected_gen_WR15 = Max_sy * WR15_INV_CAPACITY\n    var Expected_gen_WR16 = Max_sy * WR16_INV_CAPACITY\n    var Expected_gen_WR17 = Max_sy * WR17_INV_CAPACITY\n    var Expected_gen_WR18 = Max_sy * WR18_INV_CAPACITY\n    var Expected_gen_WR19 = Max_sy * WR19_INV_CAPACITY\n    var Expected_gen_WR20 = Max_sy * WR20_INV_CAPACITY\n    var Expected_gen_WR21 = Max_sy * WR21_INV_CAPACITY\n    var Expected_gen_WR22 = Max_sy * WR22_INV_CAPACITY\n    var Expected_gen_WR23 = Max_sy * WR23_INV_CAPACITY\n    var Expected_gen_WR24 = Max_sy * WR24_INV_CAPACITY\n    var Expected_gen_WR25 = Max_sy * WR25_INV_CAPACITY\n    var Expected_gen_WR26 = Max_sy * WR26_INV_CAPACITY\n    var Expected_gen_WR27 = Max_sy * WR27_INV_CAPACITY\n    var Expected_gen_WR28 = Max_sy * WR28_INV_CAPACITY\n    var Expected_gen_WR29 = Max_sy * WR29_INV_CAPACITY\n    var Expected_gen_WR30 = Max_sy * WR30_INV_CAPACITY\n    var Expected_gen_WR31 = Max_sy * WR31_INV_CAPACITY\n    var Expected_gen_WR32 = Max_sy * WR32_INV_CAPACITY\n    var Expected_gen_WR33 = Max_sy * WR33_INV_CAPACITY\n    var Expected_gen_WR34 = Max_sy * WR34_INV_CAPACITY\n    var Expected_gen_WR35 = Max_sy * WR35_INV_CAPACITY\n    var Expected_gen_WR36 = Max_sy * WR36_INV_CAPACITY\n    var Expected_gen_WR37 = Max_sy * WR37_INV_CAPACITY\n    var Expected_gen_WR38 = Max_sy * WR38_INV_CAPACITY\n    var Expected_gen_WR39 = Max_sy * WR39_INV_CAPACITY\n    var Expected_gen_WR40 = Max_sy * WR40_INV_CAPACITY\n    var Expected_gen_WR41 = Max_sy * WR41_INV_CAPACITY\n    var Expected_gen_WR42 = Max_sy * WR42_INV_CAPACITY\n    var Expected_gen_WR43 = Max_sy * WR43_INV_CAPACITY\n    var Expected_gen_WR44 = Max_sy * WR44_INV_CAPACITY\n    var Expected_gen_WR45 = Max_sy * WR45_INV_CAPACITY\n    var Expected_gen_WR46 = Max_sy * WR46_INV_CAPACITY\n    var Expected_gen_WR47 = Max_sy * WR47_INV_CAPACITY\n    var Expected_gen_WR48 = Max_sy * WR48_INV_CAPACITY\n    var Expected_gen_WR49 = Max_sy * WR49_INV_CAPACITY\n    var Expected_gen_WR50 = Max_sy * WR50_INV_CAPACITY\n\n    Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n    Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n    Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n    Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n    Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n    Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n    Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n    Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n    Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n    Total_exp_WR10= Total_exp_WR10 + Expected_gen_WR10\n    Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n    Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n    Total_exp_WR13 = Total_exp_WR13 + Expected_gen_WR13\n    Total_exp_WR14 = Total_exp_WR14 + Expected_gen_WR14\n    Total_exp_WR15 = Total_exp_WR15 + Expected_gen_WR15\n    Total_exp_WR16 = Total_exp_WR16 + Expected_gen_WR16\n    Total_exp_WR17 = Total_exp_WR17 + Expected_gen_WR17\n    Total_exp_WR18 = Total_exp_WR18 + Expected_gen_WR18\n    Total_exp_WR19 = Total_exp_WR19 + Expected_gen_WR19\n    Total_exp_WR20 = Total_exp_WR20 + Expected_gen_WR20\n    Total_exp_WR21 = Total_exp_WR21 + Expected_gen_WR21\n    Total_exp_WR22 = Total_exp_WR22 + Expected_gen_WR22\n    Total_exp_WR23 = Total_exp_WR23 + Expected_gen_WR23\n    Total_exp_WR24 = Total_exp_WR24 + Expected_gen_WR24\n    Total_exp_WR25 = Total_exp_WR25 + Expected_gen_WR25\n    Total_exp_WR26 = Total_exp_WR26 + Expected_gen_WR26\n    Total_exp_WR27 = Total_exp_WR27 + Expected_gen_WR27\n    Total_exp_WR28 = Total_exp_WR28 + Expected_gen_WR28\n    Total_exp_WR29 = Total_exp_WR29 + Expected_gen_WR29\n    Total_exp_WR30 = Total_exp_WR30 + Expected_gen_WR30\n    Total_exp_WR31 = Total_exp_WR31 + Expected_gen_WR31\n    Total_exp_WR32 = Total_exp_WR32 + Expected_gen_WR32\n    Total_exp_WR33 = Total_exp_WR33 + Expected_gen_WR33\n    Total_exp_WR34 = Total_exp_WR34 + Expected_gen_WR34\n    Total_exp_WR35 = Total_exp_WR35 + Expected_gen_WR35\n    Total_exp_WR36 = Total_exp_WR36 + Expected_gen_WR36\n    Total_exp_WR37 = Total_exp_WR37 + Expected_gen_WR37\n    Total_exp_WR38 = Total_exp_WR38 + Expected_gen_WR38\n    Total_exp_WR39 = Total_exp_WR39 + Expected_gen_WR39\n    Total_exp_WR40 = Total_exp_WR40 + Expected_gen_WR40\n    Total_exp_WR41 = Total_exp_WR41 + Expected_gen_WR41\n    Total_exp_WR42 = Total_exp_WR42 + Expected_gen_WR42\n    Total_exp_WR43 = Total_exp_WR43 + Expected_gen_WR43\n    Total_exp_WR44 = Total_exp_WR44 + Expected_gen_WR44\n    Total_exp_WR45 = Total_exp_WR45 + Expected_gen_WR45\n    Total_exp_WR46 = Total_exp_WR46 + Expected_gen_WR46\n    Total_exp_WR47 = Total_exp_WR47 + Expected_gen_WR47\n    Total_exp_WR48 = Total_exp_WR48 + Expected_gen_WR48\n    Total_exp_WR49 = Total_exp_WR49 + Expected_gen_WR49\n    Total_exp_WR50 = Total_exp_WR50 + Expected_gen_WR50\n\n    Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n    Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n    Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n    Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n    Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n    Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n    Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n    Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n    Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n    Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n    Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n    Total_ACT_WR12 = Total_ACT_WR12 + WR_12_kwh\n    Total_ACT_WR13 = Total_ACT_WR13 + WR_13_kwh\n    Total_ACT_WR14 = Total_ACT_WR14 + WR_14_kwh\n    Total_ACT_WR15 = Total_ACT_WR15 + WR_15_kwh\n    Total_ACT_WR16 = Total_ACT_WR16 + WR_16_kwh\n    Total_ACT_WR17 = Total_ACT_WR17 + WR_17_kwh\n    Total_ACT_WR18 = Total_ACT_WR18 + WR_18_kwh\n    Total_ACT_WR19 = Total_ACT_WR19 + WR_19_kwh\n    Total_ACT_WR20 = Total_ACT_WR20 + WR_20_kwh\n    Total_ACT_WR21 = Total_ACT_WR21 + WR_21_kwh\n    Total_ACT_WR22 = Total_ACT_WR22 + WR_22_kwh\n    Total_ACT_WR23 = Total_ACT_WR23 + WR_23_kwh\n    Total_ACT_WR24 = Total_ACT_WR24 + WR_24_kwh\n    Total_ACT_WR25 = Total_ACT_WR25 + WR_25_kwh\n    Total_ACT_WR26 = Total_ACT_WR26 + WR_26_kwh\n    Total_ACT_WR27 = Total_ACT_WR27 + WR_27_kwh\n    Total_ACT_WR28 = Total_ACT_WR28 + WR_28_kwh\n    Total_ACT_WR29 = Total_ACT_WR29 + WR_29_kwh\n    Total_ACT_WR30 = Total_ACT_WR30 + WR_30_kwh\n    Total_ACT_WR31 = Total_ACT_WR31 + WR_31_kwh\n    Total_ACT_WR32 = Total_ACT_WR32 + WR_32_kwh\n    Total_ACT_WR33 = Total_ACT_WR33 + WR_33_kwh\n    Total_ACT_WR34 = Total_ACT_WR34 + WR_34_kwh\n    Total_ACT_WR35 = Total_ACT_WR35 + WR_35_kwh\n    Total_ACT_WR36 = Total_ACT_WR36 + WR_36_kwh\n    Total_ACT_WR37 = Total_ACT_WR37 + WR_37_kwh\n    Total_ACT_WR38 = Total_ACT_WR38 + WR_38_kwh\n    Total_ACT_WR39 = Total_ACT_WR39 + WR_39_kwh\n    Total_ACT_WR40 = Total_ACT_WR40 + WR_40_kwh\n    Total_ACT_WR41 = Total_ACT_WR41 + WR_41_kwh\n    Total_ACT_WR42 = Total_ACT_WR42 + WR_42_kwh\n    Total_ACT_WR43 = Total_ACT_WR43 + WR_43_kwh\n    Total_ACT_WR44 = Total_ACT_WR44 + WR_44_kwh\n    Total_ACT_WR45 = Total_ACT_WR45 + WR_45_kwh\n    Total_ACT_WR46 = Total_ACT_WR46 + WR_46_kwh\n    Total_ACT_WR47 = Total_ACT_WR47 + WR_47_kwh\n    Total_ACT_WR48 = Total_ACT_WR48 + WR_48_kwh\n    Total_ACT_WR49 = Total_ACT_WR49 + WR_49_kwh\n    Total_ACT_WR50 = Total_ACT_WR50 + WR_50_kwh\n    \n    if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n    if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n    if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n    if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n    if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n    if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n    if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n    if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n    if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n    if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n    if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n    if ((Expected_gen_WR12 != WR_12_kwh) || (WR_12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR_12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n    if ((Expected_gen_WR13 != WR_13_kwh) || (WR_13_kwh == 0)) { var GEN_LOSS_WR13 = (Expected_gen_WR13 - WR_13_kwh) } else { GEN_LOSS_WR13 = \"0\" }\n    if ((Expected_gen_WR14 != WR_14_kwh) || (WR_14_kwh == 0)) { var GEN_LOSS_WR14 = (Expected_gen_WR14 - WR_14_kwh) } else { GEN_LOSS_WR14 = \"0\" }\n    if ((Expected_gen_WR15 != WR_15_kwh) || (WR_15_kwh == 0)) { var GEN_LOSS_WR15 = (Expected_gen_WR15 - WR_15_kwh) } else { GEN_LOSS_WR15 = \"0\" }\n    if ((Expected_gen_WR16 != WR_16_kwh) || (WR_16_kwh == 0)) { var GEN_LOSS_WR16 = (Expected_gen_WR16 - WR_16_kwh) } else { GEN_LOSS_WR16 = \"0\" }\n    if ((Expected_gen_WR17 != WR_17_kwh) || (WR_17_kwh == 0)) { var GEN_LOSS_WR17 = (Expected_gen_WR17 - WR_17_kwh) } else { GEN_LOSS_WR17 = \"0\" }\n    if ((Expected_gen_WR18 != WR_18_kwh) || (WR_18_kwh == 0)) { var GEN_LOSS_WR18 = (Expected_gen_WR18 - WR_18_kwh) } else { GEN_LOSS_WR18 = \"0\" }\n    if ((Expected_gen_WR19 != WR_19_kwh) || (WR_19_kwh == 0)) { var GEN_LOSS_WR19 = (Expected_gen_WR19 - WR_19_kwh) } else { GEN_LOSS_WR19 = \"0\" }\n    if ((Expected_gen_WR20 != WR_20_kwh) || (WR_20_kwh == 0)) { var GEN_LOSS_WR20 = (Expected_gen_WR10 - WR_20_kwh) } else { GEN_LOSS_WR20 = \"0\" }\n    if ((Expected_gen_WR21 != WR_21_kwh) || (WR_21_kwh == 0)) { var GEN_LOSS_WR21 = (Expected_gen_WR21 - WR_21_kwh) } else { GEN_LOSS_WR21 = \"0\" }\n    if ((Expected_gen_WR22 != WR_22_kwh) || (WR_22_kwh == 0)) { var GEN_LOSS_WR22 = (Expected_gen_WR22 - WR_22_kwh) } else { GEN_LOSS_WR22 = \"0\" }\n    if ((Expected_gen_WR23 != WR_23_kwh) || (WR_23_kwh == 0)) { var GEN_LOSS_WR23 = (Expected_gen_WR23 - WR_23_kwh) } else { GEN_LOSS_WR23 = \"0\" }\n    if ((Expected_gen_WR24 != WR_24_kwh) || (WR_24_kwh == 0)) { var GEN_LOSS_WR24 = (Expected_gen_WR24 - WR_24_kwh) } else { GEN_LOSS_WR24 = \"0\" }\n    if ((Expected_gen_WR25 != WR_25_kwh) || (WR_25_kwh == 0)) { var GEN_LOSS_WR25 = (Expected_gen_WR25 - WR_25_kwh) } else { GEN_LOSS_WR25 = \"0\" }\n    if ((Expected_gen_WR26 != WR_26_kwh) || (WR_26_kwh == 0)) { var GEN_LOSS_WR26 = (Expected_gen_WR26 - WR_26_kwh) } else { GEN_LOSS_WR26 = \"0\" }\n    if ((Expected_gen_WR27 != WR_27_kwh) || (WR_27_kwh == 0)) { var GEN_LOSS_WR27 = (Expected_gen_WR27 - WR_27_kwh) } else { GEN_LOSS_WR27 = \"0\" }\n    if ((Expected_gen_WR28 != WR_28_kwh) || (WR_28_kwh == 0)) { var GEN_LOSS_WR28 = (Expected_gen_WR28 - WR_28_kwh) } else { GEN_LOSS_WR28 = \"0\" }\n    if ((Expected_gen_WR29 != WR_29_kwh) || (WR_29_kwh == 0)) { var GEN_LOSS_WR29 = (Expected_gen_WR29 - WR_29_kwh) } else { GEN_LOSS_WR29 = \"0\" }\n    if ((Expected_gen_WR30 != WR_30_kwh) || (WR_30_kwh == 0)) { var GEN_LOSS_WR30 = (Expected_gen_WR30 - WR_30_kwh) } else { GEN_LOSS_WR30 = \"0\" }\n    if ((Expected_gen_WR31 != WR_31_kwh) || (WR_31_kwh == 0)) { var GEN_LOSS_WR31 = (Expected_gen_WR31 - WR_31_kwh) } else { GEN_LOSS_WR31 = \"0\" }\n    if ((Expected_gen_WR32 != WR_32_kwh) || (WR_32_kwh == 0)) { var GEN_LOSS_WR32 = (Expected_gen_WR32 - WR_32_kwh) } else { GEN_LOSS_WR32 = \"0\" }\n    if ((Expected_gen_WR33 != WR_33_kwh) || (WR_33_kwh == 0)) { var GEN_LOSS_WR33 = (Expected_gen_WR33 - WR_33_kwh) } else { GEN_LOSS_WR33 = \"0\" }\n    if ((Expected_gen_WR34 != WR_34_kwh) || (WR_34_kwh == 0)) { var GEN_LOSS_WR34 = (Expected_gen_WR34 - WR_34_kwh) } else { GEN_LOSS_WR34 = \"0\" }\n    if ((Expected_gen_WR35 != WR_35_kwh) || (WR_35_kwh == 0)) { var GEN_LOSS_WR35 = (Expected_gen_WR35 - WR_35_kwh) } else { GEN_LOSS_WR35 = \"0\" }\n    if ((Expected_gen_WR36 != WR_36_kwh) || (WR_36_kwh == 0)) { var GEN_LOSS_WR36 = (Expected_gen_WR36 - WR_36_kwh) } else { GEN_LOSS_WR36 = \"0\" }\n    if ((Expected_gen_WR37 != WR_37_kwh) || (WR_37_kwh == 0)) { var GEN_LOSS_WR37 = (Expected_gen_WR37 - WR_37_kwh) } else { GEN_LOSS_WR37 = \"0\" }\n    if ((Expected_gen_WR38 != WR_38_kwh) || (WR_38_kwh == 0)) { var GEN_LOSS_WR38 = (Expected_gen_WR38 - WR_38_kwh) } else { GEN_LOSS_WR38 = \"0\" }\n    if ((Expected_gen_WR39 != WR_39_kwh) || (WR_39_kwh == 0)) { var GEN_LOSS_WR39 = (Expected_gen_WR39 - WR_39_kwh) } else { GEN_LOSS_WR39 = \"0\" }\n    if ((Expected_gen_WR40 != WR_40_kwh) || (WR_40_kwh == 0)) { var GEN_LOSS_WR40 = (Expected_gen_WR40 - WR_40_kwh) } else { GEN_LOSS_WR40 = \"0\" }\n    if ((Expected_gen_WR41 != WR_41_kwh) || (WR_41_kwh == 0)) { var GEN_LOSS_WR41 = (Expected_gen_WR41 - WR_41_kwh) } else { GEN_LOSS_WR41 = \"0\" }\n    if ((Expected_gen_WR42 != WR_42_kwh) || (WR_42_kwh == 0)) { var GEN_LOSS_WR42 = (Expected_gen_WR42 - WR_42_kwh) } else { GEN_LOSS_WR42 = \"0\" }\n    if ((Expected_gen_WR43 != WR_43_kwh) || (WR_43_kwh == 0)) { var GEN_LOSS_WR43 = (Expected_gen_WR43 - WR_43_kwh) } else { GEN_LOSS_WR43 = \"0\" }\n    if ((Expected_gen_WR44 != WR_44_kwh) || (WR_44_kwh == 0)) { var GEN_LOSS_WR44 = (Expected_gen_WR44 - WR_44_kwh) } else { GEN_LOSS_WR44 = \"0\" }\n    if ((Expected_gen_WR45 != WR_45_kwh) || (WR_45_kwh == 0)) { var GEN_LOSS_WR45 = (Expected_gen_WR45 - WR_45_kwh) } else { GEN_LOSS_WR45 = \"0\" }\n    if ((Expected_gen_WR46 != WR_46_kwh) || (WR_46_kwh == 0)) { var GEN_LOSS_WR46 = (Expected_gen_WR46 - WR_46_kwh) } else { GEN_LOSS_WR46 = \"0\" }\n    if ((Expected_gen_WR47 != WR_47_kwh) || (WR_47_kwh == 0)) { var GEN_LOSS_WR47 = (Expected_gen_WR47 - WR_47_kwh) } else { GEN_LOSS_WR47 = \"0\" }\n    if ((Expected_gen_WR48 != WR_48_kwh) || (WR_48_kwh == 0)) { var GEN_LOSS_WR48 = (Expected_gen_WR48 - WR_48_kwh) } else { GEN_LOSS_WR48 = \"0\" }\n    if ((Expected_gen_WR49 != WR_49_kwh) || (WR_49_kwh == 0)) { var GEN_LOSS_WR49 = (Expected_gen_WR49 - WR_49_kwh) } else { GEN_LOSS_WR49 = \"0\" }\n    if ((Expected_gen_WR50 != WR_50_kwh) || (WR_50_kwh == 0)) { var GEN_LOSS_WR50 = (Expected_gen_WR50 - WR_50_kwh) } else { GEN_LOSS_WR50 = \"0\" }\n\n    Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n    Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n    Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n    Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n    Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n    Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n    Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n    Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n    Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n    Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n    Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n    Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR_12_kwh)\n    Total_gen_loss_WR13 = Total_gen_loss_WR13 + (Expected_gen_WR13 - WR_13_kwh)\n    Total_gen_loss_WR14 = Total_gen_loss_WR14 + (Expected_gen_WR14 - WR_14_kwh)\n    Total_gen_loss_WR15 = Total_gen_loss_WR15 + (Expected_gen_WR15 - WR_15_kwh)\n    Total_gen_loss_WR16 = Total_gen_loss_WR16 + (Expected_gen_WR16 - WR_16_kwh)\n    Total_gen_loss_WR17 = Total_gen_loss_WR17 + (Expected_gen_WR17 - WR_17_kwh)\n    Total_gen_loss_WR18 = Total_gen_loss_WR18 + (Expected_gen_WR18 - WR_18_kwh)\n    Total_gen_loss_WR19 = Total_gen_loss_WR19 + (Expected_gen_WR19 - WR_19_kwh)\n    Total_gen_loss_WR20 = Total_gen_loss_WR20 + (Expected_gen_WR20 - WR_20_kwh)\n    Total_gen_loss_WR21 = Total_gen_loss_WR21 + (Expected_gen_WR21 - WR_21_kwh)\n    Total_gen_loss_WR22 = Total_gen_loss_WR22 + (Expected_gen_WR22 - WR_22_kwh)\n    Total_gen_loss_WR23 = Total_gen_loss_WR23 + (Expected_gen_WR23 - WR_23_kwh)\n    Total_gen_loss_WR24 = Total_gen_loss_WR24 + (Expected_gen_WR24 - WR_24_kwh)\n    Total_gen_loss_WR25 = Total_gen_loss_WR25 + (Expected_gen_WR25 - WR_25_kwh)\n    Total_gen_loss_WR26 = Total_gen_loss_WR26 + (Expected_gen_WR26 - WR_26_kwh)\n    Total_gen_loss_WR27 = Total_gen_loss_WR27 + (Expected_gen_WR27 - WR_27_kwh)\n    Total_gen_loss_WR28 = Total_gen_loss_WR28 + (Expected_gen_WR28 - WR_28_kwh)\n    Total_gen_loss_WR29 = Total_gen_loss_WR29 + (Expected_gen_WR29 - WR_29_kwh)\n    Total_gen_loss_WR30 = Total_gen_loss_WR30 + (Expected_gen_WR30 - WR_30_kwh)\n    Total_gen_loss_WR31 = Total_gen_loss_WR31 + (Expected_gen_WR31 - WR_31_kwh)\n    Total_gen_loss_WR32 = Total_gen_loss_WR32 + (Expected_gen_WR32 - WR_32_kwh)\n    Total_gen_loss_WR33 = Total_gen_loss_WR33 + (Expected_gen_WR33 - WR_33_kwh)\n    Total_gen_loss_WR34 = Total_gen_loss_WR34 + (Expected_gen_WR34 - WR_34_kwh)\n    Total_gen_loss_WR35 = Total_gen_loss_WR35 + (Expected_gen_WR35 - WR_35_kwh)\n    Total_gen_loss_WR36 = Total_gen_loss_WR36 + (Expected_gen_WR36 - WR_36_kwh)\n    Total_gen_loss_WR37 = Total_gen_loss_WR37 + (Expected_gen_WR37 - WR_37_kwh)\n    Total_gen_loss_WR38 = Total_gen_loss_WR38 + (Expected_gen_WR38 - WR_38_kwh)\n    Total_gen_loss_WR39 = Total_gen_loss_WR39 + (Expected_gen_WR39 - WR_39_kwh)\n    Total_gen_loss_WR40 = Total_gen_loss_WR40 + (Expected_gen_WR40 - WR_40_kwh)\n    Total_gen_loss_WR41 = Total_gen_loss_WR41 + (Expected_gen_WR41 - WR_41_kwh)\n    Total_gen_loss_WR42 = Total_gen_loss_WR42 + (Expected_gen_WR42 - WR_42_kwh)\n    Total_gen_loss_WR43 = Total_gen_loss_WR43 + (Expected_gen_WR43 - WR_43_kwh)\n    Total_gen_loss_WR44 = Total_gen_loss_WR44 + (Expected_gen_WR44 - WR_44_kwh)\n    Total_gen_loss_WR45 = Total_gen_loss_WR45 + (Expected_gen_WR45 - WR_45_kwh)\n    Total_gen_loss_WR46 = Total_gen_loss_WR46 + (Expected_gen_WR46 - WR_46_kwh)\n    Total_gen_loss_WR47 = Total_gen_loss_WR47 + (Expected_gen_WR47 - WR_47_kwh)\n    Total_gen_loss_WR48 = Total_gen_loss_WR48 + (Expected_gen_WR48 - WR_48_kwh)\n    Total_gen_loss_WR49 = Total_gen_loss_WR49 + (Expected_gen_WR49 - WR_49_kwh)\n    Total_gen_loss_WR50 = Total_gen_loss_WR50 + (Expected_gen_WR50 - WR_50_kwh)\n\n\n    var total_act_gen = [Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10,\n                            , Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR13, Total_ACT_WR14, Total_ACT_WR15, Total_ACT_WR16, Total_ACT_WR17, Total_ACT_WR18, Total_ACT_WR19, Total_ACT_WR20\n                            , Total_ACT_WR21, Total_ACT_WR22, Total_ACT_WR23, Total_ACT_WR24, Total_ACT_WR25, Total_ACT_WR26, Total_ACT_WR27, Total_ACT_WR28, Total_ACT_WR29, Total_ACT_WR30\n                            , Total_ACT_WR31, Total_ACT_WR32, Total_ACT_WR33, Total_ACT_WR34, Total_ACT_WR35, Total_ACT_WR36, Total_ACT_WR37, Total_ACT_WR38, Total_ACT_WR39, Total_ACT_WR40\n                            , Total_ACT_WR41, Total_ACT_WR42, Total_ACT_WR43, Total_ACT_WR44, Total_ACT_WR45, Total_ACT_WR46, Total_ACT_WR47, Total_ACT_WR48, Total_ACT_WR49, Total_ACT_WR50]\n    var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10,\n                            , Total_exp_WR11, Total_exp_WR12, Total_exp_WR13, Total_exp_WR14, Total_exp_WR15, Total_exp_WR16, Total_exp_WR17, Total_exp_WR18, Total_exp_WR19, Total_exp_WR20\n                            , Total_exp_WR21, Total_exp_WR22, Total_exp_WR23, Total_exp_WR24, Total_exp_WR25, Total_exp_WR26, Total_exp_WR27, Total_exp_WR28, Total_exp_WR29, Total_exp_WR30\n                            , Total_exp_WR31, Total_exp_WR32, Total_exp_WR33, Total_exp_WR34, Total_exp_WR35, Total_exp_WR36, Total_exp_WR37, Total_exp_WR38, Total_exp_WR39, Total_exp_WR40\n                            , Total_exp_WR41, Total_exp_WR42, Total_exp_WR43, Total_exp_WR44, Total_exp_WR45, Total_exp_WR46, Total_exp_WR47, Total_exp_WR48, Total_exp_WR49, Total_exp_WR50]\n    var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10,\n                            , Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR13, Total_gen_loss_WR14, Total_gen_loss_WR15, Total_gen_loss_WR16, Total_gen_loss_WR17, Total_gen_loss_WR18, Total_gen_loss_WR19, Total_gen_loss_WR20\n                            , Total_gen_loss_WR21, Total_gen_loss_WR22, Total_gen_loss_WR23, Total_gen_loss_WR24, Total_gen_loss_WR25, Total_gen_loss_WR26, Total_gen_loss_WR27, Total_gen_loss_WR28, Total_gen_loss_WR29, Total_gen_loss_WR30\n                            , Total_gen_loss_WR31, Total_gen_loss_WR32, Total_gen_loss_WR33, Total_gen_loss_WR34, Total_gen_loss_WR35, Total_gen_loss_WR36, Total_gen_loss_WR37, Total_gen_loss_WR38, Total_gen_loss_WR39, Total_gen_loss_WR40\n                            , Total_gen_loss_WR41, Total_gen_loss_WR42, Total_gen_loss_WR43, Total_gen_loss_WR44, Total_gen_loss_WR45, Total_gen_loss_WR46, Total_gen_loss_WR47, Total_gen_loss_WR48, Total_gen_loss_WR49, Total_gen_loss_WR50]\n\n\n    obj = {\n        DATE,\n         WR_1_kwh,\n         WR_1_Sp_Y,\n         WR_2_kwh,\n         WR_2_Sp_Y,\n         WR_3_kwh,\n         WR_3_Sp_Y,\n         WR_4_kwh,\n         WR_4_Sp_Y,\n         WR_5_kwh,\n         WR_5_Sp_Y,\n         WR_6_kwh,\n         WR_6_Sp_Y,\n         WR_7_kwh,\n         WR_7_Sp_Y,\n         WR_8_kwh,\n         WR_8_Sp_Y,\n         WR_9_kwh,\n         WR_9_Sp_Y,\n         WR_10_kwh,\n         WR_10_Sp_Y,\n        WR_11_kwh,\n        WR_11_Sp_Y,\n        WR_12_kwh,\n        WR_12_Sp_Y,\n        WR_13_kwh,\n        WR_13_Sp_Y,\n        WR_14_kwh,\n        WR_14_Sp_Y,\n        WR_15_kwh,\n        WR_15_Sp_Y,\n        WR_16_kwh,\n        WR_16_Sp_Y,\n        WR_17_kwh,\n        WR_17_Sp_Y,\n        WR_18_kwh,\n        WR_18_Sp_Y,\n        WR_19_kwh,\n        WR_19_Sp_Y,\n        WR_20_kwh,\n        WR_20_Sp_Y,\n        WR_21_kwh,\n        WR_21_Sp_Y,\n        WR_22_kwh,\n        WR_22_Sp_Y,\n        WR_23_kwh,\n        WR_23_Sp_Y,\n        WR_24_kwh,\n        WR_24_Sp_Y,\n        WR_25_kwh,\n        WR_25_Sp_Y,\n        WR_26_kwh,\n        WR_26_Sp_Y,\n        WR_27_kwh,\n        WR_27_Sp_Y,\n        WR_28_kwh,\n        WR_28_Sp_Y,\n        WR_29_kwh,\n        WR_29_Sp_Y,\n        WR_30_kwh,\n        WR_30_Sp_Y,\n        WR_31_kwh,\n        WR_31_Sp_Y,\n        WR_32_kwh,\n        WR_32_Sp_Y,\n        WR_33_kwh,\n        WR_33_Sp_Y,\n        WR_34_kwh,\n        WR_34_Sp_Y,\n        WR_35_kwh,\n        WR_35_Sp_Y,\n        WR_36_kwh,\n        WR_36_Sp_Y,\n        WR_37_kwh,\n        WR_37_Sp_Y,\n        WR_38_kwh,\n        WR_38_Sp_Y,\n        WR_39_kwh,\n        WR_39_Sp_Y,\n        WR_40_kwh,\n        WR_40_Sp_Y,\n        WR_41_kwh,\n        WR_41_Sp_Y,\n        WR_42_kwh,\n        WR_42_Sp_Y,\n        WR_43_kwh,\n        WR_43_Sp_Y,\n        WR_44_kwh,\n        WR_44_Sp_Y,\n        WR_45_kwh,\n        WR_45_Sp_Y,\n        WR_46_kwh,\n        WR_46_Sp_Y,\n        WR_47_kwh,\n        WR_47_Sp_Y,\n        WR_48_kwh,\n        WR_48_Sp_Y,\n        WR_49_kwh,\n        WR_49_Sp_Y,\n        WR_50_kwh,\n        WR_50_Sp_Y,\n        Max_sy,\n        Expected_gen_WR1,\n        Expected_gen_WR2,\n        Expected_gen_WR3,\n        Expected_gen_WR4,\n        Expected_gen_WR5,\n        Expected_gen_WR6,\n        Expected_gen_WR7,\n        Expected_gen_WR8,\n        Expected_gen_WR9,\n        Expected_gen_WR10,\n        Expected_gen_WR11,\n        Expected_gen_WR12,\n        Expected_gen_WR13,\n        Expected_gen_WR14,\n        Expected_gen_WR15,\n        Expected_gen_WR16,\n        Expected_gen_WR17,\n        Expected_gen_WR18,\n        Expected_gen_WR19,\n        Expected_gen_WR20,\n        Expected_gen_WR21,\n        Expected_gen_WR22,\n        Expected_gen_WR23,\n        Expected_gen_WR24,\n        Expected_gen_WR25,\n        Expected_gen_WR26,\n        Expected_gen_WR27,\n        Expected_gen_WR28,\n        Expected_gen_WR29,\n        Expected_gen_WR30,\n        Expected_gen_WR31,\n        Expected_gen_WR32,\n        Expected_gen_WR33,\n        Expected_gen_WR34,\n        Expected_gen_WR35,\n        Expected_gen_WR36,\n        Expected_gen_WR37,\n        Expected_gen_WR38,\n        Expected_gen_WR39,\n        Expected_gen_WR40,\n        Expected_gen_WR41,\n        Expected_gen_WR42,\n        Expected_gen_WR43,\n        Expected_gen_WR44,\n        Expected_gen_WR45,\n        Expected_gen_WR46,\n        Expected_gen_WR47,\n        Expected_gen_WR48,\n        Expected_gen_WR49,\n        Expected_gen_WR50,\n        GEN_LOSS_WR1,\n        GEN_LOSS_WR2,\n        GEN_LOSS_WR3,\n        GEN_LOSS_WR4,\n        GEN_LOSS_WR5,\n        GEN_LOSS_WR6,\n        GEN_LOSS_WR7,\n        GEN_LOSS_WR8,\n        GEN_LOSS_WR9,\n        GEN_LOSS_WR10,\n        GEN_LOSS_WR11,\n        GEN_LOSS_WR12,\n        GEN_LOSS_WR13,\n        GEN_LOSS_WR14,\n        GEN_LOSS_WR15,\n        GEN_LOSS_WR16,\n        GEN_LOSS_WR17,\n        GEN_LOSS_WR18,\n        GEN_LOSS_WR19,\n        GEN_LOSS_WR20,\n        GEN_LOSS_WR21,\n        GEN_LOSS_WR22,\n        GEN_LOSS_WR23,\n        GEN_LOSS_WR24,\n        GEN_LOSS_WR25,\n        GEN_LOSS_WR26,\n        GEN_LOSS_WR27,\n        GEN_LOSS_WR28,\n        GEN_LOSS_WR29,\n        GEN_LOSS_WR30,\n        GEN_LOSS_WR31,\n        GEN_LOSS_WR32,\n        GEN_LOSS_WR33,\n        GEN_LOSS_WR34,\n        GEN_LOSS_WR35,\n        GEN_LOSS_WR36,\n        GEN_LOSS_WR37,\n        GEN_LOSS_WR38,\n        GEN_LOSS_WR39,\n        GEN_LOSS_WR40,\n        GEN_LOSS_WR41,\n        GEN_LOSS_WR42,\n        GEN_LOSS_WR43,\n        GEN_LOSS_WR44,\n        GEN_LOSS_WR45,\n        GEN_LOSS_WR46,\n        GEN_LOSS_WR47,\n        GEN_LOSS_WR48,\n        GEN_LOSS_WR49,\n        GEN_LOSS_WR50,\n    }\n}\n   /* if (i == msg.payload.length) {\n        obj = {\n            DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n        }\n    }*/\n\n    array.push(obj)\n    \n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\",totalgen_loss)\nflow.set(\"total_act_gen\",total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "b563616ed2e322fe"
            ]
        ]
    },
    {
        "id": "c801160d3cebf464",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "1a7f0518681bc1db"
            ]
        ]
    },
    {
        "id": "92b994de0b189053",
        "type": "file",
        "z": "a6dbce1f496ecb79",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "2c3b1eca5a2a6921"
            ]
        ]
    },
    {
        "id": "b563616ed2e322fe",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fc5b44e1708cdcbb",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "header correction",
        "info": "",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "9d0fd4cb89d7b09f",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 980,
        "wires": []
    },
    {
        "id": "17c4620d6d821d4d",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nfor (var i = 1; i < column.length; i++) {\n    var num = column[i].substring(column[i].indexOf(' '), column[i].lastIndexOf(' '))   //.replace(/\\D/g, ''); \n    var sy =\",Specific Yield_\" + num + \"(kWh / kWp)\"\n    if(num!=\"\"){\n    var WR=\",WR\"+num\n    column_header = column_header.concat(WR, sy);\n    }\nvar obj={\n    num, \n    sy,\n    column_header\n}\nresults.push(obj)\n}\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 660,
        "wires": [
            [
                "597123327d04c4fb"
            ]
        ]
    },
    {
        "id": "9b6621684678eba9",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 620,
        "y": 660,
        "wires": [
            [
                "17c4620d6d821d4d"
            ]
        ]
    },
    {
        "id": "68583396b7f07f26",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 830,
        "y": 980,
        "wires": [
            [
                "a2e4b739c9150ae9"
            ]
        ]
    },
    {
        "id": "a2e4b739c9150ae9",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 950,
        "y": 980,
        "wires": [
            [
                "9d0fd4cb89d7b09f",
                "b87eba4b7ea075fb"
            ]
        ]
    },
    {
        "id": "88b4ebc81bf8bd8b",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 980,
        "wires": [
            [
                "6cdbd358a0582f5a"
            ]
        ]
    },
    {
        "id": "42b315e1e8c54e07",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "calculation",
        "info": "",
        "x": 620,
        "y": 920,
        "wires": []
    },
    {
        "id": "2c3b1eca5a2a6921",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c41c7cde1f841b92",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "785d3dece03d8ecc"
            ]
        ]
    },
    {
        "id": "88a08fcc67eaa7f7",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 580,
        "y": 1060,
        "wires": []
    },
    {
        "id": "597123327d04c4fb",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 660,
        "wires": []
    },
    {
        "id": "785d3dece03d8ecc",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "c801160d3cebf464"
            ]
        ]
    },
    {
        "id": "cddd021a592203fd",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 610,
        "y": 700,
        "wires": [
            [
                "d76101a2e206bd43"
            ]
        ]
    },
    {
        "id": "e412fc8bc00a2ae6",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 700,
        "wires": []
    },
    {
        "id": "d76101a2e206bd43",
        "type": "change",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 700,
        "wires": [
            [
                "e412fc8bc00a2ae6"
            ]
        ]
    },
    {
        "id": "990d4ae241f29314",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "setup 2nd Table",
        "func": "\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar sum=0\nvar Total_Actual_Generation_in_kWh=0\nvar Total_Expected_Generation_in_kWh=0\nvar Total_Generation_Loss_in_kWh=0\nvar Total_Loss_in_currency_Euro=0\n\nvar array=[]\nvar loss=[]\nvar total_loss=[]\n\nfor (var i = 0; i < inverter.length; i++) {\n    sum += INV_CAPACITY[i];\n    Total_Actual_Generation_in_kWh += total_act_gen[i]\n    Total_Expected_Generation_in_kWh += total_exp_gen[i]\n    Total_Generation_Loss_in_kWh += totalgen_loss[i]\n}\n\nfor (var i = 0; i <=inverter.length; i++)\n{\n\n\n    if(sum >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n    if (sum < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\nloss.push(LOSS_IN_CURRENCY)\n    Total_Loss_in_currency_Euro += loss[i]\n    total_loss.push(Total_Loss_in_currency_Euro)\nvar obj={\n    INVERTERS:inverter[i],\n    Capacity_in_kWp:INV_CAPACITY[i],\n    Actual_Generation_in_kWh: total_act_gen[i],\n    Expected_Generation_in_kWh: total_exp_gen[i],\n    Generation_Loss_in_kWh: totalgen_loss[i],\n    Loss_in_currency_Euro_Є:LOSS_IN_CURRENCY  \n}\n\nif(i==inverter.length)\n{\n    \n    obj = {\n        INVERTERS: \"TOTAL\",\n        Capacity_in_kWp: sum,\n        Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh,\n        Expected_Generation_in_kWh:Total_Expected_Generation_in_kWh,\n        Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh,\n        Loss_in_currency_Euro_Є:total_loss[i-1]\n    }\n}\n\narray.push(obj)\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1260,
        "wires": [
            [
                "b541e024a81fca19",
                "a873f1bbc447b242"
            ]
        ]
    },
    {
        "id": "2441b18853373322",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 580,
        "y": 1220,
        "wires": []
    },
    {
        "id": "1a7f0518681bc1db",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/meters_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1140,
        "wires": [
            [
                "92b994de0b189053"
            ]
        ]
    },
    {
        "id": "fc0524647a0d3fc6",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "990d4ae241f29314"
            ]
        ]
    },
    {
        "id": "a873f1bbc447b242",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 530,
        "y": 1260,
        "wires": [
            [
                "207db2e101890ffb"
            ]
        ]
    },
    {
        "id": "207db2e101890ffb",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/meters_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1260,
        "wires": [
            [
                "680fe68d874bdb27"
            ]
        ]
    },
    {
        "id": "680fe68d874bdb27",
        "type": "file",
        "z": "a6dbce1f496ecb79",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 830,
        "y": 1260,
        "wires": [
            [
                "3f718a7d67b24c41"
            ]
        ]
    },
    {
        "id": "f1d1e72fb273f714",
        "type": "fs-ops-delete",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/meters",
        "pathType": "str",
        "filename": "payload.filename",
        "filenameType": "msg",
        "x": 650,
        "y": 1560,
        "wires": [
            [
                "b45a0e7891d25ee2"
            ]
        ]
    },
    {
        "id": "b45a0e7891d25ee2",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1560,
        "wires": []
    },
    {
        "id": "dadb9a746973d9a7",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "f1d1e72fb273f714"
            ]
        ]
    },
    {
        "id": "cb46b1bc25965223",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "delete files from directory after report generation",
        "info": "",
        "x": 620,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3f718a7d67b24c41",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1260,
        "wires": []
    },
    {
        "id": "76742d15cd28b686",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "5c66103294e3553f"
            ]
        ]
    },
    {
        "id": "d2a0ed11083c772f",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "report generation plant info table",
        "info": "",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "43765228d00567bc",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 860,
        "wires": []
    },
    {
        "id": "f0dc69f5060978df",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 860,
        "wires": [
            [
                "76742d15cd28b686"
            ]
        ]
    },
    {
        "id": "e7d052b1fba968e4",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/meters_report/\" + plant+\"_\"+month+\"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 860,
        "wires": [
            [
                "978cc278702f88c4"
            ]
        ]
    },
    {
        "id": "978cc278702f88c4",
        "type": "file",
        "z": "a6dbce1f496ecb79",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 860,
        "wires": [
            [
                "43765228d00567bc"
            ]
        ]
    },
    {
        "id": "5c66103294e3553f",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 490,
        "y": 860,
        "wires": [
            [
                "e7d052b1fba968e4"
            ]
        ]
    },
    {
        "id": "f66f25f5d78ee904",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "9b6621684678eba9",
                "cddd021a592203fd"
            ]
        ]
    },
    {
        "id": "b541e024a81fca19",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 167",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cdbdee152d615b41",
        "type": "file in",
        "z": "a6dbce1f496ecb79",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/JD THOMAS NAME LIST.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 2240,
        "wires": [
            [
                "e70771e2bccda678"
            ]
        ]
    },
    {
        "id": "e70771e2bccda678",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 530,
        "y": 2240,
        "wires": [
            [
                "2ed4c3a0eac99c7b",
                "ebbc3d780eeeb58b"
            ]
        ]
    },
    {
        "id": "ebbc3d780eeeb58b",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "comparison with ref csv",
        "func": "var live_plant = \"273526836\"  //flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\nvar inv_array=[]\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i].WR13) || \"null\",\n                             parseFloat(msg.payload[i].WR14) || \"null\",\n                             parseFloat(msg.payload[i].WR15) || \"null\",\n                             parseFloat(msg.payload[i].WR16) || \"null\",\n                             parseFloat(msg.payload[i].WR17) || \"null\",\n                             parseFloat(msg.payload[i].WR18) || \"null\",\n                             parseFloat(msg.payload[i].WR19) || \"null\",\n                             parseFloat(msg.payload[i].WR20) || \"null\",\n                             parseFloat(msg.payload[i].WR21) || \"null\",\n                             parseFloat(msg.payload[i].WR22) || \"null\",\n                             parseFloat(msg.payload[i].WR23) || \"null\",\n                             parseFloat(msg.payload[i].WR24) || \"null\",\n                             parseFloat(msg.payload[i].WR25) || \"null\",\n                             parseFloat(msg.payload[i].WR26) || \"null\",\n                             parseFloat(msg.payload[i].WR27) || \"null\",\n                             parseFloat(msg.payload[i].WR28) || \"null\",\n                             parseFloat(msg.payload[i].WR29) || \"null\",\n                             parseFloat(msg.payload[i].WR30) || \"null\",\n                             parseFloat(msg.payload[i].WR31) || \"null\",\n                             parseFloat(msg.payload[i].WR32) || \"null\",\n                             parseFloat(msg.payload[i].WR33) || \"null\",\n                             parseFloat(msg.payload[i].WR34) || \"null\",\n                             parseFloat(msg.payload[i].WR35) || \"null\",\n                             parseFloat(msg.payload[i].WR36) || \"null\",\n                             parseFloat(msg.payload[i].WR37) || \"null\",\n                             parseFloat(msg.payload[i].WR38) || \"null\",\n                             parseFloat(msg.payload[i].WR39) || \"null\",\n                             parseFloat(msg.payload[i].WR40) || \"null\",\n                             parseFloat(msg.payload[i].WR41) || \"null\",\n                             parseFloat(msg.payload[i].WR42) || \"null\",\n                             parseFloat(msg.payload[i].WR43) || \"null\",\n                             parseFloat(msg.payload[i].WR44) || \"null\",\n                             parseFloat(msg.payload[i].WR45) || \"null\",\n                             parseFloat(msg.payload[i].WR46) || \"null\",\n                             parseFloat(msg.payload[i].WR47) || \"null\",\n                             parseFloat(msg.payload[i].WR48) || \"null\",\n                             parseFloat(msg.payload[i].WR49) || \"null\",\n                             parseFloat(msg.payload[i].WR50) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/2\"]) || \"null\"]\n                             \n                             \n                                  \n         \n        /*for (var j = 1; j <= INV_NO; j++) {\n            inv_array.push(\"WR\" + j)\n        }*/\n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n//flow.set(\"inv_array\", inv_array)\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2240,
        "wires": [
            [
                "cd3b3425e6357236"
            ]
        ]
    },
    {
        "id": "02d2b7c6f5bbbcaa",
        "type": "file in",
        "z": "a6dbce1f496ecb79",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/JD THOMAS plants/273526836_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 290,
        "y": 1920,
        "wires": [
            [
                "1eeeb8f2a3ee4316",
                "39ec17042975338b",
                "653b5ac58ad5d16f"
            ]
        ]
    },
    {
        "id": "f3d290907bc6bffd",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "calculation logic",
        "func": "var inv_cap=flow.get(\"INV_CAPACITY\");\nvar array=[]\n var Total_exp_WR1=0\n var Total_exp_WR2=0\n var Total_exp_WR3=0\n var Total_exp_WR4=0\n var Total_exp_WR5=0\n var Total_exp_WR6=0\n var Total_exp_WR7=0\n var Total_exp_WR8=0\n var Total_exp_WR9=0\n var Total_exp_WR10=0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR13 = 0\nvar Total_exp_WR14 = 0\nvar Total_exp_WR15 = 0\nvar Total_exp_WR16 = 0\nvar Total_exp_WR17 = 0\nvar Total_exp_WR18 = 0\nvar Total_exp_WR19 = 0\nvar Total_exp_WR20 = 0\nvar Total_exp_WR21 = 0\nvar Total_exp_WR22 = 0\nvar Total_exp_WR23 = 0\nvar Total_exp_WR24 = 0\nvar Total_exp_WR25 = 0\nvar Total_exp_WR26 = 0\nvar Total_exp_WR27 = 0\nvar Total_exp_WR28 = 0\nvar Total_exp_WR29 = 0\nvar Total_exp_WR30 = 0\nvar Total_exp_WR31 = 0\nvar Total_exp_WR32 = 0\nvar Total_exp_WR33 = 0\nvar Total_exp_WR34 = 0\nvar Total_exp_WR35 = 0\nvar Total_exp_WR36 = 0\nvar Total_exp_WR37 = 0\nvar Total_exp_WR38 = 0\nvar Total_exp_WR39 = 0\nvar Total_exp_WR40 = 0\nvar Total_exp_WR41 = 0\nvar Total_exp_WR42 = 0\nvar Total_exp_WR43 = 0\nvar Total_exp_WR44 = 0\nvar Total_exp_WR45 = 0\nvar Total_exp_WR46 = 0\nvar Total_exp_WR47 = 0\nvar Total_exp_WR48 = 0\nvar Total_exp_WR49 = 0\nvar Total_exp_WR50 = 0\nvar Total_exp_WR1_1 = 0\nvar Total_exp_WR1_2 = 0\nvar Total_exp_WR2_1 = 0\nvar Total_exp_WR2_2 = 0\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4=0\nvar Total_ACT_WR5=0\nvar Total_ACT_WR6=0\nvar Total_ACT_WR7=0\nvar Total_ACT_WR8=0\nvar Total_ACT_WR9=0\nvar Total_ACT_WR10=0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR13 = 0\nvar Total_ACT_WR14 = 0\nvar Total_ACT_WR15 = 0\nvar Total_ACT_WR16 = 0\nvar Total_ACT_WR17 = 0\nvar Total_ACT_WR18 = 0\nvar Total_ACT_WR19 = 0\nvar Total_ACT_WR20 = 0\nvar Total_ACT_WR21 = 0\nvar Total_ACT_WR22 = 0\nvar Total_ACT_WR23 = 0\nvar Total_ACT_WR24 = 0\nvar Total_ACT_WR25 = 0\nvar Total_ACT_WR26 = 0\nvar Total_ACT_WR27 = 0\nvar Total_ACT_WR28 = 0\nvar Total_ACT_WR29 = 0\nvar Total_ACT_WR30 = 0\nvar Total_ACT_WR31 = 0\nvar Total_ACT_WR32 = 0\nvar Total_ACT_WR33 = 0\nvar Total_ACT_WR34 = 0\nvar Total_ACT_WR35 = 0\nvar Total_ACT_WR36 = 0\nvar Total_ACT_WR37 = 0\nvar Total_ACT_WR38 = 0\nvar Total_ACT_WR39 = 0\nvar Total_ACT_WR40 = 0\nvar Total_ACT_WR41 = 0\nvar Total_ACT_WR42 = 0\nvar Total_ACT_WR43 = 0\nvar Total_ACT_WR44 = 0\nvar Total_ACT_WR45 = 0\nvar Total_ACT_WR46 = 0\nvar Total_ACT_WR47 = 0\nvar Total_ACT_WR48 = 0\nvar Total_ACT_WR49 = 0\nvar Total_ACT_WR50 = 0\nvar Total_ACT_WR1_1 = 0\nvar Total_ACT_WR1_2 = 0\nvar Total_ACT_WR2_1 = 0\nvar Total_ACT_WR2_2 = 0\n\nvar Total_gen_loss_WR1=0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4=0\nvar Total_gen_loss_WR5=0\nvar Total_gen_loss_WR6=0\nvar Total_gen_loss_WR7=0\nvar Total_gen_loss_WR8=0\nvar Total_gen_loss_WR9=0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR13 = 0\nvar Total_gen_loss_WR14 = 0\nvar Total_gen_loss_WR15 = 0\nvar Total_gen_loss_WR16 = 0\nvar Total_gen_loss_WR17 = 0\nvar Total_gen_loss_WR18 = 0\nvar Total_gen_loss_WR19 = 0\nvar Total_gen_loss_WR20 = 0\nvar Total_gen_loss_WR21 = 0\nvar Total_gen_loss_WR22 = 0\nvar Total_gen_loss_WR23 = 0\nvar Total_gen_loss_WR24 = 0\nvar Total_gen_loss_WR25 = 0\nvar Total_gen_loss_WR26 = 0\nvar Total_gen_loss_WR27 = 0\nvar Total_gen_loss_WR28 = 0\nvar Total_gen_loss_WR29 = 0\nvar Total_gen_loss_WR30 = 0\nvar Total_gen_loss_WR31 = 0\nvar Total_gen_loss_WR32 = 0\nvar Total_gen_loss_WR33 = 0\nvar Total_gen_loss_WR34 = 0\nvar Total_gen_loss_WR35 = 0\nvar Total_gen_loss_WR36 = 0\nvar Total_gen_loss_WR37 = 0\nvar Total_gen_loss_WR38 = 0\nvar Total_gen_loss_WR39 = 0\nvar Total_gen_loss_WR40 = 0\nvar Total_gen_loss_WR41 = 0\nvar Total_gen_loss_WR42 = 0\nvar Total_gen_loss_WR43 = 0\nvar Total_gen_loss_WR44 = 0\nvar Total_gen_loss_WR45 = 0\nvar Total_gen_loss_WR46 = 0\nvar Total_gen_loss_WR47 = 0\nvar Total_gen_loss_WR48 = 0\nvar Total_gen_loss_WR49 = 0\nvar Total_gen_loss_WR50 = 0\nvar Total_gen_loss_WR1_1 = 0\nvar Total_gen_loss_WR1_2 = 0\nvar Total_gen_loss_WR2_1 = 0\nvar Total_gen_loss_WR2_2 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++)\n{  if(i<msg.payload.length){\n    var DATE = msg.payload[i].date\n    var WR_1_kwh = (msg.payload[i].WR1)/1000 \n    var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_1(kWh / kWp)\"] \n    var WR_2_kwh = (msg.payload[i].WR2)/1000 \n    var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_2(kWh / kWp)\"] \n    var WR_3_kwh = (msg.payload[i].WR3)/1000 \n    var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_3(kWh / kWp)\"] \n    var WR_4_kwh = (msg.payload[i].WR4)/1000 \n    var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_4(kWh / kWp)\"] \n    var WR_5_kwh = (msg.payload[i].WR5)/1000 \n    var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_5(kWh / kWp)\"] \n    var WR_6_kwh = (msg.payload[i].WR6)/1000 \n    var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_6(kWh / kWp)\"] \n    var WR_7_kwh = (msg.payload[i].WR7)/1000 \n    var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_7(kWh / kWp)\"] \n    var WR_8_kwh = (msg.payload[i].WR8)/1000 \n    var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_8(kWh / kWp)\"] \n    var WR_9_kwh = (msg.payload[i].WR9)/1000 \n    var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_9(kWh / kWp)\"] \n    var WR_10_kwh = (msg.payload[i].WR10)/1000 \n    var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_10(kWh / kWp)\"] \n    var WR_11_kwh = (msg.payload[i].WR11) / 1000\n    var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_11(kWh / kWp)\"]\n    var WR_12_kwh = (msg.payload[i].WR12) / 1000\n    var WR_12_Sp_Y = msg.payload[i][\"Specific Yield_12(kWh / kWp)\"]\n    var WR_13_kwh = (msg.payload[i].WR13) / 1000\n    var WR_13_Sp_Y = msg.payload[i][\"Specific Yield_13(kWh / kWp)\"]\n    var WR_14_kwh = (msg.payload[i].WR14) / 1000\n    var WR_14_Sp_Y = msg.payload[i][\"Specific Yield_14(kWh / kWp)\"]\n    var WR_15_kwh = (msg.payload[i].WR15) / 1000\n    var WR_15_Sp_Y = msg.payload[i][\"Specific Yield_15(kWh / kWp)\"]\n    var WR_16_kwh = (msg.payload[i].WR16) / 1000\n    var WR_16_Sp_Y = msg.payload[i][\"Specific Yield_16(kWh / kWp)\"]\n    var WR_17_kwh = (msg.payload[i].WR17) / 1000\n    var WR_17_Sp_Y = msg.payload[i][\"Specific Yield_17(kWh / kWp)\"]\n    var WR_18_kwh = (msg.payload[i].WR18) / 1000\n    var WR_18_Sp_Y = msg.payload[i][\"Specific Yield_18(kWh / kWp)\"]\n    var WR_19_kwh = (msg.payload[i].WR19) / 1000\n    var WR_19_Sp_Y = msg.payload[i][\"Specific Yield_19(kWh / kWp)\"]\n    var WR_20_kwh = (msg.payload[i].WR20) / 1000\n    var WR_20_Sp_Y = msg.payload[i][\"Specific Yield_20(kWh / kWp)\"] \n    var WR_21_kwh = (msg.payload[i].WR21) / 1000\n    var WR_21_Sp_Y = msg.payload[i][\"Specific Yield_21(kWh / kWp)\"]\n    var WR_22_kwh = (msg.payload[i].WR22) / 1000\n    var WR_22_Sp_Y = msg.payload[i][\"Specific Yield_22(kWh / kWp)\"]\n    var WR_23_kwh = (msg.payload[i].WR23) / 1000\n    var WR_23_Sp_Y = msg.payload[i][\"Specific Yield_23(kWh / kWp)\"]\n    var WR_24_kwh = (msg.payload[i].WR24) / 1000\n    var WR_24_Sp_Y = msg.payload[i][\"Specific Yield_24(kWh / kWp)\"]\n    var WR_25_kwh = (msg.payload[i].WR25) / 1000\n    var WR_25_Sp_Y = msg.payload[i][\"Specific Yield_25(kWh / kWp)\"]\n    var WR_26_kwh = (msg.payload[i].WR26) / 1000\n    var WR_26_Sp_Y = msg.payload[i][\"Specific Yield_26(kWh / kWp)\"]\n    var WR_27_kwh = (msg.payload[i].WR27) / 1000\n    var WR_27_Sp_Y = msg.payload[i][\"Specific Yield_27(kWh / kWp)\"]\n    var WR_28_kwh = (msg.payload[i].WR28) / 1000\n    var WR_28_Sp_Y = msg.payload[i][\"Specific Yield_28(kWh / kWp)\"]\n    var WR_29_kwh = (msg.payload[i].WR29) / 1000\n    var WR_29_Sp_Y = msg.payload[i][\"Specific Yield_29(kWh / kWp)\"]\n    var WR_30_kwh = (msg.payload[i].WR30) / 1000\n    var WR_30_Sp_Y = msg.payload[i][\"Specific Yield_30(kWh / kWp)\"] \n    var WR_31_kwh = (msg.payload[i].WR31) / 1000\n    var WR_31_Sp_Y = msg.payload[i][\"Specific Yield_31(kWh / kWp)\"]\n    var WR_32_kwh = (msg.payload[i].WR32) / 1000\n    var WR_32_Sp_Y = msg.payload[i][\"Specific Yield_32(kWh / kWp)\"]\n    var WR_33_kwh = (msg.payload[i].WR33) / 1000\n    var WR_33_Sp_Y = msg.payload[i][\"Specific Yield_33(kWh / kWp)\"]\n    var WR_34_kwh = (msg.payload[i].WR34) / 1000\n    var WR_34_Sp_Y = msg.payload[i][\"Specific Yield_34(kWh / kWp)\"]\n    var WR_35_kwh = (msg.payload[i].WR35) / 1000\n    var WR_35_Sp_Y = msg.payload[i][\"Specific Yield_35(kWh / kWp)\"]\n    var WR_36_kwh = (msg.payload[i].WR36) / 1000\n    var WR_36_Sp_Y = msg.payload[i][\"Specific Yield_36(kWh / kWp)\"]\n    var WR_37_kwh = (msg.payload[i].WR37) / 1000\n    var WR_37_Sp_Y = msg.payload[i][\"Specific Yield_37(kWh / kWp)\"]\n    var WR_38_kwh = (msg.payload[i].WR38) / 1000\n    var WR_38_Sp_Y = msg.payload[i][\"Specific Yield_38(kWh / kWp)\"]\n    var WR_39_kwh = (msg.payload[i].WR39) / 1000\n    var WR_39_Sp_Y = msg.payload[i][\"Specific Yield_39(kWh / kWp)\"]\n    var WR_40_kwh = (msg.payload[i].WR40) / 1000\n    var WR_40_Sp_Y = msg.payload[i][\"Specific Yield_40(kWh / kWp)\"] \n    var WR_41_kwh = (msg.payload[i].WR41) / 1000\n    var WR_41_Sp_Y = msg.payload[i][\"Specific Yield_41(kWh / kWp)\"]\n    var WR_42_kwh = (msg.payload[i].WR42) / 1000\n    var WR_42_Sp_Y = msg.payload[i][\"Specific Yield_42(kWh / kWp)\"]\n    var WR_43_kwh = (msg.payload[i].WR43) / 1000\n    var WR_43_Sp_Y = msg.payload[i][\"Specific Yield_43(kWh / kWp)\"]\n    var WR_44_kwh = (msg.payload[i].WR44) / 1000\n    var WR_44_Sp_Y = msg.payload[i][\"Specific Yield_44(kWh / kWp)\"]\n    var WR_45_kwh = (msg.payload[i].WR45) / 1000\n    var WR_45_Sp_Y = msg.payload[i][\"Specific Yield_45(kWh / kWp)\"]\n    var WR_46_kwh = (msg.payload[i].WR46) / 1000\n    var WR_46_Sp_Y = msg.payload[i][\"Specific Yield_46(kWh / kWp)\"]\n    var WR_47_kwh = (msg.payload[i].WR47) / 1000\n    var WR_47_Sp_Y = msg.payload[i][\"Specific Yield_47(kWh / kWp)\"]\n    var WR_48_kwh = (msg.payload[i].WR48) / 1000\n    var WR_48_Sp_Y = msg.payload[i][\"Specific Yield_48(kWh / kWp)\"]\n    var WR_49_kwh = (msg.payload[i].WR49) / 1000\n    var WR_49_Sp_Y = msg.payload[i][\"Specific Yield_49(kWh / kWp)\"]\n    var WR_50_kwh = (msg.payload[i].WR50) / 1000\n    var WR_50_Sp_Y = msg.payload[i][\"Specific Yield_50(kWh / kWp)\"] \n    var WR_1_1_kwh = (msg.payload[i][\"WR1/1\"]) / 1000\n    var WR_1_1_Sp_Y = msg.payload[i][\"Specific Yield_1/1(kWh / kWp)\"]\n    var WR_1_2_kwh = (msg.payload[i][\"WR1/2\"]) / 1000\n    var WR_1_2_Sp_Y = msg.payload[i][\"Specific Yield_1/2(kWh / kWp)\"] \n    var WR_2_1_kwh = (msg.payload[i][\"WR2/1\"]) / 1000\n    var WR_2_1_Sp_Y = msg.payload[i][\"Specific Yield_2/1(kWh / kWp)\"] \n    var WR_2_2_kwh = (msg.payload[i][\"WR2/2\"]) / 1000\n    var WR_2_2_Sp_Y = msg.payload[i][\"Specific Yield_2/2(kWh / kWp)\"]\n\n    var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n        WR_11_Sp_Y || 0, WR_12_Sp_Y || 0, WR_13_Sp_Y || 0, WR_14_Sp_Y || 0, WR_15_Sp_Y || 0, WR_16_Sp_Y || 0, WR_17_Sp_Y || 0, WR_18_Sp_Y || 0, WR_19_Sp_Y || 0, WR_20_Sp_Y || 0,\n        WR_21_Sp_Y || 0, WR_22_Sp_Y || 0, WR_23_Sp_Y || 0, WR_24_Sp_Y || 0, WR_25_Sp_Y || 0, WR_26_Sp_Y || 0, WR_27_Sp_Y || 0, WR_28_Sp_Y || 0, WR_29_Sp_Y || 0, WR_30_Sp_Y || 0,\n        WR_31_Sp_Y || 0, WR_32_Sp_Y || 0, WR_33_Sp_Y || 0, WR_34_Sp_Y || 0, WR_35_Sp_Y || 0, WR_36_Sp_Y || 0, WR_37_Sp_Y || 0, WR_38_Sp_Y || 0, WR_39_Sp_Y || 0, WR_40_Sp_Y || 0,\n        WR_41_Sp_Y || 0, WR_42_Sp_Y || 0, WR_43_Sp_Y || 0, WR_44_Sp_Y || 0, WR_45_Sp_Y || 0, WR_46_Sp_Y || 0, WR_47_Sp_Y || 0, WR_48_Sp_Y || 0, WR_49_Sp_Y || 0, WR_50_Sp_Y || 0, WR_1_1_Sp_Y || 0, WR_1_2_Sp_Y || 0, WR_2_1_Sp_Y || 0, WR_2_2_Sp_Y || 0)\n\n    var WR1_INV_CAPACITY=inv_cap[0]\n    var WR2_INV_CAPACITY = inv_cap[1]\n    var WR3_INV_CAPACITY = inv_cap[2]\n    var WR4_INV_CAPACITY = inv_cap[3]\n    var WR5_INV_CAPACITY = inv_cap[4]\n    var WR6_INV_CAPACITY = inv_cap[5]\n    var WR7_INV_CAPACITY = inv_cap[6]\n    var WR8_INV_CAPACITY = inv_cap[7]\n    var WR9_INV_CAPACITY = inv_cap[8]\n    var WR10_INV_CAPACITY = inv_cap[9]\n    var WR11_INV_CAPACITY = inv_cap[10]\n    var WR12_INV_CAPACITY = inv_cap[11]\n    var WR13_INV_CAPACITY = inv_cap[12]\n    var WR14_INV_CAPACITY = inv_cap[13]\n    var WR15_INV_CAPACITY = inv_cap[14]\n    var WR16_INV_CAPACITY = inv_cap[15]\n    var WR17_INV_CAPACITY = inv_cap[16]\n    var WR18_INV_CAPACITY = inv_cap[17]\n    var WR19_INV_CAPACITY = inv_cap[18]\n    var WR20_INV_CAPACITY = inv_cap[19]\n    var WR21_INV_CAPACITY = inv_cap[20]\n    var WR22_INV_CAPACITY = inv_cap[21]\n    var WR23_INV_CAPACITY = inv_cap[22]\n    var WR24_INV_CAPACITY = inv_cap[23]\n    var WR25_INV_CAPACITY = inv_cap[24]\n    var WR26_INV_CAPACITY = inv_cap[25]\n    var WR27_INV_CAPACITY = inv_cap[26]\n    var WR28_INV_CAPACITY = inv_cap[27]\n    var WR29_INV_CAPACITY = inv_cap[28]\n    var WR30_INV_CAPACITY = inv_cap[29]\n    var WR31_INV_CAPACITY = inv_cap[30]\n    var WR32_INV_CAPACITY = inv_cap[31]\n    var WR33_INV_CAPACITY = inv_cap[32]\n    var WR34_INV_CAPACITY = inv_cap[33]\n    var WR35_INV_CAPACITY = inv_cap[34]\n    var WR36_INV_CAPACITY = inv_cap[35]\n    var WR37_INV_CAPACITY = inv_cap[36]\n    var WR38_INV_CAPACITY = inv_cap[37]\n    var WR39_INV_CAPACITY = inv_cap[38]\n    var WR40_INV_CAPACITY = inv_cap[39]\n    var WR41_INV_CAPACITY = inv_cap[40]\n    var WR42_INV_CAPACITY = inv_cap[41]\n    var WR43_INV_CAPACITY = inv_cap[42]\n    var WR44_INV_CAPACITY = inv_cap[43]\n    var WR45_INV_CAPACITY = inv_cap[44]\n    var WR46_INV_CAPACITY = inv_cap[45]\n    var WR47_INV_CAPACITY = inv_cap[46]\n    var WR48_INV_CAPACITY = inv_cap[47]\n    var WR49_INV_CAPACITY = inv_cap[48]\n    var WR50_INV_CAPACITY = inv_cap[49]\n    var WR1_1_INV_CAPACITY = inv_cap[50]\n    var WR1_2_INV_CAPACITY = inv_cap[51]\n    var WR2_1_INV_CAPACITY = inv_cap[52]\n    var WR2_2_INV_CAPACITY = inv_cap[53]\n\n    var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n    var Expected_gen_WR2 =Max_sy * WR2_INV_CAPACITY\n    var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n    var Expected_gen_WR4= Max_sy * WR4_INV_CAPACITY\n    var Expected_gen_WR5= Max_sy * WR5_INV_CAPACITY\n    var Expected_gen_WR6= Max_sy * WR6_INV_CAPACITY\n    var Expected_gen_WR7= Max_sy * WR7_INV_CAPACITY\n    var Expected_gen_WR8= Max_sy * WR8_INV_CAPACITY\n    var Expected_gen_WR9= Max_sy * WR9_INV_CAPACITY\n    var Expected_gen_WR10= Max_sy * WR10_INV_CAPACITY\n    var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n    var Expected_gen_WR12 = Max_sy * WR12_INV_CAPACITY\n    var Expected_gen_WR13 = Max_sy * WR13_INV_CAPACITY\n    var Expected_gen_WR14 = Max_sy * WR14_INV_CAPACITY\n    var Expected_gen_WR15 = Max_sy * WR15_INV_CAPACITY\n    var Expected_gen_WR16 = Max_sy * WR16_INV_CAPACITY\n    var Expected_gen_WR17 = Max_sy * WR17_INV_CAPACITY\n    var Expected_gen_WR18 = Max_sy * WR18_INV_CAPACITY\n    var Expected_gen_WR19 = Max_sy * WR19_INV_CAPACITY\n    var Expected_gen_WR20 = Max_sy * WR20_INV_CAPACITY\n    var Expected_gen_WR21 = Max_sy * WR21_INV_CAPACITY\n    var Expected_gen_WR22 = Max_sy * WR22_INV_CAPACITY\n    var Expected_gen_WR23 = Max_sy * WR23_INV_CAPACITY\n    var Expected_gen_WR24 = Max_sy * WR24_INV_CAPACITY\n    var Expected_gen_WR25 = Max_sy * WR25_INV_CAPACITY\n    var Expected_gen_WR26 = Max_sy * WR26_INV_CAPACITY\n    var Expected_gen_WR27 = Max_sy * WR27_INV_CAPACITY\n    var Expected_gen_WR28 = Max_sy * WR28_INV_CAPACITY\n    var Expected_gen_WR29 = Max_sy * WR29_INV_CAPACITY\n    var Expected_gen_WR30 = Max_sy * WR30_INV_CAPACITY\n    var Expected_gen_WR31 = Max_sy * WR31_INV_CAPACITY\n    var Expected_gen_WR32 = Max_sy * WR32_INV_CAPACITY\n    var Expected_gen_WR33 = Max_sy * WR33_INV_CAPACITY\n    var Expected_gen_WR34 = Max_sy * WR34_INV_CAPACITY\n    var Expected_gen_WR35 = Max_sy * WR35_INV_CAPACITY\n    var Expected_gen_WR36 = Max_sy * WR36_INV_CAPACITY\n    var Expected_gen_WR37 = Max_sy * WR37_INV_CAPACITY\n    var Expected_gen_WR38 = Max_sy * WR38_INV_CAPACITY\n    var Expected_gen_WR39 = Max_sy * WR39_INV_CAPACITY\n    var Expected_gen_WR40 = Max_sy * WR40_INV_CAPACITY\n    var Expected_gen_WR41 = Max_sy * WR41_INV_CAPACITY\n    var Expected_gen_WR42 = Max_sy * WR42_INV_CAPACITY\n    var Expected_gen_WR43 = Max_sy * WR43_INV_CAPACITY\n    var Expected_gen_WR44 = Max_sy * WR44_INV_CAPACITY\n    var Expected_gen_WR45 = Max_sy * WR45_INV_CAPACITY\n    var Expected_gen_WR46 = Max_sy * WR46_INV_CAPACITY\n    var Expected_gen_WR47 = Max_sy * WR47_INV_CAPACITY\n    var Expected_gen_WR48 = Max_sy * WR48_INV_CAPACITY\n    var Expected_gen_WR49 = Max_sy * WR49_INV_CAPACITY\n    var Expected_gen_WR50 = Max_sy * WR50_INV_CAPACITY\n    var Expected_gen_WR1_1 = Max_sy * WR1_1_INV_CAPACITY\n    var Expected_gen_WR1_2 = Max_sy * WR1_2_INV_CAPACITY\n    var Expected_gen_WR2_1 = Max_sy * WR2_1_INV_CAPACITY\n    var Expected_gen_WR2_2 = Max_sy * WR2_2_INV_CAPACITY\n\n    Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n    Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n    Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n    Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n    Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n    Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n    Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n    Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n    Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n    Total_exp_WR10= Total_exp_WR10 + Expected_gen_WR10\n    Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n    Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n    Total_exp_WR13 = Total_exp_WR13 + Expected_gen_WR13\n    Total_exp_WR14 = Total_exp_WR14 + Expected_gen_WR14\n    Total_exp_WR15 = Total_exp_WR15 + Expected_gen_WR15\n    Total_exp_WR16 = Total_exp_WR16 + Expected_gen_WR16\n    Total_exp_WR17 = Total_exp_WR17 + Expected_gen_WR17\n    Total_exp_WR18 = Total_exp_WR18 + Expected_gen_WR18\n    Total_exp_WR19 = Total_exp_WR19 + Expected_gen_WR19\n    Total_exp_WR20 = Total_exp_WR20 + Expected_gen_WR20\n    Total_exp_WR21 = Total_exp_WR21 + Expected_gen_WR21\n    Total_exp_WR22 = Total_exp_WR22 + Expected_gen_WR22\n    Total_exp_WR23 = Total_exp_WR23 + Expected_gen_WR23\n    Total_exp_WR24 = Total_exp_WR24 + Expected_gen_WR24\n    Total_exp_WR25 = Total_exp_WR25 + Expected_gen_WR25\n    Total_exp_WR26 = Total_exp_WR26 + Expected_gen_WR26\n    Total_exp_WR27 = Total_exp_WR27 + Expected_gen_WR27\n    Total_exp_WR28 = Total_exp_WR28 + Expected_gen_WR28\n    Total_exp_WR29 = Total_exp_WR29 + Expected_gen_WR29\n    Total_exp_WR30 = Total_exp_WR30 + Expected_gen_WR30\n    Total_exp_WR31 = Total_exp_WR31 + Expected_gen_WR31\n    Total_exp_WR32 = Total_exp_WR32 + Expected_gen_WR32\n    Total_exp_WR33 = Total_exp_WR33 + Expected_gen_WR33\n    Total_exp_WR34 = Total_exp_WR34 + Expected_gen_WR34\n    Total_exp_WR35 = Total_exp_WR35 + Expected_gen_WR35\n    Total_exp_WR36 = Total_exp_WR36 + Expected_gen_WR36\n    Total_exp_WR37 = Total_exp_WR37 + Expected_gen_WR37\n    Total_exp_WR38 = Total_exp_WR38 + Expected_gen_WR38\n    Total_exp_WR39 = Total_exp_WR39 + Expected_gen_WR39\n    Total_exp_WR40 = Total_exp_WR40 + Expected_gen_WR40\n    Total_exp_WR41 = Total_exp_WR41 + Expected_gen_WR41\n    Total_exp_WR42 = Total_exp_WR42 + Expected_gen_WR42\n    Total_exp_WR43 = Total_exp_WR43 + Expected_gen_WR43\n    Total_exp_WR44 = Total_exp_WR44 + Expected_gen_WR44\n    Total_exp_WR45 = Total_exp_WR45 + Expected_gen_WR45\n    Total_exp_WR46 = Total_exp_WR46 + Expected_gen_WR46\n    Total_exp_WR47 = Total_exp_WR47 + Expected_gen_WR47\n    Total_exp_WR48 = Total_exp_WR48 + Expected_gen_WR48\n    Total_exp_WR49 = Total_exp_WR49 + Expected_gen_WR49\n    Total_exp_WR50 = Total_exp_WR50 + Expected_gen_WR50\n    Total_exp_WR1_1 = Total_exp_WR1_1 + Expected_gen_WR1_1\n    Total_exp_WR1_2 = Total_exp_WR1_2 + Expected_gen_WR1_2\n    Total_exp_WR2_1 = Total_exp_WR2_1 + Expected_gen_WR2_1\n    Total_exp_WR2_2 = Total_exp_WR2_2 + Expected_gen_WR2_2\n\n    Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n    Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n    Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n    Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n    Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n    Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n    Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n    Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n    Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n    Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n    Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n    Total_ACT_WR12 = Total_ACT_WR12 + WR_12_kwh\n    Total_ACT_WR13 = Total_ACT_WR13 + WR_13_kwh\n    Total_ACT_WR14 = Total_ACT_WR14 + WR_14_kwh\n    Total_ACT_WR15 = Total_ACT_WR15 + WR_15_kwh\n    Total_ACT_WR16 = Total_ACT_WR16 + WR_16_kwh\n    Total_ACT_WR17 = Total_ACT_WR17 + WR_17_kwh\n    Total_ACT_WR18 = Total_ACT_WR18 + WR_18_kwh\n    Total_ACT_WR19 = Total_ACT_WR19 + WR_19_kwh\n    Total_ACT_WR20 = Total_ACT_WR20 + WR_20_kwh\n    Total_ACT_WR21 = Total_ACT_WR21 + WR_21_kwh\n    Total_ACT_WR22 = Total_ACT_WR22 + WR_22_kwh\n    Total_ACT_WR23 = Total_ACT_WR23 + WR_23_kwh\n    Total_ACT_WR24 = Total_ACT_WR24 + WR_24_kwh\n    Total_ACT_WR25 = Total_ACT_WR25 + WR_25_kwh\n    Total_ACT_WR26 = Total_ACT_WR26 + WR_26_kwh\n    Total_ACT_WR27 = Total_ACT_WR27 + WR_27_kwh\n    Total_ACT_WR28 = Total_ACT_WR28 + WR_28_kwh\n    Total_ACT_WR29 = Total_ACT_WR29 + WR_29_kwh\n    Total_ACT_WR30 = Total_ACT_WR30 + WR_30_kwh\n    Total_ACT_WR31 = Total_ACT_WR31 + WR_31_kwh\n    Total_ACT_WR32 = Total_ACT_WR32 + WR_32_kwh\n    Total_ACT_WR33 = Total_ACT_WR33 + WR_33_kwh\n    Total_ACT_WR34 = Total_ACT_WR34 + WR_34_kwh\n    Total_ACT_WR35 = Total_ACT_WR35 + WR_35_kwh\n    Total_ACT_WR36 = Total_ACT_WR36 + WR_36_kwh\n    Total_ACT_WR37 = Total_ACT_WR37 + WR_37_kwh\n    Total_ACT_WR38 = Total_ACT_WR38 + WR_38_kwh\n    Total_ACT_WR39 = Total_ACT_WR39 + WR_39_kwh\n    Total_ACT_WR40 = Total_ACT_WR40 + WR_40_kwh\n    Total_ACT_WR41 = Total_ACT_WR41 + WR_41_kwh\n    Total_ACT_WR42 = Total_ACT_WR42 + WR_42_kwh\n    Total_ACT_WR43 = Total_ACT_WR43 + WR_43_kwh\n    Total_ACT_WR44 = Total_ACT_WR44 + WR_44_kwh\n    Total_ACT_WR45 = Total_ACT_WR45 + WR_45_kwh\n    Total_ACT_WR46 = Total_ACT_WR46 + WR_46_kwh\n    Total_ACT_WR47 = Total_ACT_WR47 + WR_47_kwh\n    Total_ACT_WR48 = Total_ACT_WR48 + WR_48_kwh\n    Total_ACT_WR49 = Total_ACT_WR49 + WR_49_kwh\n    Total_ACT_WR50 = Total_ACT_WR50 + WR_50_kwh\n    Total_ACT_WR1_1 = Total_ACT_WR1_1 + WR_1_1_kwh\n    Total_ACT_WR1_2 = Total_ACT_WR1_2 + WR_1_2_kwh\n    Total_ACT_WR2_1 = Total_ACT_WR2_1 + WR_2_1_kwh\n    Total_ACT_WR2_2 = Total_ACT_WR2_2 + WR_2_2_kwh\n    \n    if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n    if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n    if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n    if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n    if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n    if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n    if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n    if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n    if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n    if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n    if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n    if ((Expected_gen_WR12 != WR_12_kwh) || (WR_12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR_12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n    if ((Expected_gen_WR13 != WR_13_kwh) || (WR_13_kwh == 0)) { var GEN_LOSS_WR13 = (Expected_gen_WR13 - WR_13_kwh) } else { GEN_LOSS_WR13 = \"0\" }\n    if ((Expected_gen_WR14 != WR_14_kwh) || (WR_14_kwh == 0)) { var GEN_LOSS_WR14 = (Expected_gen_WR14 - WR_14_kwh) } else { GEN_LOSS_WR14 = \"0\" }\n    if ((Expected_gen_WR15 != WR_15_kwh) || (WR_15_kwh == 0)) { var GEN_LOSS_WR15 = (Expected_gen_WR15 - WR_15_kwh) } else { GEN_LOSS_WR15 = \"0\" }\n    if ((Expected_gen_WR16 != WR_16_kwh) || (WR_16_kwh == 0)) { var GEN_LOSS_WR16 = (Expected_gen_WR16 - WR_16_kwh) } else { GEN_LOSS_WR16 = \"0\" }\n    if ((Expected_gen_WR17 != WR_17_kwh) || (WR_17_kwh == 0)) { var GEN_LOSS_WR17 = (Expected_gen_WR17 - WR_17_kwh) } else { GEN_LOSS_WR17 = \"0\" }\n    if ((Expected_gen_WR18 != WR_18_kwh) || (WR_18_kwh == 0)) { var GEN_LOSS_WR18 = (Expected_gen_WR18 - WR_18_kwh) } else { GEN_LOSS_WR18 = \"0\" }\n    if ((Expected_gen_WR19 != WR_19_kwh) || (WR_19_kwh == 0)) { var GEN_LOSS_WR19 = (Expected_gen_WR19 - WR_19_kwh) } else { GEN_LOSS_WR19 = \"0\" }\n    if ((Expected_gen_WR20 != WR_20_kwh) || (WR_20_kwh == 0)) { var GEN_LOSS_WR20 = (Expected_gen_WR10 - WR_20_kwh) } else { GEN_LOSS_WR20 = \"0\" }\n    if ((Expected_gen_WR21 != WR_21_kwh) || (WR_21_kwh == 0)) { var GEN_LOSS_WR21 = (Expected_gen_WR21 - WR_21_kwh) } else { GEN_LOSS_WR21 = \"0\" }\n    if ((Expected_gen_WR22 != WR_22_kwh) || (WR_22_kwh == 0)) { var GEN_LOSS_WR22 = (Expected_gen_WR22 - WR_22_kwh) } else { GEN_LOSS_WR22 = \"0\" }\n    if ((Expected_gen_WR23 != WR_23_kwh) || (WR_23_kwh == 0)) { var GEN_LOSS_WR23 = (Expected_gen_WR23 - WR_23_kwh) } else { GEN_LOSS_WR23 = \"0\" }\n    if ((Expected_gen_WR24 != WR_24_kwh) || (WR_24_kwh == 0)) { var GEN_LOSS_WR24 = (Expected_gen_WR24 - WR_24_kwh) } else { GEN_LOSS_WR24 = \"0\" }\n    if ((Expected_gen_WR25 != WR_25_kwh) || (WR_25_kwh == 0)) { var GEN_LOSS_WR25 = (Expected_gen_WR25 - WR_25_kwh) } else { GEN_LOSS_WR25 = \"0\" }\n    if ((Expected_gen_WR26 != WR_26_kwh) || (WR_26_kwh == 0)) { var GEN_LOSS_WR26 = (Expected_gen_WR26 - WR_26_kwh) } else { GEN_LOSS_WR26 = \"0\" }\n    if ((Expected_gen_WR27 != WR_27_kwh) || (WR_27_kwh == 0)) { var GEN_LOSS_WR27 = (Expected_gen_WR27 - WR_27_kwh) } else { GEN_LOSS_WR27 = \"0\" }\n    if ((Expected_gen_WR28 != WR_28_kwh) || (WR_28_kwh == 0)) { var GEN_LOSS_WR28 = (Expected_gen_WR28 - WR_28_kwh) } else { GEN_LOSS_WR28 = \"0\" }\n    if ((Expected_gen_WR29 != WR_29_kwh) || (WR_29_kwh == 0)) { var GEN_LOSS_WR29 = (Expected_gen_WR29 - WR_29_kwh) } else { GEN_LOSS_WR29 = \"0\" }\n    if ((Expected_gen_WR30 != WR_30_kwh) || (WR_30_kwh == 0)) { var GEN_LOSS_WR30 = (Expected_gen_WR30 - WR_30_kwh) } else { GEN_LOSS_WR30 = \"0\" }\n    if ((Expected_gen_WR31 != WR_31_kwh) || (WR_31_kwh == 0)) { var GEN_LOSS_WR31 = (Expected_gen_WR31 - WR_31_kwh) } else { GEN_LOSS_WR31 = \"0\" }\n    if ((Expected_gen_WR32 != WR_32_kwh) || (WR_32_kwh == 0)) { var GEN_LOSS_WR32 = (Expected_gen_WR32 - WR_32_kwh) } else { GEN_LOSS_WR32 = \"0\" }\n    if ((Expected_gen_WR33 != WR_33_kwh) || (WR_33_kwh == 0)) { var GEN_LOSS_WR33 = (Expected_gen_WR33 - WR_33_kwh) } else { GEN_LOSS_WR33 = \"0\" }\n    if ((Expected_gen_WR34 != WR_34_kwh) || (WR_34_kwh == 0)) { var GEN_LOSS_WR34 = (Expected_gen_WR34 - WR_34_kwh) } else { GEN_LOSS_WR34 = \"0\" }\n    if ((Expected_gen_WR35 != WR_35_kwh) || (WR_35_kwh == 0)) { var GEN_LOSS_WR35 = (Expected_gen_WR35 - WR_35_kwh) } else { GEN_LOSS_WR35 = \"0\" }\n    if ((Expected_gen_WR36 != WR_36_kwh) || (WR_36_kwh == 0)) { var GEN_LOSS_WR36 = (Expected_gen_WR36 - WR_36_kwh) } else { GEN_LOSS_WR36 = \"0\" }\n    if ((Expected_gen_WR37 != WR_37_kwh) || (WR_37_kwh == 0)) { var GEN_LOSS_WR37 = (Expected_gen_WR37 - WR_37_kwh) } else { GEN_LOSS_WR37 = \"0\" }\n    if ((Expected_gen_WR38 != WR_38_kwh) || (WR_38_kwh == 0)) { var GEN_LOSS_WR38 = (Expected_gen_WR38 - WR_38_kwh) } else { GEN_LOSS_WR38 = \"0\" }\n    if ((Expected_gen_WR39 != WR_39_kwh) || (WR_39_kwh == 0)) { var GEN_LOSS_WR39 = (Expected_gen_WR39 - WR_39_kwh) } else { GEN_LOSS_WR39 = \"0\" }\n    if ((Expected_gen_WR40 != WR_40_kwh) || (WR_40_kwh == 0)) { var GEN_LOSS_WR40 = (Expected_gen_WR40 - WR_40_kwh) } else { GEN_LOSS_WR40 = \"0\" }\n    if ((Expected_gen_WR41 != WR_41_kwh) || (WR_41_kwh == 0)) { var GEN_LOSS_WR41 = (Expected_gen_WR41 - WR_41_kwh) } else { GEN_LOSS_WR41 = \"0\" }\n    if ((Expected_gen_WR42 != WR_42_kwh) || (WR_42_kwh == 0)) { var GEN_LOSS_WR42 = (Expected_gen_WR42 - WR_42_kwh) } else { GEN_LOSS_WR42 = \"0\" }\n    if ((Expected_gen_WR43 != WR_43_kwh) || (WR_43_kwh == 0)) { var GEN_LOSS_WR43 = (Expected_gen_WR43 - WR_43_kwh) } else { GEN_LOSS_WR43 = \"0\" }\n    if ((Expected_gen_WR44 != WR_44_kwh) || (WR_44_kwh == 0)) { var GEN_LOSS_WR44 = (Expected_gen_WR44 - WR_44_kwh) } else { GEN_LOSS_WR44 = \"0\" }\n    if ((Expected_gen_WR45 != WR_45_kwh) || (WR_45_kwh == 0)) { var GEN_LOSS_WR45 = (Expected_gen_WR45 - WR_45_kwh) } else { GEN_LOSS_WR45 = \"0\" }\n    if ((Expected_gen_WR46 != WR_46_kwh) || (WR_46_kwh == 0)) { var GEN_LOSS_WR46 = (Expected_gen_WR46 - WR_46_kwh) } else { GEN_LOSS_WR46 = \"0\" }\n    if ((Expected_gen_WR47 != WR_47_kwh) || (WR_47_kwh == 0)) { var GEN_LOSS_WR47 = (Expected_gen_WR47 - WR_47_kwh) } else { GEN_LOSS_WR47 = \"0\" }\n    if ((Expected_gen_WR48 != WR_48_kwh) || (WR_48_kwh == 0)) { var GEN_LOSS_WR48 = (Expected_gen_WR48 - WR_48_kwh) } else { GEN_LOSS_WR48 = \"0\" }\n    if ((Expected_gen_WR49 != WR_49_kwh) || (WR_49_kwh == 0)) { var GEN_LOSS_WR49 = (Expected_gen_WR49 - WR_49_kwh) } else { GEN_LOSS_WR49 = \"0\" }\n    if ((Expected_gen_WR50 != WR_50_kwh) || (WR_50_kwh == 0)) { var GEN_LOSS_WR50 = (Expected_gen_WR50 - WR_50_kwh) } else { GEN_LOSS_WR50 = \"0\" }\n    if ((Expected_gen_WR1_1 != WR_1_1_kwh) || (WR_1_1_kwh == 0)) { var GEN_LOSS_WR1_1 = (Expected_gen_WR1_1 - WR_1_1_kwh) } else { GEN_LOSS_WR1_1 = \"0\" }\n    if ((Expected_gen_WR1_2 != WR_1_2_kwh) || (WR_1_2_kwh == 0)) { var GEN_LOSS_WR1_2 = (Expected_gen_WR1_2 - WR_1_2_kwh) } else { GEN_LOSS_WR1_2 = \"0\" }\n    if ((Expected_gen_WR2_1 != WR_2_1_kwh) || (WR_2_1_kwh == 0)) { var GEN_LOSS_WR2_1 = (Expected_gen_WR2_1 - WR_2_1_kwh) } else { GEN_LOSS_WR2_1 = \"0\" }\n    if ((Expected_gen_WR2_2 != WR_2_2_kwh) || (WR_2_2_kwh == 0)) { var GEN_LOSS_WR2_2 = (Expected_gen_WR2_2 - WR_2_2_kwh) } else { GEN_LOSS_WR2_2 = \"0\" }\n\n    Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n    Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n    Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n    Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n    Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n    Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n    Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n    Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n    Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n    Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n    Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n    Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR_12_kwh)\n    Total_gen_loss_WR13 = Total_gen_loss_WR13 + (Expected_gen_WR13 - WR_13_kwh)\n    Total_gen_loss_WR14 = Total_gen_loss_WR14 + (Expected_gen_WR14 - WR_14_kwh)\n    Total_gen_loss_WR15 = Total_gen_loss_WR15 + (Expected_gen_WR15 - WR_15_kwh)\n    Total_gen_loss_WR16 = Total_gen_loss_WR16 + (Expected_gen_WR16 - WR_16_kwh)\n    Total_gen_loss_WR17 = Total_gen_loss_WR17 + (Expected_gen_WR17 - WR_17_kwh)\n    Total_gen_loss_WR18 = Total_gen_loss_WR18 + (Expected_gen_WR18 - WR_18_kwh)\n    Total_gen_loss_WR19 = Total_gen_loss_WR19 + (Expected_gen_WR19 - WR_19_kwh)\n    Total_gen_loss_WR20 = Total_gen_loss_WR20 + (Expected_gen_WR20 - WR_20_kwh)\n    Total_gen_loss_WR21 = Total_gen_loss_WR21 + (Expected_gen_WR21 - WR_21_kwh)\n    Total_gen_loss_WR22 = Total_gen_loss_WR22 + (Expected_gen_WR22 - WR_22_kwh)\n    Total_gen_loss_WR23 = Total_gen_loss_WR23 + (Expected_gen_WR23 - WR_23_kwh)\n    Total_gen_loss_WR24 = Total_gen_loss_WR24 + (Expected_gen_WR24 - WR_24_kwh)\n    Total_gen_loss_WR25 = Total_gen_loss_WR25 + (Expected_gen_WR25 - WR_25_kwh)\n    Total_gen_loss_WR26 = Total_gen_loss_WR26 + (Expected_gen_WR26 - WR_26_kwh)\n    Total_gen_loss_WR27 = Total_gen_loss_WR27 + (Expected_gen_WR27 - WR_27_kwh)\n    Total_gen_loss_WR28 = Total_gen_loss_WR28 + (Expected_gen_WR28 - WR_28_kwh)\n    Total_gen_loss_WR29 = Total_gen_loss_WR29 + (Expected_gen_WR29 - WR_29_kwh)\n    Total_gen_loss_WR30 = Total_gen_loss_WR30 + (Expected_gen_WR30 - WR_30_kwh)\n    Total_gen_loss_WR31 = Total_gen_loss_WR31 + (Expected_gen_WR31 - WR_31_kwh)\n    Total_gen_loss_WR32 = Total_gen_loss_WR32 + (Expected_gen_WR32 - WR_32_kwh)\n    Total_gen_loss_WR33 = Total_gen_loss_WR33 + (Expected_gen_WR33 - WR_33_kwh)\n    Total_gen_loss_WR34 = Total_gen_loss_WR34 + (Expected_gen_WR34 - WR_34_kwh)\n    Total_gen_loss_WR35 = Total_gen_loss_WR35 + (Expected_gen_WR35 - WR_35_kwh)\n    Total_gen_loss_WR36 = Total_gen_loss_WR36 + (Expected_gen_WR36 - WR_36_kwh)\n    Total_gen_loss_WR37 = Total_gen_loss_WR37 + (Expected_gen_WR37 - WR_37_kwh)\n    Total_gen_loss_WR38 = Total_gen_loss_WR38 + (Expected_gen_WR38 - WR_38_kwh)\n    Total_gen_loss_WR39 = Total_gen_loss_WR39 + (Expected_gen_WR39 - WR_39_kwh)\n    Total_gen_loss_WR40 = Total_gen_loss_WR40 + (Expected_gen_WR40 - WR_40_kwh)\n    Total_gen_loss_WR41 = Total_gen_loss_WR41 + (Expected_gen_WR41 - WR_41_kwh)\n    Total_gen_loss_WR42 = Total_gen_loss_WR42 + (Expected_gen_WR42 - WR_42_kwh)\n    Total_gen_loss_WR43 = Total_gen_loss_WR43 + (Expected_gen_WR43 - WR_43_kwh)\n    Total_gen_loss_WR44 = Total_gen_loss_WR44 + (Expected_gen_WR44 - WR_44_kwh)\n    Total_gen_loss_WR45 = Total_gen_loss_WR45 + (Expected_gen_WR45 - WR_45_kwh)\n    Total_gen_loss_WR46 = Total_gen_loss_WR46 + (Expected_gen_WR46 - WR_46_kwh)\n    Total_gen_loss_WR47 = Total_gen_loss_WR47 + (Expected_gen_WR47 - WR_47_kwh)\n    Total_gen_loss_WR48 = Total_gen_loss_WR48 + (Expected_gen_WR48 - WR_48_kwh)\n    Total_gen_loss_WR49 = Total_gen_loss_WR49 + (Expected_gen_WR49 - WR_49_kwh)\n    Total_gen_loss_WR50 = Total_gen_loss_WR50 + (Expected_gen_WR50 - WR_50_kwh)\n    Total_gen_loss_WR1_1 = Total_gen_loss_WR1_1 + (Expected_gen_WR1_1 - WR_1_1_kwh)\n    Total_gen_loss_WR1_2 = Total_gen_loss_WR1_2 + (Expected_gen_WR1_2 - WR_1_2_kwh)\n    Total_gen_loss_WR2_1 = Total_gen_loss_WR2_1 + (Expected_gen_WR2_1 - WR_2_1_kwh)\n    Total_gen_loss_WR2_2 = Total_gen_loss_WR2_2 + (Expected_gen_WR2_2 - WR_2_2_kwh)\n\n\n    var total_act_gen = [Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10,\n                            , Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR13, Total_ACT_WR14, Total_ACT_WR15, Total_ACT_WR16, Total_ACT_WR17, Total_ACT_WR18, Total_ACT_WR19, Total_ACT_WR20\n                            , Total_ACT_WR21, Total_ACT_WR22, Total_ACT_WR23, Total_ACT_WR24, Total_ACT_WR25, Total_ACT_WR26, Total_ACT_WR27, Total_ACT_WR28, Total_ACT_WR29, Total_ACT_WR30\n                            , Total_ACT_WR31, Total_ACT_WR32, Total_ACT_WR33, Total_ACT_WR34, Total_ACT_WR35, Total_ACT_WR36, Total_ACT_WR37, Total_ACT_WR38, Total_ACT_WR39, Total_ACT_WR40\n        , Total_ACT_WR41, Total_ACT_WR42, Total_ACT_WR43, Total_ACT_WR44, Total_ACT_WR45, Total_ACT_WR46, Total_ACT_WR47, Total_ACT_WR48, Total_ACT_WR49, Total_ACT_WR50, Total_ACT_WR1_1, Total_ACT_WR1_2, Total_ACT_WR2_1, Total_ACT_WR2_2]\n    var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10,\n                            , Total_exp_WR11, Total_exp_WR12, Total_exp_WR13, Total_exp_WR14, Total_exp_WR15, Total_exp_WR16, Total_exp_WR17, Total_exp_WR18, Total_exp_WR19, Total_exp_WR20\n                            , Total_exp_WR21, Total_exp_WR22, Total_exp_WR23, Total_exp_WR24, Total_exp_WR25, Total_exp_WR26, Total_exp_WR27, Total_exp_WR28, Total_exp_WR29, Total_exp_WR30\n                            , Total_exp_WR31, Total_exp_WR32, Total_exp_WR33, Total_exp_WR34, Total_exp_WR35, Total_exp_WR36, Total_exp_WR37, Total_exp_WR38, Total_exp_WR39, Total_exp_WR40\n        , Total_exp_WR41, Total_exp_WR42, Total_exp_WR43, Total_exp_WR44, Total_exp_WR45, Total_exp_WR46, Total_exp_WR47, Total_exp_WR48, Total_exp_WR49, Total_exp_WR50, Total_exp_WR1_1,Total_exp_WR1_2,Total_exp_WR2_1,Total_exp_WR2_2]\n    var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10,\n                            , Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR13, Total_gen_loss_WR14, Total_gen_loss_WR15, Total_gen_loss_WR16, Total_gen_loss_WR17, Total_gen_loss_WR18, Total_gen_loss_WR19, Total_gen_loss_WR20\n                            , Total_gen_loss_WR21, Total_gen_loss_WR22, Total_gen_loss_WR23, Total_gen_loss_WR24, Total_gen_loss_WR25, Total_gen_loss_WR26, Total_gen_loss_WR27, Total_gen_loss_WR28, Total_gen_loss_WR29, Total_gen_loss_WR30\n                            , Total_gen_loss_WR31, Total_gen_loss_WR32, Total_gen_loss_WR33, Total_gen_loss_WR34, Total_gen_loss_WR35, Total_gen_loss_WR36, Total_gen_loss_WR37, Total_gen_loss_WR38, Total_gen_loss_WR39, Total_gen_loss_WR40\n        , Total_gen_loss_WR41, Total_gen_loss_WR42, Total_gen_loss_WR43, Total_gen_loss_WR44, Total_gen_loss_WR45, Total_gen_loss_WR46, Total_gen_loss_WR47, Total_gen_loss_WR48, Total_gen_loss_WR49, Total_gen_loss_WR50, Total_gen_loss_WR1_1,Total_gen_loss_WR1_2,Total_gen_loss_WR2_1,Total_gen_loss_WR2_2]\n\n\n    obj = {\n        DATE,\n         WR_1_kwh,\n         WR_1_Sp_Y,\n         WR_2_kwh,\n         WR_2_Sp_Y,\n         WR_3_kwh,\n         WR_3_Sp_Y,\n         WR_4_kwh,\n         WR_4_Sp_Y,\n         WR_5_kwh,\n         WR_5_Sp_Y,\n         WR_6_kwh,\n         WR_6_Sp_Y,\n         WR_7_kwh,\n         WR_7_Sp_Y,\n         WR_8_kwh,\n         WR_8_Sp_Y,\n         WR_9_kwh,\n         WR_9_Sp_Y,\n         WR_10_kwh,\n         WR_10_Sp_Y,\n        WR_11_kwh,\n        WR_11_Sp_Y,\n        WR_12_kwh,\n        WR_12_Sp_Y,\n        WR_13_kwh,\n        WR_13_Sp_Y,\n        WR_14_kwh,\n        WR_14_Sp_Y,\n        WR_15_kwh,\n        WR_15_Sp_Y,\n        WR_16_kwh,\n        WR_16_Sp_Y,\n        WR_17_kwh,\n        WR_17_Sp_Y,\n        WR_18_kwh,\n        WR_18_Sp_Y,\n        WR_19_kwh,\n        WR_19_Sp_Y,\n        WR_20_kwh,\n        WR_20_Sp_Y,\n        WR_21_kwh,\n        WR_21_Sp_Y,\n        WR_22_kwh,\n        WR_22_Sp_Y,\n        WR_23_kwh,\n        WR_23_Sp_Y,\n        WR_24_kwh,\n        WR_24_Sp_Y,\n        WR_25_kwh,\n        WR_25_Sp_Y,\n        WR_26_kwh,\n        WR_26_Sp_Y,\n        WR_27_kwh,\n        WR_27_Sp_Y,\n        WR_28_kwh,\n        WR_28_Sp_Y,\n        WR_29_kwh,\n        WR_29_Sp_Y,\n        WR_30_kwh,\n        WR_30_Sp_Y,\n        WR_31_kwh,\n        WR_31_Sp_Y,\n        WR_32_kwh,\n        WR_32_Sp_Y,\n        WR_33_kwh,\n        WR_33_Sp_Y,\n        WR_34_kwh,\n        WR_34_Sp_Y,\n        WR_35_kwh,\n        WR_35_Sp_Y,\n        WR_36_kwh,\n        WR_36_Sp_Y,\n        WR_37_kwh,\n        WR_37_Sp_Y,\n        WR_38_kwh,\n        WR_38_Sp_Y,\n        WR_39_kwh,\n        WR_39_Sp_Y,\n        WR_40_kwh,\n        WR_40_Sp_Y,\n        WR_41_kwh,\n        WR_41_Sp_Y,\n        WR_42_kwh,\n        WR_42_Sp_Y,\n        WR_43_kwh,\n        WR_43_Sp_Y,\n        WR_44_kwh,\n        WR_44_Sp_Y,\n        WR_45_kwh,\n        WR_45_Sp_Y,\n        WR_46_kwh,\n        WR_46_Sp_Y,\n        WR_47_kwh,\n        WR_47_Sp_Y,\n        WR_48_kwh,\n        WR_48_Sp_Y,\n        WR_49_kwh,\n        WR_49_Sp_Y,\n        WR_50_kwh,\n        WR_50_Sp_Y,\n        \"WR_1/1_kwh\":WR_1_1_kwh,\n        \"WR_1/1_Sp_Y\":WR_1_1_Sp_Y,\n        \"WR_1/2_kwh\":WR_1_2_kwh,\n        \"WR_1/2_Sp_Y\":WR_1_2_Sp_Y,\n        \"WR_2/1_kwh\":WR_2_1_kwh,\n        \"WR_2/1_Sp_Y\":WR_2_1_Sp_Y,\n        \"WR_2/2_kwh\":WR_2_2_kwh,\n        \"WR_2/2_Sp_Y\":WR_2_2_Sp_Y,\n        Max_sy,\n        Expected_gen_WR1,\n        Expected_gen_WR2,\n        Expected_gen_WR3,\n        Expected_gen_WR4,\n        Expected_gen_WR5,\n        Expected_gen_WR6,\n        Expected_gen_WR7,\n        Expected_gen_WR8,\n        Expected_gen_WR9,\n        Expected_gen_WR10,\n        Expected_gen_WR11,\n        Expected_gen_WR12,\n        Expected_gen_WR13,\n        Expected_gen_WR14,\n        Expected_gen_WR15,\n        Expected_gen_WR16,\n        Expected_gen_WR17,\n        Expected_gen_WR18,\n        Expected_gen_WR19,\n        Expected_gen_WR20,\n        Expected_gen_WR21,\n        Expected_gen_WR22,\n        Expected_gen_WR23,\n        Expected_gen_WR24,\n        Expected_gen_WR25,\n        Expected_gen_WR26,\n        Expected_gen_WR27,\n        Expected_gen_WR28,\n        Expected_gen_WR29,\n        Expected_gen_WR30,\n        Expected_gen_WR31,\n        Expected_gen_WR32,\n        Expected_gen_WR33,\n        Expected_gen_WR34,\n        Expected_gen_WR35,\n        Expected_gen_WR36,\n        Expected_gen_WR37,\n        Expected_gen_WR38,\n        Expected_gen_WR39,\n        Expected_gen_WR40,\n        Expected_gen_WR41,\n        Expected_gen_WR42,\n        Expected_gen_WR43,\n        Expected_gen_WR44,\n        Expected_gen_WR45,\n        Expected_gen_WR46,\n        Expected_gen_WR47,\n        Expected_gen_WR48,\n        Expected_gen_WR49,\n        Expected_gen_WR50,\n        \"Expected_gen_WR1/1\":Expected_gen_WR1_1,\n        \"Expected_gen_WR1/2\":Expected_gen_WR1_2,\n        \"Expected_gen_WR2/1\":Expected_gen_WR2_1,\n        \"Expected_gen_WR2/2\":Expected_gen_WR2_2,\n        GEN_LOSS_WR1,\n        GEN_LOSS_WR2,\n        GEN_LOSS_WR3,\n        GEN_LOSS_WR4,\n        GEN_LOSS_WR5,\n        GEN_LOSS_WR6,\n        GEN_LOSS_WR7,\n        GEN_LOSS_WR8,\n        GEN_LOSS_WR9,\n        GEN_LOSS_WR10,\n        GEN_LOSS_WR11,\n        GEN_LOSS_WR12,\n        GEN_LOSS_WR13,\n        GEN_LOSS_WR14,\n        GEN_LOSS_WR15,\n        GEN_LOSS_WR16,\n        GEN_LOSS_WR17,\n        GEN_LOSS_WR18,\n        GEN_LOSS_WR19,\n        GEN_LOSS_WR20,\n        GEN_LOSS_WR21,\n        GEN_LOSS_WR22,\n        GEN_LOSS_WR23,\n        GEN_LOSS_WR24,\n        GEN_LOSS_WR25,\n        GEN_LOSS_WR26,\n        GEN_LOSS_WR27,\n        GEN_LOSS_WR28,\n        GEN_LOSS_WR29,\n        GEN_LOSS_WR30,\n        GEN_LOSS_WR31,\n        GEN_LOSS_WR32,\n        GEN_LOSS_WR33,\n        GEN_LOSS_WR34,\n        GEN_LOSS_WR35,\n        GEN_LOSS_WR36,\n        GEN_LOSS_WR37,\n        GEN_LOSS_WR38,\n        GEN_LOSS_WR39,\n        GEN_LOSS_WR40,\n        GEN_LOSS_WR41,\n        GEN_LOSS_WR42,\n        GEN_LOSS_WR43,\n        GEN_LOSS_WR44,\n        GEN_LOSS_WR45,\n        GEN_LOSS_WR46,\n        GEN_LOSS_WR47,\n        GEN_LOSS_WR48,\n        GEN_LOSS_WR49,\n        GEN_LOSS_WR50,\n        \"GEN_LOSS_WR1/1\":GEN_LOSS_WR1_1,\n        \"GEN_LOSS_WR1/2\":GEN_LOSS_WR1_2,\n        \"GEN_LOSS_WR2/1\":GEN_LOSS_WR2_1,\n        \"GEN_LOSS_WR2/2\":GEN_LOSS_WR2_2,\n    }\n}\n   /* if (i == msg.payload.length) {\n        obj = {\n            DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n        }\n    }*/\n\n    array.push(obj)\n    \n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\",totalgen_loss)\nflow.set(\"total_act_gen\",total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2300,
        "wires": [
            [
                "da404bc9eb04ea5c"
            ]
        ]
    },
    {
        "id": "da404bc9eb04ea5c",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 168",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2300,
        "wires": []
    },
    {
        "id": "7fe61fade76bd7df",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "header correction",
        "info": "",
        "x": 880,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b006e78e77ded358",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 169",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2240,
        "wires": []
    },
    {
        "id": "0edc0d8a25d31875",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "set header",
        "func": "var results = []\n//var filename = flow.get(\"filename\");\n//const plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\n var inv_array=[]\nfor (var i = 1; i < column.length; i++) {\n\n    const parts = column[i].split(\" \");\n    if (column[i].match(\"INV\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n        var WR = \",WR\" + num\n        var inv = \"WR\" + num\n        inv_array.push(inv)\n        column_header = column_header.concat(WR, sy);\n    }\n    else {\n        var num = parts[1];\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n        var pattern = num.match(/^[0-9/]+$/);\n        if (pattern != null) {\n            var WR = \",WR\" + pattern[0]\n            var inv = \"WR\" + pattern[0]\n            inv_array.push(inv)\n            column_header = column_header.concat(WR, sy);\n        }\n    }\n\nvar obj={\n    num, \n    sy,\n    column_header,\n    pattern\n}\nresults.push(obj)\n}\nmsg.payload=results\nflow.set(\"column\", column_header)\n//flow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array)\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1920,
        "wires": [
            [
                "1cc0ac3d9ff5bde6"
            ]
        ]
    },
    {
        "id": "05e728cbc359f810",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 700,
        "y": 1920,
        "wires": [
            [
                "0edc0d8a25d31875"
            ]
        ]
    },
    {
        "id": "cd3b3425e6357236",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 910,
        "y": 2240,
        "wires": [
            [
                "cffbd90b5d9b731d"
            ]
        ]
    },
    {
        "id": "cffbd90b5d9b731d",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1030,
        "y": 2240,
        "wires": [
            [
                "b006e78e77ded358",
                "f3d290907bc6bffd"
            ]
        ]
    },
    {
        "id": "39ec17042975338b",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2240,
        "wires": [
            [
                "cdbdee152d615b41"
            ]
        ]
    },
    {
        "id": "10ed5338ad6be31d",
        "type": "comment",
        "z": "a6dbce1f496ecb79",
        "name": "calculation",
        "info": "",
        "x": 700,
        "y": 2180,
        "wires": []
    },
    {
        "id": "1cc0ac3d9ff5bde6",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 170",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1920,
        "wires": []
    },
    {
        "id": "156c76e49b95da66",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 690,
        "y": 1960,
        "wires": [
            [
                "3d42622594e8d49e"
            ]
        ]
    },
    {
        "id": "e937c918ab4ee2be",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 171",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1960,
        "wires": []
    },
    {
        "id": "3d42622594e8d49e",
        "type": "change",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1960,
        "wires": [
            [
                "e937c918ab4ee2be"
            ]
        ]
    },
    {
        "id": "1eeeb8f2a3ee4316",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1920,
        "wires": [
            [
                "05e728cbc359f810",
                "156c76e49b95da66"
            ]
        ]
    },
    {
        "id": "7517ad55cb269917",
        "type": "inject",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "02d2b7c6f5bbbcaa"
            ]
        ]
    },
    {
        "id": "2ed4c3a0eac99c7b",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 172",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2420,
        "wires": []
    },
    {
        "id": "ccac03c99ab0680d",
        "type": "csv",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 610,
        "y": 2540,
        "wires": [
            [
                "44b5e12aba6b5e2b"
            ]
        ]
    },
    {
        "id": "7fa6a1bbddc04304",
        "type": "file",
        "z": "a6dbce1f496ecb79",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 910,
        "y": 2540,
        "wires": [
            [
                "e1dec14e3c78b609"
            ]
        ]
    },
    {
        "id": "e1dec14e3c78b609",
        "type": "debug",
        "z": "a6dbce1f496ecb79",
        "name": "debug 209",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 2540,
        "wires": []
    },
    {
        "id": "653b5ac58ad5d16f",
        "type": "delay",
        "z": "a6dbce1f496ecb79",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2540,
        "wires": [
            [
                "d89d9e08ae208f68"
            ]
        ]
    },
    {
        "id": "d89d9e08ae208f68",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2540,
        "wires": [
            [
                "ccac03c99ab0680d"
            ]
        ]
    },
    {
        "id": "44b5e12aba6b5e2b",
        "type": "function",
        "z": "a6dbce1f496ecb79",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/meters_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2540,
        "wires": [
            [
                "7fa6a1bbddc04304"
            ]
        ]
    },
    {
        "id": "374ee1f76734f724",
        "type": "comment",
        "z": "3932f5c7e7a8c8a4",
        "name": "using api ",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b31de34fc7f0297",
        "type": "comment",
        "z": "3932f5c7e7a8c8a4",
        "name": "2) Request protected data",
        "info": "",
        "x": 250,
        "y": 300,
        "wires": []
    },
    {
        "id": "77539bdeed738632",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            [
                "24f7cfcca4040af4"
            ]
        ]
    },
    {
        "id": "7ed2ba37e29922ec",
        "type": "inject",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "77539bdeed738632"
            ]
        ]
    },
    {
        "id": "24f7cfcca4040af4",
        "type": "http request",
        "z": "3932f5c7e7a8c8a4",
        "name": "GET Plant",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/datasource/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/inverters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "39f44e361ada12b3"
            ]
        ]
    },
    {
        "id": "a6510e4625e10c46",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 380,
        "wires": []
    },
    {
        "id": "39f44e361ada12b3",
        "type": "json",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 710,
        "y": 380,
        "wires": [
            [
                "14b7d2f3f0dda608",
                "b0c45d2184a1b559"
            ]
        ]
    },
    {
        "id": "156ce5ba93ab7048",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "1994c392e0cec138"
            ]
        ]
    },
    {
        "id": "14a42732171ec0b9",
        "type": "inject",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "156ce5ba93ab7048"
            ]
        ]
    },
    {
        "id": "1994c392e0cec138",
        "type": "http request",
        "z": "3932f5c7e7a8c8a4",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/datasource/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/inverters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 480,
        "wires": [
            [
                "7c1e86afb4f65682"
            ]
        ]
    },
    {
        "id": "0e3666147e0e9263",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 480,
        "wires": []
    },
    {
        "id": "e3273a6211c456cf",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "array of urls",
        "func": "msg.url=[\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\"\n\n]\nfor(var i = 0; i <msg.url.length; i++)\n{ \n    var url=msg.url[i]\n \n    var obj={\n    url\n}\n node.send(obj);\n}\n\nreturn null\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1160,
        "wires": [
            [
                "b308a19207caf4cd"
            ]
        ]
    },
    {
        "id": "d9288e4fada3fe5a",
        "type": "http request",
        "z": "3932f5c7e7a8c8a4",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 680,
        "y": 1160,
        "wires": [
            [
                "3c25776a4b3b508d"
            ]
        ]
    },
    {
        "id": "ab4cf609d4c15eed",
        "type": "inject",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1160,
        "wires": [
            [
                "e3273a6211c456cf"
            ]
        ]
    },
    {
        "id": "b308a19207caf4cd",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "url and token",
        "func": "msg.url\nmsg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "d9288e4fada3fe5a"
            ]
        ]
    },
    {
        "id": "93c8708084dde4a2",
        "type": "comment",
        "z": "3932f5c7e7a8c8a4",
        "name": "reading multiple url's",
        "info": "",
        "x": 230,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b53e97be99a39b0b",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "iteraton",
        "func": "let plantObj\n\nplantObj = []\n//for(j =0; j < msg.payload.length;j++)\nfor (var i =0; i < msg.payload[0].timestamp.length;i++)\n{\nvar obj={\n    Timestamp:msg.payload[0].timestamp[i],\n\"Swelect API_Test_Plant\":msg.payload[0].swelect_api_values[i],\n\"Swelect SBI_Admin_Office_Vizag\":msg.payload[0].swelect_sbi[i],\n\"OMPL 2 MWp Floating Plant\":msg.payload[0].ompl_2MWp[i],\n}\n\nplantObj.push(obj)\n}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "2dc051de99e70e0d"
            ]
        ]
    },
    {
        "id": "2dc051de99e70e0d",
        "type": "csv",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 690,
        "y": 1220,
        "wires": [
            [
                "a8ac6cd1bed833c1"
            ]
        ]
    },
    {
        "id": "4b3c4f2c4d6664bf",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "object to array",
        "func": "\n let plantObj\n\nplantObj = []\n\n//for (i =0; i < msg.payload.length;i++)\n//{\n var swelect_api=msg.payload.Swelect_API_Test_Plant[0].dataPoints\n var keys=Object.keys(swelect_api);\n var swelect_api_values=Object.values(swelect_api);\n var swelect_sbi=Object.values(msg.payload.Swelect_SBI_Admin_Office_Vizag[0].dataPoints);\n var ompl_2MWp=Object.values(msg.payload.OMPL_2_MWp_Floating_Plant[0].dataPoints);\nvar obj={\n  timestamp:keys,\n       swelect_api_values,\n       swelect_sbi,\n       ompl_2MWp\n\n}\n\nplantObj.push(obj)\n//}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "b53e97be99a39b0b"
            ]
        ]
    },
    {
        "id": "a8ac6cd1bed833c1",
        "type": "file",
        "z": "3932f5c7e7a8c8a4",
        "name": "sdsapi.csv",
        "filename": "/usr/src/node-red/sdsapi.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "22702003cd8e153c"
            ]
        ]
    },
    {
        "id": "7c1e86afb4f65682",
        "type": "json",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 850,
        "y": 480,
        "wires": [
            [
                "0e3666147e0e9263"
            ]
        ]
    },
    {
        "id": "a985d5f7352d9fea",
        "type": "file in",
        "z": "3932f5c7e7a8c8a4",
        "name": "opcua.csv",
        "filename": "/usr/src/node-red/sdsapi.csv",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 1300,
        "wires": [
            [
                "d50acddf238b04af"
            ]
        ]
    },
    {
        "id": "16e279711c24b4c5",
        "type": "inject",
        "z": "3932f5c7e7a8c8a4",
        "name": "1) Insert nodeId items",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 1300,
        "wires": [
            [
                "a985d5f7352d9fea"
            ]
        ]
    },
    {
        "id": "d50acddf238b04af",
        "type": "csv",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 590,
        "y": 1300,
        "wires": [
            [
                "074e67ec2e72689f"
            ]
        ]
    },
    {
        "id": "074e67ec2e72689f",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3c25776a4b3b508d",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.url){\n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_API_Test_Plant = msg.payload;\n        msg = null;\n        break;\n        \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_SBI_Admin_Office_Vizag = msg.payload;\n        msg = null;\n        break;\n    \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.OMPL_2_MWp_Floating_Plant = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.Swelect_API_Test_Plant != null && context.data.Swelect_SBI_Admin_Office_Vizag != null&& context.data.OMPL_2_MWp_Floating_Plant != null){\n    var data_combine = {\n        \"Swelect_API_Test_Plant\": context.data.Swelect_API_Test_Plant,\n        \"Swelect_SBI_Admin_Office_Vizag\":context.data.Swelect_SBI_Admin_Office_Vizag,\n        \"OMPL_2_MWp_Floating_Plant\":context.data.OMPL_2_MWp_Floating_Plant\n        }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1160,
        "wires": [
            [
                "4b3c4f2c4d6664bf"
            ]
        ]
    },
    {
        "id": "22702003cd8e153c",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1220,
        "wires": []
    },
    {
        "id": "6cb15287029fdad8",
        "type": "http request",
        "z": "3932f5c7e7a8c8a4",
        "name": "solarlog",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://auth.enerest.world/auth/realms/quotaapi/protocol/openid-connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "2b5fc47c6b457296"
            ]
        ]
    },
    {
        "id": "33474c781f2ac57f",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Content-Type' : 'application/x-www-form-urlencoded'\n};\n\n// client backend-service\n/*\nmsg.payload = {'grant_type':'password', \n               'client_id':'backend-service',\n               'username':'alice',\n               'password':'alice',\n               'client_secret':'secret'\n              };\n*/\n\nmsg.payload = {'grant_type':'client_credentials', \n               'client_id':'650fb07e-8a18-4907-a6c4-e4f432f52cb2',\n               'client_secret':'b7f327e7-60de-4cb5-909a-ee916445e143'\n              };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "6cb15287029fdad8"
            ]
        ]
    },
    {
        "id": "d666049974bfccb8",
        "type": "comment",
        "z": "3932f5c7e7a8c8a4",
        "name": "1) Request bearer access token",
        "info": "",
        "x": 250,
        "y": 120,
        "wires": []
    },
    {
        "id": "f6b8c15f8ef5301e",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "2b5fc47c6b457296",
        "type": "json",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 730,
        "y": 200,
        "wires": [
            [
                "5f1b8d475a035924"
            ]
        ]
    },
    {
        "id": "5f1b8d475a035924",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "set_bearer_token",
        "func": "flow.set(\"bearer_token\", \"Bearer \" + msg.payload.access_token);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "f6b8c15f8ef5301e"
            ]
        ]
    },
    {
        "id": "41f9c23412fcbe45",
        "type": "comment",
        "z": "3932f5c7e7a8c8a4",
        "name": "Bearer access token saved as flow variable",
        "info": "",
        "x": 1000,
        "y": 140,
        "wires": []
    },
    {
        "id": "ef7aa7d30737e696",
        "type": "inject",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "33474c781f2ac57f"
            ]
        ]
    },
    {
        "id": "14b7d2f3f0dda608",
        "type": "function",
        "z": "3932f5c7e7a8c8a4",
        "name": "function 120",
        "func": "var array=[]\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var sum = 0\n    for (var j = 0; j < msg.payload[i].mpptrackers.length; j++)\n    {\n         \n        var inv =msg.payload[i].name\n       sum=sum+msg.payload[i].mpptrackers[j].size\n    \n    }\nvar obj={\n    Name:inv,\n    INV_Capacity:sum/1000\n        }\n    \narray.push(obj)    \n}\nmsg.payload=array\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 380,
        "wires": [
            [
                "a6510e4625e10c46"
            ]
        ]
    },
    {
        "id": "b0c45d2184a1b559",
        "type": "debug",
        "z": "3932f5c7e7a8c8a4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 320,
        "wires": []
    },
    {
        "id": "65ef9a799edbd33e",
        "type": "debug",
        "z": "625008ad79be5f82",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 300,
        "wires": []
    },
    {
        "id": "2aa58f75276b966d",
        "type": "http request",
        "z": "625008ad79be5f82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "98d797ca59c92ee2"
            ]
        ]
    },
    {
        "id": "d15b049595a7d70d",
        "type": "function",
        "z": "625008ad79be5f82",
        "name": "array of API",
        "func": "//function sleep(ms) {\n // return new Promise(resolve => setTimeout(resolve, ms));\n//}\n\nvar tv_result = msg.payload[0].tv+\",\"\nvar fv_result = msg.payload[0].fv + \",\"\nvar fc_result = msg.payload[0].fc + \",\"\nvar ip = msg.payload[0].ip\nvar p = msg.payload[0].p\nfor (var i = 1; i < msg.payload.length; i++) { \nif(i!=msg.payload.length-1)\n    { tv_result = tv_result+msg.payload[i].tv.concat(\",\")\n    fv_result = fv_result + msg.payload[i].fv.concat(\",\")\n    fc_result = fc_result + msg.payload[i].fc.concat(\",\")}\n     else{\n     tv_result = tv_result + msg.payload[i].tv.concat(\"\")\n    fv_result = fv_result + msg.payload[i].fv.concat(\"\")\n    fc_result = fc_result + msg.payload[i].fc.concat(\"\")\n     }\n}\nmsg.url = \"http://localhost:84/iec61850?ip=\"+ip+\"&p=\"+p+\"&tv=\"+tv_result+\"&fv=\"+fv_result+\"&fc=\"+fc_result\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "2aa58f75276b966d"
            ]
        ]
    },
    {
        "id": "7b4b13fe1e54aacc",
        "type": "function",
        "z": "625008ad79be5f82",
        "name": "comparison",
        "func": "var plantobj=[]\nfor (var i = 0; i < msg.payload.api.length;i++)\n{\n    for (var j = 0; j < msg.payload.test.length; j++)\n    {\n        var field = msg.payload.api[i].field\n        var fd = msg.payload.test[j].fv\n        var value = msg.payload.api[i].value\n        if (value == \"false\") { value = 0 }\n        if (value == \"true\") { value = 1 }\n        if (field==fd)\n        {\n            var timestamp = new Date(msg.payload.api[i].time).getTime();\n            var dateUTC1 =msg.payload.api[i].time //.toISOString().slice(0, 19);\n           // var dateUTC = dateUTC1 + 'Z';\n            var p = msg.payload.test[j].p\n            var ip = msg.payload.test[j].ip\n            var b = msg.payload.test[j].b\n            var d = msg.payload.test[j].d\n            var td = msg.payload.test[j].tv\n            var f = msg.payload.test[j].f\n            var fc = msg.payload.test[j].fc\n            //var value = msg.payload.api[i].value\n \n           \n             var obj={\n                Time:dateUTC1,\n                value,   \n               b,\n               d,\n               f,\n               td,\n               fd  \n                    }  \n    \n        plantobj.push(obj)\n        }\n    }\n}\nmsg.payload=plantobj\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 340,
        "wires": [
            [
                "65ef9a799edbd33e",
                "86dec68952d4d383"
            ]
        ]
    },
    {
        "id": "9f630e5220612002",
        "type": "csv",
        "z": "625008ad79be5f82",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "d15b049595a7d70d",
                "15917edbbc79d400"
            ]
        ]
    },
    {
        "id": "98d797ca59c92ee2",
        "type": "change",
        "z": "625008ad79be5f82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "api",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 240,
        "wires": [
            [
                "9835f11bf37f3afd"
            ]
        ]
    },
    {
        "id": "15917edbbc79d400",
        "type": "change",
        "z": "625008ad79be5f82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "test",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 340,
        "wires": [
            [
                "9835f11bf37f3afd"
            ]
        ]
    },
    {
        "id": "9835f11bf37f3afd",
        "type": "function",
        "z": "625008ad79be5f82",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"api\":\n        context.data.api = msg.payload;\n        msg = null;\n        break;\n    case \"test\":\n        context.data.test = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.api != null && context.data.test != null) {\n    var data_combine = {\n        \"api\": context.data.api,\n        \"test\": context.data.test\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 340,
        "wires": [
            [
                "7b4b13fe1e54aacc"
            ]
        ]
    },
    {
        "id": "86dec68952d4d383",
        "type": "function",
        "z": "625008ad79be5f82",
        "name": "influx table",
        "func": "\n\nfor (var i = 0; i < msg.payload.length; i++) {\n       var obj = {};\n    \n    obj.payload =\n        [\n            {\n                measurement: \"iec61850\",\n                \n                fields: {\n\n                    value: parseFloat(msg.payload[i].value)\n                    \n\n                },\n                tags: {\n                     b : msg.payload[i].b,\n                     d :msg.payload[i].d,\n                     f :msg.payload[i].f,\n                    td: msg.payload[i].td,\n                     fd : msg.payload[i].fd,\n                    \n\n                },\n\n                time:msg.payload[i].Time\n            }\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "14cfad2b8cebc385",
        "type": "influxdb batch",
        "z": "625008ad79be5f82",
        "influxdb": "0829fbfbcf5b2407",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iec61850",
        "x": 1210,
        "y": 400,
        "wires": []
    },
    {
        "id": "32c8b84b03bbb5ae",
        "type": "cronplus",
        "z": "625008ad79be5f82",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0/5 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c1c6d9fda80e769f",
        "type": "file",
        "z": "625008ad79be5f82",
        "name": "test csv",
        "filename": "/home/req_api.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "ebd6187c54b12cf4"
            ]
        ]
    },
    {
        "id": "65c5bc395a067df0",
        "type": "template",
        "z": "625008ad79be5f82",
        "name": "api",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "s.no,ip,p,tv,fv,fc,b,d,f\n1,192.168.33.6,102,CSC211_1CTRL/CSWI1.Pos.t,CSC211_1CTRL/CSWI1.Pos.stVal,ST,CRP,110kV_Trafo_BCPU,CB_POS\n2,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind20.t,CSC211_1CTRL/BinInGGIO1.Ind20.stVal,ST,CRP,110kV_Trafo_BCPU,SF6_LOCKOUT\n3,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind18.t,CSC211_1CTRL/BinInGGIO1.Ind18.stVal,ST,CRP,110kV_Trafo_BCPU,86A_TRIP_RELAY_OPTD\n4,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind21.t,CSC211_1CTRL/BinInGGIO1.Ind21.stVal,ST,CRP,110kV_Trafo_BCPU,CB_SPRING_CHARGED\n5,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind10.t,CSC211_1CTRL/BinInGGIO1.Ind10.stVal,ST,CRP,110kV_Trafo_BCPU,TRAFO_TROUBLE_ALARM\n6,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind9.t,CSC211_1CTRL/BinInGGIO1.Ind9.stVal,ST,CRP,110kV_Trafo_BCPU,TRIP_CKT_1_FAULTY\n7,192.168.33.6,102,CSC211_1PROT/evePVOC93.Op.t,CSC211_1PROT/evePVOC93.Op.general,ST,CRP,110kV_Trafo_BCPU,O/C_PROTN_OPTD\n8,192.168.33.6,102,CSC211_1PROT/evePVOC93.Op.t,CSC211_1PROT/evePVOC93.Op.phsA,ST,CRP,110kV_Trafo_BCPU,O/C_PROTN_OPTD_PH_A\n9,192.168.33.6,102,CSC211_1PROT/evePVOC93.Op.t,CSC211_1PROT/evePVOC93.Op.phsB,ST,CRP,110kV_Trafo_BCPU,O/C_PROTN_OPTD_PH_B\n10,192.168.33.6,102,CSC211_1PROT/evePVOC93.Op.t,CSC211_1PROT/evePVOC93.Op.phsC,ST,CRP,110kV_Trafo_BCPU,O/C_PROTN_OPTD_PH_C\n11,192.168.33.6,102,CSC211_1PROT/evePVOC93.Op.t,CSC211_1PROT/evePVOC93.Op.neut,ST,CRP,110kV_Trafo_BCPU,O/C_PROTN_OPTD_N\n12,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind8.t,CSC211_1CTRL/BinInGGIO1.Ind8.stVal,ST,CRP,110kV_Trafo_BCPU,86B_TRIP_RELAY_OPTD\n14,192.168.33.6,102,CSC211_1CTRL/BinInGGIO1.Ind14.t,CSC211_1CTRL/BinInGGIO1.Ind14.stVal,ST,CRP,110kV_Trafo_BCPU,96_LBB_TRIP_RELAY_OPTD\n15,192.168.33.6,102,CSC211_1PROT/evePVOC16.Op.t,CSC211_1PROT/evePVOC16.Op.general,ST,CRP,110kV_Trafo_BCPU,E/F_PROTN_OPTD\n16,192.168.33.6,102,CSC211_1PROT/evePVOC16.Op.t,CSC211_1PROT/evePVOC16.Op.phsA,ST,CRP,110kV_Trafo_BCPU,E/F_PROTN_OPTD_PH_A\n17,192.168.33.6,102,CSC211_1PROT/evePVOC16.Op.t,CSC211_1PROT/evePVOC16.Op.phsB,ST,CRP,110kV_Trafo_BCPU,E/F_PROTN_OPTD_PH_B\n18,192.168.33.6,102,CSC211_1PROT/evePVOC16.Op.t,CSC211_1PROT/evePVOC16.Op.phsC,ST,CRP,110kV_Trafo_BCPU,E/F_PROTN_OPTD_PH_C\n19,192.168.33.6,102,CSC211_1PROT/evePVOC16.Op.t,CSC211_1PROT/evePVOC16.Op.neut,ST,CRP,110kV_Trafo_BCPU,E/F_PROTN_OPTD_N\n20,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PhV.phsA.t,CSC211_1MEAS/meaMMXU1.PhV.phsA.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_A\n21,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PhV.phsB.t,CSC211_1MEAS/meaMMXU1.PhV.phsB.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_B\n22,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PhV.phsC.t,CSC211_1MEAS/meaMMXU1.PhV.phsC.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_C\n23,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PhV.neut.t,CSC211_1MEAS/meaMMXU1.PhV.neut.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_N\n24,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.A.phsA.t,CSC211_1MEAS/meaMMXU1.A.phsA.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,IAC_A\n25,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.A.phsB.t,CSC211_1MEAS/meaMMXU1.A.phsB.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,IAC_B\n26,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.A.phsC.t,CSC211_1MEAS/meaMMXU1.A.phsC.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,IAC_C\n27,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PPV.phsAB.t,CSC211_1MEAS/meaMMXU1.PPV.phsAB.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_AB\n28,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PPV.phsBC.t,CSC211_1MEAS/meaMMXU1.PPV.phsBC.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_BC\n29,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.PPV.phsCA.t,CSC211_1MEAS/meaMMXU1.PPV.phsCA.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,UAC_CA\n30,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.TotW.t,CSC211_1MEAS/meaMMXU1.TotW.mag.f,MX,CRP,110kV_Trafo_BCPU,PAC\n31,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.TotVAr.t,CSC211_1MEAS/meaMMXU1.TotVAr.mag.f,MX,CRP,110kV_Trafo_BCPU,QAC\n32,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.W.phsA.t,CSC211_1MEAS/meaMMXU1.W.phsA.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,PAC_A\n33,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.W.phsB.t,CSC211_1MEAS/meaMMXU1.W.phsB.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,PAC_B\n34,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.W.phsC.t,CSC211_1MEAS/meaMMXU1.W.phsC.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,PAC_C\n35,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.VAr.phsA.t,CSC211_1MEAS/meaMMXU1.VAr.phsA.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,QAC_A\n36,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.VAr.phsB.t,CSC211_1MEAS/meaMMXU1.VAr.phsB.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,QAC_B\n37,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.VAr.phsC.t,CSC211_1MEAS/meaMMXU1.VAr.phsC.cVal.mag.f,MX,CRP,110kV_Trafo_BCPU,QAC_C\n38,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.TotPF.t,CSC211_1MEAS/meaMMXU1.TotPF.mag.f,MX,CRP,110kV_Trafo_BCPU,PF\n39,192.168.33.6,102,CSC211_1MEAS/meaMMXU1.Hz.t,CSC211_1MEAS/meaMMXU1.Hz.mag.f,MX,CRP,110kV_Trafo_BCPU,FAC",
        "output": "str",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "c1c6d9fda80e769f"
            ]
        ]
    },
    {
        "id": "2e28100662618f24",
        "type": "inject",
        "z": "625008ad79be5f82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "65c5bc395a067df0"
            ]
        ]
    },
    {
        "id": "ebd6187c54b12cf4",
        "type": "debug",
        "z": "625008ad79be5f82",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "0547886934684613",
        "type": "file in",
        "z": "625008ad79be5f82",
        "name": "req csv",
        "filename": "/home/req_api.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "9f630e5220612002"
            ]
        ]
    },
    {
        "id": "90edfb3c6ce588c9",
        "type": "comment",
        "z": "625008ad79be5f82",
        "name": "input req api csv file import",
        "info": "",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "3b29927a1db202f6",
        "type": "comment",
        "z": "625008ad79be5f82",
        "name": "Actual api query flow",
        "info": "",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "0ad08691b16996b7",
        "type": "fs-ops-dir",
        "z": "9bb7160e32e22f02",
        "name": "",
        "path": "/home/iplon/Downloads/JD thomas june report s",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "665c45b9e8b794f7"
            ]
        ]
    },
    {
        "id": "4745770e924048ad",
        "type": "inject",
        "z": "9bb7160e32e22f02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "0ad08691b16996b7"
            ]
        ]
    },
    {
        "id": "70b60d2db52e7165",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/JD thomas june report s/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "5eec3b6cdafd5555",
                "b2379ef02f2de6c5",
                "630a27dc010a2718",
                "1126849444fa55e0",
                "d3ff46222391be1c",
                "1257a96d318166e8"
            ]
        ]
    },
    {
        "id": "665c45b9e8b794f7",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 120,
        "wires": [
            [
                "70b60d2db52e7165"
            ]
        ]
    },
    {
        "id": "5eec3b6cdafd5555",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 173",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "b2379ef02f2de6c5",
        "type": "file in",
        "z": "9bb7160e32e22f02",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "103416a5a740e427"
            ]
        ]
    },
    {
        "id": "83ceaa31ecf844ba",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "81cc0b873d5fe0c7"
            ]
        ]
    },
    {
        "id": "5b5536221bf9b221",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "report generation plant info table",
        "info": "",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "bf56885e317507b5",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 176",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 560,
        "wires": []
    },
    {
        "id": "630a27dc010a2718",
        "type": "delay",
        "z": "9bb7160e32e22f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 560,
        "wires": [
            [
                "83ceaa31ecf844ba"
            ]
        ]
    },
    {
        "id": "c3ec01eaf367b828",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "report file",
        "func": "var plant = flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/JD THOMAS plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "c7698f3083019bc7"
            ]
        ]
    },
    {
        "id": "c7698f3083019bc7",
        "type": "file",
        "z": "9bb7160e32e22f02",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 560,
        "wires": [
            [
                "bf56885e317507b5"
            ]
        ]
    },
    {
        "id": "81cc0b873d5fe0c7",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 530,
        "y": 560,
        "wires": [
            [
                "c3ec01eaf367b828"
            ]
        ]
    },
    {
        "id": "e68bf38292544a42",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 490,
        "y": 700,
        "wires": [
            [
                "a61b7de10490b485"
            ]
        ]
    },
    {
        "id": "d71570e3ddaf1d80",
        "type": "file",
        "z": "9bb7160e32e22f02",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 700,
        "wires": [
            [
                "dad89bd9348ada7c"
            ]
        ]
    },
    {
        "id": "dad89bd9348ada7c",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 179",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 700,
        "wires": []
    },
    {
        "id": "1126849444fa55e0",
        "type": "delay",
        "z": "9bb7160e32e22f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 700,
        "wires": [
            [
                "9479c7ab7639b185"
            ]
        ]
    },
    {
        "id": "795c56ae9c2b1104",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 560,
        "y": 620,
        "wires": []
    },
    {
        "id": "9479c7ab7639b185",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "e68bf38292544a42"
            ]
        ]
    },
    {
        "id": "b9bb011c94ce12d9",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 560,
        "y": 780,
        "wires": []
    },
    {
        "id": "a61b7de10490b485",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/JD THOMAS plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            [
                "d71570e3ddaf1d80"
            ]
        ]
    },
    {
        "id": "d3ff46222391be1c",
        "type": "delay",
        "z": "9bb7160e32e22f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 820,
        "wires": [
            [
                "26457e43f50593a3"
            ]
        ]
    },
    {
        "id": "aeb839cc665ed043",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "596b805c9f6bed8a"
            ]
        ]
    },
    {
        "id": "596b805c9f6bed8a",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/JD THOMAS plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "39e6c744cdbbb9f4"
            ]
        ]
    },
    {
        "id": "39e6c744cdbbb9f4",
        "type": "file",
        "z": "9bb7160e32e22f02",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 810,
        "y": 820,
        "wires": [
            [
                "3e27492438b6c5f7"
            ]
        ]
    },
    {
        "id": "3e27492438b6c5f7",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 180",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 820,
        "wires": []
    },
    {
        "id": "8a2d020bc2d64007",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 188",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 900,
        "wires": []
    },
    {
        "id": "31e6e0eba636d4f3",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "header correction",
        "info": "",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "2f44dfa12956c993",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "calculation",
        "info": "",
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "26457e43f50593a3",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i],\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "aeb839cc665ed043",
                "8a2d020bc2d64007"
            ]
        ]
    },
    {
        "id": "676527b94afa0cf0",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "setup 2nd Table",
        "func": "\nvar totalgen_loss = flow.get(\"totalgen_loss\")\nvar total_act_gen = flow.get(\"total_act_gen\")\nvar total_exp_gen = flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array = []\nvar loss = []\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh = calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++) {\n    if (i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY,\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n\n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) { }\n\n    else {\n\n        if (plant_CAPACITY >= 50) {\n            var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.075\n        }\n        if (plant_CAPACITY < 50) {\n            var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n        }\n        loss.push(LOSS_IN_CURRENCY)\n        obj = {\n            INVERTERS: keys[i].match(/WR[\\w\\d]+/)[0],\n            Capacity_in_kWp: INV_CAPACITY[i],\n            Actual_Generation_in_kWh: values[i].toFixed(2),\n            Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n            Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n            Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n\n        }\n        array.push(obj)\n    }\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "60d8b5343627a17a",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 680,
        "y": 240,
        "wires": [
            [
                "bc6ee60b61432309"
            ]
        ]
    },
    {
        "id": "c69cbd9b3c68e476",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 258",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 240,
        "wires": []
    },
    {
        "id": "2c4cd57a939038c8",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 670,
        "y": 280,
        "wires": [
            [
                "79f2af745af86f8c"
            ]
        ]
    },
    {
        "id": "bf53cef5d654748d",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "79f2af745af86f8c",
        "type": "change",
        "z": "9bb7160e32e22f02",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 280,
        "wires": [
            [
                "bf53cef5d654748d"
            ]
        ]
    },
    {
        "id": "103416a5a740e427",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "60d8b5343627a17a",
                "2c4cd57a939038c8"
            ]
        ]
    },
    {
        "id": "01c625d83e461446",
        "type": "file in",
        "z": "9bb7160e32e22f02",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/JD THOMAS NAME LIST 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 420,
        "wires": [
            [
                "6360df6a866ff6de"
            ]
        ]
    },
    {
        "id": "6360df6a866ff6de",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 430,
        "y": 420,
        "wires": [
            [
                "5d7b8668cc70e927"
            ]
        ]
    },
    {
        "id": "5d7b8668cc70e927",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, , payload[k].col50]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR0) || \"null\",\n                             parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/1 albert\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/2 albert\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/2\"]) || \"null\",\n                             parseFloat(msg.payload[i].F9) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 4\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1 showroom\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 4\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 5\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 6\"]) || \"null\",\n                           ]\n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "7c329486ac6740b1"
            ]
        ]
    },
    {
        "id": "0ac53bd062f1a5ff",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 260",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 480,
        "wires": []
    },
    {
        "id": "6a1026253d310853",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 261",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "7c329486ac6740b1",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 810,
        "y": 420,
        "wires": [
            [
                "ac712c8e178e1143"
            ]
        ]
    },
    {
        "id": "ac712c8e178e1143",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "6a1026253d310853",
                "5bccab8541f5c043"
            ]
        ]
    },
    {
        "id": "1257a96d318166e8",
        "type": "delay",
        "z": "9bb7160e32e22f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "01c625d83e461446"
            ]
        ]
    },
    {
        "id": "bc6ee60b61432309",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\nvar inv_array = []\nvar obj\nif (plant == 1077672705) {\n    column_header = column_header.concat\n        (\",T1 WR 1 (Wh)\",\n            \",Specific Yield T1 WR 1 (kWh / kWp)\",\n            \",T1 WR 2 (Wh)\",\n            \",Specific Yield T1 WR 2 (kWh / kWp)\",\n            \",T1 WR 3 (Wh)\",\n            \",Specific Yield T1 WR 3 (kWh / kWp)\",\n            \",T2 WR 1 (Wh)\",\n            \",Specific Yield T2 WR 1 (kWh / kWp)\",\n            \",T2 WR 2 (Wh)\",\n            \",Specific Yield T2 WR 2 (kWh / kWp)\",\n            \",T2 WR 3 (Wh)\",\n            \",Specific Yield T2 WR 3 (kWh / kWp)\",\n            \",T2 WR 4 (Wh)\",\n            \",Specific Yield T2 WR 4 (kWh / kWp)\",\n            \",T2 WR 5 (Wh)\",\n            \",Specific Yield T2 WR 5 (kWh / kWp)\",\n            \",T2 WR 6 (Wh)\",\n            \",Specific Yield T2 WR 6 (kWh / kWp)\")\n\n}\nelse {\n    for (var i = 1; i < column.length; i++) {\n        var check = column[i].match(\"WR\")\n        var inv_re = column[i].substring(0, column[i].indexOf('('));\n        if (column[i].match(\"WR\")) {\n            var num = column[i].match(/\\d+/g).map(Number);\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n        if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n\n        obj = {\n            sy,\n            check,\n            column_header,\n            inv_re,\n            col: column[i],\n            column\n\n        }\n        results.push(obj)\n    }\n}\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array)\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "c69cbd9b3c68e476"
            ]
        ]
    },
    {
        "id": "5bccab8541f5c043",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\n\nvar Total_exp_WR0 = 0\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR_1_1_albert = 0\nvar Total_exp_WR_1_2_albert = 0\nvar Total_exp_WR_2_1 = 0\nvar Total_exp_WR_2_2 = 0\nvar Total_exp_Versuchsfeld_F9 = 0\nvar Total_exp_Delta_1 = 0\nvar Total_exp_Delta_2 = 0\nvar Total_exp_Delta_3 = 0\nvar Total_exp_Delta_4 = 0\nvar Total_exp_WR1_showroom = 0\nvar Total_exp_T1_WR_1 = 0\nvar Total_exp_T1_WR_2 = 0\nvar Total_exp_T1_WR_3 = 0\nvar Total_exp_T2_WR_1 = 0\nvar Total_exp_T2_WR_2 = 0\nvar Total_exp_T2_WR_3 = 0\nvar Total_exp_T2_WR_4 = 0\nvar Total_exp_T2_WR_5 = 0\nvar Total_exp_T2_WR_6 = 0\n\nvar Total_ACT_WR0 = 0\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR_1_1_albert = 0\nvar Total_ACT_WR_1_2_albert = 0\nvar Total_ACT_WR_2_1 = 0\nvar Total_ACT_WR_2_2 = 0\nvar Total_ACT_Versuchsfeld_F9 = 0\nvar Total_ACT_Delta_1 = 0\nvar Total_ACT_Delta_2 = 0\nvar Total_ACT_Delta_3 = 0\nvar Total_ACT_Delta_4 = 0\nvar Total_ACT_WR1_showroom = 0\nvar Total_ACT_T1_WR_1 = 0\nvar Total_ACT_T1_WR_2 = 0\nvar Total_ACT_T1_WR_3 = 0\nvar Total_ACT_T2_WR_1 = 0\nvar Total_ACT_T2_WR_2 = 0\nvar Total_ACT_T2_WR_3 = 0\nvar Total_ACT_T2_WR_4 = 0\nvar Total_ACT_T2_WR_5 = 0\nvar Total_ACT_T2_WR_6 = 0\n\nvar Total_gen_loss_WR0 = 0\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR_1_1_albert = 0\nvar Total_gen_loss_WR_1_2_albert = 0\nvar Total_gen_loss_WR_2_1 = 0\nvar Total_gen_loss_WR_2_2 = 0\nvar Total_gen_loss_Versuchsfeld_F9 = 0\nvar Total_gen_loss_Delta_1 = 0\nvar Total_gen_loss_Delta_2 = 0\nvar Total_gen_loss_Delta_3 = 0\nvar Total_gen_loss_Delta_4 = 0\nvar Total_gen_loss_WR1_showroom = 0\nvar Total_gen_loss_T1_WR_1 = 0\nvar Total_gen_loss_T1_WR_2 = 0\nvar Total_gen_loss_T1_WR_3 = 0\nvar Total_gen_loss_T2_WR_1 = 0\nvar Total_gen_loss_T2_WR_2 = 0\nvar Total_gen_loss_T2_WR_3 = 0\nvar Total_gen_loss_T2_WR_4 = 0\nvar Total_gen_loss_T2_WR_5 = 0\nvar Total_gen_loss_T2_WR_6 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n\n        var WR0_kwh = msg.payload[i][\"WR 0\"] / 1000\n        var WR0_Sp_Y = msg.payload[i][\"Specific Yield_WR 0\"]\n        var WR1_kwh = msg.payload[i][\"WR 1\"] / 1000\n        var WR1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR2_kwh = msg.payload[i][\"WR 2\"] / 1000\n        var WR2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR3_kwh = msg.payload[i][\"WR 3\"] / 1000\n        var WR3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR4_kwh = msg.payload[i][\"WR 4\"] / 1000\n        var WR4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR5_kwh = msg.payload[i][\"WR 5\"] / 1000\n        var WR5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR6_kwh = msg.payload[i][\"WR 6\"] / 1000\n        var WR6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR7_kwh = msg.payload[i][\"WR 7\"] / 1000\n        var WR7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR8_kwh = msg.payload[i][\"WR 8\"] / 1000\n        var WR8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR9_kwh = msg.payload[i][\"WR 9\"] / 1000\n        var WR9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR10_kwh = msg.payload[i][\"WR 10\"] / 1000\n        var WR10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR11_kwh = msg.payload[i][\"WR 11\"] / 1000\n        var WR11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR12_kwh = msg.payload[i][\"WR 12\"] / 1000\n        var WR12_Sp_Y = msg.payload[i][\"Specific Yield_WR 12\"]\n        var WR_1_1_albert_kwh = msg.payload[i][\"WR 1/1 Albert\"] / 1000\n        var WR_1_1_albert_Sp_Y = msg.payload[i][\"Specific Yield_WR 1/1 Albert\"]\n        var WR_1_2_albert_kwh = msg.payload[i][\"WR 1/2 Albert\"] / 1000\n        var WR_1_2_albert_Sp_Y = msg.payload[i][\"Specific Yield_WR 1/2 Albert\"]\n        var WR_2_1_kwh = msg.payload[i][\"WR 2/1\"] / 1000\n        var WR_2_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 2/1\"]\n        var WR_2_2_kwh = msg.payload[i][\"WR 2/2\"] / 1000\n        var WR_2_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2/2\"]\n        var Versuchsfeld_F9_kwh = msg.payload[i][\"Versuchsfeld F9\"] / 1000\n        var Versuchsfeld_F9_Sp_Y = msg.payload[i][\"Specific Yield_Versuchsfeld F9\"]\n        var Delta_1_kwh = msg.payload[i][\"Delta 1\"] / 1000\n        var Delta_1_Sp_Y = msg.payload[i][\"Specific Yield_Delta 1\"]\n        var Delta_2_kwh = msg.payload[i][\"Delta 2\"] / 1000\n        var Delta_2_Sp_Y = msg.payload[i][\"Specific Yield_Delta 2\"]\n        var Delta_3_kwh = msg.payload[i][\"Delta 3\"] / 1000\n        var Delta_3_Sp_Y = msg.payload[i][\"Specific Yield_Delta 3\"]\n        var Delta_4_kwh = msg.payload[i][\"Delta 4\"] / 1000\n        var Delta_4_Sp_Y = msg.payload[i][\"Specific Yield_Delta 4\"]\n        var WR1_showroom_kwh = msg.payload[i][\"WR 1 Showroom\"] / 1000\n        var WR1_showroom_Sp_Y = msg.payload[i][\"Specific Yield_WR 1 Showroom\"]\n        var T1_WR_1_kwh = msg.payload[i][\"T1 WR 1 (Wh)\"]/1000\n        var T1_WR_1_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 1 (kWh / kWp)\"]\n        var T1_WR_2_kwh = msg.payload[i][\"T1 WR 2 (Wh)\"] / 1000\n        var T1_WR_2_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 2 (kWh / kWp)\"]\n        var T1_WR_3_kwh = msg.payload[i][\"T1 WR 3 (Wh)\"] / 1000\n        var T1_WR_3_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 3 (kWh / kWp)\"]\n        var T2_WR_1_kwh = msg.payload[i][\"T2 WR 1 (Wh)\"] / 1000\n        var T2_WR_1_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 1 (kWh / kWp)\"]\n        var T2_WR_2_kwh = msg.payload[i][\"T2 WR 2 (Wh)\"] / 1000\n        var T2_WR_2_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 2 (kWh / kWp)\"]\n        var T2_WR_3_kwh = msg.payload[i][\"T2 WR 3 (Wh)\"] / 1000\n        var T2_WR_3_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 3 (kWh / kWp)\"]\n        var T2_WR_4_kwh = msg.payload[i][\"T2 WR 4 (Wh)\"] / 1000\n        var T2_WR_4_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 4 (kWh / kWp)\"]\n        var T2_WR_5_kwh = msg.payload[i][\"T2 WR 5 (Wh)\"] / 1000\n        var T2_WR_5_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 5 (kWh / kWp)\"]\n        var T2_WR_6_kwh = msg.payload[i][\"T2 WR 6 (Wh)\"] / 1000\n        var T2_WR_6_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 6 (kWh / kWp)\"]\n\n\n        var Max_sy = Math.max(WR0_Sp_Y || 0, WR1_Sp_Y || 0, WR2_Sp_Y || 0, WR3_Sp_Y || 0, WR4_Sp_Y || 0, WR5_Sp_Y || 0, WR6_Sp_Y || 0, WR7_Sp_Y || 0, WR8_Sp_Y || 0, WR9_Sp_Y || 0, WR10_Sp_Y || 0, WR11_Sp_Y || 0, WR12_Sp_Y || 0, WR_1_1_albert_Sp_Y || 0, WR_1_2_albert_Sp_Y || 0, WR_2_1_Sp_Y || 0, WR_2_2_Sp_Y || 0, Versuchsfeld_F9_Sp_Y || 0, Delta_1_Sp_Y || 0, Delta_2_Sp_Y || 0, Delta_3_Sp_Y || 0, Delta_4_Sp_Y || 0, WR1_showroom_Sp_Y || 0, T1_WR_1_Sp_Y || 0, T1_WR_2_Sp_Y || 0, T1_WR_3_Sp_Y || 0, T2_WR_1_Sp_Y || 0, T2_WR_2_Sp_Y || 0, T2_WR_3_Sp_Y || 0, T2_WR_4_Sp_Y || 0, T2_WR_5_Sp_Y || 0, T2_WR_6_Sp_Y || 0)\n\n        var WR0_CAPACITY = inv_cap[0]\n        var WR1_CAPACITY = inv_cap[1]\n        var WR2_CAPACITY = inv_cap[2]\n        var WR3_CAPACITY = inv_cap[3]\n        var WR4_CAPACITY = inv_cap[4]\n        var WR5_CAPACITY = inv_cap[5]\n        var WR6_CAPACITY = inv_cap[6]\n        var WR7_CAPACITY = inv_cap[7]\n        var WR8_CAPACITY = inv_cap[8]\n        var WR9_CAPACITY = inv_cap[9]\n        var WR10_CAPACITY = inv_cap[10]\n        var WR11_CAPACITY = inv_cap[11]\n        var WR12_CAPACITY = inv_cap[12]\n        var WR1_1_albert_CAPACITY = inv_cap[13]\n        var WR1_2_albert_CAPACITY = inv_cap[14]\n        var WR2_1_CAPACITY = inv_cap[15]\n        var WR2_2_CAPACITY = inv_cap[16]\n        var Versuchsfeld_F9_CAPACITY = inv_cap[17]\n        var Delta_1_CAPACITY = inv_cap[18]\n        var Delta_2_CAPACITY = inv_cap[19]\n        var Delta_3_CAPACITY = inv_cap[20]\n        var Delta_4_CAPACITY = inv_cap[21]\n        var WR1_showroom_CAPACITY = inv_cap[22]\n        var T1_WR_1_CAPACITY = inv_cap[23]\n        var T1_WR_2_CAPACITY = inv_cap[24]\n        var T1_WR_3_CAPACITY = inv_cap[25]\n        var T2_WR_1_CAPACITY = inv_cap[26]\n        var T2_WR_2_CAPACITY = inv_cap[27]\n        var T2_WR_3_CAPACITY = inv_cap[28]\n        var T2_WR_4_CAPACITY = inv_cap[29]\n        var T2_WR_5_CAPACITY = inv_cap[30]\n        var T2_WR_6_CAPACITY = inv_cap[31]\n\n\n        var Expected_gen_WR0 = Max_sy * WR0_CAPACITY\n        var Expected_gen_WR1 = Max_sy * WR1_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_CAPACITY\n        var Expected_gen_WR12 = Max_sy * WR12_CAPACITY\n        var Expected_gen_WR_1_1_albert = Max_sy * WR1_1_albert_CAPACITY\n        var Expected_gen_WR_1_2_albert = Max_sy * WR1_2_albert_CAPACITY\n        var Expected_gen_WR_2_1 = Max_sy * WR2_1_CAPACITY\n        var Expected_gen_WR_2_2 = Max_sy * WR2_2_CAPACITY\n        var Expected_gen_Versuchsfeld_F9 = Max_sy * Versuchsfeld_F9_CAPACITY\n        var Expected_gen_Delta_1 = Max_sy * Delta_1_CAPACITY\n        var Expected_gen_Delta_2 = Max_sy * Delta_2_CAPACITY\n        var Expected_gen_Delta_3 = Max_sy * Delta_3_CAPACITY\n        var Expected_gen_Delta_4 = Max_sy * Delta_4_CAPACITY\n        var Expected_gen_WR1_showroom = Max_sy * WR1_showroom_CAPACITY\n        var Expected_gen_T1_WR_1 = Max_sy * T1_WR_1_CAPACITY\n        var Expected_gen_T1_WR_2 = Max_sy * T1_WR_2_CAPACITY\n        var Expected_gen_T1_WR_3 = Max_sy * T1_WR_3_CAPACITY\n        var Expected_gen_T2_WR_1 = Max_sy * T2_WR_1_CAPACITY\n        var Expected_gen_T2_WR_2 = Max_sy * T2_WR_2_CAPACITY\n        var Expected_gen_T2_WR_3 = Max_sy * T2_WR_3_CAPACITY\n        var Expected_gen_T2_WR_4 = Max_sy * T2_WR_4_CAPACITY\n        var Expected_gen_T2_WR_5 = Max_sy * T2_WR_5_CAPACITY\n        var Expected_gen_T2_WR_6 = Max_sy * T2_WR_6_CAPACITY\n\n        Total_exp_WR0 = Total_exp_WR0 + Expected_gen_WR0\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n        Total_exp_WR_1_1_albert = Total_exp_WR_1_1_albert + Expected_gen_WR_1_1_albert\n        Total_exp_WR_1_2_albert = Total_exp_WR_1_2_albert + Expected_gen_WR_1_2_albert\n        Total_exp_WR_2_1 = Total_exp_WR_2_1 + Expected_gen_WR_2_1\n        Total_exp_WR_2_2 = Total_exp_WR_2_2 + Expected_gen_WR_2_2\n        Total_exp_Versuchsfeld_F9 = Total_exp_Versuchsfeld_F9 + Expected_gen_Versuchsfeld_F9\n        Total_exp_Delta_1 = Total_exp_Delta_1 + Expected_gen_Delta_1\n        Total_exp_Delta_2 = Total_exp_Delta_2 + Expected_gen_Delta_2\n        Total_exp_Delta_3 = Total_exp_Delta_3 + Expected_gen_Delta_3\n        Total_exp_Delta_4 = Total_exp_Delta_4 + Expected_gen_Delta_4\n        Total_exp_WR1_showroom = Total_exp_WR1_showroom + Expected_gen_WR1_showroom\n        Total_exp_T1_WR_1 = Total_exp_T1_WR_1 + Expected_gen_T1_WR_1\n        Total_exp_T1_WR_2 = Total_exp_T1_WR_2 + Expected_gen_T1_WR_2\n        Total_exp_T1_WR_3 = Total_exp_T1_WR_3 + Expected_gen_T1_WR_3\n        Total_exp_T2_WR_1 = Total_exp_T2_WR_1 + Expected_gen_T2_WR_1\n        Total_exp_T2_WR_2 = Total_exp_T2_WR_2 + Expected_gen_T2_WR_2\n        Total_exp_T2_WR_3 = Total_exp_T2_WR_3 + Expected_gen_T2_WR_3\n        Total_exp_T2_WR_4 = Total_exp_T2_WR_4 + Expected_gen_T2_WR_4\n        Total_exp_T2_WR_5 = Total_exp_T2_WR_5 + Expected_gen_T2_WR_5\n        Total_exp_T2_WR_6 = Total_exp_T2_WR_6 + Expected_gen_T2_WR_6\n\n        Total_ACT_WR0 = Total_ACT_WR0 + WR0_kwh\n        Total_ACT_WR1 = Total_ACT_WR1 + WR1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR11_kwh\n        Total_ACT_WR12 = Total_ACT_WR12 + WR12_kwh\n        Total_ACT_WR_1_1_albert = Total_ACT_WR_1_1_albert + WR_1_1_albert_kwh\n        Total_ACT_WR_1_2_albert = Total_ACT_WR_1_2_albert + WR_1_2_albert_kwh\n        Total_ACT_WR_2_1 = Total_ACT_WR_2_1 + WR_2_1_kwh\n        Total_ACT_WR_2_2 = Total_ACT_WR_2_2 + WR_2_2_kwh\n        Total_ACT_Versuchsfeld_F9 = Total_ACT_Versuchsfeld_F9 + Versuchsfeld_F9_kwh\n        Total_ACT_Delta_1 = Total_ACT_Delta_1 + Delta_1_kwh\n        Total_ACT_Delta_2 = Total_ACT_Delta_2 + Delta_2_kwh\n        Total_ACT_Delta_3 = Total_ACT_Delta_3 + Delta_3_kwh\n        Total_ACT_Delta_4 = Total_ACT_Delta_4 + Delta_4_kwh\n        Total_ACT_WR1_showroom = Total_ACT_WR1_showroom + WR1_showroom_kwh\n        Total_ACT_T1_WR_1 = Total_ACT_T1_WR_1 + T1_WR_1_kwh\n        Total_ACT_T1_WR_2 = Total_ACT_T1_WR_2 + T1_WR_2_kwh\n        Total_ACT_T1_WR_3 = Total_ACT_T1_WR_3 + T1_WR_3_kwh\n        Total_ACT_T2_WR_1 = Total_ACT_T2_WR_1 + T2_WR_1_kwh\n        Total_ACT_T2_WR_2 = Total_ACT_T2_WR_2 + T2_WR_2_kwh\n        Total_ACT_T2_WR_3 = Total_ACT_T2_WR_3 + T2_WR_3_kwh\n        Total_ACT_T2_WR_4 = Total_ACT_T2_WR_4 + T2_WR_4_kwh\n        Total_ACT_T2_WR_5 = Total_ACT_T2_WR_5 + T2_WR_5_kwh\n        Total_ACT_T2_WR_6 = Total_ACT_T2_WR_6 + T2_WR_6_kwh\n\n\n        if ((Expected_gen_WR0 != WR0_kwh) || (WR0_kwh == 0)) { var GEN_LOSS_WR0 = (Expected_gen_WR0 - WR0_kwh) } else { GEN_LOSS_WR0 = \"0\" }\n        if ((Expected_gen_WR1 != WR1_kwh) || (WR1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR2_kwh) || (WR2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR3_kwh) || (WR3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR4_kwh) || (WR4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR5_kwh) || (WR5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR6_kwh) || (WR6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR7_kwh) || (WR7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR8_kwh) || (WR8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR9_kwh) || (WR9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR10_kwh) || (WR10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR11_kwh) || (WR11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR12 != WR12_kwh) || (WR12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n        if ((Expected_gen_WR_1_1_albert != WR_1_1_albert_kwh) || (WR_1_1_albert_kwh == 0)) { var GEN_LOSS_WR_1_1_albert = (Expected_gen_WR_1_1_albert - WR_1_1_albert_kwh) } else { GEN_LOSS_WR_1_1_albert = \"0\" }\n        if ((Expected_gen_WR_1_2_albert != WR_1_2_albert_kwh) || (WR_1_2_albert_kwh == 0)) { var GEN_LOSS_WR_1_2_albert = (Expected_gen_WR_1_2_albert - WR_1_2_albert_kwh) } else { GEN_LOSS_WR_1_2_albert = \"0\" }\n        if ((Expected_gen_WR_2_1 != WR_2_1_kwh) || (WR_2_1_kwh == 0)) { var GEN_LOSS_WR_2_1 = (Expected_gen_WR_2_1 - WR_2_1_kwh) } else { GEN_LOSS_WR_2_1 = \"0\" }\n        if ((Expected_gen_WR_2_2 != WR_2_2_kwh) || (WR_2_2_kwh == 0)) { var GEN_LOSS_WR_2_2 = (Expected_gen_WR_2_2 - WR_2_2_kwh) } else { GEN_LOSS_WR_2_2 = \"0\" }\n        if ((Expected_gen_Versuchsfeld_F9 != Versuchsfeld_F9_kwh) || (Versuchsfeld_F9_kwh == 0)) { var GEN_LOSS_Versuchsfeld_F9 = (Expected_gen_Versuchsfeld_F9 - Versuchsfeld_F9_kwh) } else { GEN_LOSS_Versuchsfeld_F9 = \"0\" }\n        if ((Expected_gen_Delta_1 != Delta_1_kwh) || (Delta_1_kwh == 0)) { var GEN_LOSS_Delta_1 = (Expected_gen_Delta_1 - Delta_1_kwh) } else { GEN_LOSS_Delta_1 = \"0\" }\n        if ((Expected_gen_Delta_2 != Delta_2_kwh) || (Delta_2_kwh == 0)) { var GEN_LOSS_Delta_2 = (Expected_gen_Delta_2 - Delta_2_kwh) } else { GEN_LOSS_Delta_2 = \"0\" }\n        if ((Expected_gen_Delta_3 != Delta_3_kwh) || (Delta_3_kwh == 0)) { var GEN_LOSS_Delta_3 = (Expected_gen_Delta_3 - Delta_3_kwh) } else { GEN_LOSS_Delta_3 = \"0\" }\n        if ((Expected_gen_Delta_4 != Delta_4_kwh) || (Delta_4_kwh == 0)) { var GEN_LOSS_Delta_4 = (Expected_gen_Delta_4 - Delta_4_kwh) } else { GEN_LOSS_Delta_4 = \"0\" }\n        if ((Expected_gen_WR1_showroom != WR1_showroom_kwh) || (WR1_showroom_kwh == 0)) { var GEN_LOSS_WR1_showroom = (Expected_gen_WR1_showroom - WR1_showroom_kwh) } else { GEN_LOSS_WR1_showroom = \"0\" }\n        if ((Expected_gen_T1_WR_1 != T1_WR_1_kwh) || (T1_WR_1_kwh == 0)) { var GEN_LOSS_T1_WR_1 = (Expected_gen_T1_WR_1 - T1_WR_1_kwh) } else { GEN_LOSS_T1_WR_1 = \"0\" }\n        if ((Expected_gen_T1_WR_2 != T1_WR_2_kwh) || (T1_WR_2_kwh == 0)) { var GEN_LOSS_T1_WR_2 = (Expected_gen_T1_WR_2 - T1_WR_2_kwh) } else { GEN_LOSS_T1_WR_2 = \"0\" }\n        if ((Expected_gen_T1_WR_3 != T1_WR_3_kwh) || (T1_WR_3_kwh == 0)) { var GEN_LOSS_T1_WR_3 = (Expected_gen_T1_WR_3 - T1_WR_3_kwh) } else { GEN_LOSS_T1_WR_3 = \"0\" }\n        if ((Expected_gen_T2_WR_1 != T2_WR_1_kwh) || (T2_WR_1_kwh == 0)) { var GEN_LOSS_T2_WR_1 = (Expected_gen_T2_WR_1 - T2_WR_1_kwh) } else { GEN_LOSS_T2_WR_1 = \"0\" }\n        if ((Expected_gen_T2_WR_2 != T2_WR_2_kwh) || (T2_WR_2_kwh == 0)) { var GEN_LOSS_T2_WR_2 = (Expected_gen_T2_WR_2 - T2_WR_2_kwh) } else { GEN_LOSS_T2_WR_2 = \"0\" }\n        if ((Expected_gen_T2_WR_3 != T2_WR_3_kwh) || (T2_WR_3_kwh == 0)) { var GEN_LOSS_T2_WR_3 = (Expected_gen_T2_WR_3 - T2_WR_3_kwh) } else { GEN_LOSS_T2_WR_3 = \"0\" }\n        if ((Expected_gen_T2_WR_4 != T2_WR_4_kwh) || (T2_WR_4_kwh == 0)) { var GEN_LOSS_T2_WR_4 = (Expected_gen_T2_WR_4 - T2_WR_4_kwh) } else { GEN_LOSS_T2_WR_4 = \"0\" }\n        if ((Expected_gen_T2_WR_5 != T2_WR_5_kwh) || (T2_WR_5_kwh == 0)) { var GEN_LOSS_T2_WR_5 = (Expected_gen_T2_WR_5 - T2_WR_5_kwh) } else { GEN_LOSS_T2_WR_5 = \"0\" }\n        if ((Expected_gen_T2_WR_6 != T2_WR_6_kwh) || (T2_WR_6_kwh == 0)) { var GEN_LOSS_T2_WR_6 = (Expected_gen_T2_WR_6 - T2_WR_6_kwh) } else { GEN_LOSS_T2_WR_6 = \"0\" }\n\n        Total_gen_loss_WR0 = Total_gen_loss_WR0 + (Expected_gen_WR0 - WR0_kwh)\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR11_kwh)\n        Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR12_kwh)\n        Total_gen_loss_WR_1_1_albert = Total_gen_loss_WR_1_1_albert + (Expected_gen_WR_1_1_albert - WR_1_1_albert_kwh)\n        Total_gen_loss_WR_1_2_albert = Total_gen_loss_WR_1_2_albert + (Expected_gen_WR_1_2_albert - WR_1_2_albert_kwh)\n        Total_gen_loss_WR_2_1 = Total_gen_loss_WR_2_1 + (Expected_gen_WR_2_1 - WR_2_1_kwh)\n        Total_gen_loss_WR_2_2 = Total_gen_loss_WR_2_2 + (Expected_gen_WR_2_2 - WR_2_2_kwh)\n        Total_gen_loss_Versuchsfeld_F9 = Total_gen_loss_Versuchsfeld_F9 + (Expected_gen_Versuchsfeld_F9 - Versuchsfeld_F9_kwh)\n        Total_gen_loss_Delta_1 = Total_gen_loss_Delta_1 + (Expected_gen_Delta_1 - Delta_1_kwh)\n        Total_gen_loss_Delta_2 = Total_gen_loss_Delta_2 + (Expected_gen_Delta_2 - Delta_2_kwh)\n        Total_gen_loss_Delta_3 = Total_gen_loss_Delta_3 + (Expected_gen_Delta_3 - Delta_3_kwh)\n        Total_gen_loss_Delta_4 = Total_gen_loss_Delta_4 + (Expected_gen_Delta_4 - Delta_4_kwh)\n        Total_gen_loss_WR1_showroom = Total_gen_loss_WR1_showroom + (Expected_gen_WR1_showroom - WR1_showroom_kwh)\n        Total_gen_loss_T1_WR_1 = Total_gen_loss_T1_WR_1 + (Expected_gen_T1_WR_1 - T1_WR_1_kwh)\n        Total_gen_loss_T1_WR_2 = Total_gen_loss_T1_WR_2 + (Expected_gen_T1_WR_2 - T1_WR_2_kwh)\n        Total_gen_loss_T1_WR_3 = Total_gen_loss_T1_WR_3 + (Expected_gen_T1_WR_3 - T1_WR_3_kwh)\n        Total_gen_loss_T2_WR_1 = Total_gen_loss_T2_WR_1 + (Expected_gen_T2_WR_1 - T2_WR_1_kwh)\n        Total_gen_loss_T2_WR_2 = Total_gen_loss_T2_WR_2 + (Expected_gen_T2_WR_2 - T2_WR_2_kwh)\n        Total_gen_loss_T2_WR_3 = Total_gen_loss_T2_WR_3 + (Expected_gen_T2_WR_3 - T2_WR_3_kwh)\n        Total_gen_loss_T2_WR_4 = Total_gen_loss_T2_WR_4 + (Expected_gen_T2_WR_4 - T2_WR_4_kwh)\n        Total_gen_loss_T2_WR_5 = Total_gen_loss_T2_WR_5 + (Expected_gen_T2_WR_5 - T2_WR_5_kwh)\n        Total_gen_loss_T2_WR_6 = Total_gen_loss_T2_WR_6 + (Expected_gen_T2_WR_6 - T2_WR_6_kwh)\n\n\n        var total_act_gen = [{\n            Total_ACT_WR0, Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR_1_1_albert, Total_ACT_WR_1_2_albert, Total_ACT_WR_2_1, Total_ACT_WR_2_2, Total_ACT_Versuchsfeld_F9, Total_ACT_Delta_1, Total_ACT_Delta_2, Total_ACT_Delta_3, Total_ACT_Delta_4, Total_ACT_WR1_showroom, Total_ACT_T1_WR_1, Total_ACT_T1_WR_2, Total_ACT_T1_WR_3, Total_ACT_T2_WR_1, Total_ACT_T2_WR_2, Total_ACT_T2_WR_3, Total_ACT_T2_WR_4, Total_ACT_T2_WR_5,\n            Total_ACT_T2_WR_6\n        }]\n        var total_exp_gen = [Total_exp_WR0, Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR12, Total_exp_WR_1_1_albert, Total_exp_WR_1_2_albert, Total_exp_WR_2_1, Total_exp_WR_2_2, Total_exp_Versuchsfeld_F9, Total_exp_Delta_1, Total_exp_Delta_2, Total_exp_Delta_3, Total_exp_Delta_4, Total_exp_WR1_showroom, Total_exp_T1_WR_1, Total_exp_T1_WR_2, Total_exp_T1_WR_3, Total_exp_T2_WR_1, Total_exp_T2_WR_2, Total_exp_T2_WR_3, Total_exp_T2_WR_4, Total_exp_T2_WR_5,\n            Total_exp_T2_WR_6]\n        var totalgen_loss = [Total_gen_loss_WR0, Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR_1_1_albert, Total_gen_loss_WR_1_2_albert, Total_gen_loss_WR_2_1, Total_gen_loss_WR_2_2, Total_gen_loss_Versuchsfeld_F9, Total_gen_loss_Delta_1, Total_gen_loss_Delta_2, Total_gen_loss_Delta_3, Total_gen_loss_Delta_4, Total_gen_loss_WR1_showroom, Total_gen_loss_T1_WR_1, Total_gen_loss_T1_WR_2, Total_gen_loss_T1_WR_3, Total_gen_loss_T2_WR_1, Total_gen_loss_T2_WR_2, Total_gen_loss_T2_WR_3, Total_gen_loss_T2_WR_4, Total_gen_loss_T2_WR_5,\n            Total_gen_loss_T2_WR_6]\n\n\n        obj = {\n            DATE,\n            WR0_kwh,\n            WR0_Sp_Y,\n            WR1_kwh,\n            WR1_Sp_Y,\n            WR2_kwh,\n            WR2_Sp_Y,\n            WR3_kwh,\n            WR3_Sp_Y,\n            WR4_kwh,\n            WR4_Sp_Y,\n            WR5_kwh,\n            WR5_Sp_Y,\n            WR6_kwh,\n            WR6_Sp_Y,\n            WR7_kwh,\n            WR7_Sp_Y,\n            WR8_kwh,\n            WR8_Sp_Y,\n            WR9_kwh,\n            WR9_Sp_Y,\n            WR10_kwh,\n            WR10_Sp_Y,\n            WR11_kwh,\n            WR11_Sp_Y,\n            WR12_kwh,\n            WR12_Sp_Y,\n            WR_1_1_albert_kwh,\n            WR_1_1_albert_Sp_Y,\n            WR_1_2_albert_kwh,\n            WR_1_2_albert_Sp_Y,\n            WR_2_1_kwh,\n            WR_2_1_Sp_Y,\n            WR_2_2_kwh,\n            WR_2_2_Sp_Y,\n            Versuchsfeld_F9_kwh,\n            Versuchsfeld_F9_Sp_Y,\n            Delta_1_kwh,\n            Delta_1_Sp_Y,\n            Delta_2_kwh,\n            Delta_2_Sp_Y,\n            Delta_3_kwh,\n            Delta_3_Sp_Y,\n            Delta_4_kwh,\n            Delta_4_Sp_Y,\n            WR1_showroom_kwh,\n            WR1_showroom_Sp_Y,\n            T1_WR_1_kwh,\n            T1_WR_1_Sp_Y,\n            T1_WR_2_kwh,\n            T1_WR_2_Sp_Y,\n            T1_WR_3_kwh,\n            T1_WR_3_Sp_Y,\n            T2_WR_1_kwh,\n            T2_WR_1_Sp_Y,\n            T2_WR_2_kwh,\n            T2_WR_2_Sp_Y,\n            T2_WR_3_kwh,\n            T2_WR_3_Sp_Y,\n            T2_WR_4_kwh,\n            T2_WR_4_Sp_Y,\n            T2_WR_5_kwh,\n            T2_WR_5_Sp_Y,\n            T2_WR_6_kwh,\n            T2_WR_6_Sp_Y,\n            Max_sy,\n            Expected_gen_WR0: Expected_gen_WR0.toFixed(2),\n            Expected_gen_WR1: Expected_gen_WR1.toFixed(2),\n            Expected_gen_WR2: Expected_gen_WR2.toFixed(2),\n            Expected_gen_WR3: Expected_gen_WR3.toFixed(2),\n            Expected_gen_WR4: Expected_gen_WR4.toFixed(2),\n            Expected_gen_WR5: Expected_gen_WR5.toFixed(2),\n            Expected_gen_WR6: Expected_gen_WR6.toFixed(2),\n            Expected_gen_WR7: Expected_gen_WR7.toFixed(2),\n            Expected_gen_WR8: Expected_gen_WR8.toFixed(2),\n            Expected_gen_WR9: Expected_gen_WR9.toFixed(2),\n            Expected_gen_WR10: Expected_gen_WR10.toFixed(2),\n            Expected_gen_WR11: Expected_gen_WR11.toFixed(2),\n            Expected_gen_WR12: Expected_gen_WR12.toFixed(2),\n            Expected_gen_WR_1_1_albert: Expected_gen_WR_1_1_albert.toFixed(2),\n            Expected_gen_WR_1_2_albert: Expected_gen_WR_1_2_albert.toFixed(2),\n            Expected_gen_WR_2_1: Expected_gen_WR_2_1.toFixed(2),\n            Expected_gen_WR_2_2: Expected_gen_WR_2_2.toFixed(2),\n            Expected_gen_Versuchsfeld_F9: Expected_gen_Versuchsfeld_F9.toFixed(2),\n            Expected_gen_Delta_1: Expected_gen_Delta_1.toFixed(2),\n            Expected_gen_Delta_2: Expected_gen_Delta_2.toFixed(2),\n            Expected_gen_Delta_3: Expected_gen_Delta_3.toFixed(2),\n            Expected_gen_Delta_4: Expected_gen_Delta_4.toFixed(2),\n            Expected_gen_WR1_showroom: Expected_gen_WR1_showroom.toFixed(2),\n            Expected_gen_T1_WR_1: Expected_gen_T1_WR_1.toFixed(2),\n            Expected_gen_T1_WR_2: Expected_gen_T1_WR_2.toFixed(2),\n            Expected_gen_T1_WR_3: Expected_gen_T1_WR_3.toFixed(2),\n            Expected_gen_T2_WR_1: Expected_gen_T2_WR_1.toFixed(2),\n            Expected_gen_T2_WR_2: Expected_gen_T2_WR_2.toFixed(2),\n            Expected_gen_T2_WR_3: Expected_gen_T2_WR_3.toFixed(2),\n            Expected_gen_T2_WR_4: Expected_gen_T2_WR_4.toFixed(2),\n            Expected_gen_T2_WR_5: Expected_gen_T2_WR_5.toFixed(2),\n            Expected_gen_T2_WR_6: Expected_gen_T2_WR_6.toFixed(2),\n            GEN_LOSS_WR0: parseFloat(GEN_LOSS_WR0).toFixed(2),\n            GEN_LOSS_WR1: parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2: parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3: parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4: parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5: parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6: parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7: parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8: parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9: parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10: parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11: parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR12: parseFloat(GEN_LOSS_WR12).toFixed(2),\n            GEN_LOSS_WR_1_1_albert: parseFloat(GEN_LOSS_WR_1_1_albert).toFixed(2),\n            GEN_LOSS_WR_1_2_albert: parseFloat(GEN_LOSS_WR_1_2_albert).toFixed(2),\n            GEN_LOSS_WR_2_1: parseFloat(GEN_LOSS_WR_2_1).toFixed(2),\n            GEN_LOSS_WR_2_2: parseFloat(GEN_LOSS_WR_2_2).toFixed(2),\n            GEN_LOSS_Versuchsfeld_F9: parseFloat(GEN_LOSS_Versuchsfeld_F9).toFixed(2),\n            GEN_LOSS_Delta_1: parseFloat(GEN_LOSS_Delta_1).toFixed(2),\n            GEN_LOSS_Delta_2: parseFloat(GEN_LOSS_Delta_2).toFixed(2),\n            GEN_LOSS_Delta_3: parseFloat(GEN_LOSS_Delta_3).toFixed(2),\n            GEN_LOSS_Delta_4: parseFloat(GEN_LOSS_Delta_4).toFixed(2),\n            GEN_LOSS_WR1_showroom: parseFloat(GEN_LOSS_WR1_showroom).toFixed(2),\n            GEN_LOSS_T1_WR_1: parseFloat(GEN_LOSS_T1_WR_1).toFixed(2),\n            GEN_LOSS_T1_WR_2: parseFloat(GEN_LOSS_T1_WR_2).toFixed(2),\n            GEN_LOSS_T1_WR_3: parseFloat(GEN_LOSS_T1_WR_3).toFixed(2),\n            GEN_LOSS_T2_WR_1: parseFloat(GEN_LOSS_T2_WR_1).toFixed(2),\n            GEN_LOSS_T2_WR_2: parseFloat(GEN_LOSS_T2_WR_2).toFixed(2),\n            GEN_LOSS_T2_WR_3: parseFloat(GEN_LOSS_T2_WR_3).toFixed(2),\n            GEN_LOSS_T2_WR_4: parseFloat(GEN_LOSS_T2_WR_4).toFixed(2),\n            GEN_LOSS_T2_WR_5: parseFloat(GEN_LOSS_T2_WR_5).toFixed(2),\n            GEN_LOSS_T2_WR_6: parseFloat(GEN_LOSS_T2_WR_6).toFixed(2),\n\n        }\n    }\n    /* if (i == msg.payload.length) {\n         obj = {\n             DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n         }\n     }*/\n\n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 480,
        "wires": [
            [
                "0ac53bd062f1a5ff"
            ]
        ]
    },
    {
        "id": "461fbc4b9bd0a9e6",
        "type": "fs-ops-dir",
        "z": "9bb7160e32e22f02",
        "name": "",
        "path": "/home/iplon/Downloads/JD thomas june report s",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "75563917869f36c9"
            ]
        ]
    },
    {
        "id": "125de8fa41533854",
        "type": "inject",
        "z": "9bb7160e32e22f02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "461fbc4b9bd0a9e6",
                "c06f9106f194a1fe",
                "84c5395ca6668bd3"
            ]
        ]
    },
    {
        "id": "bf47bc5fe583212b",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/JD thomas june report s/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "388258a3b3d7ca01"
            ]
        ]
    },
    {
        "id": "75563917869f36c9",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1100,
        "wires": [
            [
                "bf47bc5fe583212b"
            ]
        ]
    },
    {
        "id": "388258a3b3d7ca01",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 262",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c06f9106f194a1fe",
        "type": "file in",
        "z": "9bb7160e32e22f02",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/JD thomas june report s/810155626_2023-06-01_2023-06-30.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 210,
        "y": 1220,
        "wires": [
            [
                "a0dc500ae72ad399"
            ]
        ]
    },
    {
        "id": "14010cf799b12b71",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "report generation plant info table",
        "info": "",
        "x": 630,
        "y": 1480,
        "wires": []
    },
    {
        "id": "ce1731624de35554",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "header correction",
        "info": "",
        "x": 900,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9319e3719aad4882",
        "type": "comment",
        "z": "9bb7160e32e22f02",
        "name": "calculation",
        "info": "",
        "x": 640,
        "y": 1340,
        "wires": []
    },
    {
        "id": "432584b2275e360c",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 700,
        "y": 1220,
        "wires": [
            [
                "6ce73f56405ec51f"
            ]
        ]
    },
    {
        "id": "ea55cbe846458c1e",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 263",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a6688145bd4584b7",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 690,
        "y": 1260,
        "wires": [
            [
                "3ea2582cafc13da9"
            ]
        ]
    },
    {
        "id": "205a19cfeff3328c",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 264",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3ea2582cafc13da9",
        "type": "change",
        "z": "9bb7160e32e22f02",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1260,
        "wires": [
            [
                "205a19cfeff3328c"
            ]
        ]
    },
    {
        "id": "a0dc500ae72ad399",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1220,
        "wires": [
            [
                "432584b2275e360c",
                "a6688145bd4584b7"
            ]
        ]
    },
    {
        "id": "f02a1a0c2ec74316",
        "type": "file in",
        "z": "9bb7160e32e22f02",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/JD THOMAS NAME LIST 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 1400,
        "wires": [
            [
                "7749c8a979111eb5"
            ]
        ]
    },
    {
        "id": "7749c8a979111eb5",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 450,
        "y": 1400,
        "wires": [
            [
                "7e1aafbc41e15e8e"
            ]
        ]
    },
    {
        "id": "7e1aafbc41e15e8e",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, , payload[k].col50]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR0) || \"null\",\n                             parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/1 albert\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1/2 albert\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR2/2\"]) || \"null\",\n                             parseFloat(msg.payload[i].F9) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"Delta 4\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"WR1 showroom\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T1 WR 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 1\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 2\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 3\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 4\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 5\"]) || \"null\",\n                             parseFloat(msg.payload[i][\"T2 WR 6\"]) || \"null\",\n                           ]\n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "e62ada2d0e9c2bcb"
            ]
        ]
    },
    {
        "id": "41ab793d99395757",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 265",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1460,
        "wires": []
    },
    {
        "id": "3d64f30bc571f921",
        "type": "debug",
        "z": "9bb7160e32e22f02",
        "name": "debug 266",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e62ada2d0e9c2bcb",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "e24ec75aecc050ce"
            ]
        ]
    },
    {
        "id": "e24ec75aecc050ce",
        "type": "csv",
        "z": "9bb7160e32e22f02",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 950,
        "y": 1400,
        "wires": [
            [
                "3d64f30bc571f921",
                "a2969ed0693f7918"
            ]
        ]
    },
    {
        "id": "84c5395ca6668bd3",
        "type": "delay",
        "z": "9bb7160e32e22f02",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1400,
        "wires": [
            [
                "f02a1a0c2ec74316"
            ]
        ]
    },
    {
        "id": "6ce73f56405ec51f",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "d": true,
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = 810155626 //filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\nvar inv_array = []\nvar obj\nif (plant == 1077672705) {\n    column_header = column_header.concat\n        (\",T1 WR 1 (Wh)\",\n            \",Specific Yield T1 WR 1 (kWh / kWp)\",\n            \",T1 WR 2 (Wh)\",\n            \",Specific Yield T1 WR 2 (kWh / kWp)\",\n            \",T1 WR 3 (Wh)\",\n            \",Specific Yield T1 WR 3 (kWh / kWp)\",\n            \",T2 WR 1 (Wh)\",\n            \",Specific Yield T2 WR 1 (kWh / kWp)\",\n            \",T2 WR 2 (Wh)\",\n            \",Specific Yield T2 WR 2 (kWh / kWp)\",\n            \",T2 WR 3 (Wh)\",\n            \",Specific Yield T2 WR 3 (kWh / kWp)\",\n            \",T2 WR 4 (Wh)\",\n            \",Specific Yield T2 WR 4 (kWh / kWp)\",\n            \",T2 WR 5 (Wh)\",\n            \",Specific Yield T2 WR 5 (kWh / kWp)\",\n            \",T2 WR 6 (Wh)\",\n            \",Specific Yield T2 WR 6 (kWh / kWp)\")\n\n}\nelse {\n    for (var i = 1; i < column.length; i++) {\n        var check = column[i].match(\"WR\")\n        var inv_re = column[i].substring(0, column[i].indexOf('('));\n        if (column[i].match(\"WR\")) {\n            var num = column[i].match(/\\d+/g).map(Number);\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n        if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n\n        obj = {\n            sy,\n            check,\n            column_header,\n            inv_re,\n            col: column[i],\n            column\n\n        }\n        results.push(obj)\n    }\n}\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array)\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 1,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1220,
        "wires": [
            [
                "ea55cbe846458c1e"
            ]
        ]
    },
    {
        "id": "a2969ed0693f7918",
        "type": "function",
        "z": "9bb7160e32e22f02",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\n\nvar Total_exp_WR0=0\nvar Total_exp_WR1=0\nvar Total_exp_WR2=0\nvar Total_exp_WR3=0\nvar Total_exp_WR4=0\nvar Total_exp_WR5=0\nvar Total_exp_WR6=0\nvar Total_exp_WR7=0\nvar Total_exp_WR8=0\nvar Total_exp_WR9=0\nvar Total_exp_WR10=0\nvar Total_exp_WR11=0\nvar Total_exp_WR12=0\nvar Total_exp_WR_1_1_albert=0\nvar Total_exp_WR_1_2_albert=0\nvar Total_exp_WR_2_1=0\nvar Total_exp_WR_2_2=0\nvar Total_exp_Versuchsfeld_F9=0\nvar Total_exp_Delta_1=0\nvar Total_exp_Delta_2=0\nvar Total_exp_Delta_3=0\nvar Total_exp_Delta_4=0\nvar Total_exp_WR1_showroom=0\nvar Total_exp_T1_WR_1=0\nvar Total_exp_T1_WR_2=0\nvar Total_exp_T1_WR_3=0\nvar Total_exp_T2_WR_1=0\nvar Total_exp_T2_WR_2=0\nvar Total_exp_T2_WR_3=0\nvar Total_exp_T2_WR_4=0\nvar Total_exp_T2_WR_5=0\nvar Total_exp_T2_WR_6=0\n\nvar Total_ACT_WR0=0\nvar Total_ACT_WR1=0\nvar Total_ACT_WR2=0\nvar Total_ACT_WR3=0\nvar Total_ACT_WR4=0\nvar Total_ACT_WR5=0\nvar Total_ACT_WR6=0\nvar Total_ACT_WR7=0\nvar Total_ACT_WR8=0\nvar Total_ACT_WR9=0\nvar Total_ACT_WR10=0\nvar Total_ACT_WR11=0\nvar Total_ACT_WR12=0\nvar Total_ACT_WR_1_1_albert=0\nvar Total_ACT_WR_1_2_albert=0\nvar Total_ACT_WR_2_1=0\nvar Total_ACT_WR_2_2=0\nvar Total_ACT_Versuchsfeld_F9=0\nvar Total_ACT_Delta_1=0\nvar Total_ACT_Delta_2=0\nvar Total_ACT_Delta_3=0\nvar Total_ACT_Delta_4=0\nvar Total_ACT_WR1_showroom=0\nvar Total_ACT_T1_WR_1=0\nvar Total_ACT_T1_WR_2=0\nvar Total_ACT_T1_WR_3=0\nvar Total_ACT_T2_WR_1=0\nvar Total_ACT_T2_WR_2=0\nvar Total_ACT_T2_WR_3=0\nvar Total_ACT_T2_WR_4=0\nvar Total_ACT_T2_WR_5=0\nvar Total_ACT_T2_WR_6=0\n\nvar Total_gen_loss_WR0 = 0\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR_1_1_albert = 0\nvar Total_gen_loss_WR_1_2_albert = 0\nvar Total_gen_loss_WR_2_1 = 0\nvar Total_gen_loss_WR_2_2 = 0\nvar Total_gen_loss_Versuchsfeld_F9 = 0\nvar Total_gen_loss_Delta_1 = 0\nvar Total_gen_loss_Delta_2 = 0\nvar Total_gen_loss_Delta_3 = 0\nvar Total_gen_loss_Delta_4 = 0\nvar Total_gen_loss_WR1_showroom = 0\nvar Total_gen_loss_T1_WR_1 = 0\nvar Total_gen_loss_T1_WR_2 = 0\nvar Total_gen_loss_T1_WR_3 = 0\nvar Total_gen_loss_T2_WR_1 = 0\nvar Total_gen_loss_T2_WR_2 = 0\nvar Total_gen_loss_T2_WR_3 = 0\nvar Total_gen_loss_T2_WR_4 = 0\nvar Total_gen_loss_T2_WR_5 = 0\nvar Total_gen_loss_T2_WR_6 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n\n        var WR0_kwh = msg.payload[i][\"WR 0\"]/1000\n        var WR0_Sp_Y = msg.payload[i][\"Specific Yield_WR 0\"]\n        var WR1_kwh = msg.payload[i][\"WR 1\"] / 1000\n        var WR1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR2_kwh = msg.payload[i][\"WR 2\"] / 1000\n        var WR2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR3_kwh = msg.payload[i][\"WR 3\"] / 1000\n        var WR3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR4_kwh = msg.payload[i][\"WR 4\"] / 1000\n        var WR4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR5_kwh = msg.payload[i][\"WR 5\"] / 1000\n        var WR5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR6_kwh = msg.payload[i][\"WR 6\"] / 1000\n        var WR6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR7_kwh = msg.payload[i][\"WR 7\"] / 1000\n        var WR7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR8_kwh = msg.payload[i][\"WR 8\"] / 1000\n        var WR8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR9_kwh = msg.payload[i][\"WR 9\"] / 1000\n        var WR9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR10_kwh = msg.payload[i][\"WR 10\"] / 1000\n        var WR10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR11_kwh = msg.payload[i][\"WR 11\"] / 1000\n        var WR11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR12_kwh = msg.payload[i][\"WR 12\"] / 1000\n        var WR12_Sp_Y = msg.payload[i][\"Specific Yield_WR 12\"]\n        var WR_1_1_albert_kwh = msg.payload[i][\"WR 1/1 Albert\"] / 1000\n        var WR_1_1_albert_Sp_Y = msg.payload[i][\"Specific Yield_WR 1/1 Albert\"]\n        var WR_1_2_albert_kwh = msg.payload[i][\"WR 1/2 Albert\"] / 1000\n        var WR_1_2_albert_Sp_Y = msg.payload[i][\"Specific Yield_WR 1/2 Albert\"]\n        var WR_2_1_kwh = msg.payload[i][\"WR 2/1\"] / 1000\n        var WR_2_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 2/1\"]\n        var WR_2_2_kwh = msg.payload[i][\"WR 2/2\"] / 1000\n        var WR_2_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2/2\"]\n        var Versuchsfeld_F9_kwh = msg.payload[i][\"Versuchsfeld F9\"] / 1000\n        var Versuchsfeld_F9_Sp_Y = msg.payload[i][\"Specific Yield_Versuchsfeld F9\"]\n        var Delta_1_kwh = msg.payload[i][\"Delta 1\"] / 1000\n        var Delta_1_Sp_Y = msg.payload[i][\"Specific Yield_Delta 1\"]\n        var Delta_2_kwh = msg.payload[i][\"Delta 2\"]/ 1000\n        var Delta_2_Sp_Y = msg.payload[i][\"Specific Yield_Delta 2\"]\n        var Delta_3_kwh = msg.payload[i][\"Delta 3\"]/ 1000\n        var Delta_3_Sp_Y = msg.payload[i][\"Specific Yield_Delta 3\"]\n        var Delta_4_kwh = msg.payload[i][\"Delta 4\"] / 1000\n        var Delta_4_Sp_Y = msg.payload[i][\"Specific Yield_Delta 4\"]\n        var WR1_showroom_kwh = msg.payload[i][\"WR 1 Showroom\"] / 1000\n        var WR1_showroom_Sp_Y = msg.payload[i][\"Specific Yield_WR 1 Showroom\"]\n        var T1_WR_1_kwh = msg.payload[i][\"T1 WR 1 (Wh)\"]\n        var T1_WR_1_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 1 (kWh / kWp)\"]\n        var T1_WR_2_kwh = msg.payload[i][\"T1 WR 2 (Wh)\"] / 1000\n        var T1_WR_2_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 2 (kWh / kWp)\"]\n        var T1_WR_3_kwh = msg.payload[i][\"T1 WR 3 (Wh)\"] / 1000\n        var T1_WR_3_Sp_Y = msg.payload[i][\"Specific Yield T1 WR 3 (kWh / kWp)\"]\n        var T2_WR_1_kwh = msg.payload[i][\"T2 WR 1 (Wh)\"] / 1000\n        var T2_WR_1_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 1 (kWh / kWp)\"]\n        var T2_WR_2_kwh = msg.payload[i][\"T2 WR 2 (Wh)\"] / 1000\n        var T2_WR_2_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 2 (kWh / kWp)\"]\n        var T2_WR_3_kwh = msg.payload[i][\"T2 WR 3 (Wh)\"] / 1000\n        var T2_WR_3_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 3 (kWh / kWp)\"]\n        var T2_WR_4_kwh = msg.payload[i][\"T2 WR 4 (Wh)\"] / 1000\n        var T2_WR_4_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 4 (kWh / kWp)\"]\n        var T2_WR_5_kwh = msg.payload[i][\"T2 WR 5 (Wh)\"] / 1000\n        var T2_WR_5_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 5 (kWh / kWp)\"]\n        var T2_WR_6_kwh = msg.payload[i][\"T2 WR 6 (Wh)\"] / 1000\n        var T2_WR_6_Sp_Y = msg.payload[i][\"Specific Yield T2 WR 6 (kWh / kWp)\"]\n\n\n        var Max_sy = Math.max(WR0_Sp_Y || 0, WR1_Sp_Y || 0, WR2_Sp_Y || 0, WR3_Sp_Y || 0, WR4_Sp_Y || 0, WR5_Sp_Y || 0, WR6_Sp_Y || 0, WR7_Sp_Y || 0, WR8_Sp_Y || 0, WR9_Sp_Y || 0, WR10_Sp_Y || 0, WR11_Sp_Y || 0, WR12_Sp_Y || 0, WR_1_1_albert_Sp_Y || 0, WR_1_2_albert_Sp_Y || 0, WR_2_1_Sp_Y || 0, WR_2_2_Sp_Y || 0, Versuchsfeld_F9_Sp_Y || 0, Delta_1_Sp_Y || 0, Delta_2_Sp_Y || 0, Delta_3_Sp_Y || 0, Delta_4_Sp_Y || 0, WR1_showroom_Sp_Y || 0, T1_WR_1_Sp_Y || 0, T1_WR_2_Sp_Y || 0, T1_WR_3_Sp_Y || 0, T2_WR_1_Sp_Y || 0, T2_WR_2_Sp_Y || 0, T2_WR_3_Sp_Y || 0, T2_WR_4_Sp_Y || 0, T2_WR_5_Sp_Y || 0, T2_WR_6_Sp_Y || 0)\n         \n           var WR0_CAPACITY=inv_cap[0]\n           var WR1_CAPACITY=inv_cap[1]\n           var WR2_CAPACITY=inv_cap[2]\n           var WR3_CAPACITY=inv_cap[3]\n           var WR4_CAPACITY=inv_cap[4]\n           var WR5_CAPACITY=inv_cap[5]\n           var WR6_CAPACITY=inv_cap[6]\n           var WR7_CAPACITY=inv_cap[7]\n           var WR8_CAPACITY=inv_cap[8]\n           var WR9_CAPACITY=inv_cap[9]\n           var WR10_CAPACITY=inv_cap[10]\n           var WR11_CAPACITY=inv_cap[11]\n           var WR12_CAPACITY=inv_cap[12]\n           var WR1_1_albert_CAPACITY=inv_cap[13]\n           var WR1_2_albert_CAPACITY=inv_cap[14]\n           var WR2_1_CAPACITY=inv_cap[15]\n           var WR2_2_CAPACITY=inv_cap[16]\n           var Versuchsfeld_F9_CAPACITY=inv_cap[17]\n           var Delta_1_CAPACITY=inv_cap[18]\n           var Delta_2_CAPACITY=inv_cap[19]\n           var Delta_3_CAPACITY=inv_cap[20]\n           var Delta_4_CAPACITY=inv_cap[21]\n           var WR1_showroom_CAPACITY=inv_cap[22]\n           var T1_WR_1_CAPACITY=inv_cap[23]\n           var T1_WR_2_CAPACITY=inv_cap[24]\n           var T1_WR_3_CAPACITY=inv_cap[25]\n           var T2_WR_1_CAPACITY=inv_cap[26]\n           var T2_WR_2_CAPACITY=inv_cap[27]\n           var T2_WR_3_CAPACITY=inv_cap[28]\n           var T2_WR_4_CAPACITY=inv_cap[29]\n           var T2_WR_5_CAPACITY=inv_cap[30]\n           var T2_WR_6_CAPACITY=inv_cap[31]\n\n\n        var Expected_gen_WR0= Max_sy * WR0_CAPACITY\n        var Expected_gen_WR1= Max_sy * WR1_CAPACITY\n        var Expected_gen_WR2= Max_sy * WR2_CAPACITY\n        var Expected_gen_WR3= Max_sy * WR3_CAPACITY\n        var Expected_gen_WR4= Max_sy * WR4_CAPACITY\n        var Expected_gen_WR5= Max_sy * WR5_CAPACITY\n        var Expected_gen_WR6= Max_sy * WR6_CAPACITY\n        var Expected_gen_WR7= Max_sy * WR7_CAPACITY\n        var Expected_gen_WR8= Max_sy * WR8_CAPACITY\n        var Expected_gen_WR9= Max_sy *WR9_CAPACITY\n        var Expected_gen_WR10 = Max_sy *WR10_CAPACITY\n        var Expected_gen_WR11 = Max_sy *WR11_CAPACITY\n        var Expected_gen_WR12=Max_sy*WR12_CAPACITY\n        var Expected_gen_WR_1_1_albert=Max_sy*WR1_1_albert_CAPACITY\n        var Expected_gen_WR_1_2_albert=Max_sy*WR1_2_albert_CAPACITY\n        var Expected_gen_WR_2_1=Max_sy*WR2_1_CAPACITY\n        var Expected_gen_WR_2_2=Max_sy*WR2_2_CAPACITY\n        var Expected_gen_Versuchsfeld_F9=Max_sy*Versuchsfeld_F9_CAPACITY\n        var Expected_gen_Delta_1=Max_sy*Delta_1_CAPACITY\n        var Expected_gen_Delta_2=Max_sy*Delta_2_CAPACITY\n        var Expected_gen_Delta_3=Max_sy*Delta_3_CAPACITY\n        var Expected_gen_Delta_4=Max_sy*Delta_4_CAPACITY\n        var Expected_gen_WR1_showroom=Max_sy*WR1_showroom_CAPACITY\n        var Expected_gen_T1_WR_1=Max_sy*T1_WR_1_CAPACITY\n        var Expected_gen_T1_WR_2=Max_sy*T1_WR_2_CAPACITY\n        var Expected_gen_T1_WR_3=Max_sy*T1_WR_3_CAPACITY\n        var Expected_gen_T2_WR_1=Max_sy*T2_WR_1_CAPACITY\n        var Expected_gen_T2_WR_2=Max_sy*T2_WR_2_CAPACITY\n        var Expected_gen_T2_WR_3=Max_sy*T2_WR_3_CAPACITY\n        var Expected_gen_T2_WR_4=Max_sy*T2_WR_4_CAPACITY\n        var Expected_gen_T2_WR_5=Max_sy*T2_WR_5_CAPACITY\n        var Expected_gen_T2_WR_6=Max_sy*T2_WR_6_CAPACITY \n\n        Total_exp_WR0 =Total_exp_WR0 + Expected_gen_WR0\n        Total_exp_WR1 =Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 =Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 =Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 =Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 =Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 =Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 =Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 =Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 =Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 =Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 =Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR12 =Total_exp_WR12 + Expected_gen_WR12\n        Total_exp_WR_1_1_albert =Total_exp_WR_1_1_albert + Expected_gen_WR_1_1_albert\n        Total_exp_WR_1_2_albert =Total_exp_WR_1_2_albert + Expected_gen_WR_1_2_albert\n        Total_exp_WR_2_1 =Total_exp_WR_2_1 + Expected_gen_WR_2_1\n        Total_exp_WR_2_2 =Total_exp_WR_2_2 + Expected_gen_WR_2_2\n        Total_exp_Versuchsfeld_F9 =Total_exp_Versuchsfeld_F9 + Expected_gen_Versuchsfeld_F9\n        Total_exp_Delta_1 =Total_exp_Delta_1 + Expected_gen_Delta_1\n        Total_exp_Delta_2 =Total_exp_Delta_2 + Expected_gen_Delta_2\n        Total_exp_Delta_3 =Total_exp_Delta_3 + Expected_gen_Delta_3\n        Total_exp_Delta_4 =Total_exp_Delta_4 + Expected_gen_Delta_4\n        Total_exp_WR1_showroom =Total_exp_WR1_showroom + Expected_gen_WR1_showroom\n        Total_exp_T1_WR_1 =Total_exp_T1_WR_1 + Expected_gen_T1_WR_1\n        Total_exp_T1_WR_2 =Total_exp_T1_WR_2 + Expected_gen_T1_WR_2\n        Total_exp_T1_WR_3 =Total_exp_T1_WR_3 + Expected_gen_T1_WR_3\n        Total_exp_T2_WR_1 =Total_exp_T2_WR_1 + Expected_gen_T2_WR_1\n        Total_exp_T2_WR_2 =Total_exp_T2_WR_2 + Expected_gen_T2_WR_2\n        Total_exp_T2_WR_3 =Total_exp_T2_WR_3 + Expected_gen_T2_WR_3\n        Total_exp_T2_WR_4 =Total_exp_T2_WR_4 + Expected_gen_T2_WR_4\n        Total_exp_T2_WR_5 =Total_exp_T2_WR_5 + Expected_gen_T2_WR_5\n        Total_exp_T2_WR_6 =Total_exp_T2_WR_6 + Expected_gen_T2_WR_6\n\n        Total_ACT_WR0 = Total_ACT_WR0 + WR0_kwh\n        Total_ACT_WR1 = Total_ACT_WR1 + WR1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR11_kwh\n        Total_ACT_WR12 = Total_ACT_WR12 + WR12_kwh\n        Total_ACT_WR_1_1_albert = Total_ACT_WR_1_1_albert + WR_1_1_albert_kwh\n        Total_ACT_WR_1_2_albert = Total_ACT_WR_1_2_albert + WR_1_2_albert_kwh\n        Total_ACT_WR_2_1 = Total_ACT_WR_2_1 + WR_2_1_kwh\n        Total_ACT_WR_2_2 = Total_ACT_WR_2_2 + WR_2_2_kwh\n        Total_ACT_Versuchsfeld_F9 = Total_ACT_Versuchsfeld_F9 + Versuchsfeld_F9_kwh\n        Total_ACT_Delta_1 = Total_ACT_Delta_1 + Delta_1_kwh\n        Total_ACT_Delta_2 = Total_ACT_Delta_2 + Delta_2_kwh\n        Total_ACT_Delta_3 = Total_ACT_Delta_3 + Delta_3_kwh\n        Total_ACT_Delta_4 = Total_ACT_Delta_4 + Delta_4_kwh\n        Total_ACT_WR1_showroom = Total_ACT_WR1_showroom + WR1_showroom_kwh\n        Total_ACT_T1_WR_1 = Total_ACT_T1_WR_1 + T1_WR_1_kwh\n        Total_ACT_T1_WR_2 = Total_ACT_T1_WR_2 + T1_WR_2_kwh\n        Total_ACT_T1_WR_3 = Total_ACT_T1_WR_3 + T1_WR_3_kwh\n        Total_ACT_T2_WR_1 = Total_ACT_T2_WR_1 + T2_WR_1_kwh\n        Total_ACT_T2_WR_2 = Total_ACT_T2_WR_2 + T2_WR_2_kwh\n        Total_ACT_T2_WR_3 = Total_ACT_T2_WR_3 + T2_WR_3_kwh\n        Total_ACT_T2_WR_4 = Total_ACT_T2_WR_4 + T2_WR_4_kwh\n        Total_ACT_T2_WR_5 = Total_ACT_T2_WR_5 + T2_WR_5_kwh\n        Total_ACT_T2_WR_6 = Total_ACT_T2_WR_6 + T2_WR_6_kwh\n        \n  \n        if((Expected_gen_WR0 !=WR0_kwh) || (WR0_kwh==0)) {var GEN_LOSS_WR0=(Expected_gen_WR0 - WR0_kwh)} else {GEN_LOSS_WR0 =\"0\"}\n        if((Expected_gen_WR1 !=WR1_kwh) || (WR1_kwh==0)) {var GEN_LOSS_WR1=(Expected_gen_WR1 - WR1_kwh)} else {GEN_LOSS_WR1 =\"0\"}\n        if((Expected_gen_WR2 !=WR2_kwh) || (WR2_kwh==0)) {var GEN_LOSS_WR2=(Expected_gen_WR2 - WR2_kwh)} else {GEN_LOSS_WR2 =\"0\"}\n        if((Expected_gen_WR3 !=WR3_kwh) || (WR3_kwh==0)) {var GEN_LOSS_WR3=(Expected_gen_WR3 - WR3_kwh)} else {GEN_LOSS_WR3 =\"0\"}\n        if((Expected_gen_WR4 !=WR4_kwh) || (WR4_kwh==0)) {var GEN_LOSS_WR4=(Expected_gen_WR4 - WR4_kwh)} else {GEN_LOSS_WR4 =\"0\"}\n        if((Expected_gen_WR5 !=WR5_kwh) || (WR5_kwh==0)) {var GEN_LOSS_WR5=(Expected_gen_WR5 - WR5_kwh)} else {GEN_LOSS_WR5 =\"0\"}\n        if((Expected_gen_WR6 !=WR6_kwh) || (WR6_kwh==0)) {var GEN_LOSS_WR6=(Expected_gen_WR6 - WR6_kwh)} else {GEN_LOSS_WR6 =\"0\"}\n        if((Expected_gen_WR7 !=WR7_kwh) || (WR7_kwh==0)) {var GEN_LOSS_WR7=(Expected_gen_WR7 - WR7_kwh)} else {GEN_LOSS_WR7 =\"0\"}\n        if((Expected_gen_WR8 !=WR8_kwh) || (WR8_kwh==0)) {var GEN_LOSS_WR8=(Expected_gen_WR8 - WR8_kwh)} else {GEN_LOSS_WR8 =\"0\"}\n        if((Expected_gen_WR9 !=WR9_kwh) || (WR9_kwh==0)) {var GEN_LOSS_WR9=(Expected_gen_WR9 - WR9_kwh)} else {GEN_LOSS_WR9 =\"0\"}\n        if((Expected_gen_WR10 !=WR10_kwh) || (WR10_kwh==0)) {var GEN_LOSS_WR10=(Expected_gen_WR10 - WR10_kwh)} else {GEN_LOSS_WR10 =\"0\"}\n        if((Expected_gen_WR11 !=WR11_kwh) || (WR11_kwh==0)) {var GEN_LOSS_WR11=(Expected_gen_WR11 - WR11_kwh)} else {GEN_LOSS_WR11 =\"0\"}\n        if((Expected_gen_WR12 !=WR12_kwh) || (WR12_kwh==0)) {var GEN_LOSS_WR12=(Expected_gen_WR12 - WR12_kwh)} else {GEN_LOSS_WR12 =\"0\"}\n        if((Expected_gen_WR_1_1_albert !=WR_1_1_albert_kwh) || (WR_1_1_albert_kwh==0)) {var GEN_LOSS_WR_1_1_albert=(Expected_gen_WR_1_1_albert - WR_1_1_albert_kwh)} else {GEN_LOSS_WR_1_1_albert =\"0\"}\n        if((Expected_gen_WR_1_2_albert !=WR_1_2_albert_kwh) || (WR_1_2_albert_kwh==0)) {var GEN_LOSS_WR_1_2_albert=(Expected_gen_WR_1_2_albert - WR_1_2_albert_kwh)} else {GEN_LOSS_WR_1_2_albert =\"0\"}\n        if((Expected_gen_WR_2_1 !=WR_2_1_kwh) || (WR_2_1_kwh==0)) {var GEN_LOSS_WR_2_1=(Expected_gen_WR_2_1 - WR_2_1_kwh)} else {GEN_LOSS_WR_2_1 =\"0\"}\n        if((Expected_gen_WR_2_2 !=WR_2_2_kwh) || (WR_2_2_kwh==0)) {var GEN_LOSS_WR_2_2=(Expected_gen_WR_2_2 - WR_2_2_kwh)} else {GEN_LOSS_WR_2_2 =\"0\"}\n        if((Expected_gen_Versuchsfeld_F9 !=Versuchsfeld_F9_kwh) || (Versuchsfeld_F9_kwh==0)) {var GEN_LOSS_Versuchsfeld_F9=(Expected_gen_Versuchsfeld_F9 - Versuchsfeld_F9_kwh)} else {GEN_LOSS_Versuchsfeld_F9 =\"0\"}\n        if((Expected_gen_Delta_1 !=Delta_1_kwh) || (Delta_1_kwh==0)) {var GEN_LOSS_Delta_1=(Expected_gen_Delta_1 - Delta_1_kwh)} else {GEN_LOSS_Delta_1 =\"0\"}\n        if((Expected_gen_Delta_2 !=Delta_2_kwh) || (Delta_2_kwh==0)) {var GEN_LOSS_Delta_2=(Expected_gen_Delta_2 - Delta_2_kwh)} else {GEN_LOSS_Delta_2 =\"0\"}\n        if((Expected_gen_Delta_3 !=Delta_3_kwh) || (Delta_3_kwh==0)) {var GEN_LOSS_Delta_3=(Expected_gen_Delta_3 - Delta_3_kwh)} else {GEN_LOSS_Delta_3 =\"0\"}\n        if((Expected_gen_Delta_4 !=Delta_4_kwh) || (Delta_4_kwh==0)) {var GEN_LOSS_Delta_4=(Expected_gen_Delta_4 - Delta_4_kwh)} else {GEN_LOSS_Delta_4 =\"0\"}\n        if((Expected_gen_WR1_showroom !=WR1_showroom_kwh) || (WR1_showroom_kwh==0)) {var GEN_LOSS_WR1_showroom=(Expected_gen_WR1_showroom - WR1_showroom_kwh)} else {GEN_LOSS_WR1_showroom =\"0\"}\n        if((Expected_gen_T1_WR_1 !=T1_WR_1_kwh) || (T1_WR_1_kwh==0)) {var GEN_LOSS_T1_WR_1=(Expected_gen_T1_WR_1 - T1_WR_1_kwh)} else {GEN_LOSS_T1_WR_1 =\"0\"}\n        if((Expected_gen_T1_WR_2 !=T1_WR_2_kwh) || (T1_WR_2_kwh==0)) {var GEN_LOSS_T1_WR_2=(Expected_gen_T1_WR_2 - T1_WR_2_kwh)} else {GEN_LOSS_T1_WR_2 =\"0\"}\n        if((Expected_gen_T1_WR_3 !=T1_WR_3_kwh) || (T1_WR_3_kwh==0)) {var GEN_LOSS_T1_WR_3=(Expected_gen_T1_WR_3 - T1_WR_3_kwh)} else {GEN_LOSS_T1_WR_3 =\"0\"}\n        if((Expected_gen_T2_WR_1 !=T2_WR_1_kwh) || (T2_WR_1_kwh==0)) {var GEN_LOSS_T2_WR_1=(Expected_gen_T2_WR_1 - T2_WR_1_kwh)} else {GEN_LOSS_T2_WR_1 =\"0\"}\n        if((Expected_gen_T2_WR_2 !=T2_WR_2_kwh) || (T2_WR_2_kwh==0)) {var GEN_LOSS_T2_WR_2=(Expected_gen_T2_WR_2 - T2_WR_2_kwh)} else {GEN_LOSS_T2_WR_2 =\"0\"}\n        if((Expected_gen_T2_WR_3 !=T2_WR_3_kwh) || (T2_WR_3_kwh==0)) {var GEN_LOSS_T2_WR_3=(Expected_gen_T2_WR_3 - T2_WR_3_kwh)} else {GEN_LOSS_T2_WR_3 =\"0\"}\n        if((Expected_gen_T2_WR_4 !=T2_WR_4_kwh) || (T2_WR_4_kwh==0)) {var GEN_LOSS_T2_WR_4=(Expected_gen_T2_WR_4 - T2_WR_4_kwh)} else {GEN_LOSS_T2_WR_4 =\"0\"}\n        if((Expected_gen_T2_WR_5 !=T2_WR_5_kwh) || (T2_WR_5_kwh==0)) {var GEN_LOSS_T2_WR_5=(Expected_gen_T2_WR_5 - T2_WR_5_kwh)} else {GEN_LOSS_T2_WR_5 =\"0\"}\n        if((Expected_gen_T2_WR_6 !=T2_WR_6_kwh) || (T2_WR_6_kwh==0)) {var GEN_LOSS_T2_WR_6=(Expected_gen_T2_WR_6 - T2_WR_6_kwh)} else {GEN_LOSS_T2_WR_6 =\"0\"}\n\n        Total_gen_loss_WR0 = Total_gen_loss_WR0 + (Expected_gen_WR0 -WR0_kwh)\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 -WR1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 -WR2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 -WR3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 -WR4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 -WR5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 -WR6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 -WR7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 -WR8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 -WR9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 -WR10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 -WR11_kwh)\n        Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 -WR12_kwh)\n        Total_gen_loss_WR_1_1_albert = Total_gen_loss_WR_1_1_albert + (Expected_gen_WR_1_1_albert -WR_1_1_albert_kwh)\n        Total_gen_loss_WR_1_2_albert = Total_gen_loss_WR_1_2_albert + (Expected_gen_WR_1_2_albert -WR_1_2_albert_kwh)\n        Total_gen_loss_WR_2_1 = Total_gen_loss_WR_2_1 + (Expected_gen_WR_2_1 -WR_2_1_kwh)\n        Total_gen_loss_WR_2_2 = Total_gen_loss_WR_2_2 + (Expected_gen_WR_2_2 -WR_2_2_kwh)\n        Total_gen_loss_Versuchsfeld_F9 = Total_gen_loss_Versuchsfeld_F9 + (Expected_gen_Versuchsfeld_F9 -Versuchsfeld_F9_kwh)\n        Total_gen_loss_Delta_1 = Total_gen_loss_Delta_1 + (Expected_gen_Delta_1 -Delta_1_kwh)\n        Total_gen_loss_Delta_2 = Total_gen_loss_Delta_2 + (Expected_gen_Delta_2 -Delta_2_kwh)\n        Total_gen_loss_Delta_3 = Total_gen_loss_Delta_3 + (Expected_gen_Delta_3 -Delta_3_kwh)\n        Total_gen_loss_Delta_4 = Total_gen_loss_Delta_4 + (Expected_gen_Delta_4 -Delta_4_kwh)\n        Total_gen_loss_WR1_showroom = Total_gen_loss_WR1_showroom + (Expected_gen_WR1_showroom -WR1_showroom_kwh)\n        Total_gen_loss_T1_WR_1 = Total_gen_loss_T1_WR_1 + (Expected_gen_T1_WR_1 -T1_WR_1_kwh)\n        Total_gen_loss_T1_WR_2 = Total_gen_loss_T1_WR_2 + (Expected_gen_T1_WR_2 -T1_WR_2_kwh)\n        Total_gen_loss_T1_WR_3 = Total_gen_loss_T1_WR_3 + (Expected_gen_T1_WR_3 -T1_WR_3_kwh)\n        Total_gen_loss_T2_WR_1 = Total_gen_loss_T2_WR_1 + (Expected_gen_T2_WR_1 -T2_WR_1_kwh)\n        Total_gen_loss_T2_WR_2 = Total_gen_loss_T2_WR_2 + (Expected_gen_T2_WR_2 -T2_WR_2_kwh)\n        Total_gen_loss_T2_WR_3 = Total_gen_loss_T2_WR_3 + (Expected_gen_T2_WR_3 -T2_WR_3_kwh)\n        Total_gen_loss_T2_WR_4 = Total_gen_loss_T2_WR_4 + (Expected_gen_T2_WR_4 -T2_WR_4_kwh)\n        Total_gen_loss_T2_WR_5 = Total_gen_loss_T2_WR_5 + (Expected_gen_T2_WR_5 -T2_WR_5_kwh)\n        Total_gen_loss_T2_WR_6 = Total_gen_loss_T2_WR_6 + (Expected_gen_T2_WR_6 -T2_WR_6_kwh)\n\n\n        var total_act_gen = [{\n            Total_ACT_WR0,Total_ACT_WR1,Total_ACT_WR2,Total_ACT_WR3,Total_ACT_WR4,Total_ACT_WR5,Total_ACT_WR6,Total_ACT_WR7,Total_ACT_WR8,Total_ACT_WR9,Total_ACT_WR10,Total_ACT_WR11,Total_ACT_WR12,Total_ACT_WR_1_1_albert,Total_ACT_WR_1_2_albert,Total_ACT_WR_2_1,Total_ACT_WR_2_2,Total_ACT_Versuchsfeld_F9,Total_ACT_Delta_1,Total_ACT_Delta_2,Total_ACT_Delta_3,Total_ACT_Delta_4,Total_ACT_WR1_showroom,Total_ACT_T1_WR_1,Total_ACT_T1_WR_2,Total_ACT_T1_WR_3,Total_ACT_T2_WR_1,Total_ACT_T2_WR_2,Total_ACT_T2_WR_3,Total_ACT_T2_WR_4,Total_ACT_T2_WR_5,\n                    Total_ACT_T2_WR_6}]\n        var total_exp_gen = [Total_exp_WR0, Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR12, Total_exp_WR_1_1_albert, Total_exp_WR_1_2_albert, Total_exp_WR_2_1, Total_exp_WR_2_2, Total_exp_Versuchsfeld_F9, Total_exp_Delta_1, Total_exp_Delta_2, Total_exp_Delta_3, Total_exp_Delta_4, Total_exp_WR1_showroom, Total_exp_T1_WR_1, Total_exp_T1_WR_2, Total_exp_T1_WR_3, Total_exp_T2_WR_1, Total_exp_T2_WR_2, Total_exp_T2_WR_3, Total_exp_T2_WR_4, Total_exp_T2_WR_5,\n            Total_exp_T2_WR_6]\n        var totalgen_loss = [Total_gen_loss_WR0, Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR_1_1_albert, Total_gen_loss_WR_1_2_albert, Total_gen_loss_WR_2_1, Total_gen_loss_WR_2_2, Total_gen_loss_Versuchsfeld_F9, Total_gen_loss_Delta_1, Total_gen_loss_Delta_2, Total_gen_loss_Delta_3, Total_gen_loss_Delta_4, Total_gen_loss_WR1_showroom, Total_gen_loss_T1_WR_1, Total_gen_loss_T1_WR_2, Total_gen_loss_T1_WR_3, Total_gen_loss_T2_WR_1, Total_gen_loss_T2_WR_2, Total_gen_loss_T2_WR_3, Total_gen_loss_T2_WR_4, Total_gen_loss_T2_WR_5,\n            Total_gen_loss_T2_WR_6]\n\n\n        obj = {\nDATE,\nWR0_kwh,\nWR0_Sp_Y,\nWR1_kwh,\nWR1_Sp_Y,\nWR2_kwh,\nWR2_Sp_Y,\nWR3_kwh,\nWR3_Sp_Y,\nWR4_kwh,\nWR4_Sp_Y,\nWR5_kwh,\nWR5_Sp_Y,\nWR6_kwh,\nWR6_Sp_Y,\nWR7_kwh,\nWR7_Sp_Y,\nWR8_kwh,\nWR8_Sp_Y,\nWR9_kwh,\nWR9_Sp_Y,\nWR10_kwh,\nWR10_Sp_Y,\nWR11_kwh,\nWR11_Sp_Y,\nWR12_kwh,\nWR12_Sp_Y,\nWR_1_1_albert_kwh,\nWR_1_1_albert_Sp_Y,\nWR_1_2_albert_kwh,\nWR_1_2_albert_Sp_Y,\nWR_2_1_kwh,\nWR_2_1_Sp_Y,\nWR_2_2_kwh,\nWR_2_2_Sp_Y,\nVersuchsfeld_F9_kwh,\nVersuchsfeld_F9_Sp_Y,\nDelta_1_kwh,\nDelta_1_Sp_Y,\nDelta_2_kwh,\nDelta_2_Sp_Y,\nDelta_3_kwh,\nDelta_3_Sp_Y,\nDelta_4_kwh,\nDelta_4_Sp_Y,\nWR1_showroom_kwh,\nWR1_showroom_Sp_Y,\nT1_WR_1_kwh,\nT1_WR_1_Sp_Y,\nT1_WR_2_kwh,\nT1_WR_2_Sp_Y,\nT1_WR_3_kwh,\nT1_WR_3_Sp_Y,\nT2_WR_1_kwh,\nT2_WR_1_Sp_Y,\nT2_WR_2_kwh,\nT2_WR_2_Sp_Y,\nT2_WR_3_kwh,\nT2_WR_3_Sp_Y,\nT2_WR_4_kwh,\nT2_WR_4_Sp_Y,\nT2_WR_5_kwh,\nT2_WR_5_Sp_Y,\nT2_WR_6_kwh,\nT2_WR_6_Sp_Y,\nMax_sy,\nExpected_gen_WR0:Expected_gen_WR0.toFixed(2),\nExpected_gen_WR1:Expected_gen_WR1.toFixed(2),\nExpected_gen_WR2:Expected_gen_WR2.toFixed(2),\nExpected_gen_WR3:Expected_gen_WR3.toFixed(2),\nExpected_gen_WR4:Expected_gen_WR4.toFixed(2),\nExpected_gen_WR5:Expected_gen_WR5.toFixed(2),\nExpected_gen_WR6:Expected_gen_WR6.toFixed(2),\nExpected_gen_WR7:Expected_gen_WR7.toFixed(2),\nExpected_gen_WR8:Expected_gen_WR8.toFixed(2),\nExpected_gen_WR9:Expected_gen_WR9.toFixed(2),\nExpected_gen_WR10:Expected_gen_WR10.toFixed(2),\nExpected_gen_WR11:Expected_gen_WR11.toFixed(2),\nExpected_gen_WR12:Expected_gen_WR12.toFixed(2),\nExpected_gen_WR_1_1_albert:Expected_gen_WR_1_1_albert.toFixed(2),\nExpected_gen_WR_1_2_albert:Expected_gen_WR_1_2_albert.toFixed(2),\nExpected_gen_WR_2_1:Expected_gen_WR_2_1.toFixed(2),\nExpected_gen_WR_2_2:Expected_gen_WR_2_2.toFixed(2),\nExpected_gen_Versuchsfeld_F9:Expected_gen_Versuchsfeld_F9.toFixed(2),\nExpected_gen_Delta_1:Expected_gen_Delta_1.toFixed(2),\nExpected_gen_Delta_2:Expected_gen_Delta_2.toFixed(2),\nExpected_gen_Delta_3:Expected_gen_Delta_3.toFixed(2),\nExpected_gen_Delta_4:Expected_gen_Delta_4.toFixed(2),\nExpected_gen_WR1_showroom:Expected_gen_WR1_showroom.toFixed(2),\nExpected_gen_T1_WR_1:Expected_gen_T1_WR_1.toFixed(2),\nExpected_gen_T1_WR_2:Expected_gen_T1_WR_2.toFixed(2),\nExpected_gen_T1_WR_3:Expected_gen_T1_WR_3.toFixed(2),\nExpected_gen_T2_WR_1:Expected_gen_T2_WR_1.toFixed(2),\nExpected_gen_T2_WR_2:Expected_gen_T2_WR_2.toFixed(2),\nExpected_gen_T2_WR_3:Expected_gen_T2_WR_3.toFixed(2),\nExpected_gen_T2_WR_4:Expected_gen_T2_WR_4.toFixed(2),\nExpected_gen_T2_WR_5:Expected_gen_T2_WR_5.toFixed(2),\nExpected_gen_T2_WR_6:Expected_gen_T2_WR_6.toFixed(2),\n            GEN_LOSS_WR0:parseFloat(GEN_LOSS_WR0).toFixed(2),\n            GEN_LOSS_WR1:parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2:parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3:parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4:parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5:parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6:parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7:parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8:parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9:parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10:parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11:parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR12:parseFloat(GEN_LOSS_WR12).toFixed(2),\n            GEN_LOSS_WR_1_1_albert:parseFloat(GEN_LOSS_WR_1_1_albert).toFixed(2),\n            GEN_LOSS_WR_1_2_albert:parseFloat(GEN_LOSS_WR_1_2_albert).toFixed(2),\n            GEN_LOSS_WR_2_1:parseFloat(GEN_LOSS_WR_2_1).toFixed(2),\n            GEN_LOSS_WR_2_2:parseFloat(GEN_LOSS_WR_2_2).toFixed(2),\n            GEN_LOSS_Versuchsfeld_F9:parseFloat(GEN_LOSS_Versuchsfeld_F9).toFixed(2),\n            GEN_LOSS_Delta_1:parseFloat(GEN_LOSS_Delta_1).toFixed(2),\n            GEN_LOSS_Delta_2:parseFloat(GEN_LOSS_Delta_2).toFixed(2),\n            GEN_LOSS_Delta_3:parseFloat(GEN_LOSS_Delta_3).toFixed(2),\n            GEN_LOSS_Delta_4:parseFloat(GEN_LOSS_Delta_4).toFixed(2),\n            GEN_LOSS_WR1_showroom:parseFloat(GEN_LOSS_WR1_showroom).toFixed(2),\n            GEN_LOSS_T1_WR_1:parseFloat(GEN_LOSS_T1_WR_1).toFixed(2),\n            GEN_LOSS_T1_WR_2:parseFloat(GEN_LOSS_T1_WR_2).toFixed(2),\n            GEN_LOSS_T1_WR_3:parseFloat(GEN_LOSS_T1_WR_3).toFixed(2),\n            GEN_LOSS_T2_WR_1:parseFloat(GEN_LOSS_T2_WR_1).toFixed(2),\n            GEN_LOSS_T2_WR_2:parseFloat(GEN_LOSS_T2_WR_2).toFixed(2),\n            GEN_LOSS_T2_WR_3:parseFloat(GEN_LOSS_T2_WR_3).toFixed(2),\n            GEN_LOSS_T2_WR_4:parseFloat(GEN_LOSS_T2_WR_4).toFixed(2),\n            GEN_LOSS_T2_WR_5:parseFloat(GEN_LOSS_T2_WR_5).toFixed(2),\n            GEN_LOSS_T2_WR_6:parseFloat(GEN_LOSS_T2_WR_6).toFixed(2),\n\n        }\n    }\n    /* if (i == msg.payload.length) {\n         obj = {\n             DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n         }\n     }*/\n\n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1460,
        "wires": [
            [
                "41ab793d99395757"
            ]
        ]
    },
    {
        "id": "d0f41aaa9a5e8176",
        "type": "fs-ops-dir",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/Ezeeben  may month csv file",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 340,
        "y": 120,
        "wires": [
            [
                "f8a7c9d60bee905b"
            ]
        ]
    },
    {
        "id": "a16d9f911a0f2124",
        "type": "inject",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "d0f41aaa9a5e8176"
            ]
        ]
    },
    {
        "id": "7dbc47e265429e4c",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "filename",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Ezeeben  may month csv file/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "ccf4216c4089cfea",
                "0bb94a78a57f4430",
                "d4c4a68928a4d323",
                "7b0460dd157a000d",
                "0a33bc95fc5a853f",
                "28f51a3fe2e810df"
            ]
        ]
    },
    {
        "id": "f8a7c9d60bee905b",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "seperate array",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "7dbc47e265429e4c"
            ]
        ]
    },
    {
        "id": "ccf4216c4089cfea",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "067ec493605c2967",
        "type": "file in",
        "z": "b2b1ce87ff7b4b7f",
        "name": "REF data",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/Ezee_Ben_Plants_List 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 580,
        "wires": [
            [
                "870345b490011c60"
            ]
        ]
    },
    {
        "id": "870345b490011c60",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 490,
        "y": 580,
        "wires": [
            [
                "b0e1de9e2f6ebae8"
            ]
        ]
    },
    {
        "id": "b0e1de9e2f6ebae8",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "comaprison with ref file",
        "func": "var live_plant=flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\nvar inv_array=[]\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name = msg.payload[i][\"PLANT NAME\"]\n    var S_NO = msg.payload[i][\"SERIAL NUMBER\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n    var PLANT_SIZE = parseInt(msg.payload[i][\"PLANT SIZE\"])\n  \n    if (live_plant == S_NO) \n      {\n        var capacity = [parseFloat(msg.payload[i][\"WR 1\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"WR 2\"]) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter) || \"null\",\n                        parseFloat(msg.payload[i][\"WR delta M15A_220\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"ABB WR1\"]) || \"null\",\n                        parseFloat(msg.payload[i].Delta) || \"null\",]\n                                                        \n         \n        for (var j = 1; j <= INV_NO; j++) {\n            inv_array.push(\"WR\" + j)\n        }\n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO,\n    PLANT_SIZE\n    \n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\nflow.set(\"inv_array\", inv_array)\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "52a43a47b14dbc9c"
            ]
        ]
    },
    {
        "id": "28f51a3fe2e810df",
        "type": "file in",
        "z": "b2b1ce87ff7b4b7f",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 250,
        "y": 260,
        "wires": [
            [
                "ec3942fc0db54eab"
            ]
        ]
    },
    {
        "id": "779a01f132fca52b",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "main calculation",
        "func": "var inv_cap=flow.get(\"INV_CAPACITY\");\nvar array=[]\n var Total_exp_WR1=0\n var Total_exp_WR2=0\nvar Total_exp_wechselrichter=0\nvar Total_exp_WR_delta_M15A_220=0\nvar Total_exp_ABB_WR1=0\nvar Total_exp_Delta=0\n \nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_wechselrichter = 0\nvar Total_ACT_WR_delta_M15A_220 = 0\nvar Total_ACT_ABB_WR1 = 0\nvar Total_ACT_Delta = 0\n\nvar Total_gen_loss_WR1=0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_wechselrichter = 0\nvar Total_gen_loss_WR_delta_M15A_220 = 0\nvar Total_gen_loss_ABB_WR1 = 0\nvar Total_gen_loss_Delta = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++)\n{  if(i<msg.payload.length){\n    var DATE = msg.payload[i].date\n    var WR_1_kwh = (msg.payload[i][\"WR 1\"])/1000 \n    var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n    var WR_2_kwh = (msg.payload[i][\"WR 2\"])/1000 \n    var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n    var wechselrichter_kwh = (msg.payload[i].Wechselrichter)/1000\n    var WR_delta_M15A_220_kwh = (msg.payload[i][\"WR Delta M15A_220\"]) / 1000\n    var ABB_WR1_kwh = (msg.payload[i][\"ABB WR 1\"])/1000\n    var Delta_kwh = (msg.payload[i].Delta)/1000\n    var wechselrichter_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter\"]\n    var WR_delta_M15A_220_Sp_Y = msg.payload[i][\"Specific Yield_WR Delta M15A_220\"]\n    var ABB_WR1_Sp_Y = msg.payload[i][\"Specific Yield_ABB WR 1\"]\n    var Delta_Sp_Y = msg.payload[i][\"Specific Yield_Delta\"]\n   \n\n    var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, wechselrichter_Sp_Y || 0, WR_delta_M15A_220_Sp_Y || 0, ABB_WR1_Sp_Y || 0, Delta_Sp_Y || 0)\n\n    var WR1_INV_CAPACITY=inv_cap[0]\n    var WR2_INV_CAPACITY = inv_cap[1]\n    var wechselrichter_CAPACITY = inv_cap[2]\n    var WR_delta_M15A_220_CAPACITY = inv_cap[3]\n    var ABB_WR1_CAPACITY = inv_cap[4]\n    var Delta_CAPACITY = inv_cap[5]\n\n    var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n    var Expected_gen_WR2 =Max_sy * WR2_INV_CAPACITY\n    var Expected_gen_wechselrichter =Max_sy* wechselrichter_CAPACITY\n    var Expected_gen_WR_delta_M15A_220 =Max_sy* WR_delta_M15A_220_CAPACITY\n    var Expected_gen_ABB_WR1 =Max_sy* ABB_WR1_CAPACITY\n    var Expected_gen_Delta =Max_sy* Delta_CAPACITY\n\n    Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n    Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n    Total_exp_wechselrichter= Total_exp_wechselrichter +Expected_gen_wechselrichter\n    Total_exp_WR_delta_M15A_220= Total_exp_WR_delta_M15A_220 +Expected_gen_WR_delta_M15A_220\n    Total_exp_ABB_WR1= Total_exp_ABB_WR1 +Expected_gen_ABB_WR1\n    Total_exp_Delta= Total_exp_Delta +Expected_gen_Delta\n\n    Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n    Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n    Total_ACT_wechselrichter=Total_ACT_wechselrichter+wechselrichter_kwh\n    Total_ACT_WR_delta_M15A_220=Total_ACT_WR_delta_M15A_220+WR_delta_M15A_220_kwh\n    Total_ACT_ABB_WR1=Total_ACT_ABB_WR1+ABB_WR1_kwh\n    Total_ACT_Delta=Total_ACT_Delta+Delta_kwh\n    \n    if ((Expected_gen_WR1 != WR_1_kwh ) || (WR_1_kwh==0)){ var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\"}\n    if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n    if ((Expected_gen_wechselrichter !=wechselrichter_kwh ) || (wechselrichter_kwh)) {var GEN_LOSS_wechselrichter=(Expected_gen_wechselrichter -wechselrichter_kwh)} else {GEN_LOSS_wechselrichter =\"0\"}\n    if ((Expected_gen_WR_delta_M15A_220 !=WR_delta_M15A_220_kwh ) || (WR_delta_M15A_220_kwh)) {var GEN_LOSS_WR_delta_M15A_220=(Expected_gen_WR_delta_M15A_220 -WR_delta_M15A_220_kwh)} else {GEN_LOSS_WR_delta_M15A_220 =\"0\"}\n    if ((Expected_gen_ABB_WR1 !=ABB_WR1_kwh ) || (ABB_WR1_kwh)) {var GEN_LOSS_ABB_WR1=(Expected_gen_ABB_WR1 -ABB_WR1_kwh)} else {GEN_LOSS_ABB_WR1 =\"0\"}\n    if ((Expected_gen_Delta !=Delta_kwh ) || (Delta_kwh)) {var GEN_LOSS_Delta=(Expected_gen_Delta -Delta_kwh)} else {GEN_LOSS_Delta =\"0\"}\n\n\n    Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n    Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n    Total_gen_loss_wechselrichter = Total_gen_loss_wechselrichter + (Expected_gen_wechselrichter -wechselrichter_kwh  )\n    Total_gen_loss_WR_delta_M15A_220 = Total_gen_loss_WR_delta_M15A_220 + (Expected_gen_WR_delta_M15A_220 -WR_delta_M15A_220_kwh  )\n    Total_gen_loss_ABB_WR1 = Total_gen_loss_ABB_WR1 + (Expected_gen_ABB_WR1 -ABB_WR1_kwh  )\n    Total_gen_loss_Delta = Total_gen_loss_Delta + (Expected_gen_Delta -Delta_kwh  )\n\n\n    var total_act_gen = [{\n        Total_ACT_WR1, Total_ACT_WR2, Total_ACT_wechselrichter,Total_ACT_WR_delta_M15A_220,Total_ACT_ABB_WR1,Total_ACT_Delta}]\n    var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_wechselrichter,Total_exp_WR_delta_M15A_220,Total_exp_ABB_WR1,Total_exp_Delta]\n    var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2,Total_gen_loss_wechselrichter,Total_gen_loss_WR_delta_M15A_220,Total_gen_loss_ABB_WR1,Total_gen_loss_Delta]\n\n\n    obj = {\n        DATE,\n         WR_1_kwh,\n         WR_1_Sp_Y,\n         WR_2_kwh,\n        WR_2_Sp_Y,\n        wechselrichter_kwh,\n        wechselrichter_Sp_Y,\nWR_delta_M15A_220_kwh,\nWR_delta_M15A_220_Sp_Y,\nABB_WR1_kwh,\nABB_WR1_Sp_Y,\nDelta_kwh,\nDelta_Sp_Y,\n         Max_sy,\n        Expected_gen_WR1:Expected_gen_WR1.toFixed(2),\n        Expected_gen_WR2:Expected_gen_WR2.toFixed(2),\n        Expected_gen_wechselrichter:Expected_gen_wechselrichter.toFixed(2),\n        Expected_gen_WR_delta_M15A_220:Expected_gen_WR_delta_M15A_220.toFixed(2),\n        Expected_gen_ABB_WR1:Expected_gen_ABB_WR1.toFixed(2),\n        Expected_gen_Delta:Expected_gen_Delta.toFixed(2),\n\n        \n        GEN_LOSS_WR1:parseFloat(GEN_LOSS_WR1).toFixed(2),\n        GEN_LOSS_WR2:parseFloat(GEN_LOSS_WR2).toFixed(2),\n        GEN_LOSS_wechselrichter:parseFloat(GEN_LOSS_wechselrichter).toFixed(2),\n        GEN_LOSS_WR_delta_M15A_220:parseFloat(GEN_LOSS_WR_delta_M15A_220).toFixed(2),\n        GEN_LOSS_ABB_WR1:parseFloat(GEN_LOSS_ABB_WR1).toFixed(2),\n        GEN_LOSS_Delta:parseFloat(GEN_LOSS_Delta).toFixed(2),\n        \n    }\n}\n   /* if (i == msg.payload.length) {\n        obj = {\n            DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n        }\n    }*/\n\n    array.push(obj)\n    \n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\",totalgen_loss)\nflow.set(\"total_act_gen\",total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            [
                "2a8770f75d3becb7"
            ]
        ]
    },
    {
        "id": "c4652687297e6228",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 740,
        "wires": [
            [
                "90eac257b0068f04"
            ]
        ]
    },
    {
        "id": "bb540c40b66553ba",
        "type": "file",
        "z": "b2b1ce87ff7b4b7f",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 740,
        "wires": [
            [
                "35db06fbae30e3b8"
            ]
        ]
    },
    {
        "id": "2a8770f75d3becb7",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 640,
        "wires": []
    },
    {
        "id": "c6b408e58080b59b",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "header correction",
        "info": "",
        "x": 840,
        "y": 220,
        "wires": []
    },
    {
        "id": "5b445f04cb2ebb6f",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 580,
        "wires": []
    },
    {
        "id": "2417f4ca45ea9633",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nfor (var i = 1; i < column.length; i++) {\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i].match(\"WR\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\nvar obj={\n    num, \n    sy,\n    column_header\n}\nresults.push(obj)\n}\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 260,
        "wires": [
            [
                "2a2ab9bd17525c6e"
            ]
        ]
    },
    {
        "id": "6eeaf5d2e141a3ec",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 660,
        "y": 260,
        "wires": [
            [
                "2417f4ca45ea9633"
            ]
        ]
    },
    {
        "id": "52a43a47b14dbc9c",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 850,
        "y": 580,
        "wires": [
            [
                "8e0bcfa2192d09f9"
            ]
        ]
    },
    {
        "id": "8e0bcfa2192d09f9",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 970,
        "y": 580,
        "wires": [
            [
                "5b445f04cb2ebb6f",
                "779a01f132fca52b"
            ]
        ]
    },
    {
        "id": "0bb94a78a57f4430",
        "type": "delay",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 580,
        "wires": [
            [
                "067ec493605c2967"
            ]
        ]
    },
    {
        "id": "7b5ea1dfc019e8dd",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "calculation",
        "info": "",
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "35db06fbae30e3b8",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 740,
        "wires": []
    },
    {
        "id": "7b0460dd157a000d",
        "type": "delay",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 740,
        "wires": [
            [
                "3cfa53df5ab5d558"
            ]
        ]
    },
    {
        "id": "832afbd3a4e26298",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 620,
        "y": 660,
        "wires": []
    },
    {
        "id": "2a2ab9bd17525c6e",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 260,
        "wires": []
    },
    {
        "id": "3cfa53df5ab5d558",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "eliminating null values",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 740,
        "wires": [
            [
                "c4652687297e6228"
            ]
        ]
    },
    {
        "id": "474e21e7598e2303",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "8c2c98fae3428b44"
            ]
        ]
    },
    {
        "id": "ec4357fde3995213",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 300,
        "wires": []
    },
    {
        "id": "8c2c98fae3428b44",
        "type": "change",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 300,
        "wires": [
            [
                "ec4357fde3995213"
            ]
        ]
    },
    {
        "id": "13c65ab4617e272d",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "90eac257b0068f04",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "filename",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Ezeeben_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "bb540c40b66553ba"
            ]
        ]
    },
    {
        "id": "0a33bc95fc5a853f",
        "type": "delay",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 860,
        "wires": [
            [
                "1c6f857e229d84cc"
            ]
        ]
    },
    {
        "id": "ed26dd38bd7acb67",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 860,
        "wires": [
            [
                "299203aebe95fe4b"
            ]
        ]
    },
    {
        "id": "299203aebe95fe4b",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "filename",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Ezeeben_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 860,
        "wires": [
            [
                "6ccdbcd549e20237"
            ]
        ]
    },
    {
        "id": "6ccdbcd549e20237",
        "type": "file",
        "z": "b2b1ce87ff7b4b7f",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 860,
        "wires": [
            [
                "7c91a2f489ef905f"
            ]
        ]
    },
    {
        "id": "7c91a2f489ef905f",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 860,
        "wires": []
    },
    {
        "id": "29fcd5578a01d278",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "plant info table",
        "func": "\nvar plant =flow.get(\"plant_info\")\nvar array = [\n    {   HEADER:\"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO \" ,\n        plant_info: plant[0].S_NO,       \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "49f9413de20c6527"
            ]
        ]
    },
    {
        "id": "3d768cfe0c41218e",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "report generation plant info table",
        "info": "",
        "x": 670,
        "y": 400,
        "wires": []
    },
    {
        "id": "a380ebc014e1736d",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 460,
        "wires": []
    },
    {
        "id": "d4c4a68928a4d323",
        "type": "delay",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "29fcd5578a01d278"
            ]
        ]
    },
    {
        "id": "a4324ebda681c6d8",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "filename",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Ezeeben_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "5d58b0a018d846b0"
            ]
        ]
    },
    {
        "id": "5d58b0a018d846b0",
        "type": "file",
        "z": "b2b1ce87ff7b4b7f",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 460,
        "wires": [
            [
                "a380ebc014e1736d"
            ]
        ]
    },
    {
        "id": "49f9413de20c6527",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "a4324ebda681c6d8"
            ]
        ]
    },
    {
        "id": "ec3942fc0db54eab",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "seperator replace",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "6eeaf5d2e141a3ec",
                "474e21e7598e2303"
            ]
        ]
    },
    {
        "id": "b551510deea9e470",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 183",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 520,
        "wires": []
    },
    {
        "id": "1c6f857e229d84cc",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i].toFixed(2),\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 860,
        "wires": [
            [
                "ed26dd38bd7acb67",
                "b209408dc4384829"
            ]
        ]
    },
    {
        "id": "b209408dc4384829",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 270",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 960,
        "wires": []
    },
    {
        "id": "0343182117db0ae6",
        "type": "file in",
        "z": "b2b1ce87ff7b4b7f",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/Ezeeben  may month csv file/15547558046_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "a14960eab4da29e1"
            ]
        ]
    },
    {
        "id": "df42d1434202a8cc",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "header correction",
        "info": "",
        "x": 760,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f534b4b34b445509",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "set header",
        "func": "var results = []\nvar filename = 547558046//flow.get(\"filename\");\n//const plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nfor (var i = 1; i < column.length; i++) {\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i].match(\"WR\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\nvar obj={\n    num, \n    sy,\n    column_header\n}\nresults.push(obj)\n}\nmsg.payload=results\nflow.set(\"column\", column_header)\n//flow.set(\"live_plant\", plant);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "97405c58e4ccfd56"
            ]
        ]
    },
    {
        "id": "6f5093cba4695992",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 580,
        "y": 1080,
        "wires": [
            [
                "f534b4b34b445509"
            ]
        ]
    },
    {
        "id": "97405c58e4ccfd56",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 272",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ea15f4afd2179a1b",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "a073644c3268d01d"
            ]
        ]
    },
    {
        "id": "7e7e71fa18fbf1b3",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 273",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a073644c3268d01d",
        "type": "change",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "7e7e71fa18fbf1b3"
            ]
        ]
    },
    {
        "id": "a14960eab4da29e1",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "seperator replace",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "6f5093cba4695992",
                "ea15f4afd2179a1b"
            ]
        ]
    },
    {
        "id": "c24745be238cf0a6",
        "type": "inject",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 980,
        "wires": [
            [
                "0343182117db0ae6",
                "e13bd60a104093ef"
            ]
        ]
    },
    {
        "id": "0b1cb5f74fec5ac6",
        "type": "file in",
        "z": "b2b1ce87ff7b4b7f",
        "name": "REF data",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/Ezee_Ben_Plants_List 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 1300,
        "wires": [
            [
                "fde698746083aa3c"
            ]
        ]
    },
    {
        "id": "fde698746083aa3c",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 430,
        "y": 1300,
        "wires": [
            [
                "5a907eb1bc9d8b3e"
            ]
        ]
    },
    {
        "id": "5a907eb1bc9d8b3e",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "comaprison with ref file",
        "func": "var live_plant=flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\nvar inv_array=[]\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name = msg.payload[i][\"PLANT NAME\"]\n    var S_NO = msg.payload[i][\"SERIAL NUMBER\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n    var PLANT_SIZE = parseInt(msg.payload[i][\"PLANT SIZE\"])\n  \n    if (live_plant == S_NO) \n      {\n        var capacity = [parseFloat(msg.payload[i][\"WR 1\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"WR 2\"]) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter) || \"null\",\n                        parseFloat(msg.payload[i][\"WR delta M15A_220\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"ABB WR1\"]) || \"null\",\n                        parseFloat(msg.payload[i].Delta) || \"null\",]\n                                                        \n         \n        for (var j = 1; j <= INV_NO; j++) {\n            inv_array.push(\"WR\" + j)\n        }\n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO,\n    PLANT_SIZE\n    \n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\nflow.set(\"inv_array\", inv_array)\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1300,
        "wires": [
            [
                "061083bff1c10448"
            ]
        ]
    },
    {
        "id": "72985379d60bf34a",
        "type": "function",
        "z": "b2b1ce87ff7b4b7f",
        "name": "main calculation",
        "func": "var inv_cap=flow.get(\"INV_CAPACITY\");\nvar array=[]\n var Total_exp_WR1=0\n var Total_exp_WR2=0\nvar Total_exp_wechselrichter=0\nvar Total_exp_WR_delta_M15A_220=0\nvar Total_exp_ABB_WR1=0\nvar Total_exp_Delta=0\n \nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_wechselrichter = 0\nvar Total_ACT_WR_delta_M15A_220 = 0\nvar Total_ACT_ABB_WR1 = 0\nvar Total_ACT_Delta = 0\n\nvar Total_gen_loss_WR1=0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_wechselrichter = 0\nvar Total_gen_loss_WR_delta_M15A_220 = 0\nvar Total_gen_loss_ABB_WR1 = 0\nvar Total_gen_loss_Delta = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++)\n{  if(i<msg.payload.length){\n    var DATE = msg.payload[i].date\n    var WR_1_kwh = (msg.payload[i][\"WR 1\"])/1000 \n    var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_1(kWh / kWp)\"] \n    var WR_2_kwh = (msg.payload[i][\"WR 1\"])/1000 \n    var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_2(kWh / kWp)\"] \n    var wechselrichter_kwh = (msg.payload[i].Wechselrichter)/1000\n    var WR_delta_M15A_220_kwh = (msg.payload[i][\"WR Delta M15A_220\"]) / 1000\n    var ABB_WR1_kwh = (msg.payload[i][\"ABB WR 1\"])/1000\n    var Delta_kwh = (msg.payload[i].Delta)/1000\n    var wechselrichter_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter\"]\n    var WR_delta_M15A_220_Sp_Y = msg.payload[i][\"Specific Yield_WR Delta M15A_220\"]\n    var ABB_WR1_Sp_Y = msg.payload[i][\"Specific Yield_ABB WR 1\"]\n    var Delta_Sp_Y = msg.payload[i][\"Specific Yield_Delta\"]\n   \n\n    var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, wechselrichter_Sp_Y || 0, WR_delta_M15A_220_Sp_Y || 0, ABB_WR1_Sp_Y || 0, Delta_Sp_Y || 0)\n\n    var WR1_INV_CAPACITY=inv_cap[0]\n    var WR2_INV_CAPACITY = inv_cap[1]\n    var wechselrichter_CAPACITY = inv_cap[2]\n    var WR_delta_M15A_220_CAPACITY = inv_cap[3]\n    var ABB_WR1_CAPACITY = inv_cap[4]\n    var Delta_CAPACITY = inv_cap[5]\n\n    var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n    var Expected_gen_WR2 =Max_sy * WR2_INV_CAPACITY\n    var Expected_gen_wechselrichter =Max_sy* wechselrichter_CAPACITY\n    var Expected_gen_WR_delta_M15A_220 =Max_sy* WR_delta_M15A_220_CAPACITY\n    var Expected_gen_ABB_WR1 =Max_sy* ABB_WR1_CAPACITY\n    var Expected_gen_Delta =Max_sy* Delta_CAPACITY\n\n    Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n    Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n    Total_exp_wechselrichter= Total_exp_wechselrichter +Expected_gen_wechselrichter\n    Total_exp_WR_delta_M15A_220= Total_exp_WR_delta_M15A_220 +Expected_gen_WR_delta_M15A_220\n    Total_exp_ABB_WR1= Total_exp_ABB_WR1 +Expected_gen_ABB_WR1\n    Total_exp_Delta= Total_exp_Delta +Expected_gen_Delta\n\n    Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n    Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n    Total_ACT_wechselrichter=Total_ACT_wechselrichter+wechselrichter_kwh\n    Total_ACT_WR_delta_M15A_220=Total_ACT_WR_delta_M15A_220+WR_delta_M15A_220_kwh\n    Total_ACT_ABB_WR1=Total_ACT_ABB_WR1+ABB_WR1_kwh\n    Total_ACT_Delta=Total_ACT_Delta+Delta_kwh\n    \n    if ((Expected_gen_WR1 != WR_1_kwh ) || (WR_1_kwh==0)){ var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\"}\n    if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n    if ((Expected_gen_wechselrichter !=wechselrichter_kwh ) || (wechselrichter_kwh)) {var GEN_LOSS_wechselrichter=(Expected_gen_wechselrichter -wechselrichter_kwh)} else {GEN_LOSS_wechselrichter =\"0\"}\n    if ((Expected_gen_WR_delta_M15A_220 !=WR_delta_M15A_220_kwh ) || (WR_delta_M15A_220_kwh)) {var GEN_LOSS_WR_delta_M15A_220=(Expected_gen_WR_delta_M15A_220 -WR_delta_M15A_220_kwh)} else {GEN_LOSS_WR_delta_M15A_220 =\"0\"}\n    if ((Expected_gen_ABB_WR1 !=ABB_WR1_kwh ) || (ABB_WR1_kwh)) {var GEN_LOSS_ABB_WR1=(Expected_gen_ABB_WR1 -ABB_WR1_kwh)} else {GEN_LOSS_ABB_WR1 =\"0\"}\n    if ((Expected_gen_Delta !=Delta_kwh ) || (Delta_kwh)) {var GEN_LOSS_Delta=(Expected_gen_Delta -Delta_kwh)} else {GEN_LOSS_Delta =\"0\"}\n\n\n    Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n    Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n    Total_gen_loss_wechselrichter = Total_gen_loss_wechselrichter + (Expected_gen_wechselrichter -wechselrichter_kwh  )\n    Total_gen_loss_WR_delta_M15A_220 = Total_gen_loss_WR_delta_M15A_220 + (Expected_gen_WR_delta_M15A_220 -WR_delta_M15A_220_kwh  )\n    Total_gen_loss_ABB_WR1 = Total_gen_loss_ABB_WR1 + (Expected_gen_ABB_WR1 -ABB_WR1_kwh  )\n    Total_gen_loss_Delta = Total_gen_loss_Delta + (Expected_gen_Delta -Delta_kwh  )\n\n\n    var total_act_gen = [{\n        Total_ACT_WR1, Total_ACT_WR2, Total_ACT_wechselrichter,Total_ACT_WR_delta_M15A_220,Total_ACT_ABB_WR1,Total_ACT_Delta}]\n    var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_wechselrichter,Total_exp_WR_delta_M15A_220,Total_exp_ABB_WR1,Total_exp_Delta]\n    var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2,Total_gen_loss_wechselrichter,Total_gen_loss_WR_delta_M15A_220,Total_gen_loss_ABB_WR1,Total_gen_loss_Delta]\n\n\n    obj = {\n        DATE,\n         WR_1_kwh,\n         WR_1_Sp_Y,\n         WR_2_kwh,\n        WR_2_Sp_Y,\n        wechselrichter_kwh,\n        wechselrichter_Sp_Y,\nWR_delta_M15A_220_kwh,\nWR_delta_M15A_220_Sp_Y,\nABB_WR1_kwh,\nABB_WR1_Sp_Y,\nDelta_kwh,\nDelta_Sp_Y,\n         Max_sy,\n        Expected_gen_WR1,\n        Expected_gen_WR2, Expected_gen_wechselrichter,\nExpected_gen_WR_delta_M15A_220,\nExpected_gen_ABB_WR1,\nExpected_gen_Delta,\n\n        \n        GEN_LOSS_WR1,\n        GEN_LOSS_WR2,\n        GEN_LOSS_wechselrichter,\n        GEN_LOSS_WR_delta_M15A_220,\n        GEN_LOSS_ABB_WR1,\n        GEN_LOSS_Delta,\n        \n    }\n}\n   /* if (i == msg.payload.length) {\n        obj = {\n            DATE: \"null\" + '\\n' +\"TOTAL\",\"WR 1 (kWh)\": \"null\" + '\\n' + Total_ACT_WR1, \"Specific Yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"WR 2 (kWh)\": \"null\" + '\\n' + Total_ACT_WR2, \"Specific Yield2 (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Total Yield Wh\": \"null\" + '\\n' + \"null\", \"average specific yield (kWh / kWp)\": \"null\" + '\\n' + \"null\", \"Max_sy\": \"null\", \"Expected_gen_WR1\": \"null\" + '\\n' + Total_exp_WR1.toFixed(2), \"Expected_gen_WR2\": \"null\" + '\\n' + Total_exp_WR2.toFixed(2), \"GEN_LOSS_WR1\": \"null\" + '\\n' + Total_gen_loss_WR1.toFixed(2), \"GEN_LOSS_WR2\": \"null\" + '\\n' + Total_gen_loss_WR2.toFixed(2)\n        }\n    }*/\n\n    array.push(obj)\n    \n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\",totalgen_loss)\nflow.set(\"total_act_gen\",total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1360,
        "wires": [
            [
                "9b1deefd482763e1"
            ]
        ]
    },
    {
        "id": "9b1deefd482763e1",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 274",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1360,
        "wires": []
    },
    {
        "id": "49e29ff108d8515c",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 275",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1300,
        "wires": []
    },
    {
        "id": "061083bff1c10448",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 790,
        "y": 1300,
        "wires": [
            [
                "9ae081cd69a760d8"
            ]
        ]
    },
    {
        "id": "9ae081cd69a760d8",
        "type": "csv",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 910,
        "y": 1300,
        "wires": [
            [
                "49e29ff108d8515c",
                "72985379d60bf34a"
            ]
        ]
    },
    {
        "id": "e13bd60a104093ef",
        "type": "delay",
        "z": "b2b1ce87ff7b4b7f",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1300,
        "wires": [
            [
                "0b1cb5f74fec5ac6"
            ]
        ]
    },
    {
        "id": "d13ab7f4c7c89adb",
        "type": "comment",
        "z": "b2b1ce87ff7b4b7f",
        "name": "calculation",
        "info": "",
        "x": 600,
        "y": 1240,
        "wires": []
    },
    {
        "id": "60c91264257be876",
        "type": "debug",
        "z": "b2b1ce87ff7b4b7f",
        "name": "debug 276",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1240,
        "wires": []
    },
    {
        "id": "7a9deacde1eeb410",
        "type": "fs-ops-dir",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/wierig plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "04a935c6a43fdeb3"
            ]
        ]
    },
    {
        "id": "1c342ca94acf0fd8",
        "type": "inject",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "7a9deacde1eeb410"
            ]
        ]
    },
    {
        "id": "26bc7918ddf51ba5",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 80,
        "wires": [
            [
                "80dfe6643e13f10a",
                "4a30c08b3e3420e6",
                "c18e10044a0651ea",
                "8922e3f053d3d383",
                "f2480a44b00b5e65",
                "37fe3565bf7b7c19"
            ]
        ]
    },
    {
        "id": "04a935c6a43fdeb3",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "26bc7918ddf51ba5"
            ]
        ]
    },
    {
        "id": "80dfe6643e13f10a",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 193",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 80,
        "wires": []
    },
    {
        "id": "4a30c08b3e3420e6",
        "type": "file in",
        "z": "fb5bfb14f47e3d76",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 250,
        "y": 200,
        "wires": [
            [
                "66bdfd63213967df"
            ]
        ]
    },
    {
        "id": "8e51d08a7ab21dca",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "afcfc0e8bd409479"
            ]
        ]
    },
    {
        "id": "8d99f3b58691b027",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "report generation plant info table",
        "info": "",
        "x": 670,
        "y": 460,
        "wires": []
    },
    {
        "id": "8631d9e978ad8b77",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 194",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "8922e3f053d3d383",
        "type": "delay",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 520,
        "wires": [
            [
                "8e51d08a7ab21dca"
            ]
        ]
    },
    {
        "id": "29eeb88b6d38b0fc",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "report file",
        "func": "var plant = flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 520,
        "wires": [
            [
                "ecd05ceabea4b38d"
            ]
        ]
    },
    {
        "id": "ecd05ceabea4b38d",
        "type": "file",
        "z": "fb5bfb14f47e3d76",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 950,
        "y": 520,
        "wires": [
            [
                "8631d9e978ad8b77"
            ]
        ]
    },
    {
        "id": "afcfc0e8bd409479",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 590,
        "y": 520,
        "wires": [
            [
                "29eeb88b6d38b0fc"
            ]
        ]
    },
    {
        "id": "8b193dd3e8cf3d97",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "c7260b2914b4a3fc"
            ]
        ]
    },
    {
        "id": "4d857e174e6f1b91",
        "type": "file",
        "z": "fb5bfb14f47e3d76",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 850,
        "y": 660,
        "wires": [
            [
                "3aa42a4017894993"
            ]
        ]
    },
    {
        "id": "3aa42a4017894993",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 195",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 660,
        "wires": []
    },
    {
        "id": "f2480a44b00b5e65",
        "type": "delay",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 660,
        "wires": [
            [
                "e167c29dd6050892"
            ]
        ]
    },
    {
        "id": "8871bf0f02f04f70",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 620,
        "y": 580,
        "wires": []
    },
    {
        "id": "e167c29dd6050892",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "8b193dd3e8cf3d97"
            ]
        ]
    },
    {
        "id": "952674a9f88446d9",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 620,
        "y": 740,
        "wires": []
    },
    {
        "id": "c7260b2914b4a3fc",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 660,
        "wires": [
            [
                "4d857e174e6f1b91"
            ]
        ]
    },
    {
        "id": "37fe3565bf7b7c19",
        "type": "delay",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 780,
        "wires": [
            [
                "dbd1427410bec1a5"
            ]
        ]
    },
    {
        "id": "b45f7aefc8c2c33c",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 780,
        "wires": [
            [
                "37f9c42f9169b702"
            ]
        ]
    },
    {
        "id": "37f9c42f9169b702",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 780,
        "wires": [
            [
                "8db74edcca5b7c77"
            ]
        ]
    },
    {
        "id": "8db74edcca5b7c77",
        "type": "file",
        "z": "fb5bfb14f47e3d76",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 780,
        "wires": [
            [
                "209267977c5a2efa"
            ]
        ]
    },
    {
        "id": "209267977c5a2efa",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 196",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 780,
        "wires": []
    },
    {
        "id": "ff6aa68b35f64978",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 201",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 300,
        "wires": []
    },
    {
        "id": "3289e96c8538eebc",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "header correction",
        "info": "",
        "x": 940,
        "y": 160,
        "wires": []
    },
    {
        "id": "24b4a026f81c2bfa",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nvar inv_array = []\nfor (var i = 1; i < column.length; i++) {\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i].match(\"WR\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n\nvar obj={\n    num, \n    sy,\n    column_header,\n    inv_re,\n    column:column[i]\n    \n}\nresults.push(obj)\n}\n\n\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "4ec7a5ff35910dea"
            ]
        ]
    },
    {
        "id": "60aba45e106f2f6a",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 760,
        "y": 200,
        "wires": [
            [
                "24b4a026f81c2bfa"
            ]
        ]
    },
    {
        "id": "4ec7a5ff35910dea",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 202",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "fb110d48d8112634",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "c0c850939a041f19"
            ]
        ]
    },
    {
        "id": "1844dfe5069d6bc8",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 203",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "c0c850939a041f19",
        "type": "change",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 240,
        "wires": [
            [
                "1844dfe5069d6bc8"
            ]
        ]
    },
    {
        "id": "66bdfd63213967df",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "60aba45e106f2f6a",
                "fb110d48d8112634"
            ]
        ]
    },
    {
        "id": "ae6422af1260da22",
        "type": "file in",
        "z": "fb5bfb14f47e3d76",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/wierig plants name list 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 380,
        "wires": [
            [
                "7a2905f65339ac90"
            ]
        ]
    },
    {
        "id": "7a2905f65339ac90",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "78c1c09276672893"
            ]
        ]
    },
    {
        "id": "78c1c09276672893",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i].WR13) || \"null\",\n                             parseFloat(msg.payload[i].WR14) || \"null\",\n                             parseFloat(msg.payload[i].WR15) || \"null\",\n                             parseFloat(msg.payload[i].WR16) || \"null\",\n                             parseFloat(msg.payload[i].WR17) || \"null\",\n                             parseFloat(msg.payload[i].WR18) || \"null\",\n                             parseFloat(msg.payload[i].WR19) || \"null\",\n                             parseFloat(msg.payload[i].WR20) || \"null\",\n                             parseFloat(msg.payload[i].WR21) || \"null\",\n                             parseFloat(msg.payload[i].WR22) || \"null\",\n                             parseFloat(msg.payload[i].WR23) || \"null\",\n                             parseFloat(msg.payload[i].WR24) || \"null\",\n                             parseFloat(msg.payload[i].WR25) || \"null\",\n                             parseFloat(msg.payload[i].WR26) || \"null\",\n                             parseFloat(msg.payload[i].WR27) || \"null\",\n                 parseFloat(msg.payload[i].INV1) || \"null\",\n                 parseFloat(msg.payload[i].INV2) || \"null\",\n                 parseFloat(msg.payload[i].INV3) || \"null\",\n                 parseFloat(msg.payload[i].INV4) || \"null\",\n                 parseFloat(msg.payload[i].INV5) || \"null\",\n                 parseFloat(msg.payload[i].INV6) || \"null\",\n                 parseFloat(msg.payload[i].INV7) || \"null\",\n                 parseFloat(msg.payload[i].INV8) || \"null\",\n                 parseFloat(msg.payload[i].INV9) || \"null\",\n                 parseFloat(msg.payload[i].INV10) || \"null\",\n                 parseFloat(msg.payload[i].INV11) || \"null\",\n                 parseFloat(msg.payload[i].INV12) || \"null\",\n                 parseFloat(msg.payload[i].INV13) || \"null\",\n                 parseFloat(msg.payload[i].INV14) || \"null\",]\n                             \n                             \n                             \n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "ead209fa97491e34"
            ]
        ]
    },
    {
        "id": "49865531f2556642",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR13 = 0\nvar Total_exp_WR14 = 0\nvar Total_exp_WR15 = 0\nvar Total_exp_WR16 = 0\nvar Total_exp_WR17 = 0\nvar Total_exp_WR18 = 0\nvar Total_exp_WR19 = 0\nvar Total_exp_WR20 = 0\nvar Total_exp_WR21 = 0\nvar Total_exp_WR22 = 0\nvar Total_exp_WR23 = 0\nvar Total_exp_WR24 = 0\nvar Total_exp_WR25 = 0\nvar Total_exp_WR26 = 0\nvar Total_exp_WR27 = 0\nvar Total_exp_INV1 = 0\nvar Total_exp_INV2 = 0\nvar Total_exp_INV3 = 0\nvar Total_exp_INV4 = 0\nvar Total_exp_INV5 = 0\nvar Total_exp_INV6 = 0\nvar Total_exp_INV7 = 0\nvar Total_exp_INV8 = 0\nvar Total_exp_INV9 = 0\nvar Total_exp_INV10 = 0\nvar Total_exp_INV11 = 0\nvar Total_exp_INV12 = 0\nvar Total_exp_INV13 = 0\nvar Total_exp_INV14 = 0\n\n\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR13 = 0\nvar Total_ACT_WR14 = 0\nvar Total_ACT_WR15 = 0\nvar Total_ACT_WR16 = 0\nvar Total_ACT_WR17 = 0\nvar Total_ACT_WR18 = 0\nvar Total_ACT_WR19 = 0\nvar Total_ACT_WR20 = 0\nvar Total_ACT_WR21 = 0\nvar Total_ACT_WR22 = 0\nvar Total_ACT_WR23 = 0\nvar Total_ACT_WR24 = 0\nvar Total_ACT_WR25 = 0\nvar Total_ACT_WR26 = 0\nvar Total_ACT_WR27 = 0\nvar Total_ACT_INV1 = 0\nvar Total_ACT_INV2 = 0\nvar Total_ACT_INV3 = 0\nvar Total_ACT_INV4 = 0\nvar Total_ACT_INV5 = 0\nvar Total_ACT_INV6 = 0\nvar Total_ACT_INV7 = 0\nvar Total_ACT_INV8 = 0\nvar Total_ACT_INV9 = 0\nvar Total_ACT_INV10 = 0\nvar Total_ACT_INV11 = 0\nvar Total_ACT_INV12 = 0\nvar Total_ACT_INV13 = 0\nvar Total_ACT_INV14 = 0\n\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR13 = 0\nvar Total_gen_loss_WR14 = 0\nvar Total_gen_loss_WR15 = 0\nvar Total_gen_loss_WR16 = 0\nvar Total_gen_loss_WR17 = 0\nvar Total_gen_loss_WR18 = 0\nvar Total_gen_loss_WR19 = 0\nvar Total_gen_loss_WR20 = 0\nvar Total_gen_loss_WR21 = 0\nvar Total_gen_loss_WR22 = 0\nvar Total_gen_loss_WR23 = 0\nvar Total_gen_loss_WR24 = 0\nvar Total_gen_loss_WR25 = 0\nvar Total_gen_loss_WR26 = 0\nvar Total_gen_loss_WR27 = 0\nvar Total_gen_loss_INV1 = 0\nvar Total_gen_loss_INV2 = 0\nvar Total_gen_loss_INV3 = 0\nvar Total_gen_loss_INV4 = 0\nvar Total_gen_loss_INV5 = 0\nvar Total_gen_loss_INV6 = 0\nvar Total_gen_loss_INV7 = 0\nvar Total_gen_loss_INV8 = 0\nvar Total_gen_loss_INV9 = 0\nvar Total_gen_loss_INV10 = 0\nvar Total_gen_loss_INV11 = 0\nvar Total_gen_loss_INV12 = 0\nvar Total_gen_loss_INV13 = 0\nvar Total_gen_loss_INV14 = 0\n\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n        var WR_1_kwh = (msg.payload[i][\"WR 1\"]/1000)\n        var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR_2_kwh = (msg.payload[i][\"WR 2\"]/1000)\n        var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR_3_kwh = (msg.payload[i][\"WR 3\"]/1000)\n        var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR_4_kwh = (msg.payload[i][\"WR 4\"]/1000)\n        var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR_5_kwh = (msg.payload[i][\"WR 5\"]/1000)\n        var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR_6_kwh = (msg.payload[i][\"WR 6\"]/1000)\n        var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR_7_kwh = (msg.payload[i][\"WR 7\"]/1000)\n        var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR_8_kwh = (msg.payload[i][\"WR 8\"]/1000)\n        var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR_9_kwh = (msg.payload[i][\"WR 9\"]/1000)\n        var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR_10_kwh = (msg.payload[i][\"WR 10\"]/1000)\n        var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR_11_kwh = (msg.payload[i][\"WR 11\"]/1000)\n        var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR_12_kwh = (msg.payload[i][\"WR 12\"]/1000)\n        var WR_12_Sp_Y = msg.payload[i][\"Specific Yield_WR 12\"]\n\n        var WR_13_kwh = (msg.payload[i][\"WR 13\"]/1000)\n              var WR_13_Sp_Y = msg.payload[i][\"Specific Yield_WR 13\"]\n\n        var WR_14_kwh = (msg.payload[i][\"WR 14\"]/1000)\n              var WR_14_Sp_Y = msg.payload[i][\"Specific Yield_WR 14\"]\n\n        var WR_15_kwh = (msg.payload[i][\"WR 15\"]/1000)\n              var WR_15_Sp_Y = msg.payload[i][\"Specific Yield_WR 15\"]\n\n        var WR_16_kwh = (msg.payload[i][\"WR 16\"]/1000)\n              var WR_16_Sp_Y = msg.payload[i][\"Specific Yield_WR 16\"]\n\n        var WR_17_kwh = (msg.payload[i][\"WR 17\"]/1000)\n              var WR_17_Sp_Y = msg.payload[i][\"Specific Yield_WR 17\"]\n\n        var WR_18_kwh = (msg.payload[i][\"WR 18\"]/1000)\n              var WR_18_Sp_Y = msg.payload[i][\"Specific Yield_WR 18\"]\n\n        var WR_19_kwh = (msg.payload[i][\"WR 19\"]/1000)\n              var WR_19_Sp_Y = msg.payload[i][\"Specific Yield_WR 19\"]\n\n        var WR_20_kwh = (msg.payload[i][\"WR 20\"]/1000)\n              var WR_20_Sp_Y = msg.payload[i][\"Specific Yield_WR 20\"]\n\n        var WR_21_kwh = (msg.payload[i][\"WR 21\"]/1000)\n              var WR_21_Sp_Y = msg.payload[i][\"Specific Yield_WR 21\"]\n\n        var WR_22_kwh = (msg.payload[i][\"WR 22\"]/1000)\n              var WR_22_Sp_Y = msg.payload[i][\"Specific Yield_WR 22\"]\n\n        var WR_23_kwh = (msg.payload[i][\"WR 23\"]/1000)\n              var WR_23_Sp_Y = msg.payload[i][\"Specific Yield_WR 23\"]\n\n        var WR_24_kwh = (msg.payload[i][\"WR 24\"]/1000)\n              var WR_24_Sp_Y = msg.payload[i][\"Specific Yield_WR 24\"]\n\n        var WR_25_kwh = (msg.payload[i][\"WR 25\"]/1000)\n              var WR_25_Sp_Y = msg.payload[i][\"Specific Yield_WR 25\"]\n\n        var WR_26_kwh = (msg.payload[i][\"WR 26\"]/1000)\n              var WR_26_Sp_Y = msg.payload[i][\"Specific Yield_WR 26\"]\n\n        var WR_27_kwh = (msg.payload[i][\"WR 27\"]/1000)\n              var WR_27_Sp_Y = msg.payload[i][\"Specific Yield_WR 27\"]\n\n        var INV_1_kwh = (msg.payload[i][\"INV 1\"] / 1000) || (msg.payload[i][\"INV1-W\"]/1000)\n        var INV_1_Sp_Y = msg.payload[i][\"Specific Yield_INV 1\"]||( msg.payload[i][\"Specific Yield_INV1-W\"])\n        var INV_2_kwh = (msg.payload[i][\"INV 2\"]/1000)||(msg.payload[i][\"INV2-W\"]/1000)\n        var INV_2_Sp_Y = msg.payload[i][\"Specific Yield_INV 2\"]||( msg.payload[i][\"Specific Yield_INV2-W\"])\n        var INV_3_kwh = (msg.payload[i][\"INV 3\"]/1000)||(msg.payload[i][\"INV3-W\"]/1000)\n        var INV_3_Sp_Y = msg.payload[i][\"Specific Yield_INV 3\"]||( msg.payload[i][\"Specific Yield_INV3-W\"])\n        var INV_4_kwh = (msg.payload[i][\"INV 4\"]/1000)||(msg.payload[i][\"INV4-W\"]/1000)\n        var INV_4_Sp_Y = msg.payload[i][\"Specific Yield_INV 4\"]||( msg.payload[i][\"Specific Yield_INV4-W\"])\n        var INV_5_kwh = (msg.payload[i][\"INV 5\"]/1000)||(msg.payload[i][\"INV5-W\"]/1000)\n        var INV_5_Sp_Y = msg.payload[i][\"Specific Yield_INV 5\"]||( msg.payload[i][\"Specific Yield_INV5-W\"])\n        var INV_6_kwh = (msg.payload[i][\"INV 6\"]/1000)||(msg.payload[i][\"INV6-W\"]/1000)\n        var INV_6_Sp_Y = msg.payload[i][\"Specific Yield_INV 6\"]||( msg.payload[i][\"Specific Yield_INV6-W\"])\n        var INV_7_kwh = (msg.payload[i][\"INV 7\"]/1000)||(msg.payload[i][\"INV7-W\"]/1000)\n        var INV_7_Sp_Y = msg.payload[i][\"Specific Yield_INV 7\"]||( msg.payload[i][\"Specific Yield_INV7-W\"])\n        var INV_8_kwh = (msg.payload[i][\"INV 8\"] / 1000) || (msg.payload[i][\"INV8-O\"]/1000)\n        var INV_8_Sp_Y = msg.payload[i][\"Specific Yield_INV 8\"]||( msg.payload[i][\"Specific Yield_INV8-O\"])\n        var INV_9_kwh = (msg.payload[i][\"INV 9\"]/1000)||(msg.payload[i][\"INV9-O\"]/1000)\n        var INV_9_Sp_Y = msg.payload[i][\"Specific Yield_INV 9\"]||( msg.payload[i][\"Specific Yield_INV9-O\"])\n        var INV_10_kwh = (msg.payload[i][\"INV 10\"]/1000)||(msg.payload[i][\"INV10-O\"]/1000)\n        var INV_10_Sp_Y = msg.payload[i][\"Specific Yield_INV 10\"]||( msg.payload[i][\"Specific Yield_INV10-O\"])\n        var INV_11_kwh = (msg.payload[i][\"INV 11\"]/1000)||(msg.payload[i][\"INV11-O\"]/1000)\n        var INV_11_Sp_Y = msg.payload[i][\"Specific Yield_INV 11\"]||( msg.payload[i][\"Specific Yield_INV11-O\"])\n        var INV_12_kwh = (msg.payload[i][\"INV 12\"]/1000)||(msg.payload[i][\"INV12-O\"]/1000)\n        var INV_12_Sp_Y = msg.payload[i][\"Specific Yield_INV 12\"] || (msg.payload[i][\"Specific Yield_INV12-O\"])\n        var INV_13_kwh = (msg.payload[i][\"INV 13\"]/1000)||(msg.payload[i][\"INV13-W\"]/1000)\n        var INV_13_Sp_Y = msg.payload[i][\"Specific Yield_INV 13\"]||( msg.payload[i][\"Specific Yield_INV13-W\"])\n        var INV_14_kwh = (msg.payload[i][\"INV 14\"]/1000)||(msg.payload[i][\"INV14-W\"]/1000)\n        var INV_14_Sp_Y = msg.payload[i][\"Specific Yield_INV 14\"] || (msg.payload[i][\"Specific Yield_INV14-W\"])\n\n       \n\n        var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n            WR_11_Sp_Y || 0, WR_12_Sp_Y || 0, WR_13_Sp_Y || 0, WR_14_Sp_Y || 0, WR_15_Sp_Y || 0, WR_16_Sp_Y || 0, WR_17_Sp_Y || 0, WR_18_Sp_Y || 0, WR_19_Sp_Y || 0, WR_20_Sp_Y || 0,\n            WR_21_Sp_Y || 0, WR_22_Sp_Y || 0, WR_23_Sp_Y || 0, WR_24_Sp_Y || 0, WR_25_Sp_Y || 0, WR_26_Sp_Y || 0, WR_27_Sp_Y || 0, INV_1_Sp_Y || 0, INV_2_Sp_Y || 0, INV_3_Sp_Y || 0, INV_4_Sp_Y || 0, INV_5_Sp_Y || 0, INV_6_Sp_Y || 0, INV_7_Sp_Y || 0, INV_8_Sp_Y || 0, INV_9_Sp_Y || 0, INV_10_Sp_Y || 0,\n            INV_11_Sp_Y || 0, INV_12_Sp_Y || 0, INV_13_Sp_Y || 0, INV_14_Sp_Y || 0)\n\n        var WR1_INV_CAPACITY = inv_cap[0]\n        var WR2_INV_CAPACITY = inv_cap[1]\n        var WR3_INV_CAPACITY = inv_cap[2]\n        var WR4_INV_CAPACITY = inv_cap[3]\n        var WR5_INV_CAPACITY = inv_cap[4]\n        var WR6_INV_CAPACITY = inv_cap[5]\n        var WR7_INV_CAPACITY = inv_cap[6]\n        var WR8_INV_CAPACITY = inv_cap[7]\n        var WR9_INV_CAPACITY = inv_cap[8]\n        var WR10_INV_CAPACITY = inv_cap[9]\n        var WR11_INV_CAPACITY = inv_cap[10]\n        var WR12_INV_CAPACITY = inv_cap[11]\n        var WR13_INV_CAPACITY = inv_cap[12]\n        var WR14_INV_CAPACITY = inv_cap[13]\n        var WR15_INV_CAPACITY = inv_cap[14]\n        var WR16_INV_CAPACITY = inv_cap[15]\n        var WR17_INV_CAPACITY = inv_cap[16]\n        var WR18_INV_CAPACITY = inv_cap[17]\n        var WR19_INV_CAPACITY = inv_cap[18]\n        var WR20_INV_CAPACITY = inv_cap[19]\n        var WR21_INV_CAPACITY = inv_cap[20]\n        var WR22_INV_CAPACITY = inv_cap[21]\n        var WR23_INV_CAPACITY = inv_cap[22]\n        var WR24_INV_CAPACITY = inv_cap[23]\n        var WR25_INV_CAPACITY = inv_cap[24]\n        var WR26_INV_CAPACITY = inv_cap[25]\n        var WR27_INV_CAPACITY = inv_cap[26]\n        var INV1_INV_CAPACITY = inv_cap[27]\n        var INV2_INV_CAPACITY = inv_cap[28]\n        var INV3_INV_CAPACITY = inv_cap[29]\n        var INV4_INV_CAPACITY = inv_cap[30]\n        var INV5_INV_CAPACITY = inv_cap[31]\n        var INV6_INV_CAPACITY = inv_cap[32]\n        var INV7_INV_CAPACITY = inv_cap[33]\n        var INV8_INV_CAPACITY = inv_cap[34]\n        var INV9_INV_CAPACITY = inv_cap[35]\n        var INV10_INV_CAPACITY =inv_cap[36]\n        var INV11_INV_CAPACITY =inv_cap[37]\n        var INV12_INV_CAPACITY =inv_cap[38]\n        var INV13_INV_CAPACITY =inv_cap[39]\n        var INV14_INV_CAPACITY =inv_cap[40]\n  \n  \n\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_INV_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_INV_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_INV_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_INV_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_INV_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_INV_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_INV_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n        var Expected_gen_WR12 = Max_sy * WR12_INV_CAPACITY\n        var Expected_gen_WR13 = Max_sy * WR13_INV_CAPACITY\n        var Expected_gen_WR14 = Max_sy * WR14_INV_CAPACITY\n        var Expected_gen_WR15 = Max_sy * WR15_INV_CAPACITY\n        var Expected_gen_WR16 = Max_sy * WR16_INV_CAPACITY\n        var Expected_gen_WR17 = Max_sy * WR17_INV_CAPACITY\n        var Expected_gen_WR18 = Max_sy * WR18_INV_CAPACITY\n        var Expected_gen_WR19 = Max_sy * WR19_INV_CAPACITY\n        var Expected_gen_WR20 = Max_sy * WR20_INV_CAPACITY\n        var Expected_gen_WR21 = Max_sy * WR21_INV_CAPACITY\n        var Expected_gen_WR22 = Max_sy * WR22_INV_CAPACITY\n        var Expected_gen_WR23 = Max_sy * WR23_INV_CAPACITY\n        var Expected_gen_WR24 = Max_sy * WR24_INV_CAPACITY\n        var Expected_gen_WR25 = Max_sy * WR25_INV_CAPACITY\n        var Expected_gen_WR26 = Max_sy * WR26_INV_CAPACITY\n        var Expected_gen_WR27 = Max_sy * WR27_INV_CAPACITY\n        var Expected_gen_INV1 = Max_sy * INV1_INV_CAPACITY\n        var Expected_gen_INV2 = Max_sy * INV2_INV_CAPACITY\n        var Expected_gen_INV3 = Max_sy * INV3_INV_CAPACITY\n        var Expected_gen_INV4 = Max_sy * INV4_INV_CAPACITY\n        var Expected_gen_INV5 = Max_sy * INV5_INV_CAPACITY\n        var Expected_gen_INV6 = Max_sy * INV6_INV_CAPACITY\n        var Expected_gen_INV7 = Max_sy * INV7_INV_CAPACITY\n        var Expected_gen_INV8 = Max_sy * INV8_INV_CAPACITY\n        var Expected_gen_INV9 = Max_sy * INV9_INV_CAPACITY\n        var Expected_gen_INV10 = Max_sy * INV10_INV_CAPACITY\n        var Expected_gen_INV11 = Max_sy * INV11_INV_CAPACITY\n        var Expected_gen_INV12 = Max_sy * INV12_INV_CAPACITY\n        var Expected_gen_INV13 = Max_sy * INV13_INV_CAPACITY\n        var Expected_gen_INV14 = Max_sy * INV14_INV_CAPACITY\n\n\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n        Total_exp_WR13 = Total_exp_WR13 + Expected_gen_WR13\n        Total_exp_WR14 = Total_exp_WR14 + Expected_gen_WR14\n        Total_exp_WR15 = Total_exp_WR15 + Expected_gen_WR15\n        Total_exp_WR16 = Total_exp_WR16 + Expected_gen_WR16\n        Total_exp_WR17 = Total_exp_WR17 + Expected_gen_WR17\n        Total_exp_WR18 = Total_exp_WR18 + Expected_gen_WR18\n        Total_exp_WR19 = Total_exp_WR19 + Expected_gen_WR19\n        Total_exp_WR20 = Total_exp_WR20 + Expected_gen_WR20\n        Total_exp_WR21 = Total_exp_WR21 + Expected_gen_WR21\n        Total_exp_WR22 = Total_exp_WR22 + Expected_gen_WR22\n        Total_exp_WR23 = Total_exp_WR23 + Expected_gen_WR23\n        Total_exp_WR24 = Total_exp_WR24 + Expected_gen_WR24\n        Total_exp_WR25 = Total_exp_WR25 + Expected_gen_WR25\n        Total_exp_WR26 = Total_exp_WR26 + Expected_gen_WR26\n        Total_exp_WR27 = Total_exp_WR27 + Expected_gen_WR27\n        Total_exp_INV1 = Total_exp_INV1 + Expected_gen_INV1\n        Total_exp_INV2 = Total_exp_INV2 + Expected_gen_INV2\n        Total_exp_INV3 = Total_exp_INV3 + Expected_gen_INV3\n        Total_exp_INV4 = Total_exp_INV4 + Expected_gen_INV4\n        Total_exp_INV5 = Total_exp_INV5 + Expected_gen_INV5\n        Total_exp_INV6 = Total_exp_INV6 + Expected_gen_INV6\n        Total_exp_INV7 = Total_exp_INV7 + Expected_gen_INV7\n        Total_exp_INV8 = Total_exp_INV8 + Expected_gen_INV8\n        Total_exp_INV9 = Total_exp_INV9 + Expected_gen_INV9\n        Total_exp_INV10 = Total_exp_INV10 + Expected_gen_INV10\n        Total_exp_INV11 = Total_exp_INV11 + Expected_gen_INV11\n        Total_exp_INV12 = Total_exp_INV12 + Expected_gen_INV12\n        Total_exp_INV13 = Total_exp_INV13 + Expected_gen_INV13\n        Total_exp_INV14 = Total_exp_INV14 + Expected_gen_INV14\n     \n\n        Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n        Total_ACT_WR12 = Total_ACT_WR12 + WR_12_kwh\n        Total_ACT_WR13 = Total_ACT_WR13 + WR_13_kwh\n        Total_ACT_WR14 = Total_ACT_WR14 + WR_14_kwh\n        Total_ACT_WR15 = Total_ACT_WR15 + WR_15_kwh\n        Total_ACT_WR16 = Total_ACT_WR16 + WR_16_kwh\n        Total_ACT_WR17 = Total_ACT_WR17 + WR_17_kwh\n        Total_ACT_WR18 = Total_ACT_WR18 + WR_18_kwh\n        Total_ACT_WR19 = Total_ACT_WR19 + WR_19_kwh\n        Total_ACT_WR20 = Total_ACT_WR20 + WR_20_kwh\n        Total_ACT_WR21 = Total_ACT_WR21 + WR_21_kwh\n        Total_ACT_WR22 = Total_ACT_WR22 + WR_22_kwh\n        Total_ACT_WR23 = Total_ACT_WR23 + WR_23_kwh\n        Total_ACT_WR24 = Total_ACT_WR24 + WR_24_kwh\n        Total_ACT_WR25 = Total_ACT_WR25 + WR_25_kwh\n        Total_ACT_WR26 = Total_ACT_WR26 + WR_26_kwh\n        Total_ACT_WR27 = Total_ACT_WR27 + WR_27_kwh\n        Total_ACT_INV1 = Total_ACT_INV1 + INV_1_kwh\n        Total_ACT_INV2 = Total_ACT_INV2 + INV_2_kwh\n        Total_ACT_INV3 = Total_ACT_INV3 + INV_3_kwh\n        Total_ACT_INV4 = Total_ACT_INV4 + INV_4_kwh\n        Total_ACT_INV5 = Total_ACT_INV5 + INV_5_kwh\n        Total_ACT_INV6 = Total_ACT_INV6 + INV_6_kwh\n        Total_ACT_INV7 = Total_ACT_INV7 + INV_7_kwh\n        Total_ACT_INV8 = Total_ACT_INV8 + INV_8_kwh\n        Total_ACT_INV9 = Total_ACT_INV9 + INV_9_kwh\n        Total_ACT_INV10 = Total_ACT_INV10 + INV_10_kwh\n        Total_ACT_INV11 = Total_ACT_INV11 + INV_11_kwh\n        Total_ACT_INV12 = Total_ACT_INV12 + INV_12_kwh\n        Total_ACT_INV13 = Total_ACT_INV13 + INV_13_kwh\n        Total_ACT_INV14 = Total_ACT_INV14 + INV_14_kwh\n    \n        if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR12 != WR_12_kwh) || (WR_12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR_12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n        if ((Expected_gen_WR13 != WR_13_kwh) || (WR_13_kwh == 0)) { var GEN_LOSS_WR13 = (Expected_gen_WR13 - WR_13_kwh) } else { GEN_LOSS_WR13 = \"0\" }\n        if ((Expected_gen_WR14 != WR_14_kwh) || (WR_14_kwh == 0)) { var GEN_LOSS_WR14 = (Expected_gen_WR14 - WR_14_kwh) } else { GEN_LOSS_WR14 = \"0\" }\n        if ((Expected_gen_WR15 != WR_15_kwh) || (WR_15_kwh == 0)) { var GEN_LOSS_WR15 = (Expected_gen_WR15 - WR_15_kwh) } else { GEN_LOSS_WR15 = \"0\" }\n        if ((Expected_gen_WR16 != WR_16_kwh) || (WR_16_kwh == 0)) { var GEN_LOSS_WR16 = (Expected_gen_WR16 - WR_16_kwh) } else { GEN_LOSS_WR16 = \"0\" }\n        if ((Expected_gen_WR17 != WR_17_kwh) || (WR_17_kwh == 0)) { var GEN_LOSS_WR17 = (Expected_gen_WR17 - WR_17_kwh) } else { GEN_LOSS_WR17 = \"0\" }\n        if ((Expected_gen_WR18 != WR_18_kwh) || (WR_18_kwh == 0)) { var GEN_LOSS_WR18 = (Expected_gen_WR18 - WR_18_kwh) } else { GEN_LOSS_WR18 = \"0\" }\n        if ((Expected_gen_WR19 != WR_19_kwh) || (WR_19_kwh == 0)) { var GEN_LOSS_WR19 = (Expected_gen_WR19 - WR_19_kwh) } else { GEN_LOSS_WR19 = \"0\" }\n        if ((Expected_gen_WR20 != WR_20_kwh) || (WR_20_kwh == 0)) { var GEN_LOSS_WR20 = (Expected_gen_WR10 - WR_20_kwh) } else { GEN_LOSS_WR20 = \"0\" }\n        if ((Expected_gen_WR21 != WR_21_kwh) || (WR_21_kwh == 0)) { var GEN_LOSS_WR21 = (Expected_gen_WR21 - WR_21_kwh) } else { GEN_LOSS_WR21 = \"0\" }\n        if ((Expected_gen_WR22 != WR_22_kwh) || (WR_22_kwh == 0)) { var GEN_LOSS_WR22 = (Expected_gen_WR22 - WR_22_kwh) } else { GEN_LOSS_WR22 = \"0\" }\n        if ((Expected_gen_WR23 != WR_23_kwh) || (WR_23_kwh == 0)) { var GEN_LOSS_WR23 = (Expected_gen_WR23 - WR_23_kwh) } else { GEN_LOSS_WR23 = \"0\" }\n        if ((Expected_gen_WR24 != WR_24_kwh) || (WR_24_kwh == 0)) { var GEN_LOSS_WR24 = (Expected_gen_WR24 - WR_24_kwh) } else { GEN_LOSS_WR24 = \"0\" }\n        if ((Expected_gen_WR25 != WR_25_kwh) || (WR_25_kwh == 0)) { var GEN_LOSS_WR25 = (Expected_gen_WR25 - WR_25_kwh) } else { GEN_LOSS_WR25 = \"0\" }\n        if ((Expected_gen_WR26 != WR_26_kwh) || (WR_26_kwh == 0)) { var GEN_LOSS_WR26 = (Expected_gen_WR26 - WR_26_kwh) } else { GEN_LOSS_WR26 = \"0\" }\n        if ((Expected_gen_WR27 != WR_27_kwh) || (WR_27_kwh == 0)) { var GEN_LOSS_WR27 = (Expected_gen_WR27 - WR_27_kwh) } else { GEN_LOSS_WR27 = \"0\" }\n        if ((Expected_gen_INV1 != INV_1_kwh) || (INV_1_kwh == 0)) { var GEN_LOSS_INV1 = (Expected_gen_INV1 - INV_1_kwh) } else { GEN_LOSS_INV1 = \"0\" }\n        if ((Expected_gen_INV2 != INV_2_kwh) || (INV_2_kwh == 0)) { var GEN_LOSS_INV2 = (Expected_gen_INV2 - INV_2_kwh) } else { GEN_LOSS_INV2 = \"0\" }\n        if ((Expected_gen_INV3 != INV_3_kwh) || (INV_3_kwh == 0)) { var GEN_LOSS_INV3 = (Expected_gen_INV3 - INV_3_kwh) } else { GEN_LOSS_INV3 = \"0\" }\n        if ((Expected_gen_INV4 != INV_4_kwh) || (INV_4_kwh == 0)) { var GEN_LOSS_INV4 = (Expected_gen_INV4 - INV_4_kwh) } else { GEN_LOSS_INV4 = \"0\" }\n        if ((Expected_gen_INV5 != INV_5_kwh) || (INV_5_kwh == 0)) { var GEN_LOSS_INV5 = (Expected_gen_INV5 - INV_5_kwh) } else { GEN_LOSS_INV5 = \"0\" }\n        if ((Expected_gen_INV6 != INV_6_kwh) || (INV_6_kwh == 0)) { var GEN_LOSS_INV6 = (Expected_gen_INV6 - INV_6_kwh) } else { GEN_LOSS_INV6 = \"0\" }\n        if ((Expected_gen_INV7 != INV_7_kwh) || (INV_7_kwh == 0)) { var GEN_LOSS_INV7 = (Expected_gen_INV7 - INV_7_kwh) } else { GEN_LOSS_INV7 = \"0\" }\n        if ((Expected_gen_INV8 != INV_8_kwh) || (INV_8_kwh == 0)) { var GEN_LOSS_INV8 = (Expected_gen_INV8 - INV_8_kwh) } else { GEN_LOSS_INV8 = \"0\" }\n        if ((Expected_gen_INV9 != INV_9_kwh) || (INV_9_kwh == 0)) { var GEN_LOSS_INV9 = (Expected_gen_INV9 - INV_9_kwh) } else { GEN_LOSS_INV9 = \"0\" }\n        if ((Expected_gen_INV10 != INV_10_kwh) || (INV_10_kwh == 0)) { var GEN_LOSS_INV10 = (Expected_gen_INV10 - INV_10_kwh) } else { GEN_LOSS_INV10 = \"0\" }\n        if ((Expected_gen_INV11 != INV_11_kwh) || (INV_11_kwh == 0)) { var GEN_LOSS_INV11 = (Expected_gen_INV11 - INV_11_kwh) } else { GEN_LOSS_INV11 = \"0\" }\n        if ((Expected_gen_INV12 != INV_12_kwh) || (INV_12_kwh == 0)) { var GEN_LOSS_INV12 = (Expected_gen_INV12 - INV_12_kwh) } else { GEN_LOSS_INV12 = \"0\" }\n        if ((Expected_gen_INV13 != INV_13_kwh) || (INV_13_kwh == 0)) { var GEN_LOSS_INV13 = (Expected_gen_INV13 - INV_13_kwh) } else { GEN_LOSS_INV13 = \"0\" }\n        if ((Expected_gen_INV14 != INV_14_kwh) || (INV_14_kwh == 0)) { var GEN_LOSS_INV14 = (Expected_gen_INV14 - INV_14_kwh) } else { GEN_LOSS_INV14 = \"0\" }\n\n\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n        Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR_12_kwh)\n        Total_gen_loss_WR13 = Total_gen_loss_WR13 + (Expected_gen_WR13 - WR_13_kwh)\n        Total_gen_loss_WR14 = Total_gen_loss_WR14 + (Expected_gen_WR14 - WR_14_kwh)\n        Total_gen_loss_WR15 = Total_gen_loss_WR15 + (Expected_gen_WR15 - WR_15_kwh)\n        Total_gen_loss_WR16 = Total_gen_loss_WR16 + (Expected_gen_WR16 - WR_16_kwh)\n        Total_gen_loss_WR17 = Total_gen_loss_WR17 + (Expected_gen_WR17 - WR_17_kwh)\n        Total_gen_loss_WR18 = Total_gen_loss_WR18 + (Expected_gen_WR18 - WR_18_kwh)\n        Total_gen_loss_WR19 = Total_gen_loss_WR19 + (Expected_gen_WR19 - WR_19_kwh)\n        Total_gen_loss_WR20 = Total_gen_loss_WR20 + (Expected_gen_WR20 - WR_20_kwh)\n        Total_gen_loss_WR21 = Total_gen_loss_WR21 + (Expected_gen_WR21 - WR_21_kwh)\n        Total_gen_loss_WR22 = Total_gen_loss_WR22 + (Expected_gen_WR22 - WR_22_kwh)\n        Total_gen_loss_WR23 = Total_gen_loss_WR23 + (Expected_gen_WR23 - WR_23_kwh)\n        Total_gen_loss_WR24 = Total_gen_loss_WR24 + (Expected_gen_WR24 - WR_24_kwh)\n        Total_gen_loss_WR25 = Total_gen_loss_WR25 + (Expected_gen_WR25 - WR_25_kwh)\n        Total_gen_loss_WR26 = Total_gen_loss_WR26 + (Expected_gen_WR26 - WR_26_kwh)\n        Total_gen_loss_WR27 = Total_gen_loss_WR27 + (Expected_gen_WR27 - WR_27_kwh)\n        Total_gen_loss_INV1 = Total_gen_loss_INV1 + (Expected_gen_INV1 - INV_1_kwh)\n        Total_gen_loss_INV2 = Total_gen_loss_INV2 + (Expected_gen_INV2 - INV_2_kwh)\n        Total_gen_loss_INV3 = Total_gen_loss_INV3 + (Expected_gen_INV3 - INV_3_kwh)\n        Total_gen_loss_INV4 = Total_gen_loss_INV4 + (Expected_gen_INV4 - INV_4_kwh)\n        Total_gen_loss_INV5 = Total_gen_loss_INV5 + (Expected_gen_INV5 - INV_5_kwh)\n        Total_gen_loss_INV6 = Total_gen_loss_INV6 + (Expected_gen_INV6 - INV_6_kwh)\n        Total_gen_loss_INV7 = Total_gen_loss_INV7 + (Expected_gen_INV7 - INV_7_kwh)\n        Total_gen_loss_INV8 = Total_gen_loss_INV8 + (Expected_gen_INV8 - INV_8_kwh)\n        Total_gen_loss_INV9 = Total_gen_loss_INV9 + (Expected_gen_INV9 - INV_9_kwh)\n        Total_gen_loss_INV10 = Total_gen_loss_INV10 + (Expected_gen_INV10 - INV_10_kwh)\n        Total_gen_loss_INV11 = Total_gen_loss_INV11 + (Expected_gen_INV11 - INV_11_kwh)\n        Total_gen_loss_INV12 = Total_gen_loss_INV12 + (Expected_gen_INV12 - INV_12_kwh)\n        Total_gen_loss_INV13 = Total_gen_loss_INV13 + (Expected_gen_INV13 - INV_13_kwh)\n        Total_gen_loss_INV14 = Total_gen_loss_INV14 + (Expected_gen_INV14 - INV_14_kwh)\n     \n        var total_act_gen = [{\n            Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR13,Total_ACT_WR14, Total_ACT_WR15, Total_ACT_WR16, Total_ACT_WR17, Total_ACT_WR18, Total_ACT_WR19, Total_ACT_WR20\n            , Total_ACT_WR21, Total_ACT_WR22, Total_ACT_WR23, Total_ACT_WR24, Total_ACT_WR25, Total_ACT_WR26, Total_ACT_WR27, Total_ACT_INV1, Total_ACT_INV2, Total_ACT_INV3, Total_ACT_INV4, Total_ACT_INV5, Total_ACT_INV6, Total_ACT_INV7, Total_ACT_INV8, Total_ACT_INV9, Total_ACT_INV10, Total_ACT_INV11, Total_ACT_INV12, Total_ACT_INV13, Total_ACT_INV14}]\n        var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR12, Total_exp_WR13, Total_exp_WR14, Total_exp_WR15, Total_exp_WR16, Total_exp_WR17, Total_exp_WR18, Total_exp_WR19, Total_exp_WR20\n            , Total_exp_WR21, Total_exp_WR22, Total_exp_WR23, Total_exp_WR24, Total_exp_WR25, Total_exp_WR26, Total_exp_WR27, Total_exp_INV1, Total_exp_INV2, Total_exp_INV3, Total_exp_INV4, Total_exp_INV5, Total_exp_INV6, Total_exp_INV7, Total_exp_INV8, Total_exp_INV9, Total_exp_INV10, Total_exp_INV11, Total_exp_INV12, Total_exp_INV13, Total_exp_INV14 ]\n        var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR13, Total_gen_loss_WR14, Total_gen_loss_WR15, Total_gen_loss_WR16, Total_gen_loss_WR17, Total_gen_loss_WR18, Total_gen_loss_WR19, Total_gen_loss_WR20\n            , Total_gen_loss_WR21, Total_gen_loss_WR22, Total_gen_loss_WR23, Total_gen_loss_WR24, Total_gen_loss_WR25, Total_gen_loss_WR26, Total_gen_loss_WR27, Total_gen_loss_INV1, Total_gen_loss_INV2, Total_gen_loss_INV3, Total_gen_loss_INV4, Total_gen_loss_INV5, Total_gen_loss_INV6, Total_gen_loss_INV7, Total_gen_loss_INV8, Total_gen_loss_INV9, Total_gen_loss_INV10, Total_gen_loss_INV11, Total_gen_loss_INV12, Total_gen_loss_INV13, Total_gen_loss_INV14]\n\n\n        obj = {\n            DATE,\n            WR_1_kwh,\n            WR_1_Sp_Y,\n            WR_2_kwh,\n            WR_2_Sp_Y,\n            WR_3_kwh,\n            WR_3_Sp_Y,\n            WR_4_kwh,\n            WR_4_Sp_Y,\n            WR_5_kwh,\n            WR_5_Sp_Y,\n            WR_6_kwh,\n            WR_6_Sp_Y,\n            WR_7_kwh,\n            WR_7_Sp_Y,\n            WR_8_kwh,\n            WR_8_Sp_Y,\n            WR_9_kwh,\n            WR_9_Sp_Y,\n            WR_10_kwh,\n            WR_10_Sp_Y,\n            WR_11_kwh,\n            WR_11_Sp_Y,\n            WR_12_kwh,\n            WR_12_Sp_Y,\n            WR_13_kwh,\n            WR_13_Sp_Y,\n            WR_14_kwh,\n            WR_14_Sp_Y,\n            WR_15_kwh,\n            WR_15_Sp_Y,\n            WR_16_kwh,\n            WR_16_Sp_Y,\n            WR_17_kwh,\n            WR_17_Sp_Y,\n            WR_18_kwh,\n            WR_18_Sp_Y,\n            WR_19_kwh,\n            WR_19_Sp_Y,\n            WR_20_kwh,\n            WR_20_Sp_Y,\n            WR_21_kwh,\n            WR_21_Sp_Y,\n            WR_22_kwh,\n            WR_22_Sp_Y,\n            WR_23_kwh,\n            WR_23_Sp_Y,\n            WR_24_kwh,\n            WR_24_Sp_Y,\n            WR_25_kwh,\n            WR_25_Sp_Y,\n            WR_26_kwh,\n            WR_26_Sp_Y,\n            WR_27_kwh,\n            WR_27_Sp_Y, \n            INV_1_kwh,\n            INV_1_Sp_Y,\n            INV_2_kwh,\n            INV_2_Sp_Y,\n            INV_3_kwh,\n            INV_3_Sp_Y,\n            INV_4_kwh,\n            INV_4_Sp_Y,\n            INV_5_kwh,\n            INV_5_Sp_Y,\n            INV_6_kwh,\n            INV_6_Sp_Y,\n            INV_7_kwh,\n            INV_7_Sp_Y,\n            INV_8_kwh,\n            INV_8_Sp_Y,\n            INV_9_kwh,\n            INV_9_Sp_Y,\n            INV_10_kwh,\n            INV_10_Sp_Y,\n            INV_11_kwh,\n            INV_11_Sp_Y,\n            INV_12_kwh,\n            INV_12_Sp_Y,\n            INV_13_kwh,\n            INV_13_Sp_Y,\n            INV_14_kwh,\n            INV_14_Sp_Y,\n            Max_sy,\n\n            Expected_gen_WR1:Expected_gen_WR1.toFixed(2),\n            Expected_gen_WR2:Expected_gen_WR2.toFixed(2),\n            Expected_gen_WR3:Expected_gen_WR3.toFixed(2),\n            Expected_gen_WR4:Expected_gen_WR4.toFixed(2),\n            Expected_gen_WR5:Expected_gen_WR5.toFixed(2),\n            Expected_gen_WR6:Expected_gen_WR6.toFixed(2),\n            Expected_gen_WR7:Expected_gen_WR7.toFixed(2),\n            Expected_gen_WR8:Expected_gen_WR8.toFixed(2),\n            Expected_gen_WR9:Expected_gen_WR9.toFixed(2),\n            Expected_gen_WR10:Expected_gen_WR10.toFixed(2),\n            Expected_gen_WR11:Expected_gen_WR11.toFixed(2),\n            Expected_gen_WR12:Expected_gen_WR12.toFixed(2),\n            Expected_gen_WR13:Expected_gen_WR13.toFixed(2),\n            Expected_gen_WR14:Expected_gen_WR14.toFixed(2),\n            Expected_gen_WR15:Expected_gen_WR15.toFixed(2),\n            Expected_gen_WR16:Expected_gen_WR16.toFixed(2),\n            Expected_gen_WR17:Expected_gen_WR17.toFixed(2),\n            Expected_gen_WR18:Expected_gen_WR18.toFixed(2),\n            Expected_gen_WR19:Expected_gen_WR19.toFixed(2),\n            Expected_gen_WR20:Expected_gen_WR20.toFixed(2),\n            Expected_gen_WR21:Expected_gen_WR21.toFixed(2),\n            Expected_gen_WR22:Expected_gen_WR22.toFixed(2),\n            Expected_gen_WR23:Expected_gen_WR23.toFixed(2),\n            Expected_gen_WR24:Expected_gen_WR24.toFixed(2),\n            Expected_gen_WR25:Expected_gen_WR25.toFixed(2),\n            Expected_gen_WR26:Expected_gen_WR26.toFixed(2),\n            Expected_gen_WR27:Expected_gen_WR27.toFixed(2),\n            Expected_gen_INV1:Expected_gen_INV1.toFixed(2),\n            Expected_gen_INV2:Expected_gen_INV2.toFixed(2),\n            Expected_gen_INV3:Expected_gen_INV3.toFixed(2),\n            Expected_gen_INV4:Expected_gen_INV4.toFixed(2),\n            Expected_gen_INV5:Expected_gen_INV5.toFixed(2),\n            Expected_gen_INV6:Expected_gen_INV6.toFixed(2),\n            Expected_gen_INV7:Expected_gen_INV7.toFixed(2),\n            Expected_gen_INV8:Expected_gen_INV8.toFixed(2),\n            Expected_gen_INV9:Expected_gen_INV9.toFixed(2),\n            Expected_gen_INV10:Expected_gen_INV10.toFixed(2),\n            Expected_gen_INV11:Expected_gen_INV11.toFixed(2),\n            Expected_gen_INV12:Expected_gen_INV12.toFixed(2),\n            Expected_gen_INV13:Expected_gen_INV13.toFixed(2),\n            Expected_gen_INV14:Expected_gen_INV14.toFixed(2),\n        \n            GEN_LOSS_WR1:parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2:parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3:parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4:parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5:parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6:parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7:parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8:parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9:parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10:parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11:parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR12:parseFloat(GEN_LOSS_WR12).toFixed(2),\n            GEN_LOSS_WR13:parseFloat(GEN_LOSS_WR13).toFixed(2),\n            GEN_LOSS_WR14:parseFloat(GEN_LOSS_WR14).toFixed(2),\n            GEN_LOSS_WR15:parseFloat(GEN_LOSS_WR15).toFixed(2),\n            GEN_LOSS_WR16:parseFloat(GEN_LOSS_WR16).toFixed(2),\n            GEN_LOSS_WR17:parseFloat(GEN_LOSS_WR17).toFixed(2),\n            GEN_LOSS_WR18:parseFloat(GEN_LOSS_WR18).toFixed(2),\n            GEN_LOSS_WR19:parseFloat(GEN_LOSS_WR19).toFixed(2),\n            GEN_LOSS_WR20:parseFloat(GEN_LOSS_WR20).toFixed(2),\n            GEN_LOSS_WR21:parseFloat(GEN_LOSS_WR21).toFixed(2),\n            GEN_LOSS_WR22:parseFloat(GEN_LOSS_WR22).toFixed(2),\n            GEN_LOSS_WR23:parseFloat(GEN_LOSS_WR23).toFixed(2),\n            GEN_LOSS_WR24:parseFloat(GEN_LOSS_WR24).toFixed(2),\n            GEN_LOSS_WR25:parseFloat(GEN_LOSS_WR25).toFixed(2),\n            GEN_LOSS_WR26:parseFloat(GEN_LOSS_WR26).toFixed(2),\n            GEN_LOSS_WR27:parseFloat(GEN_LOSS_WR27).toFixed(2),\n            GEN_LOSS_INV1:parseFloat(GEN_LOSS_INV1).toFixed(2),\n            GEN_LOSS_INV2:parseFloat(GEN_LOSS_INV2).toFixed(2),\n            GEN_LOSS_INV3:parseFloat(GEN_LOSS_INV3).toFixed(2),\n            GEN_LOSS_INV4:parseFloat(GEN_LOSS_INV4).toFixed(2),\n            GEN_LOSS_INV5:parseFloat(GEN_LOSS_INV5).toFixed(2),\n            GEN_LOSS_INV6:parseFloat(GEN_LOSS_INV6).toFixed(2),\n            GEN_LOSS_INV7:parseFloat(GEN_LOSS_INV7).toFixed(2),\n            GEN_LOSS_INV8:parseFloat(GEN_LOSS_INV8).toFixed(2),\n            GEN_LOSS_INV9:parseFloat(GEN_LOSS_INV9).toFixed(2),\n            GEN_LOSS_INV10:parseFloat(GEN_LOSS_INV10).toFixed(2),\n            GEN_LOSS_INV11:parseFloat(GEN_LOSS_INV11).toFixed(2),\n            GEN_LOSS_INV12:parseFloat(GEN_LOSS_INV12).toFixed(2),\n            GEN_LOSS_INV13:parseFloat(GEN_LOSS_INV13).toFixed(2),\n            GEN_LOSS_INV14:parseFloat(GEN_LOSS_INV14).toFixed(2),\n          \n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 440,
        "wires": [
            [
                "c8bbca448c65400c"
            ]
        ]
    },
    {
        "id": "c8bbca448c65400c",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 204",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 440,
        "wires": []
    },
    {
        "id": "bc5d735c5b6e05e5",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 205",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "ead209fa97491e34",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 890,
        "y": 380,
        "wires": [
            [
                "36fcc773b9d1fcff"
            ]
        ]
    },
    {
        "id": "36fcc773b9d1fcff",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "bc5d735c5b6e05e5",
                "49865531f2556642"
            ]
        ]
    },
    {
        "id": "c18e10044a0651ea",
        "type": "delay",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "ae6422af1260da22"
            ]
        ]
    },
    {
        "id": "80064e4d815e3b45",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "calculation",
        "info": "",
        "x": 680,
        "y": 320,
        "wires": []
    },
    {
        "id": "dbd1427410bec1a5",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i].toFixed(2),\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "b45f7aefc8c2c33c"
            ]
        ]
    },
    {
        "id": "cab896ceef93390f",
        "type": "fs-ops-dir",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/wierig plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "8e629dbb8b5ae16a"
            ]
        ]
    },
    {
        "id": "917588e8f5bd7fd6",
        "type": "inject",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "6520061ff92298bb",
                "88574b323c1804bc"
            ]
        ]
    },
    {
        "id": "32ce631e0dc523f2",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1020,
        "wires": [
            [
                "79df602d721be97e"
            ]
        ]
    },
    {
        "id": "8e629dbb8b5ae16a",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "32ce631e0dc523f2"
            ]
        ]
    },
    {
        "id": "79df602d721be97e",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6520061ff92298bb",
        "type": "file in",
        "z": "fb5bfb14f47e3d76",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/wierig plants/1085435668_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "ec738f2f6486bc7c"
            ]
        ]
    },
    {
        "id": "0a715029f0f02738",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "report generation plant info table",
        "info": "",
        "x": 650,
        "y": 1400,
        "wires": []
    },
    {
        "id": "16ce6be8ab3ade9c",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 278",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1240,
        "wires": []
    },
    {
        "id": "98110b76042c6362",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "header correction",
        "info": "",
        "x": 920,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7d12451578967bba",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "set header",
        "func": "var results = []\nvar filename = 1085435668// flow.get(\"filename\");\n//const plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nvar inv_array = []\nfor (var i = 1; i < column.length; i++) {\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i].match(\"WR\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n\nvar obj={\n    num, \n    sy,\n    column_header,\n    inv_re,\n    column:column[i]\n    \n}\nresults.push(obj)\n}\n\n\nmsg.payload=results\nflow.set(\"column\", column_header)\n//flow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1140,
        "wires": [
            [
                "1c4a38b735ec5912"
            ]
        ]
    },
    {
        "id": "82b2ec54082b4369",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 740,
        "y": 1140,
        "wires": [
            [
                "7d12451578967bba"
            ]
        ]
    },
    {
        "id": "1c4a38b735ec5912",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0c3a3017efd0dfbd",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 730,
        "y": 1180,
        "wires": [
            [
                "6002f66847fe4571"
            ]
        ]
    },
    {
        "id": "3d27496784a87013",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1180,
        "wires": []
    },
    {
        "id": "6002f66847fe4571",
        "type": "change",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "3d27496784a87013"
            ]
        ]
    },
    {
        "id": "ec738f2f6486bc7c",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1140,
        "wires": [
            [
                "82b2ec54082b4369",
                "0c3a3017efd0dfbd"
            ]
        ]
    },
    {
        "id": "6974e529d0466412",
        "type": "file in",
        "z": "fb5bfb14f47e3d76",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/wierig plants name list 04.07.2023.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "8cf7e96a37144d8e"
            ]
        ]
    },
    {
        "id": "8cf7e96a37144d8e",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 490,
        "y": 1320,
        "wires": [
            [
                "119bcf5c4225ebe7"
            ]
        ]
    },
    {
        "id": "119bcf5c4225ebe7",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "comparison with ref csv",
        "func": "var live_plant = 1085435668//flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i].WR13) || \"null\",\n                             parseFloat(msg.payload[i].WR14) || \"null\",\n                             parseFloat(msg.payload[i].WR15) || \"null\",\n                             parseFloat(msg.payload[i].WR16) || \"null\",\n                             parseFloat(msg.payload[i].WR17) || \"null\",\n                             parseFloat(msg.payload[i].WR18) || \"null\",\n                             parseFloat(msg.payload[i].WR19) || \"null\",\n                             parseFloat(msg.payload[i].WR20) || \"null\",\n                             parseFloat(msg.payload[i].WR21) || \"null\",\n                             parseFloat(msg.payload[i].WR22) || \"null\",\n                             parseFloat(msg.payload[i].WR23) || \"null\",\n                             parseFloat(msg.payload[i].WR24) || \"null\",\n                             parseFloat(msg.payload[i].WR25) || \"null\",\n                             parseFloat(msg.payload[i].WR26) || \"null\",\n                             parseFloat(msg.payload[i].WR27) || \"null\",\n                 parseFloat(msg.payload[i].INV1) || \"null\",\n                 parseFloat(msg.payload[i].INV2) || \"null\",\n                 parseFloat(msg.payload[i].INV3) || \"null\",\n                 parseFloat(msg.payload[i].INV4) || \"null\",\n                 parseFloat(msg.payload[i].INV5) || \"null\",\n                 parseFloat(msg.payload[i].INV6) || \"null\",\n                 parseFloat(msg.payload[i].INV7) || \"null\",\n                 parseFloat(msg.payload[i].INV8) || \"null\",\n                 parseFloat(msg.payload[i].INV9) || \"null\",\n                 parseFloat(msg.payload[i].INV10) || \"null\",\n                 parseFloat(msg.payload[i].INV11) || \"null\",\n                 parseFloat(msg.payload[i].INV12) || \"null\",\n                 parseFloat(msg.payload[i].INV13) || \"null\",\n                 parseFloat(msg.payload[i].INV14) || \"null\",]\n                             \n                             \n                             \n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "47ee2a51142660cc"
            ]
        ]
    },
    {
        "id": "dc85ef8cf7f81869",
        "type": "function",
        "z": "fb5bfb14f47e3d76",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR13 = 0\nvar Total_exp_WR14 = 0\nvar Total_exp_WR15 = 0\nvar Total_exp_WR16 = 0\nvar Total_exp_WR17 = 0\nvar Total_exp_WR18 = 0\nvar Total_exp_WR19 = 0\nvar Total_exp_WR20 = 0\nvar Total_exp_WR21 = 0\nvar Total_exp_WR22 = 0\nvar Total_exp_WR23 = 0\nvar Total_exp_WR24 = 0\nvar Total_exp_WR25 = 0\nvar Total_exp_WR26 = 0\nvar Total_exp_WR27 = 0\nvar Total_exp_INV1 = 0\nvar Total_exp_INV2 = 0\nvar Total_exp_INV3 = 0\nvar Total_exp_INV4 = 0\nvar Total_exp_INV5 = 0\nvar Total_exp_INV6 = 0\nvar Total_exp_INV7 = 0\nvar Total_exp_INV8 = 0\nvar Total_exp_INV9 = 0\nvar Total_exp_INV10 = 0\nvar Total_exp_INV11 = 0\nvar Total_exp_INV12 = 0\nvar Total_exp_INV13 = 0\nvar Total_exp_INV14 = 0\n\n\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR13 = 0\nvar Total_ACT_WR14 = 0\nvar Total_ACT_WR15 = 0\nvar Total_ACT_WR16 = 0\nvar Total_ACT_WR17 = 0\nvar Total_ACT_WR18 = 0\nvar Total_ACT_WR19 = 0\nvar Total_ACT_WR20 = 0\nvar Total_ACT_WR21 = 0\nvar Total_ACT_WR22 = 0\nvar Total_ACT_WR23 = 0\nvar Total_ACT_WR24 = 0\nvar Total_ACT_WR25 = 0\nvar Total_ACT_WR26 = 0\nvar Total_ACT_WR27 = 0\nvar Total_ACT_INV1 = 0\nvar Total_ACT_INV2 = 0\nvar Total_ACT_INV3 = 0\nvar Total_ACT_INV4 = 0\nvar Total_ACT_INV5 = 0\nvar Total_ACT_INV6 = 0\nvar Total_ACT_INV7 = 0\nvar Total_ACT_INV8 = 0\nvar Total_ACT_INV9 = 0\nvar Total_ACT_INV10 = 0\nvar Total_ACT_INV11 = 0\nvar Total_ACT_INV12 = 0\nvar Total_ACT_INV13 = 0\nvar Total_ACT_INV14 = 0\n\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR13 = 0\nvar Total_gen_loss_WR14 = 0\nvar Total_gen_loss_WR15 = 0\nvar Total_gen_loss_WR16 = 0\nvar Total_gen_loss_WR17 = 0\nvar Total_gen_loss_WR18 = 0\nvar Total_gen_loss_WR19 = 0\nvar Total_gen_loss_WR20 = 0\nvar Total_gen_loss_WR21 = 0\nvar Total_gen_loss_WR22 = 0\nvar Total_gen_loss_WR23 = 0\nvar Total_gen_loss_WR24 = 0\nvar Total_gen_loss_WR25 = 0\nvar Total_gen_loss_WR26 = 0\nvar Total_gen_loss_WR27 = 0\nvar Total_gen_loss_INV1 = 0\nvar Total_gen_loss_INV2 = 0\nvar Total_gen_loss_INV3 = 0\nvar Total_gen_loss_INV4 = 0\nvar Total_gen_loss_INV5 = 0\nvar Total_gen_loss_INV6 = 0\nvar Total_gen_loss_INV7 = 0\nvar Total_gen_loss_INV8 = 0\nvar Total_gen_loss_INV9 = 0\nvar Total_gen_loss_INV10 = 0\nvar Total_gen_loss_INV11 = 0\nvar Total_gen_loss_INV12 = 0\nvar Total_gen_loss_INV13 = 0\nvar Total_gen_loss_INV14 = 0\n\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n        var WR_1_kwh = (msg.payload[i][\"WR 1\"]/1000)\n        var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR_2_kwh = (msg.payload[i][\"WR 2\"]/1000)\n        var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR_3_kwh = (msg.payload[i][\"WR 3\"]/1000)\n        var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR_4_kwh = (msg.payload[i][\"WR 4\"]/1000)\n        var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR_5_kwh = (msg.payload[i][\"WR 5\"]/1000)\n        var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR_6_kwh = (msg.payload[i][\"WR 6\"]/1000)\n        var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR_7_kwh = (msg.payload[i][\"WR 7\"]/1000)\n        var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR_8_kwh = (msg.payload[i][\"WR 8\"]/1000)\n        var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR_9_kwh = (msg.payload[i][\"WR 9\"]/1000)\n        var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR_10_kwh = (msg.payload[i][\"WR 10\"]/1000)\n        var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR_11_kwh = (msg.payload[i][\"WR 11\"]/1000)\n        var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR_12_kwh = (msg.payload[0][\"WR 12\"]/1000)\n        var WR_12_Sp_Y = msg.payload[0][\"Specific Yield_WR 1\"]\n\n        var WR_13_kwh = (msg.payload[0][\"WR 13\"]/1000)\n              var WR_13_Sp_Y = msg.payload[0][\"Specific Yield_WR 13\"]\n\n        var WR_14_kwh = (msg.payload[0][\"WR 14\"]/1000)\n              var WR_14_Sp_Y = msg.payload[0][\"Specific Yield_WR 14\"]\n\n        var WR_15_kwh = (msg.payload[0][\"WR 15\"]/1000)\n              var WR_15_Sp_Y = msg.payload[0][\"Specific Yield_WR 15\"]\n\n        var WR_16_kwh = (msg.payload[0][\"WR 16\"]/1000)\n              var WR_16_Sp_Y = msg.payload[0][\"Specific Yield_WR 16\"]\n\n        var WR_17_kwh = (msg.payload[0][\"WR 17\"]/1000)\n              var WR_17_Sp_Y = msg.payload[0][\"Specific Yield_WR 17\"]\n\n        var WR_18_kwh = (msg.payload[0][\"WR 18\"]/1000)\n              var WR_18_Sp_Y = msg.payload[0][\"Specific Yield_WR 18\"]\n\n        var WR_19_kwh = (msg.payload[0][\"WR 19\"]/1000)\n              var WR_19_Sp_Y = msg.payload[0][\"Specific Yield_WR 19\"]\n\n        var WR_20_kwh = (msg.payload[0][\"WR 20\"]/1000)\n              var WR_20_Sp_Y = msg.payload[0][\"Specific Yield_WR 20\"]\n\n        var WR_21_kwh = (msg.payload[0][\"WR 21\"]/1000)\n              var WR_21_Sp_Y = msg.payload[0][\"Specific Yield_WR 21\"]\n\n        var WR_22_kwh = (msg.payload[0][\"WR 22\"]/1000)\n              var WR_22_Sp_Y = msg.payload[0][\"Specific Yield_WR 22\"]\n\n        var WR_23_kwh = (msg.payload[0][\"WR 23\"]/1000)\n              var WR_23_Sp_Y = msg.payload[0][\"Specific Yield_WR 23\"]\n\n        var WR_24_kwh = (msg.payload[0][\"WR 24\"]/1000)\n              var WR_24_Sp_Y = msg.payload[0][\"Specific Yield_WR 24\"]\n\n        var WR_25_kwh = (msg.payload[0][\"WR 25\"]/1000)\n              var WR_25_Sp_Y = msg.payload[0][\"Specific Yield_WR 25\"]\n\n        var WR_26_kwh = (msg.payload[0][\"WR 26\"]/1000)\n              var WR_26_Sp_Y = msg.payload[0][\"Specific Yield_WR 26\"]\n\n        var WR_27_kwh = (msg.payload[0][\"WR 27\"]/1000)\n              var WR_27_Sp_Y = msg.payload[0][\"Specific Yield_WR 27\"]\n\n        var INV_1_kwh = (msg.payload[i][\"INV 1\"] / 1000) || (msg.payload[i][\"INV1-W\"]/1000)\n        var INV_1_Sp_Y = msg.payload[i][\"Specific Yield_INV 1\"]||( msg.payload[i][\"Specific Yield_INV1-W\"])\n        var INV_2_kwh = (msg.payload[i][\"INV 2\"]/1000)||(msg.payload[i][\"INV2-W\"]/1000)\n        var INV_2_Sp_Y = msg.payload[i][\"Specific Yield_INV 2\"]||( msg.payload[i][\"Specific Yield_INV2-W\"])\n        var INV_3_kwh = (msg.payload[i][\"INV 3\"]/1000)||(msg.payload[i][\"INV3-W\"]/1000)\n        var INV_3_Sp_Y = msg.payload[i][\"Specific Yield_INV 3\"]||( msg.payload[i][\"Specific Yield_INV3-W\"])\n        var INV_4_kwh = (msg.payload[i][\"INV 4\"]/1000)||(msg.payload[i][\"INV4-W\"]/1000)\n        var INV_4_Sp_Y = msg.payload[i][\"Specific Yield_INV 4\"]||( msg.payload[i][\"Specific Yield_INV4-W\"])\n        var INV_5_kwh = (msg.payload[i][\"INV 5\"]/1000)||(msg.payload[i][\"INV5-W\"]/1000)\n        var INV_5_Sp_Y = msg.payload[i][\"Specific Yield_INV 5\"]||( msg.payload[i][\"Specific Yield_INV5-W\"])\n        var INV_6_kwh = (msg.payload[i][\"INV 6\"]/1000)||(msg.payload[i][\"INV6-W\"]/1000)\n        var INV_6_Sp_Y = msg.payload[i][\"Specific Yield_INV 6\"]||( msg.payload[i][\"Specific Yield_INV6-W\"])\n        var INV_7_kwh = (msg.payload[i][\"INV 7\"]/1000)||(msg.payload[i][\"INV7-W\"]/1000)\n        var INV_7_Sp_Y = msg.payload[i][\"Specific Yield_INV 7\"]||( msg.payload[i][\"Specific Yield_INV7-W\"])\n        var INV_8_kwh = (msg.payload[i][\"INV 8\"] / 1000) || (msg.payload[i][\"INV8-O\"]/1000)\n        var INV_8_Sp_Y = msg.payload[i][\"Specific Yield_INV 8\"]||( msg.payload[i][\"Specific Yield_INV8-O\"])\n        var INV_9_kwh = (msg.payload[i][\"INV 9\"]/1000)||(msg.payload[i][\"INV9-O\"]/1000)\n        var INV_9_Sp_Y = msg.payload[i][\"Specific Yield_INV 9\"]||( msg.payload[i][\"Specific Yield_INV9-O\"])\n        var INV_10_kwh = (msg.payload[i][\"INV 10\"]/1000)||(msg.payload[i][\"INV10-O\"]/1000)\n        var INV_10_Sp_Y = msg.payload[i][\"Specific Yield_INV 10\"]||( msg.payload[i][\"Specific Yield_INV10-O\"])\n        var INV_11_kwh = (msg.payload[i][\"INV 11\"]/1000)||(msg.payload[i][\"INV11-O\"]/1000)\n        var INV_11_Sp_Y = msg.payload[i][\"Specific Yield_INV 11\"]||( msg.payload[i][\"Specific Yield_INV11-O\"])\n        var INV_12_kwh = (msg.payload[0][\"INV 12\"]/1000)||(msg.payload[0][\"INV12-O\"]/1000)\n        var INV_12_Sp_Y = msg.payload[0][\"Specific Yield_INV 1\"] || (msg.payload[0][\"Specific Yield_INV12-O\"])\n        var INV_13_kwh = (msg.payload[0][\"INV 13\"]/1000)||(msg.payload[0][\"INV13-W\"]/1000)\n        var INV_13_Sp_Y = msg.payload[0][\"Specific Yield_INV 13\"]||( msg.payload[0][\"Specific Yield_INV13-W\"])\n        var INV_14_kwh = (msg.payload[0][\"INV 14\"]/1000)||(msg.payload[0][\"INV14-W\"]/1000)\n        var INV_14_Sp_Y = msg.payload[0][\"Specific Yield_INV 14\"] || (msg.payload[0][\"Specific Yield_INV14-W\"])\n\n       \n\n        var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n            WR_11_Sp_Y || 0, WR_12_Sp_Y || 0, WR_13_Sp_Y || 0, WR_14_Sp_Y || 0, WR_15_Sp_Y || 0, WR_16_Sp_Y || 0, WR_17_Sp_Y || 0, WR_18_Sp_Y || 0, WR_19_Sp_Y || 0, WR_20_Sp_Y || 0,\n            WR_21_Sp_Y || 0, WR_22_Sp_Y || 0, WR_23_Sp_Y || 0, WR_24_Sp_Y || 0, WR_25_Sp_Y || 0, WR_26_Sp_Y || 0, WR_27_Sp_Y || 0, INV_1_Sp_Y || 0, INV_2_Sp_Y || 0, INV_3_Sp_Y || 0, INV_4_Sp_Y || 0, INV_5_Sp_Y || 0, INV_6_Sp_Y || 0, INV_7_Sp_Y || 0, INV_8_Sp_Y || 0, INV_9_Sp_Y || 0, INV_10_Sp_Y || 0,\n            INV_11_Sp_Y || 0, INV_12_Sp_Y || 0, INV_13_Sp_Y || 0, INV_14_Sp_Y || 0)\n\n        var WR1_INV_CAPACITY = inv_cap[0]\n        var WR2_INV_CAPACITY = inv_cap[1]\n        var WR3_INV_CAPACITY = inv_cap[2]\n        var WR4_INV_CAPACITY = inv_cap[3]\n        var WR5_INV_CAPACITY = inv_cap[4]\n        var WR6_INV_CAPACITY = inv_cap[5]\n        var WR7_INV_CAPACITY = inv_cap[6]\n        var WR8_INV_CAPACITY = inv_cap[7]\n        var WR9_INV_CAPACITY = inv_cap[8]\n        var WR10_INV_CAPACITY = inv_cap[9]\n        var WR11_INV_CAPACITY = inv_cap[10]\n        var WR12_INV_CAPACITY = inv_cap[11]\n        var WR13_INV_CAPACITY = inv_cap[12]\n        var WR14_INV_CAPACITY = inv_cap[13]\n        var WR15_INV_CAPACITY = inv_cap[14]\n        var WR16_INV_CAPACITY = inv_cap[15]\n        var WR17_INV_CAPACITY = inv_cap[16]\n        var WR18_INV_CAPACITY = inv_cap[17]\n        var WR19_INV_CAPACITY = inv_cap[18]\n        var WR20_INV_CAPACITY = inv_cap[19]\n        var WR21_INV_CAPACITY = inv_cap[20]\n        var WR22_INV_CAPACITY = inv_cap[21]\n        var WR23_INV_CAPACITY = inv_cap[22]\n        var WR24_INV_CAPACITY = inv_cap[23]\n        var WR25_INV_CAPACITY = inv_cap[24]\n        var WR26_INV_CAPACITY = inv_cap[25]\n        var WR27_INV_CAPACITY = inv_cap[26]\n        var INV1_INV_CAPACITY = inv_cap[0]\n        var INV2_INV_CAPACITY = inv_cap[1]\n        var INV3_INV_CAPACITY = inv_cap[2]\n        var INV4_INV_CAPACITY = inv_cap[3]\n        var INV5_INV_CAPACITY = inv_cap[4]\n        var INV6_INV_CAPACITY = inv_cap[5]\n        var INV7_INV_CAPACITY = inv_cap[6]\n        var INV8_INV_CAPACITY = inv_cap[7]\n        var INV9_INV_CAPACITY = inv_cap[8]\n        var INV10_INV_CAPACITY = inv_cap[9]\n        var INV11_INV_CAPACITY = inv_cap[10]\n        var INV12_INV_CAPACITY = inv_cap[11]\n        var INV13_INV_CAPACITY = inv_cap[12]\n        var INV14_INV_CAPACITY = inv_cap[13]\n  \n  \n\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_INV_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_INV_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_INV_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_INV_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_INV_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_INV_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_INV_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n        var Expected_gen_WR12 = Max_sy * WR12_INV_CAPACITY\n        var Expected_gen_WR13 = Max_sy * WR13_INV_CAPACITY\n        var Expected_gen_WR14 = Max_sy * WR14_INV_CAPACITY\n        var Expected_gen_WR15 = Max_sy * WR15_INV_CAPACITY\n        var Expected_gen_WR16 = Max_sy * WR16_INV_CAPACITY\n        var Expected_gen_WR17 = Max_sy * WR17_INV_CAPACITY\n        var Expected_gen_WR18 = Max_sy * WR18_INV_CAPACITY\n        var Expected_gen_WR19 = Max_sy * WR19_INV_CAPACITY\n        var Expected_gen_WR20 = Max_sy * WR20_INV_CAPACITY\n        var Expected_gen_WR21 = Max_sy * WR21_INV_CAPACITY\n        var Expected_gen_WR22 = Max_sy * WR22_INV_CAPACITY\n        var Expected_gen_WR23 = Max_sy * WR23_INV_CAPACITY\n        var Expected_gen_WR24 = Max_sy * WR24_INV_CAPACITY\n        var Expected_gen_WR25 = Max_sy * WR25_INV_CAPACITY\n        var Expected_gen_WR26 = Max_sy * WR26_INV_CAPACITY\n        var Expected_gen_WR27 = Max_sy * WR27_INV_CAPACITY\n        var Expected_gen_INV1 = Max_sy * INV1_INV_CAPACITY\n        var Expected_gen_INV2 = Max_sy * INV2_INV_CAPACITY\n        var Expected_gen_INV3 = Max_sy * INV3_INV_CAPACITY\n        var Expected_gen_INV4 = Max_sy * INV4_INV_CAPACITY\n        var Expected_gen_INV5 = Max_sy * INV5_INV_CAPACITY\n        var Expected_gen_INV6 = Max_sy * INV6_INV_CAPACITY\n        var Expected_gen_INV7 = Max_sy * INV7_INV_CAPACITY\n        var Expected_gen_INV8 = Max_sy * INV8_INV_CAPACITY\n        var Expected_gen_INV9 = Max_sy * INV9_INV_CAPACITY\n        var Expected_gen_INV10 = Max_sy * INV10_INV_CAPACITY\n        var Expected_gen_INV11 = Max_sy * INV11_INV_CAPACITY\n        var Expected_gen_INV12 = Max_sy * INV12_INV_CAPACITY\n        var Expected_gen_INV13 = Max_sy * INV13_INV_CAPACITY\n        var Expected_gen_INV14 = Max_sy * INV14_INV_CAPACITY\n\n\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n        Total_exp_WR13 = Total_exp_WR13 + Expected_gen_WR13\n        Total_exp_WR14 = Total_exp_WR14 + Expected_gen_WR14\n        Total_exp_WR15 = Total_exp_WR15 + Expected_gen_WR15\n        Total_exp_WR16 = Total_exp_WR16 + Expected_gen_WR16\n        Total_exp_WR17 = Total_exp_WR17 + Expected_gen_WR17\n        Total_exp_WR18 = Total_exp_WR18 + Expected_gen_WR18\n        Total_exp_WR19 = Total_exp_WR19 + Expected_gen_WR19\n        Total_exp_WR20 = Total_exp_WR20 + Expected_gen_WR20\n        Total_exp_WR21 = Total_exp_WR21 + Expected_gen_WR21\n        Total_exp_WR22 = Total_exp_WR22 + Expected_gen_WR22\n        Total_exp_WR23 = Total_exp_WR23 + Expected_gen_WR23\n        Total_exp_WR24 = Total_exp_WR24 + Expected_gen_WR24\n        Total_exp_WR25 = Total_exp_WR25 + Expected_gen_WR25\n        Total_exp_WR26 = Total_exp_WR26 + Expected_gen_WR26\n        Total_exp_WR27 = Total_exp_WR27 + Expected_gen_WR27\n        Total_exp_INV1 = Total_exp_INV1 + Expected_gen_INV1\n        Total_exp_INV2 = Total_exp_INV2 + Expected_gen_INV2\n        Total_exp_INV3 = Total_exp_INV3 + Expected_gen_INV3\n        Total_exp_INV4 = Total_exp_INV4 + Expected_gen_INV4\n        Total_exp_INV5 = Total_exp_INV5 + Expected_gen_INV5\n        Total_exp_INV6 = Total_exp_INV6 + Expected_gen_INV6\n        Total_exp_INV7 = Total_exp_INV7 + Expected_gen_INV7\n        Total_exp_INV8 = Total_exp_INV8 + Expected_gen_INV8\n        Total_exp_INV9 = Total_exp_INV9 + Expected_gen_INV9\n        Total_exp_INV10 = Total_exp_INV10 + Expected_gen_INV10\n        Total_exp_INV11 = Total_exp_INV11 + Expected_gen_INV11\n        Total_exp_INV12 = Total_exp_INV12 + Expected_gen_INV12\n        Total_exp_INV13 = Total_exp_INV13 + Expected_gen_INV13\n        Total_exp_INV14 = Total_exp_INV14 + Expected_gen_INV14\n     \n\n        Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n        Total_ACT_WR12 = Total_ACT_WR12 + WR_12_kwh\n        Total_ACT_WR13 = Total_ACT_WR13 + WR_13_kwh\n        Total_ACT_WR14 = Total_ACT_WR14 + WR_14_kwh\n        Total_ACT_WR15 = Total_ACT_WR15 + WR_15_kwh\n        Total_ACT_WR16 = Total_ACT_WR16 + WR_16_kwh\n        Total_ACT_WR17 = Total_ACT_WR17 + WR_17_kwh\n        Total_ACT_WR18 = Total_ACT_WR18 + WR_18_kwh\n        Total_ACT_WR19 = Total_ACT_WR19 + WR_19_kwh\n        Total_ACT_WR20 = Total_ACT_WR20 + WR_20_kwh\n        Total_ACT_WR21 = Total_ACT_WR21 + WR_21_kwh\n        Total_ACT_WR22 = Total_ACT_WR22 + WR_22_kwh\n        Total_ACT_WR23 = Total_ACT_WR23 + WR_23_kwh\n        Total_ACT_WR24 = Total_ACT_WR24 + WR_24_kwh\n        Total_ACT_WR25 = Total_ACT_WR25 + WR_25_kwh\n        Total_ACT_WR26 = Total_ACT_WR26 + WR_26_kwh\n        Total_ACT_WR27 = Total_ACT_WR27 + WR_27_kwh\n        Total_ACT_INV1 = Total_ACT_INV1 + INV_1_kwh\n        Total_ACT_INV2 = Total_ACT_INV2 + INV_2_kwh\n        Total_ACT_INV3 = Total_ACT_INV3 + INV_3_kwh\n        Total_ACT_INV4 = Total_ACT_INV4 + INV_4_kwh\n        Total_ACT_INV5 = Total_ACT_INV5 + INV_5_kwh\n        Total_ACT_INV6 = Total_ACT_INV6 + INV_6_kwh\n        Total_ACT_INV7 = Total_ACT_INV7 + INV_7_kwh\n        Total_ACT_INV8 = Total_ACT_INV8 + INV_8_kwh\n        Total_ACT_INV9 = Total_ACT_INV9 + INV_9_kwh\n        Total_ACT_INV10 = Total_ACT_INV10 + INV_10_kwh\n        Total_ACT_INV11 = Total_ACT_INV11 + INV_11_kwh\n        Total_ACT_INV12 = Total_ACT_INV12 + INV_12_kwh\n        Total_ACT_INV13 = Total_ACT_INV13 + INV_13_kwh\n        Total_ACT_INV14 = Total_ACT_INV14 + INV_14_kwh\n    \n        if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR12 != WR_12_kwh) || (WR_12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR_12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n        if ((Expected_gen_WR13 != WR_13_kwh) || (WR_13_kwh == 0)) { var GEN_LOSS_WR13 = (Expected_gen_WR13 - WR_13_kwh) } else { GEN_LOSS_WR13 = \"0\" }\n        if ((Expected_gen_WR14 != WR_14_kwh) || (WR_14_kwh == 0)) { var GEN_LOSS_WR14 = (Expected_gen_WR14 - WR_14_kwh) } else { GEN_LOSS_WR14 = \"0\" }\n        if ((Expected_gen_WR15 != WR_15_kwh) || (WR_15_kwh == 0)) { var GEN_LOSS_WR15 = (Expected_gen_WR15 - WR_15_kwh) } else { GEN_LOSS_WR15 = \"0\" }\n        if ((Expected_gen_WR16 != WR_16_kwh) || (WR_16_kwh == 0)) { var GEN_LOSS_WR16 = (Expected_gen_WR16 - WR_16_kwh) } else { GEN_LOSS_WR16 = \"0\" }\n        if ((Expected_gen_WR17 != WR_17_kwh) || (WR_17_kwh == 0)) { var GEN_LOSS_WR17 = (Expected_gen_WR17 - WR_17_kwh) } else { GEN_LOSS_WR17 = \"0\" }\n        if ((Expected_gen_WR18 != WR_18_kwh) || (WR_18_kwh == 0)) { var GEN_LOSS_WR18 = (Expected_gen_WR18 - WR_18_kwh) } else { GEN_LOSS_WR18 = \"0\" }\n        if ((Expected_gen_WR19 != WR_19_kwh) || (WR_19_kwh == 0)) { var GEN_LOSS_WR19 = (Expected_gen_WR19 - WR_19_kwh) } else { GEN_LOSS_WR19 = \"0\" }\n        if ((Expected_gen_WR20 != WR_20_kwh) || (WR_20_kwh == 0)) { var GEN_LOSS_WR20 = (Expected_gen_WR10 - WR_20_kwh) } else { GEN_LOSS_WR20 = \"0\" }\n        if ((Expected_gen_WR21 != WR_21_kwh) || (WR_21_kwh == 0)) { var GEN_LOSS_WR21 = (Expected_gen_WR21 - WR_21_kwh) } else { GEN_LOSS_WR21 = \"0\" }\n        if ((Expected_gen_WR22 != WR_22_kwh) || (WR_22_kwh == 0)) { var GEN_LOSS_WR22 = (Expected_gen_WR22 - WR_22_kwh) } else { GEN_LOSS_WR22 = \"0\" }\n        if ((Expected_gen_WR23 != WR_23_kwh) || (WR_23_kwh == 0)) { var GEN_LOSS_WR23 = (Expected_gen_WR23 - WR_23_kwh) } else { GEN_LOSS_WR23 = \"0\" }\n        if ((Expected_gen_WR24 != WR_24_kwh) || (WR_24_kwh == 0)) { var GEN_LOSS_WR24 = (Expected_gen_WR24 - WR_24_kwh) } else { GEN_LOSS_WR24 = \"0\" }\n        if ((Expected_gen_WR25 != WR_25_kwh) || (WR_25_kwh == 0)) { var GEN_LOSS_WR25 = (Expected_gen_WR25 - WR_25_kwh) } else { GEN_LOSS_WR25 = \"0\" }\n        if ((Expected_gen_WR26 != WR_26_kwh) || (WR_26_kwh == 0)) { var GEN_LOSS_WR26 = (Expected_gen_WR26 - WR_26_kwh) } else { GEN_LOSS_WR26 = \"0\" }\n        if ((Expected_gen_WR27 != WR_27_kwh) || (WR_27_kwh == 0)) { var GEN_LOSS_WR27 = (Expected_gen_WR27 - WR_27_kwh) } else { GEN_LOSS_WR27 = \"0\" }\n        if ((Expected_gen_INV1 != INV_1_kwh) || (INV_1_kwh == 0)) { var GEN_LOSS_INV1 = (Expected_gen_INV1 - INV_1_kwh) } else { GEN_LOSS_INV1 = \"0\" }\n        if ((Expected_gen_INV2 != INV_2_kwh) || (INV_2_kwh == 0)) { var GEN_LOSS_INV2 = (Expected_gen_INV2 - INV_2_kwh) } else { GEN_LOSS_INV2 = \"0\" }\n        if ((Expected_gen_INV3 != INV_3_kwh) || (INV_3_kwh == 0)) { var GEN_LOSS_INV3 = (Expected_gen_INV3 - INV_3_kwh) } else { GEN_LOSS_INV3 = \"0\" }\n        if ((Expected_gen_INV4 != INV_4_kwh) || (INV_4_kwh == 0)) { var GEN_LOSS_INV4 = (Expected_gen_INV4 - INV_4_kwh) } else { GEN_LOSS_INV4 = \"0\" }\n        if ((Expected_gen_INV5 != INV_5_kwh) || (INV_5_kwh == 0)) { var GEN_LOSS_INV5 = (Expected_gen_INV5 - INV_5_kwh) } else { GEN_LOSS_INV5 = \"0\" }\n        if ((Expected_gen_INV6 != INV_6_kwh) || (INV_6_kwh == 0)) { var GEN_LOSS_INV6 = (Expected_gen_INV6 - INV_6_kwh) } else { GEN_LOSS_INV6 = \"0\" }\n        if ((Expected_gen_INV7 != INV_7_kwh) || (INV_7_kwh == 0)) { var GEN_LOSS_INV7 = (Expected_gen_INV7 - INV_7_kwh) } else { GEN_LOSS_INV7 = \"0\" }\n        if ((Expected_gen_INV8 != INV_8_kwh) || (INV_8_kwh == 0)) { var GEN_LOSS_INV8 = (Expected_gen_INV8 - INV_8_kwh) } else { GEN_LOSS_INV8 = \"0\" }\n        if ((Expected_gen_INV9 != INV_9_kwh) || (INV_9_kwh == 0)) { var GEN_LOSS_INV9 = (Expected_gen_INV9 - INV_9_kwh) } else { GEN_LOSS_INV9 = \"0\" }\n        if ((Expected_gen_INV10 != INV_10_kwh) || (INV_10_kwh == 0)) { var GEN_LOSS_INV10 = (Expected_gen_INV10 - INV_10_kwh) } else { GEN_LOSS_INV10 = \"0\" }\n        if ((Expected_gen_INV11 != INV_11_kwh) || (INV_11_kwh == 0)) { var GEN_LOSS_INV11 = (Expected_gen_INV11 - INV_11_kwh) } else { GEN_LOSS_INV11 = \"0\" }\n        if ((Expected_gen_INV12 != INV_12_kwh) || (INV_12_kwh == 0)) { var GEN_LOSS_INV12 = (Expected_gen_INV12 - INV_12_kwh) } else { GEN_LOSS_INV12 = \"0\" }\n        if ((Expected_gen_INV13 != INV_13_kwh) || (INV_13_kwh == 0)) { var GEN_LOSS_INV13 = (Expected_gen_INV13 - INV_13_kwh) } else { GEN_LOSS_INV13 = \"0\" }\n        if ((Expected_gen_INV14 != INV_14_kwh) || (INV_14_kwh == 0)) { var GEN_LOSS_INV14 = (Expected_gen_INV14 - INV_14_kwh) } else { GEN_LOSS_INV14 = \"0\" }\n\n\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n        Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR_12_kwh)\n        Total_gen_loss_WR13 = Total_gen_loss_WR13 + (Expected_gen_WR13 - WR_13_kwh)\n        Total_gen_loss_WR14 = Total_gen_loss_WR14 + (Expected_gen_WR14 - WR_14_kwh)\n        Total_gen_loss_WR15 = Total_gen_loss_WR15 + (Expected_gen_WR15 - WR_15_kwh)\n        Total_gen_loss_WR16 = Total_gen_loss_WR16 + (Expected_gen_WR16 - WR_16_kwh)\n        Total_gen_loss_WR17 = Total_gen_loss_WR17 + (Expected_gen_WR17 - WR_17_kwh)\n        Total_gen_loss_WR18 = Total_gen_loss_WR18 + (Expected_gen_WR18 - WR_18_kwh)\n        Total_gen_loss_WR19 = Total_gen_loss_WR19 + (Expected_gen_WR19 - WR_19_kwh)\n        Total_gen_loss_WR20 = Total_gen_loss_WR20 + (Expected_gen_WR20 - WR_20_kwh)\n        Total_gen_loss_WR21 = Total_gen_loss_WR21 + (Expected_gen_WR21 - WR_21_kwh)\n        Total_gen_loss_WR22 = Total_gen_loss_WR22 + (Expected_gen_WR22 - WR_22_kwh)\n        Total_gen_loss_WR23 = Total_gen_loss_WR23 + (Expected_gen_WR23 - WR_23_kwh)\n        Total_gen_loss_WR24 = Total_gen_loss_WR24 + (Expected_gen_WR24 - WR_24_kwh)\n        Total_gen_loss_WR25 = Total_gen_loss_WR25 + (Expected_gen_WR25 - WR_25_kwh)\n        Total_gen_loss_WR26 = Total_gen_loss_WR26 + (Expected_gen_WR26 - WR_26_kwh)\n        Total_gen_loss_WR27 = Total_gen_loss_WR27 + (Expected_gen_WR27 - WR_27_kwh)\n        Total_gen_loss_INV1 = Total_gen_loss_INV1 + (Expected_gen_INV1 - INV_1_kwh)\n        Total_gen_loss_INV2 = Total_gen_loss_INV2 + (Expected_gen_INV2 - INV_2_kwh)\n        Total_gen_loss_INV3 = Total_gen_loss_INV3 + (Expected_gen_INV3 - INV_3_kwh)\n        Total_gen_loss_INV4 = Total_gen_loss_INV4 + (Expected_gen_INV4 - INV_4_kwh)\n        Total_gen_loss_INV5 = Total_gen_loss_INV5 + (Expected_gen_INV5 - INV_5_kwh)\n        Total_gen_loss_INV6 = Total_gen_loss_INV6 + (Expected_gen_INV6 - INV_6_kwh)\n        Total_gen_loss_INV7 = Total_gen_loss_INV7 + (Expected_gen_INV7 - INV_7_kwh)\n        Total_gen_loss_INV8 = Total_gen_loss_INV8 + (Expected_gen_INV8 - INV_8_kwh)\n        Total_gen_loss_INV9 = Total_gen_loss_INV9 + (Expected_gen_INV9 - INV_9_kwh)\n        Total_gen_loss_INV10 = Total_gen_loss_INV10 + (Expected_gen_INV10 - INV_10_kwh)\n        Total_gen_loss_INV11 = Total_gen_loss_INV11 + (Expected_gen_INV11 - INV_11_kwh)\n        Total_gen_loss_INV12 = Total_gen_loss_INV12 + (Expected_gen_INV12 - INV_12_kwh)\n        Total_gen_loss_INV13 = Total_gen_loss_INV13 + (Expected_gen_INV13 - INV_13_kwh)\n        Total_gen_loss_INV14 = Total_gen_loss_INV14 + (Expected_gen_INV14 - INV_14_kwh)\n     \n        var total_act_gen = [{\n            Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR13,Total_ACT_WR14, Total_ACT_WR15, Total_ACT_WR16, Total_ACT_WR17, Total_ACT_WR18, Total_ACT_WR19, Total_ACT_WR20\n            , Total_ACT_WR21, Total_ACT_WR22, Total_ACT_WR23, Total_ACT_WR24, Total_ACT_WR25, Total_ACT_WR26, Total_ACT_WR27, Total_ACT_INV1, Total_ACT_INV2, Total_ACT_INV3, Total_ACT_INV4, Total_ACT_INV5, Total_ACT_INV6, Total_ACT_INV7, Total_ACT_INV8, Total_ACT_INV9, Total_ACT_INV10, Total_ACT_INV11, Total_ACT_INV12, Total_ACT_INV13, Total_ACT_INV14}]\n        var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR12, Total_exp_WR13, Total_exp_WR14, Total_exp_WR15, Total_exp_WR16, Total_exp_WR17, Total_exp_WR18, Total_exp_WR19, Total_exp_WR20\n            , Total_exp_WR21, Total_exp_WR22, Total_exp_WR23, Total_exp_WR24, Total_exp_WR25, Total_exp_WR26, Total_exp_WR27, Total_exp_INV1, Total_exp_INV2, Total_exp_INV3, Total_exp_INV4, Total_exp_INV5, Total_exp_INV6, Total_exp_INV7, Total_exp_INV8, Total_exp_INV9, Total_exp_INV10, Total_exp_INV11, Total_exp_INV12, Total_exp_INV13, Total_exp_INV14 ]\n        var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR13, Total_gen_loss_WR14, Total_gen_loss_WR15, Total_gen_loss_WR16, Total_gen_loss_WR17, Total_gen_loss_WR18, Total_gen_loss_WR19, Total_gen_loss_WR20\n            , Total_gen_loss_WR21, Total_gen_loss_WR22, Total_gen_loss_WR23, Total_gen_loss_WR24, Total_gen_loss_WR25, Total_gen_loss_WR26, Total_gen_loss_WR27, Total_gen_loss_INV1, Total_gen_loss_INV2, Total_gen_loss_INV3, Total_gen_loss_INV4, Total_gen_loss_INV5, Total_gen_loss_INV6, Total_gen_loss_INV7, Total_gen_loss_INV8, Total_gen_loss_INV9, Total_gen_loss_INV10, Total_gen_loss_INV11, Total_gen_loss_INV12, Total_gen_loss_INV13, Total_gen_loss_INV14]\n\n\n        obj = {\n            DATE,\n            WR_1_kwh,\n            WR_1_Sp_Y,\n            WR_2_kwh,\n            WR_2_Sp_Y,\n            WR_3_kwh,\n            WR_3_Sp_Y,\n            WR_4_kwh,\n            WR_4_Sp_Y,\n            WR_5_kwh,\n            WR_5_Sp_Y,\n            WR_6_kwh,\n            WR_6_Sp_Y,\n            WR_7_kwh,\n            WR_7_Sp_Y,\n            WR_8_kwh,\n            WR_8_Sp_Y,\n            WR_9_kwh,\n            WR_9_Sp_Y,\n            WR_10_kwh,\n            WR_10_Sp_Y,\n            WR_11_kwh,\n            WR_11_Sp_Y,\n            WR_12_kwh,\n            WR_12_Sp_Y,\n            WR_13_kwh,\n            WR_13_Sp_Y,\n            WR_14_kwh,\n            WR_14_Sp_Y,\n            WR_15_kwh,\n            WR_15_Sp_Y,\n            WR_16_kwh,\n            WR_16_Sp_Y,\n            WR_17_kwh,\n            WR_17_Sp_Y,\n            WR_18_kwh,\n            WR_18_Sp_Y,\n            WR_19_kwh,\n            WR_19_Sp_Y,\n            WR_20_kwh,\n            WR_20_Sp_Y,\n            WR_21_kwh,\n            WR_21_Sp_Y,\n            WR_22_kwh,\n            WR_22_Sp_Y,\n            WR_23_kwh,\n            WR_23_Sp_Y,\n            WR_24_kwh,\n            WR_24_Sp_Y,\n            WR_25_kwh,\n            WR_25_Sp_Y,\n            WR_26_kwh,\n            WR_26_Sp_Y,\n            WR_27_kwh,\n            WR_27_Sp_Y, \n            INV_1_kwh,\n            INV_1_Sp_Y,\n            INV_2_kwh,\n            INV_2_Sp_Y,\n            INV_3_kwh,\n            INV_3_Sp_Y,\n            INV_4_kwh,\n            INV_4_Sp_Y,\n            INV_5_kwh,\n            INV_5_Sp_Y,\n            INV_6_kwh,\n            INV_6_Sp_Y,\n            INV_7_kwh,\n            INV_7_Sp_Y,\n            INV_8_kwh,\n            INV_8_Sp_Y,\n            INV_9_kwh,\n            INV_9_Sp_Y,\n            INV_10_kwh,\n            INV_10_Sp_Y,\n            INV_11_kwh,\n            INV_11_Sp_Y,\n            INV_12_kwh,\n            INV_12_Sp_Y,\n            INV_13_kwh,\n            INV_13_Sp_Y,\n            INV_14_kwh,\n            INV_14_Sp_Y,\n            Max_sy,\n\n            Expected_gen_WR1:Expected_gen_WR1.toFixed(2),\n            Expected_gen_WR2:Expected_gen_WR2.toFixed(2),\n            Expected_gen_WR3:Expected_gen_WR3.toFixed(2),\n            Expected_gen_WR4:Expected_gen_WR4.toFixed(2),\n            Expected_gen_WR5:Expected_gen_WR5.toFixed(2),\n            Expected_gen_WR6:Expected_gen_WR6.toFixed(2),\n            Expected_gen_WR7:Expected_gen_WR7.toFixed(2),\n            Expected_gen_WR8:Expected_gen_WR8.toFixed(2),\n            Expected_gen_WR9:Expected_gen_WR9.toFixed(2),\n            Expected_gen_WR10:Expected_gen_WR10.toFixed(2),\n            Expected_gen_WR11:Expected_gen_WR11.toFixed(2),\n            Expected_gen_WR12:Expected_gen_WR12.toFixed(2),\n            Expected_gen_WR13:Expected_gen_WR13.toFixed(2),\n            Expected_gen_WR14:Expected_gen_WR14.toFixed(2),\n            Expected_gen_WR15:Expected_gen_WR15.toFixed(2),\n            Expected_gen_WR16:Expected_gen_WR16.toFixed(2),\n            Expected_gen_WR17:Expected_gen_WR17.toFixed(2),\n            Expected_gen_WR18:Expected_gen_WR18.toFixed(2),\n            Expected_gen_WR19:Expected_gen_WR19.toFixed(2),\n            Expected_gen_WR20:Expected_gen_WR20.toFixed(2),\n            Expected_gen_WR21:Expected_gen_WR21.toFixed(2),\n            Expected_gen_WR22:Expected_gen_WR22.toFixed(2),\n            Expected_gen_WR23:Expected_gen_WR23.toFixed(2),\n            Expected_gen_WR24:Expected_gen_WR24.toFixed(2),\n            Expected_gen_WR25:Expected_gen_WR25.toFixed(2),\n            Expected_gen_WR26:Expected_gen_WR26.toFixed(2),\n            Expected_gen_WR27:Expected_gen_WR27.toFixed(2),\n            Expected_gen_INV1:Expected_gen_INV1,\n            Expected_gen_INV2:Expected_gen_INV2,\n            Expected_gen_INV3:Expected_gen_INV3,\n            Expected_gen_INV4:Expected_gen_INV4,\n            Expected_gen_INV5:Expected_gen_INV5,\n            Expected_gen_INV6:Expected_gen_INV6,\n            Expected_gen_INV7:Expected_gen_INV7,\n            Expected_gen_INV8:Expected_gen_INV8,\n            Expected_gen_INV9:Expected_gen_INV9,\n            Expected_gen_INV10:Expected_gen_INV10.toFixed(2),\n            Expected_gen_INV11:Expected_gen_INV11.toFixed(2),\n            Expected_gen_INV12:Expected_gen_INV12.toFixed(2),\n            Expected_gen_INV13:Expected_gen_INV13.toFixed(2),\n            Expected_gen_INV14:Expected_gen_INV14.toFixed(2),\n        \n            GEN_LOSS_WR1:parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2:parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3:parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4:parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5:parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6:parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7:parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8:parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9:parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10:parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11:parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR12:parseFloat(GEN_LOSS_WR12).toFixed(2),\n            GEN_LOSS_WR13:parseFloat(GEN_LOSS_WR13).toFixed(2),\n            GEN_LOSS_WR14:parseFloat(GEN_LOSS_WR14).toFixed(2),\n            GEN_LOSS_WR15:parseFloat(GEN_LOSS_WR15).toFixed(2),\n            GEN_LOSS_WR16:parseFloat(GEN_LOSS_WR16).toFixed(2),\n            GEN_LOSS_WR17:parseFloat(GEN_LOSS_WR17).toFixed(2),\n            GEN_LOSS_WR18:parseFloat(GEN_LOSS_WR18).toFixed(2),\n            GEN_LOSS_WR19:parseFloat(GEN_LOSS_WR19).toFixed(2),\n            GEN_LOSS_WR20:parseFloat(GEN_LOSS_WR20).toFixed(2),\n            GEN_LOSS_WR21:parseFloat(GEN_LOSS_WR21).toFixed(2),\n            GEN_LOSS_WR22:parseFloat(GEN_LOSS_WR22).toFixed(2),\n            GEN_LOSS_WR23:parseFloat(GEN_LOSS_WR23).toFixed(2),\n            GEN_LOSS_WR24:parseFloat(GEN_LOSS_WR24).toFixed(2),\n            GEN_LOSS_WR25:parseFloat(GEN_LOSS_WR25).toFixed(2),\n            GEN_LOSS_WR26:parseFloat(GEN_LOSS_WR26).toFixed(2),\n            GEN_LOSS_WR27:parseFloat(GEN_LOSS_WR27).toFixed(2),\n            GEN_LOSS_INV1:parseFloat(GEN_LOSS_INV1).toFixed(2),\n            GEN_LOSS_INV2:parseFloat(GEN_LOSS_INV2).toFixed(2),\n            GEN_LOSS_INV3:parseFloat(GEN_LOSS_INV3).toFixed(2),\n            GEN_LOSS_INV4:parseFloat(GEN_LOSS_INV4).toFixed(2),\n            GEN_LOSS_INV5:parseFloat(GEN_LOSS_INV5).toFixed(2),\n            GEN_LOSS_INV6:parseFloat(GEN_LOSS_INV6).toFixed(2),\n            GEN_LOSS_INV7:parseFloat(GEN_LOSS_INV7).toFixed(2),\n            GEN_LOSS_INV8:parseFloat(GEN_LOSS_INV8).toFixed(2),\n            GEN_LOSS_INV9:parseFloat(GEN_LOSS_INV9).toFixed(2),\n            GEN_LOSS_INV10:parseFloat(GEN_LOSS_INV10).toFixed(2),\n            GEN_LOSS_INV11:parseFloat(GEN_LOSS_INV11).toFixed(2),\n            GEN_LOSS_INV12:parseFloat(GEN_LOSS_INV12).toFixed(2),\n            GEN_LOSS_INV13:parseFloat(GEN_LOSS_INV13).toFixed(2),\n            GEN_LOSS_INV14:parseFloat(GEN_LOSS_INV14).toFixed(2),\n          \n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1380,
        "wires": [
            [
                "3b58ca66da0a566a"
            ]
        ]
    },
    {
        "id": "3b58ca66da0a566a",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a96965039a7774cd",
        "type": "debug",
        "z": "fb5bfb14f47e3d76",
        "name": "debug 282",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1320,
        "wires": []
    },
    {
        "id": "47ee2a51142660cc",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 870,
        "y": 1320,
        "wires": [
            [
                "60a05733853a1af1"
            ]
        ]
    },
    {
        "id": "60a05733853a1af1",
        "type": "csv",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 990,
        "y": 1320,
        "wires": [
            [
                "a96965039a7774cd",
                "dc85ef8cf7f81869"
            ]
        ]
    },
    {
        "id": "88574b323c1804bc",
        "type": "delay",
        "z": "fb5bfb14f47e3d76",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 1320,
        "wires": [
            [
                "6974e529d0466412"
            ]
        ]
    },
    {
        "id": "eeb9b3ecd7137b71",
        "type": "comment",
        "z": "fb5bfb14f47e3d76",
        "name": "calculation",
        "info": "",
        "x": 660,
        "y": 1260,
        "wires": []
    },
    {
        "id": "7f10ecc69067ec9a",
        "type": "fs-ops-dir",
        "z": "1383feb76aecd501",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/BKW ohne plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "363d8cf8b96feabb"
            ]
        ]
    },
    {
        "id": "905689874ff962c3",
        "type": "inject",
        "z": "1383feb76aecd501",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "7f10ecc69067ec9a"
            ]
        ]
    },
    {
        "id": "c11681c4e3ad6e4e",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/BKW ohne plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 100,
        "wires": [
            [
                "794980829f391fe1",
                "4e08b2a8fbeb7955",
                "bccca87a6ff35a01",
                "5244d2701c2b6524",
                "dec80eed2e97f66d",
                "2f4d65816dadc8dd"
            ]
        ]
    },
    {
        "id": "363d8cf8b96feabb",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "c11681c4e3ad6e4e"
            ]
        ]
    },
    {
        "id": "794980829f391fe1",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 210",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 100,
        "wires": []
    },
    {
        "id": "4e08b2a8fbeb7955",
        "type": "file in",
        "z": "1383feb76aecd501",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "142cbde42c892412"
            ]
        ]
    },
    {
        "id": "f1674002ce848f49",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 540,
        "wires": [
            [
                "caf354ac0deecf86"
            ]
        ]
    },
    {
        "id": "bed24f2cc188aa5b",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "report generation plant info table",
        "info": "",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "0c39adc718a6aac8",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 211",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 540,
        "wires": []
    },
    {
        "id": "5244d2701c2b6524",
        "type": "delay",
        "z": "1383feb76aecd501",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 540,
        "wires": [
            [
                "f1674002ce848f49"
            ]
        ]
    },
    {
        "id": "dcab5df2903d1016",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "report file",
        "func": "var plant = flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/BKW ohne plants_REPORT/\" + plant+\"_\"+month+\"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "77a11975de688f54"
            ]
        ]
    },
    {
        "id": "77a11975de688f54",
        "type": "file",
        "z": "1383feb76aecd501",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 910,
        "y": 540,
        "wires": [
            [
                "0c39adc718a6aac8"
            ]
        ]
    },
    {
        "id": "caf354ac0deecf86",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 550,
        "y": 540,
        "wires": [
            [
                "dcab5df2903d1016"
            ]
        ]
    },
    {
        "id": "3b4d8608487cb44a",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 510,
        "y": 680,
        "wires": [
            [
                "52058d1a09ca16c3"
            ]
        ]
    },
    {
        "id": "902c65e4294b45f2",
        "type": "file",
        "z": "1383feb76aecd501",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 810,
        "y": 680,
        "wires": [
            [
                "4b59d5c03c2ae50f"
            ]
        ]
    },
    {
        "id": "4b59d5c03c2ae50f",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 212",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 680,
        "wires": []
    },
    {
        "id": "dec80eed2e97f66d",
        "type": "delay",
        "z": "1383feb76aecd501",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 680,
        "wires": [
            [
                "cbd09885e4c0ecb2"
            ]
        ]
    },
    {
        "id": "d4c6b61470c7379c",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 580,
        "y": 600,
        "wires": []
    },
    {
        "id": "cbd09885e4c0ecb2",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "3b4d8608487cb44a"
            ]
        ]
    },
    {
        "id": "25a25da75c60d671",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 580,
        "y": 760,
        "wires": []
    },
    {
        "id": "52058d1a09ca16c3",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/BKW ohne plants_REPORT/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 680,
        "wires": [
            [
                "902c65e4294b45f2"
            ]
        ]
    },
    {
        "id": "2f4d65816dadc8dd",
        "type": "delay",
        "z": "1383feb76aecd501",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 800,
        "wires": [
            [
                "0567742d0b5721cc"
            ]
        ]
    },
    {
        "id": "876aecf2507e6381",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "3f4cf0e2efbd9c5d"
            ]
        ]
    },
    {
        "id": "3f4cf0e2efbd9c5d",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/BKW ohne plants_REPORT/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 800,
        "wires": [
            [
                "63454728814bc26c"
            ]
        ]
    },
    {
        "id": "63454728814bc26c",
        "type": "file",
        "z": "1383feb76aecd501",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 830,
        "y": 800,
        "wires": [
            [
                "305bd24aa0a62ceb"
            ]
        ]
    },
    {
        "id": "305bd24aa0a62ceb",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 213",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "0567742d0b5721cc",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i].toFixed(2),\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 800,
        "wires": [
            [
                "876aecf2507e6381",
                "86f129521eb20c52"
            ]
        ]
    },
    {
        "id": "86f129521eb20c52",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 880,
        "wires": []
    },
    {
        "id": "8f89b6da21736d0f",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "header correction",
        "info": "",
        "x": 900,
        "y": 180,
        "wires": []
    },
    {
        "id": "2eda5e7bdf7d3285",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\n\nfor (var i = 1; i < column.length; i++) {\n    var inv_name = column[i]\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i] == \"Kostal (Hybrid) (Wh)\") {\n        var sy = \",Specific Yield_Kostal (Hybrid)\"\n        var WR = \",\" + inv_name\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (column[i] != \"Kostal (Hybrid) (Wh)\")) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_name\n        column_header = column_header.concat(WR, sy);\n    }\n\n    var obj = {\n\n        sy,\n        column_header,\n        inv_re,\n        column: column[i]\n\n    }\n    results.push(obj)\n}\n\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\n\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 220,
        "wires": [
            [
                "3ba20c7a3902224d"
            ]
        ]
    },
    {
        "id": "654345bbfca9ebcd",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 720,
        "y": 220,
        "wires": [
            [
                "2eda5e7bdf7d3285"
            ]
        ]
    },
    {
        "id": "3ba20c7a3902224d",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 220,
        "wires": []
    },
    {
        "id": "3c7d31869948925b",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 260,
        "wires": [
            [
                "b60fb1444692a38d"
            ]
        ]
    },
    {
        "id": "2a95091f030962b1",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 216",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "b60fb1444692a38d",
        "type": "change",
        "z": "1383feb76aecd501",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 260,
        "wires": [
            [
                "2a95091f030962b1"
            ]
        ]
    },
    {
        "id": "142cbde42c892412",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "654345bbfca9ebcd",
                "3c7d31869948925b"
            ]
        ]
    },
    {
        "id": "14c89a5a8014982f",
        "type": "file in",
        "z": "1383feb76aecd501",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/BKW-home ohne name list.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 400,
        "wires": [
            [
                "be0a7555bba568da"
            ]
        ]
    },
    {
        "id": "be0a7555bba568da",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "551002fd58ff4ace"
            ]
        ]
    },
    {
        "id": "551002fd58ff4ace",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n        var capacity = [parseFloat(msg.payload[i][\"Hybrid Kostal\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"Solar Edge\"]) || \"null\",\n                        parseFloat(msg.payload[i].Kostal) || \"null\",\n                        parseFloat(msg.payload[i].Symo) || \"null\",\n                        parseFloat(msg.payload[i].Kostal1) || \"null\",\n                        parseFloat(msg.payload[i].Kostal2) || \"null\",\n                        parseFloat(msg.payload[i].WR1) || \"null\",\n                        parseFloat(msg.payload[i].WR2) || \"null\",\n                        parseFloat(msg.payload[i].WR3) || \"null\",\n                        parseFloat(msg.payload[i].ABB) || \"null\",\n                        parseFloat(msg.payload[i][\"Kostal Piko\"]) || \"null\",\n                        parseFloat(msg.payload[i].Solarmax) || \"null\",\n                        parseFloat(msg.payload[i].Hybrid) || \"null\",\n                        parseFloat(msg.payload[i].Symo1) || \"null\",\n                        parseFloat(msg.payload[i].Symo2) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter1) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter2) || \"null\",\n                        parseFloat(msg.payload[i].Fronius1) || \"null\",\n                            ]\n                             \n                             \n                             \n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "4481a6ee2365a330"
            ]
        ]
    },
    {
        "id": "fc50b463887bc4a8",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\n\nvar Total_exp_Hybrid_Kostal = 0\nvar Total_exp_Solar_Edge = 0\nvar Total_exp_Kostal = 0\nvar Total_exp_Symo = 0\nvar Total_exp_Kostal1 = 0\nvar Total_exp_Kostal2 = 0\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_ABB = 0\nvar Total_exp_Kostal_Piko = 0\nvar Total_exp_Solarmax = 0\nvar Total_exp_Hybrid = 0\nvar Total_exp_Symo1 = 0\nvar Total_exp_Symo2 = 0\nvar Total_exp_wechselrichter1 = 0\nvar Total_exp_wechselrichter2 = 0\nvar Total_exp_Fronius1 = 0\n\nvar Total_ACT_Hybrid_Kostal = 0\nvar Total_ACT_Solar_Edge = 0\nvar Total_ACT_Kostal = 0\nvar Total_ACT_Symo = 0\nvar Total_ACT_Kostal1 = 0\nvar Total_ACT_Kostal2 = 0\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_ABB = 0\nvar Total_ACT_Kostal_Piko = 0\nvar Total_ACT_Solarmax = 0\nvar Total_ACT_Hybrid = 0\nvar Total_ACT_Symo1 = 0\nvar Total_ACT_Symo2 = 0\nvar Total_ACT_wechselrichter1 = 0\nvar Total_ACT_wechselrichter2 = 0\nvar Total_ACT_Fronius1 = 0\n\nvar Total_gen_loss_Hybrid_Kostal = 0\nvar Total_gen_loss_Solar_Edge = 0\nvar Total_gen_loss_Kostal = 0\nvar Total_gen_loss_Symo = 0\nvar Total_gen_loss_Kostal1 = 0\nvar Total_gen_loss_Kostal2 = 0\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_ABB = 0\nvar Total_gen_loss_Kostal_Piko = 0\nvar Total_gen_loss_Solarmax = 0\nvar Total_gen_loss_Hybrid = 0\nvar Total_gen_loss_Symo1 = 0\nvar Total_gen_loss_Symo2 = 0\nvar Total_gen_loss_wechselrichter1 = 0\nvar Total_gen_loss_wechselrichter2 = 0\nvar Total_gen_loss_Fronius1 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n\n        var Hybrid_Kostal_kwh = (msg.payload[i][\"Kostal (Hybrid) (Wh)\"]) / 1000 || (msg.payload[i][\"Hybrid Kostal (Wh)\"]) / 1000\n        var Hybrid_Kostal_Sp_Y = msg.payload[i][\"Specific Yield_Kostal (Hybrid)\"] || (msg.payload[i][\"Specific Yield_Hybrid Kostal\"])\n\n        var Solar_Edge_kwh = (msg.payload[i][\"Solar Edge (Wh)\"]) / 1000\n        var Solar_Edge_Sp_Y = msg.payload[i][\"Specific Yield_Solar Edge\"]\n\n        var Kostal_kwh = (msg.payload[i][\"Kostal (Wh)\"]) / 1000\n        var Kostal_Sp_Y = (msg.payload[i][\"Specific Yield_Kostal\"])\n\n        var Symo_kwh = (msg.payload[i][\"Symo (Wh)\"]) / 1000\n        var Symo_Sp_Y = msg.payload[i][\"Specific Yield_Symo\"]\n\n        var Kostal1_kwh = (msg.payload[i][\"Kostal 1 (Wh)\"]) / 1000\n        var Kostal1_Sp_Y = msg.payload[i][\"Specific Yield_Kostal 1\"]\n\n        var Kostal2_kwh = (msg.payload[i][\"Kostal 2 (Wh)\"]) / 1000\n        var Kostal2_Sp_Y = msg.payload[i][\"Specific Yield_Kostal 2\"]\n\n        var WR1_kwh = (msg.payload[i][\"WR 1 (Wh)\"]) / 1000\n        var WR1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n\n        var WR2_kwh = (msg.payload[i][\"WR 2 (Wh)\"]) / 1000\n        var WR2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n\n        var WR3_kwh = (msg.payload[i][\"WR 3 (Wh)\"]) / 1000\n        var WR3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n\n        var ABB_kwh = (msg.payload[i][\"ABB (Wh)\"]) / 1000\n        var ABB_Sp_Y = msg.payload[i][\"Specific Yield_ABB\"]\n\n        var Kostal_Piko_kwh = (msg.payload[i][\"Kostal Piko (Wh)\"]) / 1000\n        var Kostal_Piko_Sp_Y = msg.payload[i][\"Specific Yield_Kostal Piko\"]\n\n        var Solarmax_kwh = (msg.payload[i][\"Solarmax (Wh)\"]) / 1000\n        var Solarmax_Sp_Y = msg.payload[i][\"Specific Yield_Solarmax\"]\n\n        var Hybrid_kwh = (msg.payload[i][\"Hybrid (Wh)\"]) / 1000\n        var Hybrid_Sp_Y = (msg.payload[i][\"Specific Yield_Hybrid\"]) / 1000\n\n        var Symo1_kwh = (msg.payload[i][\"Symo 1 (Wh)\"]) / 1000\n        var Symo1_Sp_Y = msg.payload[i][\"Specific Yield_Symo 1\"]\n\n        var Symo2_kwh = (msg.payload[i][\"Symo 2 (Wh)\"]) / 1000\n        var Symo2_Sp_Y = msg.payload[i][\"Specific Yield_Symo 2\"]\n\n        var wechselrichter1_kwh = (msg.payload[i][\"Wechselrichter 1 (Wh)\"]) / 1000\n        var wechselrichter1_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter 1\"]\n\n        var wechselrichter2_kwh = (msg.payload[i][\"Wechselrichter 2 (Wh)\"]) / 1000\n        var wechselrichter2_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter 2\"]\n\n        var Fronius1_kwh = (msg.payload[i][\"Fronius 1 (Wh)\"]) / 1000\n        var Fronius1_Sp_Y = msg.payload[i][\"Specific Yield_Fronius 1\"]\n\n        var Max_sy = Math.max(Hybrid_Kostal_Sp_Y || 0, Solar_Edge_Sp_Y || 0, Kostal_Sp_Y || 0, Symo_Sp_Y || 0, Kostal1_Sp_Y || 0, Kostal2_Sp_Y || 0, WR1_Sp_Y || 0, WR2_Sp_Y || 0, WR3_Sp_Y || 0, ABB_Sp_Y || 0, Kostal_Piko_Sp_Y || 0, Solarmax_Sp_Y || 0, Hybrid_Sp_Y || 0, Symo1_Sp_Y || 0, Symo2_Sp_Y || 0, wechselrichter1_Sp_Y || 0, wechselrichter2_Sp_Y || 0, Fronius1_Sp_Y || 0)\n\n        var Hybrid_Kostal_INV_CAPACITY = inv_cap[0]\n        var Solar_Edge_INV_CAPACITY = inv_cap[1]\n        var Kostal_INV_CAPACITY = inv_cap[2]\n        var Symo_INV_CAPACITY = inv_cap[3]\n        var Kostal1_INV_CAPACITY = inv_cap[4]\n        var Kostal2_INV_CAPACITY = inv_cap[5]\n        var WR1_INV_CAPACITY = inv_cap[6]\n        var WR2_INV_CAPACITY = inv_cap[7]\n        var WR3_INV_CAPACITY = inv_cap[8]\n        var ABB_INV_CAPACITY = inv_cap[9]\n        var Kostal_Piko_INV_CAPACITY = inv_cap[10]\n        var Solarmax_INV_CAPACITY = inv_cap[11]\n        var Hybrid_INV_CAPACITY = inv_cap[12]\n        var Symo1_INV_CAPACITY = inv_cap[13]\n        var Symo2_INV_CAPACITY = inv_cap[14]\n        var wechselrichter1_INV_CAPACITY = inv_cap[15]\n        var wechselrichter2_INV_CAPACITY = inv_cap[16]\n        var Fronius1_INV_CAPACITY = inv_cap[17]\n\n        var Expected_gen_Hybrid_Kostal = Max_sy * Hybrid_Kostal_INV_CAPACITY\n        var Expected_gen_Solar_Edge = Max_sy * Solar_Edge_INV_CAPACITY\n        var Expected_gen_Kostal = Max_sy * Kostal_INV_CAPACITY\n        var Expected_gen_Symo = Max_sy * Symo_INV_CAPACITY\n        var Expected_gen_Kostal1 = Max_sy * Kostal1_INV_CAPACITY\n        var Expected_gen_Kostal2 = Max_sy * Kostal2_INV_CAPACITY\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_ABB = Max_sy * ABB_INV_CAPACITY\n        var Expected_gen_Kostal_Piko = Max_sy * Kostal_Piko_INV_CAPACITY\n        var Expected_gen_Solarmax = Max_sy * Solarmax_INV_CAPACITY\n        var Expected_gen_Hybrid = Max_sy * Hybrid_INV_CAPACITY\n        var Expected_gen_Symo1 = Max_sy * Symo1_INV_CAPACITY\n        var Expected_gen_Symo2 = Max_sy * Symo2_INV_CAPACITY\n        var Expected_gen_wechselrichter1 = Max_sy * wechselrichter1_INV_CAPACITY\n        var Expected_gen_wechselrichter2 = Max_sy * wechselrichter2_INV_CAPACITY\n        var Expected_gen_Fronius1 = Max_sy * Fronius1_INV_CAPACITY\n\n        Total_exp_Hybrid_Kostal = Total_exp_Hybrid_Kostal + Expected_gen_Hybrid_Kostal\n        Total_exp_Solar_Edge = Total_exp_Solar_Edge + Expected_gen_Solar_Edge\n        Total_exp_Kostal = Total_exp_Kostal + Expected_gen_Kostal\n        Total_exp_Symo = Total_exp_Symo + Expected_gen_Symo\n        Total_exp_Kostal1 = Total_exp_Kostal1 + Expected_gen_Kostal1\n        Total_exp_Kostal2 = Total_exp_Kostal2 + Expected_gen_Kostal2\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_ABB = Total_exp_ABB + Expected_gen_ABB\n        Total_exp_Kostal_Piko = Total_exp_Kostal_Piko + Expected_gen_Kostal_Piko\n        Total_exp_Solarmax = Total_exp_Solarmax + Expected_gen_Solarmax\n        Total_exp_Hybrid = Total_exp_Hybrid + Expected_gen_Hybrid\n        Total_exp_Symo1 = Total_exp_Symo1 + Expected_gen_Symo1\n        Total_exp_Symo2 = Total_exp_Symo2 + Expected_gen_Symo2\n        Total_exp_wechselrichter1 = Total_exp_wechselrichter1 + Expected_gen_wechselrichter1\n        Total_exp_wechselrichter2 = Total_exp_wechselrichter2 + Expected_gen_wechselrichter1\n        Total_exp_Fronius1 = Total_exp_Fronius1 + Expected_gen_Fronius1\n\n\n        Total_ACT_Hybrid_Kostal = Total_ACT_Hybrid_Kostal + Hybrid_Kostal_kwh\n        Total_ACT_Solar_Edge = Total_ACT_Solar_Edge + Solar_Edge_kwh\n        Total_ACT_Kostal = Total_ACT_Kostal + Kostal_kwh\n        Total_ACT_Symo = Total_ACT_Symo + Symo_kwh\n        Total_ACT_Kostal1 = Total_ACT_Kostal1 + Kostal1_kwh\n        Total_ACT_Kostal2 = Total_ACT_Kostal2 + Kostal2_kwh\n        Total_ACT_WR1 = Total_ACT_WR1 + WR1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR3_kwh\n        Total_ACT_ABB = Total_ACT_ABB + ABB_kwh\n        Total_ACT_Kostal_Piko = Total_ACT_Kostal_Piko + Kostal_Piko_kwh\n        Total_ACT_Solarmax = Total_ACT_Solarmax + Solarmax_kwh\n        Total_ACT_Hybrid = Total_ACT_Hybrid + Hybrid_kwh\n        Total_ACT_Symo1 = Total_ACT_Symo1 + Symo1_kwh\n        Total_ACT_Symo2 = Total_ACT_Symo2 + Symo2_kwh\n        Total_ACT_wechselrichter1 = Total_ACT_wechselrichter1 + wechselrichter1_kwh\n        Total_ACT_wechselrichter2 = Total_ACT_wechselrichter2 + wechselrichter2_kwh\n        Total_ACT_Fronius1 = Total_ACT_Fronius1 + Fronius1_kwh\n\n        if ((Expected_gen_Hybrid_Kostal != Hybrid_Kostal_kwh) || (Hybrid_Kostal_kwh == 0)) { var GEN_LOSS_Hybrid_Kostal = (Expected_gen_Hybrid_Kostal - Hybrid_Kostal_kwh) } else { GEN_LOSS_Hybrid_Kostal = \"0\" }\n        if ((Expected_gen_Solar_Edge != Solar_Edge_kwh) || (Solar_Edge_kwh == 0)) { var GEN_LOSS_Solar_Edge = (Expected_gen_Solar_Edge - Solar_Edge_kwh) } else { GEN_LOSS_Solar_Edge = \"0\" }\n        if ((Expected_gen_Kostal != Kostal_kwh) || (Kostal_kwh == 0)) { var GEN_LOSS_Kostal = (Expected_gen_Kostal - Kostal_kwh) } else { GEN_LOSS_Kostal = \"0\" }\n        if ((Expected_gen_Symo != Symo_kwh) || (Symo_kwh == 0)) { var GEN_LOSS_Symo = (Expected_gen_Symo - Symo_kwh) } else { GEN_LOSS_Symo = \"0\" }\n        if ((Expected_gen_Kostal1 != Kostal1_kwh) || (Kostal1_kwh == 0)) { var GEN_LOSS_Kostal1 = (Expected_gen_Kostal1 - Kostal1_kwh) } else { GEN_LOSS_Kostal1 = \"0\" }\n        if ((Expected_gen_Kostal2 != Kostal2_kwh) || (Kostal2_kwh == 0)) { var GEN_LOSS_Kostal2 = (Expected_gen_Kostal2 - Kostal2_kwh) } else { GEN_LOSS_Kostal2 = \"0\" }\n        if ((Expected_gen_WR1 != WR1_kwh) || (WR1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR2_kwh) || (WR2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR3_kwh) || (WR3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_ABB != ABB_kwh) || (ABB_kwh == 0)) { var GEN_LOSS_ABB = (Expected_gen_ABB - ABB_kwh) } else { GEN_LOSS_ABB = \"0\" }\n        if ((Expected_gen_Kostal_Piko != Kostal_Piko_kwh) || (Kostal_Piko_kwh == 0)) { var GEN_LOSS_Kostal_Piko = (Expected_gen_Kostal_Piko - Kostal_Piko_kwh) } else { GEN_LOSS_Kostal_Piko = \"0\" }\n        if ((Expected_gen_Solarmax != Solarmax_kwh) || (Solarmax_kwh == 0)) { var GEN_LOSS_Solarmax = (Expected_gen_Solarmax - Solarmax_kwh) } else { GEN_LOSS_Solarmax = \"0\" }\n        if ((Expected_gen_Hybrid != Hybrid_kwh) || (Hybrid_kwh == 0)) { var GEN_LOSS_Hybrid = (Expected_gen_Hybrid - Hybrid_kwh) } else { GEN_LOSS_Hybrid = \"0\" }\n        if ((Expected_gen_Symo1 != Symo1_kwh) || (Symo1_kwh == 0)) { var GEN_LOSS_Symo1 = (Expected_gen_Symo1 - Symo1_kwh) } else { GEN_LOSS_Symo1 = \"0\" }\n        if ((Expected_gen_Symo2 != Symo2_kwh) || (Symo2_kwh == 0)) { var GEN_LOSS_Symo2 = (Expected_gen_Symo2 - Symo2_kwh) } else { GEN_LOSS_Symo2 = \"0\" }\n        if ((Expected_gen_wechselrichter1 != wechselrichter1_kwh) || (wechselrichter1_kwh == 0)) { var GEN_LOSS_wechselrichter1 = (Expected_gen_wechselrichter1 - wechselrichter1_kwh) } else { GEN_LOSS_wechselrichter1 = \"0\" }\n        if ((Expected_gen_wechselrichter2 != wechselrichter2_kwh) || (wechselrichter2_kwh == 0)) { var GEN_LOSS_wechselrichter2 = (Expected_gen_wechselrichter2 - wechselrichter2_kwh) } else { GEN_LOSS_wechselrichter2 = \"0\" }\n        if ((Expected_gen_Fronius1 != Fronius1_kwh) || (Fronius1_kwh == 0)) { var GEN_LOSS_Fronius1 = (Expected_gen_Fronius1 - Fronius1_kwh) } else { GEN_LOSS_Fronius1 = \"0\" }\n\n\n        Total_gen_loss_Hybrid_Kostal = Total_gen_loss_Hybrid_Kostal + (Expected_gen_Hybrid_Kostal - Hybrid_Kostal_kwh)\n        Total_gen_loss_Solar_Edge = Total_gen_loss_Solar_Edge + (Expected_gen_Solar_Edge - Solar_Edge_kwh)\n        Total_gen_loss_Kostal = Total_gen_loss_Kostal + (Expected_gen_Kostal - Kostal_kwh)\n        Total_gen_loss_Symo = Total_gen_loss_Symo + (Expected_gen_Symo - Symo_kwh)\n        Total_gen_loss_Kostal1 = Total_gen_loss_Kostal1 + (Expected_gen_Kostal1 - Kostal1_kwh)\n        Total_gen_loss_Kostal2 = Total_gen_loss_Kostal2 + (Expected_gen_Kostal2 - Kostal2_kwh)\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR3_kwh)\n        Total_gen_loss_ABB = Total_gen_loss_ABB + (Expected_gen_ABB - ABB_kwh)\n        Total_gen_loss_Kostal_Piko = Total_gen_loss_Kostal_Piko + (Expected_gen_Kostal_Piko - Kostal_Piko_kwh)\n        Total_gen_loss_Solarmax = Total_gen_loss_Solarmax + (Expected_gen_Solarmax - Solarmax_kwh)\n        Total_gen_loss_Hybrid = Total_gen_loss_Hybrid + (Expected_gen_Hybrid - Hybrid_kwh)\n        Total_gen_loss_Symo1 = Total_gen_loss_Symo1 + (Expected_gen_Symo1 - Symo1_kwh)\n        Total_gen_loss_Symo2 = Total_gen_loss_Symo2 + (Expected_gen_Symo2 - Symo2_kwh)\n        Total_gen_loss_wechselrichter1 = Total_gen_loss_wechselrichter1 + (Expected_gen_wechselrichter1 - wechselrichter1_kwh)\n        Total_gen_loss_wechselrichter2 = Total_gen_loss_wechselrichter2 + (Expected_gen_wechselrichter2 - wechselrichter2_kwh)\n        Total_gen_loss_Fronius1 = Total_gen_loss_Fronius1 + (Expected_gen_Fronius1 - Fronius1_kwh)\n\n\n\n        var total_act_gen = [{\n            Total_ACT_Hybrid_Kostal, Total_ACT_Solar_Edge, Total_ACT_Kostal, Total_ACT_Symo, Total_ACT_Kostal1, Total_ACT_Kostal2, Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_ABB, Total_ACT_Kostal_Piko, Total_ACT_Solarmax, Total_ACT_Hybrid, Total_ACT_Symo1, Total_ACT_Symo2, Total_ACT_wechselrichter1, Total_ACT_wechselrichter2, Total_ACT_Fronius1\n        }]\n        var total_exp_gen = [Total_exp_Hybrid_Kostal, Total_exp_Solar_Edge, Total_exp_Kostal, Total_exp_Symo, Total_exp_Kostal1, Total_exp_Kostal2, Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_ABB, Total_exp_Kostal_Piko, Total_exp_Solarmax, Total_exp_Hybrid, Total_exp_Symo1, Total_exp_Symo2, Total_exp_wechselrichter1, Total_exp_wechselrichter2, Total_exp_Fronius1]\n\n        var totalgen_loss = [Total_gen_loss_Hybrid_Kostal, Total_gen_loss_Solar_Edge, Total_gen_loss_Kostal, Total_gen_loss_Symo, Total_gen_loss_Kostal1, Total_gen_loss_Kostal2, Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_ABB, Total_gen_loss_Kostal_Piko, Total_gen_loss_Solarmax, Total_gen_loss_Hybrid, Total_gen_loss_Symo1, Total_gen_loss_Symo2, Total_gen_loss_wechselrichter1, Total_gen_loss_wechselrichter2, Total_gen_loss_Fronius1]\n\n\n        obj = {\n            DATE,\n            Hybrid_Kostal_kwh,\n            Hybrid_Kostal_Sp_Y,\n            Solar_Edge_kwh,\n            Solar_Edge_Sp_Y,\n            Kostal_kwh,\n            Kostal_Sp_Y,\n            Symo_kwh,\n            Symo_Sp_Y,\n            Kostal1_kwh,\n            Kostal1_Sp_Y,\n            Kostal2_kwh,\n            Kostal2_Sp_Y,\n            WR1_kwh,\n            WR1_Sp_Y,\n            WR2_kwh,\n            WR2_Sp_Y,\n            WR3_kwh,\n            WR3_Sp_Y,\n            ABB_kwh,\n            ABB_Sp_Y,\n            Kostal_Piko_kwh,\n            Kostal_Piko_Sp_Y,\n            Solarmax_kwh,\n            Solarmax_Sp_Y,\n            Hybrid_kwh,\n            Hybrid_Sp_Y,\n            Symo1_kwh,\n            Symo1_Sp_Y,\n            Symo2_kwh,\n            Symo2_Sp_Y,\n            wechselrichter1_kwh,\n            wechselrichter1_Sp_Y,\n            wechselrichter2_kwh,\n            wechselrichter2_Sp_Y,\n            Fronius1_kwh,\n            Fronius1_Sp_Y,\n            Max_sy,\n\n            Expected_gen_Hybrid_Kostal,\n            Expected_gen_Solar_Edge,\n            Expected_gen_Kostal,\n            Expected_gen_Symo,\n            Expected_gen_Kostal1,\n            Expected_gen_Kostal2,\n            Expected_gen_WR1,\n            Expected_gen_WR2,\n            Expected_gen_WR3,\n            Expected_gen_ABB,\n            Expected_gen_Kostal_Piko,\n            Expected_gen_Solarmax,\n            Expected_gen_Hybrid,\n            Expected_gen_Symo1,\n            Expected_gen_Symo2,\n            Expected_gen_wechselrichter1,\n            Expected_gen_wechselrichter2,\n            Expected_gen_Fronius1,\n\n            GEN_LOSS_Hybrid_Kostal,\n            GEN_LOSS_Solar_Edge,\n            GEN_LOSS_Kostal,\n            GEN_LOSS_Symo,\n            GEN_LOSS_Kostal1,\n            GEN_LOSS_Kostal2,\n            GEN_LOSS_WR1,\n            GEN_LOSS_WR2,\n            GEN_LOSS_WR3,\n            GEN_LOSS_ABB,\n            GEN_LOSS_Kostal_Piko,\n            GEN_LOSS_Solarmax,\n            GEN_LOSS_Hybrid,\n            GEN_LOSS_Symo1,\n            GEN_LOSS_Symo2,\n            GEN_LOSS_wechselrichter1,\n            GEN_LOSS_wechselrichter2,\n            GEN_LOSS_Fronius1\n\n        }\n    }\n\n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "5fa814df4c1af180"
            ]
        ]
    },
    {
        "id": "5fa814df4c1af180",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 460,
        "wires": []
    },
    {
        "id": "16afd043bc10f143",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 218",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "4481a6ee2365a330",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 850,
        "y": 400,
        "wires": [
            [
                "2eec12ba1b59a775"
            ]
        ]
    },
    {
        "id": "2eec12ba1b59a775",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 970,
        "y": 400,
        "wires": [
            [
                "16afd043bc10f143",
                "fc50b463887bc4a8"
            ]
        ]
    },
    {
        "id": "bccca87a6ff35a01",
        "type": "delay",
        "z": "1383feb76aecd501",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 200,
        "y": 400,
        "wires": [
            [
                "14c89a5a8014982f"
            ]
        ]
    },
    {
        "id": "de975b15ae976df8",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "calculation",
        "info": "",
        "x": 640,
        "y": 340,
        "wires": []
    },
    {
        "id": "5c508469187881c4",
        "type": "fs-ops-dir",
        "z": "1383feb76aecd501",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/wierig plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 320,
        "y": 1100,
        "wires": [
            [
                "85f2a26d500896f6"
            ]
        ]
    },
    {
        "id": "aabd32037ee17a10",
        "type": "inject",
        "z": "1383feb76aecd501",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "5c508469187881c4",
                "1b5e61db8c6a79ac",
                "93e7a74c21f4355f"
            ]
        ]
    },
    {
        "id": "634a02144d6a02b7",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "bd0749477b75b726"
            ]
        ]
    },
    {
        "id": "85f2a26d500896f6",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1100,
        "wires": [
            [
                "634a02144d6a02b7"
            ]
        ]
    },
    {
        "id": "bd0749477b75b726",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 219",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1b5e61db8c6a79ac",
        "type": "file in",
        "z": "1383feb76aecd501",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/BKW ohne plants/1890359340_2023-05-01_2023-05-31 (1).csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 210,
        "y": 1220,
        "wires": [
            [
                "d0a7c88099b9468e"
            ]
        ]
    },
    {
        "id": "d3ae3ac2cc802da4",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "header correction",
        "info": "",
        "x": 900,
        "y": 1180,
        "wires": []
    },
    {
        "id": "456bd8a86efc4313",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\n\nfor (var i = 1; i < column.length; i++) {\n    var inv_name = column[i]\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (column[i] == \"Kostal (Hybrid) (Wh)\") {\n        var sy = \",Specific Yield_Kostal (Hybrid)\"\n        var WR = \",\" + inv_name\n        column_header = column_header.concat(WR, sy);\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (column[i] != \"Kostal (Hybrid) (Wh)\")) {\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_name\n        column_header = column_header.concat(WR, sy);\n    }\n  \n    var obj = {\n\n        sy,\n        column_header,\n        inv_re,\n        column: column[i]\n\n    }\n    results.push(obj)\n}\n\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\n\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "6a4aa668aefca352"
            ]
        ]
    },
    {
        "id": "3a6325be614285f4",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 720,
        "y": 1220,
        "wires": [
            [
                "456bd8a86efc4313"
            ]
        ]
    },
    {
        "id": "6a4aa668aefca352",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1220,
        "wires": []
    },
    {
        "id": "16ef892b93a5d112",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "4315dcddd838e165"
            ]
        ]
    },
    {
        "id": "4cf04d19069cf8a9",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4315dcddd838e165",
        "type": "change",
        "z": "1383feb76aecd501",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1260,
        "wires": [
            [
                "4cf04d19069cf8a9"
            ]
        ]
    },
    {
        "id": "d0a7c88099b9468e",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1220,
        "wires": [
            [
                "3a6325be614285f4",
                "16ef892b93a5d112"
            ]
        ]
    },
    {
        "id": "3151e8320ef88036",
        "type": "comment",
        "z": "1383feb76aecd501",
        "name": "report generation plant info table",
        "info": "",
        "x": 670,
        "y": 1420,
        "wires": []
    },
    {
        "id": "58eac0f4c6668d3e",
        "type": "file in",
        "z": "1383feb76aecd501",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/BKW-home ohne name list.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 1340,
        "wires": [
            [
                "f3a4abe5458f7644"
            ]
        ]
    },
    {
        "id": "f3a4abe5458f7644",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 510,
        "y": 1340,
        "wires": [
            [
                "7e9a970154155898"
            ]
        ]
    },
    {
        "id": "7e9a970154155898",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "comparison with ref csv",
        "func": "var live_plant = 1890359340//flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n        var capacity = [parseFloat(msg.payload[i][\"Hybrid Kostal\"]) || \"null\",\n                        parseFloat(msg.payload[i][\"Solar Edge\"]) || \"null\",\n                        parseFloat(msg.payload[i].Kostal) || \"null\",\n                        parseFloat(msg.payload[i].Symo) || \"null\",\n                        parseFloat(msg.payload[i].Kostal1) || \"null\",\n                        parseFloat(msg.payload[i].Kostal2) || \"null\",\n                        parseFloat(msg.payload[i].WR1) || \"null\",\n                        parseFloat(msg.payload[i].WR2) || \"null\",\n                        parseFloat(msg.payload[i].WR3) || \"null\",\n                        parseFloat(msg.payload[i].ABB) || \"null\",\n                        parseFloat(msg.payload[i][\"Kostal Piko\"]) || \"null\",\n                        parseFloat(msg.payload[i].Solarmax) || \"null\",\n                        parseFloat(msg.payload[i].Hybrid) || \"null\",\n                        parseFloat(msg.payload[i].Symo1) || \"null\",\n                        parseFloat(msg.payload[i].Symo2) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter1) || \"null\",\n                        parseFloat(msg.payload[i].wechselrichter2) || \"null\",\n                        parseFloat(msg.payload[i].Fronius1) || \"null\",\n                            ]\n                             \n                             \n                             \n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO,\n    capacity\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "81051674d448c889",
                "80ecf4dd2421077c"
            ]
        ]
    },
    {
        "id": "71b389638e14a19b",
        "type": "function",
        "z": "1383feb76aecd501",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\n\nvar Total_exp_Hybrid_Kostal=0\nvar Total_exp_Solar_Edge=0\nvar Total_exp_Kostal=0\nvar Total_exp_Symo=0\nvar Total_exp_Kostal1=0\nvar Total_exp_Kostal2=0\nvar Total_exp_WR1=0\nvar Total_exp_WR2=0\nvar Total_exp_WR3=0\nvar Total_exp_ABB=0\nvar Total_exp_Kostal_Piko=0\nvar Total_exp_Solarmax=0\nvar Total_exp_Hybrid=0\nvar Total_exp_Symo1=0\nvar Total_exp_Symo2=0\nvar Total_exp_wechselrichter1=0\nvar Total_exp_wechselrichter2=0\nvar Total_exp_Fronius1=0\n\nvar Total_ACT_Hybrid_Kostal = 0\nvar Total_ACT_Solar_Edge = 0\nvar Total_ACT_Kostal = 0\nvar Total_ACT_Symo = 0\nvar Total_ACT_Kostal1 = 0\nvar Total_ACT_Kostal2 = 0\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_ABB = 0\nvar Total_ACT_Kostal_Piko = 0\nvar Total_ACT_Solarmax = 0\nvar Total_ACT_Hybrid = 0\nvar Total_ACT_Symo1 = 0\nvar Total_ACT_Symo2 = 0\nvar Total_ACT_wechselrichter1 = 0\nvar Total_ACT_wechselrichter2 = 0\nvar Total_ACT_Fronius1 = 0\n\nvar Total_gen_loss_Hybrid_Kostal = 0\nvar Total_gen_loss_Solar_Edge = 0\nvar Total_gen_loss_Kostal = 0\nvar Total_gen_loss_Symo = 0\nvar Total_gen_loss_Kostal1 = 0\nvar Total_gen_loss_Kostal2 = 0\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_ABB = 0\nvar Total_gen_loss_Kostal_Piko = 0\nvar Total_gen_loss_Solarmax = 0\nvar Total_gen_loss_Hybrid = 0\nvar Total_gen_loss_Symo1 = 0\nvar Total_gen_loss_Symo2 = 0\nvar Total_gen_loss_wechselrichter1 = 0\nvar Total_gen_loss_wechselrichter2 = 0\nvar Total_gen_loss_Fronius1 = 0\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n\n        var Hybrid_Kostal_kwh = (msg.payload[i][\"Kostal (Hybrid) (Wh)\"]) / 1000 || (msg.payload[i][\"Hybrid Kostal (Wh)\"])/1000\n        var Hybrid_Kostal_Sp_Y = msg.payload[i][\"Specific Yield_Kostal (Hybrid)\"] || (msg.payload[i][\"Specific Yield_Hybrid Kostal\"])\n\n        var Solar_Edge_kwh = (msg.payload[i][\"Solar Edge (Wh)\"])/1000\n        var Solar_Edge_Sp_Y = msg.payload[i][\"Specific Yield_Solar Edge\"]\n\n        var Kostal_kwh = (msg.payload[i][\"Kostal (Wh)\"]) / 1000\n        var Kostal_Sp_Y = (msg.payload[i][\"Specific Yield_Kostal\"]) \n\n        var Symo_kwh = (msg.payload[i][\"Symo (Wh)\"])/1000\n        var Symo_Sp_Y = msg.payload[i][\"Specific Yield_Symo\"]\n   \n        var Kostal1_kwh = (msg.payload[i][\"Kostal 1 (Wh)\"]) / 1000\n        var Kostal1_Sp_Y = msg.payload[i][\"Specific Yield_Kostal 1\"]\n\n        var Kostal2_kwh = (msg.payload[i][\"Kostal 2 (Wh)\"]) / 1000\n        var Kostal2_Sp_Y = msg.payload[i][\"Specific Yield_Kostal 2\"]\n\n        var WR1_kwh = (msg.payload[i][\"WR 1 (Wh)\"]) / 1000\n        var WR1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n\n        var WR2_kwh = (msg.payload[i][\"WR 2 (Wh)\"]) / 1000\n        var WR2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n\n        var WR3_kwh = (msg.payload[i][\"WR 3 (Wh)\"]) / 1000\n        var WR3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n\n        var ABB_kwh = (msg.payload[i][\"ABB (Wh)\"])/1000\n        var ABB_Sp_Y = msg.payload[i][\"Specific Yield_ABB\"]\n\n        var Kostal_Piko_kwh = (msg.payload[i][\"Kostal Piko (Wh)\"]) / 1000\n        var Kostal_Piko_Sp_Y = msg.payload[i][\"Specific Yield_Kostal Piko\"]\n\n        var Solarmax_kwh = (msg.payload[i][\"Solarmax (Wh)\"])/1000\n        var Solarmax_Sp_Y = msg.payload[i][\"Specific Yield_Solarmax\"]\n\n        var Hybrid_kwh = (msg.payload[i][\"Hybrid (Wh)\"]) / 1000\n        var Hybrid_Sp_Y = (msg.payload[i][\"Specific Yield_Hybrid\"]) / 1000\n\n        var Symo1_kwh = (msg.payload[i][\"Symo 1 (Wh)\"]) / 1000\n        var Symo1_Sp_Y = msg.payload[i][\"Specific Yield_Symo 1\"]\n\n        var Symo2_kwh = (msg.payload[i][\"Symo 2 (Wh)\"]) / 1000\n        var Symo2_Sp_Y = msg.payload[i][\"Specific Yield_Symo 2\"]\n\n        var wechselrichter1_kwh = (msg.payload[i][\"Wechselrichter 1 (Wh)\"]) / 1000\n        var wechselrichter1_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter 1\"]\n\n        var wechselrichter2_kwh = (msg.payload[i][\"Wechselrichter 2 (Wh)\"]) / 1000\n        var wechselrichter2_Sp_Y = msg.payload[i][\"Specific Yield_Wechselrichter 2\"]\n\n        var Fronius1_kwh = (msg.payload[i][\"Fronius 1 (Wh)\"])/1000\n        var Fronius1_Sp_Y = msg.payload[i][\"Specific Yield_Fronius 1\"]\n       \n        var Max_sy = Math.max( Hybrid_Kostal_Sp_Y || 0, Solar_Edge_Sp_Y || 0, Kostal_Sp_Y || 0,  Symo_Sp_Y || 0, Kostal1_Sp_Y || 0,  Kostal2_Sp_Y || 0,  WR1_Sp_Y || 0, WR2_Sp_Y || 0,  WR3_Sp_Y || 0,  ABB_Sp_Y || 0,  Kostal_Piko_Sp_Y || 0, Solarmax_Sp_Y || 0, Hybrid_Sp_Y || 0, Symo1_Sp_Y || 0, Symo2_Sp_Y || 0, wechselrichter1_Sp_Y || 0, wechselrichter2_Sp_Y || 0,Fronius1_Sp_Y || 0)\n\n        var Hybrid_Kostal_INV_CAPACITY = inv_cap[0]\n        var Solar_Edge_INV_CAPACITY = inv_cap[1]\n        var Kostal_INV_CAPACITY = inv_cap[2]\n        var Symo_INV_CAPACITY = inv_cap[3]\n        var Kostal1_INV_CAPACITY = inv_cap[4]\n        var Kostal2_INV_CAPACITY = inv_cap[5]\n        var WR1_INV_CAPACITY = inv_cap[6]\n        var WR2_INV_CAPACITY = inv_cap[7]\n        var WR3_INV_CAPACITY = inv_cap[8]\n        var ABB_INV_CAPACITY = inv_cap[9]\n        var Kostal_Piko_INV_CAPACITY = inv_cap[10]\n        var Solarmax_INV_CAPACITY = inv_cap[11]\n        var Hybrid_INV_CAPACITY = inv_cap[12]\n        var Symo1_INV_CAPACITY = inv_cap[13]\n        var Symo2_INV_CAPACITY = inv_cap[14]\n        var wechselrichter1_INV_CAPACITY = inv_cap[15]\n        var wechselrichter2_INV_CAPACITY = inv_cap[16]\n        var Fronius1_INV_CAPACITY = inv_cap[17]\n      \n        var Expected_gen_Hybrid_Kostal= Max_sy * Hybrid_Kostal_INV_CAPACITY\n        var Expected_gen_Solar_Edge= Max_sy * Solar_Edge_INV_CAPACITY\n        var Expected_gen_Kostal= Max_sy * Kostal_INV_CAPACITY\n        var Expected_gen_Symo= Max_sy * Symo_INV_CAPACITY\n        var Expected_gen_Kostal1= Max_sy * Kostal1_INV_CAPACITY\n        var Expected_gen_Kostal2= Max_sy * Kostal2_INV_CAPACITY\n        var Expected_gen_WR1= Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2= Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3= Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_ABB = Max_sy * ABB_INV_CAPACITY\n        var Expected_gen_Kostal_Piko = Max_sy * Kostal_Piko_INV_CAPACITY\n        var Expected_gen_Solarmax = Max_sy * Solarmax_INV_CAPACITY\n        var Expected_gen_Hybrid = Max_sy * Hybrid_INV_CAPACITY\n        var Expected_gen_Symo1 = Max_sy * Symo1_INV_CAPACITY\n        var Expected_gen_Symo2 = Max_sy * Symo2_INV_CAPACITY\n        var Expected_gen_wechselrichter1 = Max_sy * wechselrichter1_INV_CAPACITY\n        var Expected_gen_wechselrichter2 = Max_sy * wechselrichter2_INV_CAPACITY\n        var Expected_gen_Fronius1 = Max_sy * Fronius1_INV_CAPACITY\n\n        Total_exp_Hybrid_Kostal=Total_exp_Hybrid_Kostal+Expected_gen_Hybrid_Kostal\n        Total_exp_Solar_Edge=Total_exp_Solar_Edge+Expected_gen_Solar_Edge\n        Total_exp_Kostal=Total_exp_Kostal+Expected_gen_Kostal\n        Total_exp_Symo=Total_exp_Symo+Expected_gen_Symo\n        Total_exp_Kostal1=Total_exp_Kostal1+Expected_gen_Kostal1\n        Total_exp_Kostal2=Total_exp_Kostal2+Expected_gen_Kostal2\n        Total_exp_WR1=Total_exp_WR1+Expected_gen_WR1\n        Total_exp_WR2=Total_exp_WR2+Expected_gen_WR2\n        Total_exp_WR3=Total_exp_WR3+Expected_gen_WR3\n        Total_exp_ABB=Total_exp_ABB+Expected_gen_ABB\n        Total_exp_Kostal_Piko=Total_exp_Kostal_Piko+Expected_gen_Kostal_Piko\n        Total_exp_Solarmax=Total_exp_Solarmax+Expected_gen_Solarmax\n        Total_exp_Hybrid=Total_exp_Hybrid+Expected_gen_Hybrid\n        Total_exp_Symo1=Total_exp_Symo1+Expected_gen_Symo1\n        Total_exp_Symo2=Total_exp_Symo2+Expected_gen_Symo2\n        Total_exp_wechselrichter1 = Total_exp_wechselrichter1 + Expected_gen_wechselrichter1\n        Total_exp_wechselrichter2 = Total_exp_wechselrichter2 + Expected_gen_wechselrichter1\n        Total_exp_Fronius1=Total_exp_Fronius1+Expected_gen_Fronius1\n\n\n             Total_ACT_Hybrid_Kostal =Total_ACT_Hybrid_Kostal+Hybrid_Kostal_kwh  \n             Total_ACT_Solar_Edge =Total_ACT_Solar_Edge+Solar_Edge_kwh  \n             Total_ACT_Kostal =Total_ACT_Kostal +Kostal_kwh  \n             Total_ACT_Symo =   Total_ACT_Symo +Symo_kwh  \n             Total_ACT_Kostal1 =Total_ACT_Kostal1 +Kostal1_kwh  \n             Total_ACT_Kostal2 =  Total_ACT_Kostal2 +Kostal2_kwh  \n             Total_ACT_WR1 = Total_ACT_WR1 +WR1_kwh  \n             Total_ACT_WR2 = Total_ACT_WR2+WR2_kwh  \n             Total_ACT_WR3 = Total_ACT_WR3+WR3_kwh  \n             Total_ACT_ABB = Total_ACT_ABB+ABB_kwh  \n             Total_ACT_Kostal_Piko =Total_ACT_Kostal_Piko +Kostal_Piko_kwh  \n             Total_ACT_Solarmax =   Total_ACT_Solarmax  +Solarmax_kwh  \n             Total_ACT_Hybrid =Total_ACT_Hybrid +Hybrid_kwh  \n             Total_ACT_Symo1 = Total_ACT_Symo1+Symo1_kwh  \n             Total_ACT_Symo2 =           Total_ACT_Symo2+Symo2_kwh  \n             Total_ACT_wechselrichter1 = Total_ACT_wechselrichter1+wechselrichter1_kwh  \n             Total_ACT_wechselrichter2 = Total_ACT_wechselrichter2+wechselrichter2_kwh  \n             Total_ACT_Fronius1 =        Total_ACT_Fronius1+Fronius1_kwh  \n\n        if ((Expected_gen_Hybrid_Kostal !=Hybrid_Kostal_kwh) || (Hybrid_Kostal_kwh==0))  {var GEN_LOSS_Hybrid_Kostal = (Expected_gen_Hybrid_Kostal-Hybrid_Kostal_kwh)} else{GEN_LOSS_Hybrid_Kostal=\"0\"}\n        if ((Expected_gen_Solar_Edge !=Solar_Edge_kwh) || (Solar_Edge_kwh==0))  {var GEN_LOSS_Solar_Edge = (Expected_gen_Solar_Edge-Solar_Edge_kwh)} else{GEN_LOSS_Solar_Edge=\"0\"}\n        if ((Expected_gen_Kostal !=Kostal_kwh) || (Kostal_kwh==0))  {var GEN_LOSS_Kostal = (Expected_gen_Kostal-Kostal_kwh)} else{GEN_LOSS_Kostal=\"0\"}\n        if ((Expected_gen_Symo !=Symo_kwh) || (Symo_kwh==0))  {var GEN_LOSS_Symo = (Expected_gen_Symo-Symo_kwh)} else{GEN_LOSS_Symo=\"0\"}\n        if ((Expected_gen_Kostal1 !=Kostal1_kwh) || (Kostal1_kwh==0))  {var GEN_LOSS_Kostal1 = (Expected_gen_Kostal1-Kostal1_kwh)} else{GEN_LOSS_Kostal1=\"0\"}\n        if ((Expected_gen_Kostal2 !=Kostal2_kwh) || (Kostal2_kwh==0))  {var GEN_LOSS_Kostal2 = (Expected_gen_Kostal2-Kostal2_kwh)} else{GEN_LOSS_Kostal2=\"0\"}\n        if ((Expected_gen_WR1 !=WR1_kwh) || (WR1_kwh==0))  {var GEN_LOSS_WR1 = (Expected_gen_WR1-WR1_kwh)} else{GEN_LOSS_WR1=\"0\"}\n        if ((Expected_gen_WR2 !=WR2_kwh) || (WR2_kwh==0))  {var GEN_LOSS_WR2 = (Expected_gen_WR2-WR2_kwh)} else{GEN_LOSS_WR2=\"0\"}\n        if ((Expected_gen_WR3 !=WR3_kwh) || (WR3_kwh==0))  {var GEN_LOSS_WR3 = (Expected_gen_WR3-WR3_kwh)} else{GEN_LOSS_WR3=\"0\"}\n        if ((Expected_gen_ABB !=ABB_kwh) || (ABB_kwh==0))  {var GEN_LOSS_ABB = (Expected_gen_ABB-ABB_kwh)} else{GEN_LOSS_ABB=\"0\"}\n        if ((Expected_gen_Kostal_Piko !=Kostal_Piko_kwh) || (Kostal_Piko_kwh==0))  {var GEN_LOSS_Kostal_Piko = (Expected_gen_Kostal_Piko-Kostal_Piko_kwh)} else{GEN_LOSS_Kostal_Piko=\"0\"}\n        if ((Expected_gen_Solarmax !=Solarmax_kwh) || (Solarmax_kwh==0))  {var GEN_LOSS_Solarmax = (Expected_gen_Solarmax-Solarmax_kwh)} else{GEN_LOSS_Solarmax=\"0\"}\n        if ((Expected_gen_Hybrid !=Hybrid_kwh) || (Hybrid_kwh==0))  {var GEN_LOSS_Hybrid = (Expected_gen_Hybrid-Hybrid_kwh)} else{GEN_LOSS_Hybrid=\"0\"}\n        if ((Expected_gen_Symo1 !=Symo1_kwh) || (Symo1_kwh==0))  {var GEN_LOSS_Symo1 = (Expected_gen_Symo1-Symo1_kwh)} else{GEN_LOSS_Symo1=\"0\"}\n        if ((Expected_gen_Symo2 !=Symo2_kwh) || (Symo2_kwh==0))  {var GEN_LOSS_Symo2 = (Expected_gen_Symo2-Symo2_kwh)} else{GEN_LOSS_Symo2=\"0\"}\n        if ((Expected_gen_wechselrichter1 !=wechselrichter1_kwh) || (wechselrichter1_kwh==0))  {var GEN_LOSS_wechselrichter1 = (Expected_gen_wechselrichter1-wechselrichter1_kwh)} else{GEN_LOSS_wechselrichter1=\"0\"}\n        if ((Expected_gen_wechselrichter2 !=wechselrichter2_kwh) || (wechselrichter2_kwh==0))  {var GEN_LOSS_wechselrichter2 = (Expected_gen_wechselrichter2-wechselrichter2_kwh)} else{GEN_LOSS_wechselrichter2=\"0\"}\n        if ((Expected_gen_Fronius1 !=Fronius1_kwh) || (Fronius1_kwh==0))  {var GEN_LOSS_Fronius1 = (Expected_gen_Fronius1-Fronius1_kwh)} else{GEN_LOSS_Fronius1=\"0\"}   \n\n\n            Total_gen_loss_Hybrid_Kostal = Total_gen_loss_Hybrid_Kostal +(Expected_gen_Hybrid_Kostal -Hybrid_Kostal_kwh)\n            Total_gen_loss_Solar_Edge = Total_gen_loss_Solar_Edge +(Expected_gen_Solar_Edge -Solar_Edge_kwh)\n            Total_gen_loss_Kostal = Total_gen_loss_Kostal +(Expected_gen_Kostal -Kostal_kwh)\n            Total_gen_loss_Symo = Total_gen_loss_Symo +(Expected_gen_Symo -Symo_kwh)\n            Total_gen_loss_Kostal1 = Total_gen_loss_Kostal1 +(Expected_gen_Kostal1 -Kostal1_kwh)\n            Total_gen_loss_Kostal2 = Total_gen_loss_Kostal2 +(Expected_gen_Kostal2 -Kostal2_kwh)\n            Total_gen_loss_WR1 = Total_gen_loss_WR1 +(Expected_gen_WR1 -WR1_kwh)\n            Total_gen_loss_WR2 = Total_gen_loss_WR2 +(Expected_gen_WR2 -WR2_kwh)\n            Total_gen_loss_WR3 = Total_gen_loss_WR3 +(Expected_gen_WR3 -WR3_kwh)\n            Total_gen_loss_ABB = Total_gen_loss_ABB +(Expected_gen_ABB -ABB_kwh)\n            Total_gen_loss_Kostal_Piko = Total_gen_loss_Kostal_Piko +(Expected_gen_Kostal_Piko -Kostal_Piko_kwh)\n            Total_gen_loss_Solarmax = Total_gen_loss_Solarmax +(Expected_gen_Solarmax -Solarmax_kwh)\n            Total_gen_loss_Hybrid = Total_gen_loss_Hybrid +(Expected_gen_Hybrid -Hybrid_kwh)\n            Total_gen_loss_Symo1 = Total_gen_loss_Symo1 +(Expected_gen_Symo1 -Symo1_kwh)\n            Total_gen_loss_Symo2 = Total_gen_loss_Symo2 +(Expected_gen_Symo2 -Symo2_kwh)\n            Total_gen_loss_wechselrichter1 = Total_gen_loss_wechselrichter1 +(Expected_gen_wechselrichter1 -wechselrichter1_kwh)\n            Total_gen_loss_wechselrichter2 = Total_gen_loss_wechselrichter2 +(Expected_gen_wechselrichter2 -wechselrichter2_kwh)\n            Total_gen_loss_Fronius1 = Total_gen_loss_Fronius1 +(Expected_gen_Fronius1 -Fronius1_kwh)\n        \n    \n     \n        var total_act_gen = [{\n            Total_ACT_Hybrid_Kostal,Total_ACT_Solar_Edge,Total_ACT_Kostal,Total_ACT_Symo,Total_ACT_Kostal1,Total_ACT_Kostal2,Total_ACT_WR1,Total_ACT_WR2,Total_ACT_WR3,Total_ACT_ABB,Total_ACT_Kostal_Piko,Total_ACT_Solarmax,Total_ACT_Hybrid,Total_ACT_Symo1,Total_ACT_Symo2,Total_ACT_wechselrichter1,Total_ACT_wechselrichter2,Total_ACT_Fronius1\n       }]\n        var total_exp_gen = [Total_exp_Hybrid_Kostal,Total_exp_Solar_Edge,Total_exp_Kostal,Total_exp_Symo,Total_exp_Kostal1,Total_exp_Kostal2,Total_exp_WR1,Total_exp_WR2,Total_exp_WR3,Total_exp_ABB,Total_exp_Kostal_Piko,Total_exp_Solarmax,Total_exp_Hybrid,Total_exp_Symo1,Total_exp_Symo2,Total_exp_wechselrichter1,Total_exp_wechselrichter2,Total_exp_Fronius1 ]\n\n        var totalgen_loss = [Total_gen_loss_Hybrid_Kostal,Total_gen_loss_Solar_Edge,Total_gen_loss_Kostal,Total_gen_loss_Symo,Total_gen_loss_Kostal1,Total_gen_loss_Kostal2,Total_gen_loss_WR1,Total_gen_loss_WR2,Total_gen_loss_WR3,Total_gen_loss_ABB,Total_gen_loss_Kostal_Piko,Total_gen_loss_Solarmax,Total_gen_loss_Hybrid,Total_gen_loss_Symo1,Total_gen_loss_Symo2,Total_gen_loss_wechselrichter1,Total_gen_loss_wechselrichter2,Total_gen_loss_Fronius1]\n\n\n        obj = {\n            DATE,\n            Hybrid_Kostal_kwh,\n            Hybrid_Kostal_Sp_Y,\n            Solar_Edge_kwh,\n            Solar_Edge_Sp_Y,\n            Kostal_kwh,\n            Kostal_Sp_Y,\n            Symo_kwh,\n            Symo_Sp_Y,\n            Kostal1_kwh,\n            Kostal1_Sp_Y,\n            Kostal2_kwh,\n            Kostal2_Sp_Y,\n            WR1_kwh,\n            WR1_Sp_Y,\n            WR2_kwh,\n            WR2_Sp_Y,\n            WR3_kwh,\n            WR3_Sp_Y,\n            ABB_kwh,\n            ABB_Sp_Y,\n            Kostal_Piko_kwh,\n            Kostal_Piko_Sp_Y,\n            Solarmax_kwh,\n            Solarmax_Sp_Y,\n            Hybrid_kwh,\n            Hybrid_Sp_Y,\n            Symo1_kwh,\n            Symo1_Sp_Y,\n            Symo2_kwh,\n            Symo2_Sp_Y,\n            wechselrichter1_kwh,\n            wechselrichter1_Sp_Y,\n            wechselrichter2_kwh,\n            wechselrichter2_Sp_Y,\n            Fronius1_kwh,\n            Fronius1_Sp_Y,\n            Max_sy,\n\n            Expected_gen_Hybrid_Kostal,\n            Expected_gen_Solar_Edge,\n            Expected_gen_Kostal,\n            Expected_gen_Symo,\n            Expected_gen_Kostal1,\n            Expected_gen_Kostal2,\n            Expected_gen_WR1,\n            Expected_gen_WR2,\n            Expected_gen_WR3,\n            Expected_gen_ABB,\n            Expected_gen_Kostal_Piko,\n            Expected_gen_Solarmax,\n            Expected_gen_Hybrid,\n            Expected_gen_Symo1,\n            Expected_gen_Symo2,\n            Expected_gen_wechselrichter1,\n            Expected_gen_wechselrichter2,\n            Expected_gen_Fronius1,\n\n            GEN_LOSS_Hybrid_Kostal,\n            GEN_LOSS_Solar_Edge,\n            GEN_LOSS_Kostal,\n            GEN_LOSS_Symo,\n            GEN_LOSS_Kostal1,\n            GEN_LOSS_Kostal2,\n            GEN_LOSS_WR1,\n            GEN_LOSS_WR2,\n            GEN_LOSS_WR3,\n            GEN_LOSS_ABB,\n            GEN_LOSS_Kostal_Piko,\n            GEN_LOSS_Solarmax,\n            GEN_LOSS_Hybrid,\n            GEN_LOSS_Symo1,\n            GEN_LOSS_Symo2,\n            GEN_LOSS_wechselrichter1,\n            GEN_LOSS_wechselrichter2,\n            GEN_LOSS_Fronius1\n\n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1400,
        "wires": [
            [
                "fcfff83fea6e35db"
            ]
        ]
    },
    {
        "id": "fcfff83fea6e35db",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1400,
        "wires": []
    },
    {
        "id": "98eafa9606a92079",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 250",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "80ecf4dd2421077c",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 890,
        "y": 1340,
        "wires": [
            [
                "09bf82533e9ffbbb"
            ]
        ]
    },
    {
        "id": "09bf82533e9ffbbb",
        "type": "csv",
        "z": "1383feb76aecd501",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1010,
        "y": 1340,
        "wires": [
            [
                "98eafa9606a92079",
                "71b389638e14a19b"
            ]
        ]
    },
    {
        "id": "93e7a74c21f4355f",
        "type": "delay",
        "z": "1383feb76aecd501",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 1340,
        "wires": [
            [
                "58eac0f4c6668d3e"
            ]
        ]
    },
    {
        "id": "81051674d448c889",
        "type": "debug",
        "z": "1383feb76aecd501",
        "name": "debug 251",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1500,
        "wires": []
    },
    {
        "id": "802e8fe207fce6c5",
        "type": "fs-ops-dir",
        "z": "1e25992b067a6e46",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/Stuhlmacher plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "98a92ae06f2b8c24"
            ]
        ]
    },
    {
        "id": "daede3ec1e824532",
        "type": "inject",
        "z": "1e25992b067a6e46",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "802e8fe207fce6c5"
            ]
        ]
    },
    {
        "id": "a1a161c4a1187030",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "006b6175417dc8ae",
                "0d9ef37baf6443cc",
                "fda3fa2b47fd01cc",
                "d21b7b513a2b1896",
                "01275c90a01a9bfc",
                "de05028358631e60"
            ]
        ]
    },
    {
        "id": "98a92ae06f2b8c24",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "a1a161c4a1187030"
            ]
        ]
    },
    {
        "id": "006b6175417dc8ae",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 223",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "0d9ef37baf6443cc",
        "type": "file in",
        "z": "1e25992b067a6e46",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "d4de5977b7caa93d"
            ]
        ]
    },
    {
        "id": "5239d10667a83374",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "e4c226dd9f09ae73"
            ]
        ]
    },
    {
        "id": "b2d11e4059f0688c",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "report generation plant info table",
        "info": "",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "a10382ac511e8146",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 224",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "d21b7b513a2b1896",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "5239d10667a83374"
            ]
        ]
    },
    {
        "id": "614f82dfd2be148b",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "report file",
        "func": "var plant = flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "82db7ac7adbd35e2"
            ]
        ]
    },
    {
        "id": "82db7ac7adbd35e2",
        "type": "file",
        "z": "1e25992b067a6e46",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "a10382ac511e8146"
            ]
        ]
    },
    {
        "id": "e4c226dd9f09ae73",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 610,
        "y": 520,
        "wires": [
            [
                "614f82dfd2be148b"
            ]
        ]
    },
    {
        "id": "81bbcf14c8f165ee",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 660,
        "wires": [
            [
                "eaba045891b97780"
            ]
        ]
    },
    {
        "id": "beb31e7216758fc4",
        "type": "file",
        "z": "1e25992b067a6e46",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 660,
        "wires": [
            [
                "0a40699a3039faf1"
            ]
        ]
    },
    {
        "id": "0a40699a3039faf1",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 225",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 660,
        "wires": []
    },
    {
        "id": "01275c90a01a9bfc",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 660,
        "wires": [
            [
                "134fe9ccda17c53f"
            ]
        ]
    },
    {
        "id": "b58d2a9454ac8cde",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 640,
        "y": 580,
        "wires": []
    },
    {
        "id": "134fe9ccda17c53f",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "81bbcf14c8f165ee"
            ]
        ]
    },
    {
        "id": "06b3f6f6ae3ec898",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "eaba045891b97780",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "beb31e7216758fc4"
            ]
        ]
    },
    {
        "id": "de05028358631e60",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 780,
        "wires": [
            [
                "33045ce57a1a98b6"
            ]
        ]
    },
    {
        "id": "70db26a31edab23a",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 780,
        "wires": [
            [
                "265c653d1c761139"
            ]
        ]
    },
    {
        "id": "265c653d1c761139",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants_\" + month + \"_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 780,
        "wires": [
            [
                "5267ccea52759a5c"
            ]
        ]
    },
    {
        "id": "5267ccea52759a5c",
        "type": "file",
        "z": "1e25992b067a6e46",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 780,
        "wires": [
            [
                "7d675e2fc02edcf0"
            ]
        ]
    },
    {
        "id": "7d675e2fc02edcf0",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 226",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 780,
        "wires": []
    },
    {
        "id": "d3a269a06307210c",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 860,
        "wires": []
    },
    {
        "id": "7dd6992b25494cc8",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "header correction",
        "info": "",
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "941983bd5447b567",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\nvar inv_array = []\nvar repeat_check = []\nfor (var i = 1; i < column.length; i++) {\n\n    function replaceSecondOccurrence(array, searchValue, replaceValue) {\n        const index = array.indexOf(searchValue);\n        if (index !== -1) {\n            const secondIndex = array.indexOf(searchValue, index + 1);\n            if (secondIndex !== -1) {\n                array.splice(secondIndex, 1, replaceValue);\n            }\n        }\n    }\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (plant == 1888372225) {\n        replaceSecondOccurrence(column, \"WR 1 (Wh)\", \"WR 3 (Wh)\");\n        if (column[i].match(\"WR\")) {\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n    }\n\n    else {\n        if (column[i].match(\"WR\")) {\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n        sy = \",Specific Yield_\" + inv_re\n        WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n    }\n\n\n\n    var obj = {\n        sy,\n        column_header,\n        column: column[i],\n        inv_re\n\n    }\n    results.push(obj)\n}\n\n\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            [
                "2bf570b9c6c76174"
            ]
        ]
    },
    {
        "id": "ea0fb4db7c73c21d",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "941983bd5447b567"
            ]
        ]
    },
    {
        "id": "2bf570b9c6c76174",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "92dd4377ea87d67d",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "fb7d8ab6eea92eab"
            ]
        ]
    },
    {
        "id": "58afe72a6b1e3d7c",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 229",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "fb7d8ab6eea92eab",
        "type": "change",
        "z": "1e25992b067a6e46",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 240,
        "wires": [
            [
                "58afe72a6b1e3d7c"
            ]
        ]
    },
    {
        "id": "d4de5977b7caa93d",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "ea0fb4db7c73c21d",
                "92dd4377ea87d67d"
            ]
        ]
    },
    {
        "id": "cec84932b6f67267",
        "type": "file in",
        "z": "1e25992b067a6e46",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/STUHLMACHER  PLANT LIST 04.07.203.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 380,
        "wires": [
            [
                "53960b4ca2f0ad78"
            ]
        ]
    },
    {
        "id": "53960b4ca2f0ad78",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "f08ba08eb4106118"
            ]
        ]
    },
    {
        "id": "f08ba08eb4106118",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name = msg.payload[i][\"PLANT NAME\"]\n    var S_NO = msg.payload[i][\"SERIAL NUMBER\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i][\"WR6 Gridegate\"]) || \"null\",\n                            ]\n                             \n\n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "52ff594efbbc4a56"
            ]
        ]
    },
    {
        "id": "4ec6c5d1e5442e91",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR6_Gridegate = 0\n\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR6_Gridegate = 0\n\n\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR6_Gridegate = 0\n\n\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n        var WR_1_kwh = (msg.payload[i][\"WR 1\"]) / 1000\n        var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR_2_kwh = (msg.payload[i][\"WR 2\"]) / 1000\n        var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR_3_kwh = (msg.payload[i][\"WR 3\"]) / 1000\n        var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR_4_kwh = (msg.payload[i][\"WR 4\"]) / 1000\n        var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR_5_kwh = (msg.payload[i][\"WR 5\"]) / 1000\n        var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR_6_kwh = (msg.payload[i][\"WR 6\"]) / 1000\n        var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR_7_kwh = (msg.payload[i][\"WR 7\"]) / 1000\n        var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR_8_kwh = (msg.payload[i][\"WR 8\"]) / 1000\n        var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR_9_kwh = (msg.payload[i][\"WR 9\"]) / 1000\n        var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR_10_kwh = (msg.payload[i][\"WR 10\"]) / 1000\n        var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR_11_kwh = (msg.payload[i][\"WR 11\"]) / 1000\n        var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR_6_Gridegate_kwh = (msg.payload[i][\"WR 6 Gridgate\"]) / 1000\n        var WR_6_Gridegate_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n   \n\n\n        var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n            WR_11_Sp_Y || 0, WR_6_Gridegate_Sp_Y || 0)\n\n        var WR1_INV_CAPACITY = inv_cap[0]\n        var WR2_INV_CAPACITY = inv_cap[1]\n        var WR3_INV_CAPACITY = inv_cap[2]\n        var WR4_INV_CAPACITY = inv_cap[3]\n        var WR5_INV_CAPACITY = inv_cap[4]\n        var WR6_INV_CAPACITY = inv_cap[5]\n        var WR7_INV_CAPACITY = inv_cap[6]\n        var WR8_INV_CAPACITY = inv_cap[7]\n        var WR9_INV_CAPACITY = inv_cap[8]\n        var WR10_INV_CAPACITY = inv_cap[9]\n        var WR11_INV_CAPACITY = inv_cap[10]\n        var WR6_Gridegate_INV_CAPACITY = inv_cap[11]\n\n  \n\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_INV_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_INV_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_INV_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_INV_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_INV_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_INV_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_INV_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n        var Expected_gen_WR6_Gridegate = Max_sy * WR6_Gridegate_INV_CAPACITY\n\n\n\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR6_Gridegate = Total_exp_WR6_Gridegate + Expected_gen_WR6_Gridegate\n\n     \n\n        Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n        Total_ACT_WR6_Gridegate = Total_ACT_WR6_Gridegate + WR_6_Gridegate_kwh\n\n    \n        if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR6_Gridegate != WR_6_Gridegate_kwh) || (WR_6_Gridegate_kwh == 0)) { var GEN_LOSS_WR6_Gridegate = (Expected_gen_WR6_Gridegate - WR_6_Gridegate_kwh) } else { GEN_LOSS_WR6_Gridegate = \"0\" }\n \n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n        Total_gen_loss_WR6_Gridegate = Total_gen_loss_WR6_Gridegate + (Expected_gen_WR6_Gridegate - WR_6_Gridegate_kwh)\n         \n        var total_act_gen = [{\n            Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR6_Gridegate}]\n        var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR6_Gridegate]\n        var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR6_Gridegate]\n\n\n        obj = {\n            DATE,\n            WR_1_kwh,\n            WR_1_Sp_Y,\n            WR_2_kwh,\n            WR_2_Sp_Y,\n            WR_3_kwh,\n            WR_3_Sp_Y,\n            WR_4_kwh,\n            WR_4_Sp_Y,\n            WR_5_kwh,\n            WR_5_Sp_Y,\n            WR_6_kwh,\n            WR_6_Sp_Y,\n            WR_7_kwh,\n            WR_7_Sp_Y,\n            WR_8_kwh,\n            WR_8_Sp_Y,\n            WR_9_kwh,\n            WR_9_Sp_Y,\n            WR_10_kwh,\n            WR_10_Sp_Y,\n            WR_11_kwh,\n            WR_11_Sp_Y,\n            WR_6_Gridegate_kwh,\n            WR_6_Gridegate_Sp_Y,\n           \n            Max_sy,\n\n      \n            Expected_gen_WR1: Expected_gen_WR1.toFixed(2),\n            Expected_gen_WR2: Expected_gen_WR2.toFixed(2),\n            Expected_gen_WR3: Expected_gen_WR3.toFixed(2),\n            Expected_gen_WR4: Expected_gen_WR4.toFixed(2),\n            Expected_gen_WR5: Expected_gen_WR5.toFixed(2),\n            Expected_gen_WR6: Expected_gen_WR6.toFixed(2),\n            Expected_gen_WR7: Expected_gen_WR7.toFixed(2),\n            Expected_gen_WR8: Expected_gen_WR8.toFixed(2),\n            Expected_gen_WR9: Expected_gen_WR9.toFixed(2),\n            Expected_gen_WR10: Expected_gen_WR10.toFixed(2),\n            Expected_gen_WR11: Expected_gen_WR11.toFixed(2),\n            Expected_gen_WR6_Gridegate:Expected_gen_WR6_Gridegate.toFixed(2),\n           \n            GEN_LOSS_WR1: parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2: parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3: parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4: parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5: parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6: parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7: parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8: parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9: parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10: parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11: parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR6_Gridegate: GEN_LOSS_WR6_Gridegate.toFixed(2),\n          \n          \n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 440,
        "wires": [
            [
                "081048d1d4fe6c72"
            ]
        ]
    },
    {
        "id": "081048d1d4fe6c72",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 230",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 440,
        "wires": []
    },
    {
        "id": "1683eb8317a42942",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 231",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "52ff594efbbc4a56",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 910,
        "y": 380,
        "wires": [
            [
                "387c7a1285200478"
            ]
        ]
    },
    {
        "id": "387c7a1285200478",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "1683eb8317a42942",
                "4ec6c5d1e5442e91"
            ]
        ]
    },
    {
        "id": "fda3fa2b47fd01cc",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "cec84932b6f67267"
            ]
        ]
    },
    {
        "id": "2a05c506887ef81a",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "calculation",
        "info": "",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "3732d824c65260ed",
        "type": "fs-ops-dir",
        "z": "1e25992b067a6e46",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/Stuhlmacher plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "6ab630976cb0d636"
            ]
        ]
    },
    {
        "id": "5d4691cb0c0e9c48",
        "type": "inject",
        "z": "1e25992b067a6e46",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "3732d824c65260ed",
                "5aa12d259ec78f91",
                "cbdc4d6e436a808d"
            ]
        ]
    },
    {
        "id": "f36f37fc7b9be324",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "813fa460d3c98476"
            ]
        ]
    },
    {
        "id": "6ab630976cb0d636",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1020,
        "wires": [
            [
                "f36f37fc7b9be324"
            ]
        ]
    },
    {
        "id": "813fa460d3c98476",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5aa12d259ec78f91",
        "type": "file in",
        "z": "1e25992b067a6e46",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/Stuhlmacher plants/1622208953_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 290,
        "y": 1140,
        "wires": [
            [
                "2bf14fea9f8dbb80"
            ]
        ]
    },
    {
        "id": "d9c6f371e89e231f",
        "type": "comment",
        "z": "1e25992b067a6e46",
        "name": "header correction",
        "info": "",
        "x": 980,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ceba3ec335b32bf5",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 780,
        "y": 1140,
        "wires": [
            [
                "7fa5cdb8c8c487a9"
            ]
        ]
    },
    {
        "id": "e4882186862d0d42",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e1de2e0e7b4773ee",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 790,
        "y": 1180,
        "wires": [
            [
                "2e7a4ebe8213ad5c"
            ]
        ]
    },
    {
        "id": "3badd23c8c123fec",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 248",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2e7a4ebe8213ad5c",
        "type": "change",
        "z": "1e25992b067a6e46",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1180,
        "wires": [
            [
                "3badd23c8c123fec"
            ]
        ]
    },
    {
        "id": "2bf14fea9f8dbb80",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1140,
        "wires": [
            [
                "ceba3ec335b32bf5",
                "e1de2e0e7b4773ee"
            ]
        ]
    },
    {
        "id": "33045ce57a1a98b6",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i],\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 780,
        "wires": [
            [
                "70db26a31edab23a"
            ]
        ]
    },
    {
        "id": "db1dd7d9c830341a",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\nvar inv_array = []\nvar repeat_check = []\nfor (var i = 1; i < column.length; i++) {\n\n    function replaceSecondOccurrence(array, searchValue, replaceValue) {\n        const index = array.indexOf(searchValue);\n        if (index !== -1) {\n            const secondIndex = array.indexOf(searchValue, index + 1);\n            if (secondIndex !== -1) {\n                array.splice(secondIndex, 1, replaceValue);\n            }\n        }\n    }\n\n    if (column[i].match(\"INV\")) {\n        var num = column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n        var WR = \",WR\" + num\n        var inv = \"WR\" + num\n        inv_array.push(inv)\n        column_header = column_header.concat(WR, sy);\n    }\n    else {\n        replaceSecondOccurrence(column, \"WR 1 (Wh)\", \"WR 3 (Wh)\");\n        var parts = column[i].split(\" \");\n        num = parts[1]\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n        var pattern = num.match(/^[0-9]+$/);\n        if (pattern != null) {\n            var WR = \",WR\" + pattern[0]\n            var inv = \"WR\" + pattern[0]\n            inv_array.push(inv)\n            column_header = column_header.concat(WR, sy);\n        }\n    }\n\n\n\n    var obj = {\n        num,\n        sy,\n        column_header,\n        pattern,\n        column: column[i],\n        parts\n    }\n    results.push(obj)\n}\n\n\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7fa5cdb8c8c487a9",
        "type": "function",
        "z": "1e25992b067a6e46",
        "d": true,
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = 1622208953 //filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\nvar column_header = \"date\"\nvar inv_array = []\nvar repeat_check = []\nfor (var i = 1; i < column.length; i++) {\n\n    function replaceSecondOccurrence(array, searchValue, replaceValue) {\n        const index = array.indexOf(searchValue);\n        if (index !== -1) {\n            const secondIndex = array.indexOf(searchValue, index + 1);\n            if (secondIndex !== -1) {\n                array.splice(secondIndex, 1, replaceValue);\n            }\n        }\n    }\n    var check = column[i].match(\"WR\")\n    var inv_re = column[i].substring(0, column[i].indexOf('('));\n    if (plant == 1888372225) {\n        replaceSecondOccurrence(column, \"WR 1 (Wh)\", \"WR 3 (Wh)\");\n        if (column[i].match(\"WR\")) {\n            var sy = \",Specific Yield_\" + inv_re\n            var WR = \",\" + inv_re\n            column_header = column_header.concat(WR, sy);\n        }\n    }\n\n  else{\n        if (column[i].match(\"WR\")){\n        var sy = \",Specific Yield_\" + inv_re\n        var WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);\n        }\n    }\n    if ((inv_re != \"average specific yield \") && (inv_re != \"Specific Yield \") && (inv_re != \"\") && (check == null)) {\n         sy = \",Specific Yield_\" + inv_re\n         WR = \",\" + inv_re\n        column_header = column_header.concat(WR, sy);}\n  \n    \n\n    var obj = {\n        sy,\n        column_header,\n        column: column[i],\n        inv_re\n\n    }\n    results.push(obj)\n}\n\n\nmsg.payload = results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns = column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 4,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1140,
        "wires": [
            [
                "e4882186862d0d42"
            ]
        ]
    },
    {
        "id": "72617415b13cc5e8",
        "type": "file in",
        "z": "1e25992b067a6e46",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/PLANT CAPACITY REF FILE/STUHLMACHER  PLANT LIST 04.07.203.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 1300,
        "wires": [
            [
                "1b373c63ea35da9e"
            ]
        ]
    },
    {
        "id": "1b373c63ea35da9e",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "70ac5833659ca9dc"
            ]
        ]
    },
    {
        "id": "70ac5833659ca9dc",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name = msg.payload[i][\"PLANT NAME\"]\n    var S_NO = msg.payload[i][\"SERIAL NUMBER\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i][\"WR6 Gridegate\"]) || \"null\",\n                            ]\n                             \n\n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1300,
        "wires": [
            [
                "c8c05f7f2007f1ea"
            ]
        ]
    },
    {
        "id": "a2ff26b82f80a867",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR6_Gridegate = 0\n\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR6_Gridegate = 0\n\n\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR6_Gridegate = 0\n\n\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n        var WR_1_kwh = (msg.payload[i][\"WR 1\"]) / 1000\n        var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n        var WR_2_kwh = (msg.payload[i][\"WR 2\"]) / 1000\n        var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_WR 2\"]\n        var WR_3_kwh = (msg.payload[i][\"WR 3\"]) / 1000\n        var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_WR 3\"]\n        var WR_4_kwh = (msg.payload[i][\"WR 4\"]) / 1000\n        var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_WR 4\"]\n        var WR_5_kwh = (msg.payload[i][\"WR 5\"]) / 1000\n        var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_WR 5\"]\n        var WR_6_kwh = (msg.payload[i][\"WR 6\"]) / 1000\n        var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_WR 6\"]\n        var WR_7_kwh = (msg.payload[i][\"WR 7\"]) / 1000\n        var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_WR 7\"]\n        var WR_8_kwh = (msg.payload[i][\"WR 8\"]) / 1000\n        var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_WR 8\"]\n        var WR_9_kwh = (msg.payload[i][\"WR 9\"]) / 1000\n        var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_WR 9\"]\n        var WR_10_kwh = (msg.payload[i][\"WR 10\"]) / 1000\n        var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_WR 10\"]\n        var WR_11_kwh = (msg.payload[i][\"WR 11\"]) / 1000\n        var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_WR 11\"]\n        var WR_6_Gridegate_kwh = (msg.payload[i][\"WR 6 Gridgate\"]) / 1000\n        var WR_6_Gridegate_Sp_Y = msg.payload[i][\"Specific Yield_WR 1\"]\n   \n\n\n        var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n            WR_11_Sp_Y || 0, WR_6_Gridegate_Sp_Y || 0)\n\n        var WR1_INV_CAPACITY = inv_cap[0]\n        var WR2_INV_CAPACITY = inv_cap[1]\n        var WR3_INV_CAPACITY = inv_cap[2]\n        var WR4_INV_CAPACITY = inv_cap[3]\n        var WR5_INV_CAPACITY = inv_cap[4]\n        var WR6_INV_CAPACITY = inv_cap[5]\n        var WR7_INV_CAPACITY = inv_cap[6]\n        var WR8_INV_CAPACITY = inv_cap[7]\n        var WR9_INV_CAPACITY = inv_cap[8]\n        var WR10_INV_CAPACITY = inv_cap[9]\n        var WR11_INV_CAPACITY = inv_cap[10]\n        var WR6_Gridegate_INV_CAPACITY = inv_cap[11]\n\n  \n\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_INV_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_INV_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_INV_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_INV_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_INV_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_INV_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_INV_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n        var Expected_gen_WR6_Gridegate = Max_sy * WR6_Gridegate_INV_CAPACITY\n\n\n\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR6_Gridegate = Total_exp_WR6_Gridegate + Expected_gen_WR6_Gridegate\n\n     \n\n        Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n        Total_ACT_WR6_Gridegate = Total_ACT_WR6_Gridegate + WR_6_Gridegate_kwh\n\n    \n        if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR6_Gridegate != WR_6_Gridegate_kwh) || (WR_6_Gridegate_kwh == 0)) { var GEN_LOSS_WR6_Gridegate = (Expected_gen_WR6_Gridegate - WR_6_Gridegate_kwh) } else { GEN_LOSS_WR6_Gridegate = \"0\" }\n \n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n        Total_gen_loss_WR6_Gridegate = Total_gen_loss_WR6_Gridegate + (Expected_gen_WR6_Gridegate - WR_6_Gridegate_kwh)\n         \n        var total_act_gen = [{\n            Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR6_Gridegate}]\n        var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR6_Gridegate]\n        var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR6_Gridegate]\n\n\n        obj = {\n            DATE,\n            WR_1_kwh,\n            WR_1_Sp_Y,\n            WR_2_kwh,\n            WR_2_Sp_Y,\n            WR_3_kwh,\n            WR_3_Sp_Y,\n            WR_4_kwh,\n            WR_4_Sp_Y,\n            WR_5_kwh,\n            WR_5_Sp_Y,\n            WR_6_kwh,\n            WR_6_Sp_Y,\n            WR_7_kwh,\n            WR_7_Sp_Y,\n            WR_8_kwh,\n            WR_8_Sp_Y,\n            WR_9_kwh,\n            WR_9_Sp_Y,\n            WR_10_kwh,\n            WR_10_Sp_Y,\n            WR_11_kwh,\n            WR_11_Sp_Y,\n            WR_6_Gridegate_kwh,\n            WR_6_Gridegate_Sp_Y,\n           \n            Max_sy,\n\n      \n            Expected_gen_WR1: Expected_gen_WR1.toFixed(2),\n            Expected_gen_WR2: Expected_gen_WR2.toFixed(2),\n            Expected_gen_WR3: Expected_gen_WR3.toFixed(2),\n            Expected_gen_WR4: Expected_gen_WR4.toFixed(2),\n            Expected_gen_WR5: Expected_gen_WR5.toFixed(2),\n            Expected_gen_WR6: Expected_gen_WR6.toFixed(2),\n            Expected_gen_WR7: Expected_gen_WR7.toFixed(2),\n            Expected_gen_WR8: Expected_gen_WR8.toFixed(2),\n            Expected_gen_WR9: Expected_gen_WR9.toFixed(2),\n            Expected_gen_WR10: Expected_gen_WR10.toFixed(2),\n            Expected_gen_WR11: Expected_gen_WR11.toFixed(2),\n            Expected_gen_WR6_Gridegate:Expected_gen_WR6_Gridegate.toFixed(2),\n           \n            GEN_LOSS_WR1: parseFloat(GEN_LOSS_WR1).toFixed(2),\n            GEN_LOSS_WR2: parseFloat(GEN_LOSS_WR2).toFixed(2),\n            GEN_LOSS_WR3: parseFloat(GEN_LOSS_WR3).toFixed(2),\n            GEN_LOSS_WR4: parseFloat(GEN_LOSS_WR4).toFixed(2),\n            GEN_LOSS_WR5: parseFloat(GEN_LOSS_WR5).toFixed(2),\n            GEN_LOSS_WR6: parseFloat(GEN_LOSS_WR6).toFixed(2),\n            GEN_LOSS_WR7: parseFloat(GEN_LOSS_WR7).toFixed(2),\n            GEN_LOSS_WR8: parseFloat(GEN_LOSS_WR8).toFixed(2),\n            GEN_LOSS_WR9: parseFloat(GEN_LOSS_WR9).toFixed(2),\n            GEN_LOSS_WR10: parseFloat(GEN_LOSS_WR10).toFixed(2),\n            GEN_LOSS_WR11: parseFloat(GEN_LOSS_WR11).toFixed(2),\n            GEN_LOSS_WR6_Gridegate: GEN_LOSS_WR6_Gridegate.toFixed(2),\n          \n          \n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1360,
        "wires": [
            [
                "dc2dfa7aa96d5dab"
            ]
        ]
    },
    {
        "id": "dc2dfa7aa96d5dab",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 267",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1360,
        "wires": []
    },
    {
        "id": "aae6821ebffa35b3",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 268",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c8c05f7f2007f1ea",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 930,
        "y": 1300,
        "wires": [
            [
                "0293a105d79bce30"
            ]
        ]
    },
    {
        "id": "0293a105d79bce30",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1050,
        "y": 1300,
        "wires": [
            [
                "aae6821ebffa35b3",
                "a2ff26b82f80a867"
            ]
        ]
    },
    {
        "id": "cbdc4d6e436a808d",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "72617415b13cc5e8"
            ]
        ]
    },
    {
        "id": "f55545f4aed364c5",
        "type": "csv",
        "z": "1e25992b067a6e46",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 650,
        "y": 1440,
        "wires": [
            [
                "4e4aa29dc3acb050"
            ]
        ]
    },
    {
        "id": "233af3b4b89e7f09",
        "type": "file",
        "z": "1e25992b067a6e46",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 950,
        "y": 1440,
        "wires": [
            [
                "01cceeac060bffc3"
            ]
        ]
    },
    {
        "id": "01cceeac060bffc3",
        "type": "debug",
        "z": "1e25992b067a6e46",
        "name": "debug 269",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6f1e2bc9d4c7bea2",
        "type": "delay",
        "z": "1e25992b067a6e46",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1440,
        "wires": [
            [
                "681cb7b88cdade40"
            ]
        ]
    },
    {
        "id": "681cb7b88cdade40",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1440,
        "wires": [
            [
                "f55545f4aed364c5"
            ]
        ]
    },
    {
        "id": "4e4aa29dc3acb050",
        "type": "function",
        "z": "1e25992b067a6e46",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/Stuhlmacher plants_\" + month + \"_report/\" + plant+ \"_\" + month + \"test_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1440,
        "wires": [
            [
                "233af3b4b89e7f09"
            ]
        ]
    },
    {
        "id": "d78096aa11b327ee",
        "type": "fs-ops-dir",
        "z": "293ee0eba4be6517",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/wierig plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "7dd5d4ec951c2641"
            ]
        ]
    },
    {
        "id": "a1365bd4b1fabe86",
        "type": "inject",
        "z": "293ee0eba4be6517",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "d78096aa11b327ee"
            ]
        ]
    },
    {
        "id": "336ccb90e0bbed57",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "553c45216aa70b70",
                "264e8a0f0545e5c5",
                "5cb954fbab911278",
                "7a2d79ed63a9a759",
                "539000b8fe78980c",
                "c63fd6d509954146"
            ]
        ]
    },
    {
        "id": "7dd5d4ec951c2641",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "336ccb90e0bbed57"
            ]
        ]
    },
    {
        "id": "553c45216aa70b70",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 234",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "264e8a0f0545e5c5",
        "type": "file in",
        "z": "293ee0eba4be6517",
        "name": "Meter data",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "cec70a3683ec2b74"
            ]
        ]
    },
    {
        "id": "a5a7fe56152741ae",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "plant info",
        "func": "\nvar plant =flow.get(\"plant_info\")\n\n\nvar array = [\n    {\n        HEADER: \"PLANT_NAME\",\n        plant_info: plant[0].Plant_Name\n    },\n    {\n        HEADER: \"S.NO\" ,\n        plant_info: plant[0].S_NO    \n    },\n    {\n        HEADER: \"No of Inverters \",\n        plant_info: plant[0].INV_NO\n    }\n];\nmsg.payload=array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "e2a591302f13427a"
            ]
        ]
    },
    {
        "id": "2b4962cbb640fd96",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "report generation plant info table",
        "info": "",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "c8fc09f28abe7ee1",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "7a2d79ed63a9a759",
        "type": "delay",
        "z": "293ee0eba4be6517",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "a5a7fe56152741ae"
            ]
        ]
    },
    {
        "id": "a109e0dd10683c1a",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "report file",
        "func": "var plant = flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_report/\" + plant+\"_\"+month+\"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "b745423bdda6fb65"
            ]
        ]
    },
    {
        "id": "b745423bdda6fb65",
        "type": "file",
        "z": "293ee0eba4be6517",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "c8fc09f28abe7ee1"
            ]
        ]
    },
    {
        "id": "e2a591302f13427a",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 610,
        "y": 520,
        "wires": [
            [
                "a109e0dd10683c1a"
            ]
        ]
    },
    {
        "id": "14d37199f9a70a51",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 570,
        "y": 660,
        "wires": [
            [
                "4b658e3f83edec89"
            ]
        ]
    },
    {
        "id": "bda18df9ea89afd5",
        "type": "file",
        "z": "293ee0eba4be6517",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 660,
        "wires": [
            [
                "e4ef0f09c55d7224"
            ]
        ]
    },
    {
        "id": "e4ef0f09c55d7224",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 236",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 660,
        "wires": []
    },
    {
        "id": "539000b8fe78980c",
        "type": "delay",
        "z": "293ee0eba4be6517",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 660,
        "wires": [
            [
                "46a83ee8473ff914"
            ]
        ]
    },
    {
        "id": "2ac50ac7026f6028",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "report generation 1st TABLE",
        "info": "",
        "x": 640,
        "y": 580,
        "wires": []
    },
    {
        "id": "46a83ee8473ff914",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "setup 1st Table",
        "func": "var array = flow.get(\"out\");\nvar result=[] \nvar final_out=[]\nvar column_header = \"DATE\"\nvar num;\nfor(var j = 0;j < array.length; j++ ){\n    result = []\n    const values = Object.values(array[j]);\n    const value_l = Object.values(array[0]).length;\n    const keys = Object.keys(array[0]);\n    for (let i = 0; i <value_l ; i++) {\n         if ((isNaN(values[i])&&(i!=0)))\n         {}\n         else{\n            result.push(values[i])\n            if(j==0){\n            var key=keys[i]\n            if(i!=0){\n            var column_header = column_header.concat(\",\",key); \n            }       \n            }   \n        }  \n    }\n    final_out.push(result)\n}\n\nmsg.payload=final_out\nmsg.columns = column_header\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "14d37199f9a70a51"
            ]
        ]
    },
    {
        "id": "cc2237b24636682c",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "report generation 2nd TABLE",
        "info": "",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "4b658e3f83edec89",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "bda18df9ea89afd5"
            ]
        ]
    },
    {
        "id": "c63fd6d509954146",
        "type": "delay",
        "z": "293ee0eba4be6517",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 780,
        "wires": [
            [
                "59d6c688e6e6424d"
            ]
        ]
    },
    {
        "id": "438f548c1c272f2e",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 590,
        "y": 780,
        "wires": [
            [
                "89b7b6250ddf6002"
            ]
        ]
    },
    {
        "id": "89b7b6250ddf6002",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "report file",
        "func": "var plant=flow.get(\"live_plant\");\nvar month = flow.get(\"month\");\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig_plants_report/\" + plant + \"_\" + month + \"_report.csv\"\n//msg.payload.filename=\"/ftp/solarlog/archive\"\n//msg.filename=\"Medak_\"+c+\".csv\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 780,
        "wires": [
            [
                "c88ef5e67279cdb4"
            ]
        ]
    },
    {
        "id": "c88ef5e67279cdb4",
        "type": "file",
        "z": "293ee0eba4be6517",
        "name": "TEST O/P",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 780,
        "wires": [
            [
                "49eb6b2aa6d1ce02"
            ]
        ]
    },
    {
        "id": "49eb6b2aa6d1ce02",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 237",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 780,
        "wires": []
    },
    {
        "id": "78e97a480c2bf707",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 238",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 860,
        "wires": []
    },
    {
        "id": "73552a47758bba81",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "header correction",
        "info": "",
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "bb1d9ffa2a4e51d9",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nvar inv_array = []\nfor (var i = 1; i < column.length; i++) {\n\n    const parts = column[i].split(\" \");\n    if (column[i].match(\"INV\")){\n        var num=column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n            var WR = \",WR\" + num\n            var inv = \"WR\" + num\n            inv_array.push(inv)\n            column_header = column_header.concat(WR, sy);\n    }\n    else{\n     var num = parts[1];\n    var sy =\",Specific Yield_\" + num + \"(kWh / kWp)\"\n    var pattern = num.match(/^[0-9]+$/);\n    if (pattern != null){\n        var WR = \",WR\" + pattern[0]\n        var inv = \"WR\" + pattern[0]\n        inv_array.push(inv)\n    column_header = column_header.concat(WR, sy);\n    }\n    }\n\nvar obj={\n    num, \n    sy,\n    column_header,\n    pattern\n    \n}\nresults.push(obj)\n}\n\n\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            [
                "3efe4d39f65ca5ee"
            ]
        ]
    },
    {
        "id": "4e34f23d407fdaa1",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "bb1d9ffa2a4e51d9"
            ]
        ]
    },
    {
        "id": "3efe4d39f65ca5ee",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 239",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "35b7500fa73fe069",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "809a4a093345c960"
            ]
        ]
    },
    {
        "id": "c47dfec26ff6a069",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "809a4a093345c960",
        "type": "change",
        "z": "293ee0eba4be6517",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 240,
        "wires": [
            [
                "c47dfec26ff6a069"
            ]
        ]
    },
    {
        "id": "cec70a3683ec2b74",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "4e34f23d407fdaa1",
                "35b7500fa73fe069"
            ]
        ]
    },
    {
        "id": "bd805ecbe8e3fce7",
        "type": "file in",
        "z": "293ee0eba4be6517",
        "name": "REF csv",
        "filename": "/home/iplon/Downloads/wierig plants name list (2).csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 380,
        "wires": [
            [
                "6155efd7685dbb59"
            ]
        ]
    },
    {
        "id": "6155efd7685dbb59",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 530,
        "y": 380,
        "wires": [
            [
                "f001b005070f3c71"
            ]
        ]
    },
    {
        "id": "f001b005070f3c71",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "comparison with ref csv",
        "func": "var live_plant = flow.get(\"live_plant\")\nvar column = flow.get(\"column\")\nvar payload = flow.get(\"payload\");\nvar array=[]\nvar payload_array = []\n\nfor (var k = 0; k < payload.length; k++)\n{\n    var final = [payload[k].col1, payload[k].col2, payload[k].col3, payload[k].col4, payload[k].col5, payload[k].col6, payload[k].col7, payload[k].col8, payload[k].col9, payload[k].col10, payload[k].col11, payload[k].col12, payload[k].col13, payload[k].col14, payload[k].col15, payload[k].col16, payload[k].col17, payload[k].col18, payload[k].col19, payload[k].col20, payload[k].col21, payload[k].col22, payload[k].col23, payload[k].col24, payload[k].col25, payload[k].col26, payload[k].col27, payload[k].col28, payload[k].col29, payload[k].col30, payload[k].col31, payload[k].col32, payload[k].col33, payload[k].col34, payload[k].col35, payload[k].col36, payload[k].col37, payload[k].col38, payload[k].col39, payload[k].col40, payload[k].col41, payload[k].col42, payload[k].col43, payload[k].col44, payload[k].col45, payload[k].col46, payload[k].col47, payload[k].col48, payload[k].col49, payload[k].col50, payload[k].col51, payload[k].col52, payload[k].col53, payload[k].col54, payload[k].col55, payload[k].col56, payload[k].col57, payload[k].col58, payload[k].col59, payload[k].col60, payload[k].col61, payload[k].col62, payload[k].col63, payload[k].col64, payload[k].col65, payload[k].col66, payload[k].col67, payload[k].col68, payload[k].col69, payload[k].col70, payload[k].col71, payload[k].col72, payload[k].col73, payload[k].col74, payload[k].col75, payload[k].col76, payload[k].col77, payload[k].col78, payload[k].col79, payload[k].col80, payload[k].col81, payload[k].col82, payload[k].col83, payload[k].col84, payload[k].col85, payload[k].col86, payload[k].col87, payload[k].col88, payload[k].col89, payload[k].col90, payload[k].col91, payload[k].col92, payload[k].col93, payload[k].col94, payload[k].col95, payload[k].col96, payload[k].col97, payload[k].col98, payload[k].col99, payload[k].col100]\npayload_array.push(final)\n}\nfor (var i = 0; i <msg.payload.length; i++)\n{\n    var Plant_Name=msg.payload[i][\"Plant Name\"]\n    var S_NO=msg.payload[i][\"S.NO\"]\n    var INV_NO=parseInt(msg.payload[i][\"NO OF INVERTER\"])\n  \n    if (live_plant == S_NO) \n      {\n             var capacity = [parseFloat(msg.payload[i].WR1) || \"null\",\n                             parseFloat(msg.payload[i].WR2) || \"null\",\n                             parseFloat(msg.payload[i].WR3) || \"null\",\n                             parseFloat(msg.payload[i].WR4) || \"null\",\n                             parseFloat(msg.payload[i].WR5) || \"null\",\n                             parseFloat(msg.payload[i].WR6) || \"null\",\n                             parseFloat(msg.payload[i].WR7) || \"null\",\n                             parseFloat(msg.payload[i].WR8) || \"null\",\n                             parseFloat(msg.payload[i].WR9) || \"null\",\n                             parseFloat(msg.payload[i].WR10) || \"null\",\n                             parseFloat(msg.payload[i].WR11) || \"null\",\n                             parseFloat(msg.payload[i].WR12) || \"null\",\n                             parseFloat(msg.payload[i].WR13) || \"null\",\n                             parseFloat(msg.payload[i].WR14) || \"null\",\n                             parseFloat(msg.payload[i].WR15) || \"null\",\n                             parseFloat(msg.payload[i].WR16) || \"null\",\n                             parseFloat(msg.payload[i].WR17) || \"null\",\n                             parseFloat(msg.payload[i].WR18) || \"null\",\n                             parseFloat(msg.payload[i].WR19) || \"null\",\n                             parseFloat(msg.payload[i].WR20) || \"null\",\n                             parseFloat(msg.payload[i].WR21) || \"null\",\n                             parseFloat(msg.payload[i].WR22) || \"null\",\n                             parseFloat(msg.payload[i].WR23) || \"null\",\n                             parseFloat(msg.payload[i].WR24) || \"null\",\n                             parseFloat(msg.payload[i].WR25) || \"null\",\n                             parseFloat(msg.payload[i].WR26) || \"null\",\n                             parseFloat(msg.payload[i].WR27) || \"null\"]\n                             \n                             \n                             \n                             \n                             \n                \n   var obj={\n    Plant_Name,\n    S_NO,\n    INV_NO\n}\n      \narray.push(obj)     \n      }\n}\nmsg.columns = column\nmsg.payload=payload_array\n\nflow.set(\"INV_CAPACITY\", capacity);\nflow.set(\"plant_info\",array) \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 380,
        "wires": [
            [
                "73714a666101bd63"
            ]
        ]
    },
    {
        "id": "9264a55959640b82",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "calculation logic",
        "func": "var inv_cap = flow.get(\"INV_CAPACITY\");\nvar array = []\nvar Total_exp_WR1 = 0\nvar Total_exp_WR2 = 0\nvar Total_exp_WR3 = 0\nvar Total_exp_WR4 = 0\nvar Total_exp_WR5 = 0\nvar Total_exp_WR6 = 0\nvar Total_exp_WR7 = 0\nvar Total_exp_WR8 = 0\nvar Total_exp_WR9 = 0\nvar Total_exp_WR10 = 0\nvar Total_exp_WR11 = 0\nvar Total_exp_WR12 = 0\nvar Total_exp_WR13 = 0\nvar Total_exp_WR14 = 0\nvar Total_exp_WR15 = 0\nvar Total_exp_WR16 = 0\nvar Total_exp_WR17 = 0\nvar Total_exp_WR18 = 0\nvar Total_exp_WR19 = 0\nvar Total_exp_WR20 = 0\nvar Total_exp_WR21 = 0\nvar Total_exp_WR22 = 0\nvar Total_exp_WR23 = 0\nvar Total_exp_WR24 = 0\nvar Total_exp_WR25 = 0\nvar Total_exp_WR26 = 0\nvar Total_exp_WR27 = 0\n\n\n\nvar Total_ACT_WR1 = 0\nvar Total_ACT_WR2 = 0\nvar Total_ACT_WR3 = 0\nvar Total_ACT_WR4 = 0\nvar Total_ACT_WR5 = 0\nvar Total_ACT_WR6 = 0\nvar Total_ACT_WR7 = 0\nvar Total_ACT_WR8 = 0\nvar Total_ACT_WR9 = 0\nvar Total_ACT_WR10 = 0\nvar Total_ACT_WR11 = 0\nvar Total_ACT_WR12 = 0\nvar Total_ACT_WR13 = 0\nvar Total_ACT_WR14 = 0\nvar Total_ACT_WR15 = 0\nvar Total_ACT_WR16 = 0\nvar Total_ACT_WR17 = 0\nvar Total_ACT_WR18 = 0\nvar Total_ACT_WR19 = 0\nvar Total_ACT_WR20 = 0\nvar Total_ACT_WR21 = 0\nvar Total_ACT_WR22 = 0\nvar Total_ACT_WR23 = 0\nvar Total_ACT_WR24 = 0\nvar Total_ACT_WR25 = 0\nvar Total_ACT_WR26 = 0\nvar Total_ACT_WR27 = 0\n\nvar Total_gen_loss_WR1 = 0\nvar Total_gen_loss_WR2 = 0\nvar Total_gen_loss_WR3 = 0\nvar Total_gen_loss_WR4 = 0\nvar Total_gen_loss_WR5 = 0\nvar Total_gen_loss_WR6 = 0\nvar Total_gen_loss_WR7 = 0\nvar Total_gen_loss_WR8 = 0\nvar Total_gen_loss_WR9 = 0\nvar Total_gen_loss_WR10 = 0\nvar Total_gen_loss_WR11 = 0\nvar Total_gen_loss_WR12 = 0\nvar Total_gen_loss_WR13 = 0\nvar Total_gen_loss_WR14 = 0\nvar Total_gen_loss_WR15 = 0\nvar Total_gen_loss_WR16 = 0\nvar Total_gen_loss_WR17 = 0\nvar Total_gen_loss_WR18 = 0\nvar Total_gen_loss_WR19 = 0\nvar Total_gen_loss_WR20 = 0\nvar Total_gen_loss_WR21 = 0\nvar Total_gen_loss_WR22 = 0\nvar Total_gen_loss_WR23 = 0\nvar Total_gen_loss_WR24 = 0\nvar Total_gen_loss_WR25 = 0\nvar Total_gen_loss_WR26 = 0\nvar Total_gen_loss_WR27 = 0\n\n\nvar obj\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (i < msg.payload.length) {\n        var DATE = msg.payload[i].date\n        var WR_1_kwh = (msg.payload[i].WR1) / 1000\n        var WR_1_Sp_Y = msg.payload[i][\"Specific Yield_1(kWh / kWp)\"]\n        var WR_2_kwh = (msg.payload[i].WR2) / 1000\n        var WR_2_Sp_Y = msg.payload[i][\"Specific Yield_2(kWh / kWp)\"]\n        var WR_3_kwh = (msg.payload[i].WR3) / 1000\n        var WR_3_Sp_Y = msg.payload[i][\"Specific Yield_3(kWh / kWp)\"]\n        var WR_4_kwh = (msg.payload[i].WR4) / 1000\n        var WR_4_Sp_Y = msg.payload[i][\"Specific Yield_4(kWh / kWp)\"]\n        var WR_5_kwh = (msg.payload[i].WR5) / 1000\n        var WR_5_Sp_Y = msg.payload[i][\"Specific Yield_5(kWh / kWp)\"]\n        var WR_6_kwh = (msg.payload[i].WR6) / 1000\n        var WR_6_Sp_Y = msg.payload[i][\"Specific Yield_6(kWh / kWp)\"]\n        var WR_7_kwh = (msg.payload[i].WR7) / 1000\n        var WR_7_Sp_Y = msg.payload[i][\"Specific Yield_7(kWh / kWp)\"]\n        var WR_8_kwh = (msg.payload[i].WR8) / 1000\n        var WR_8_Sp_Y = msg.payload[i][\"Specific Yield_8(kWh / kWp)\"]\n        var WR_9_kwh = (msg.payload[i].WR9) / 1000\n        var WR_9_Sp_Y = msg.payload[i][\"Specific Yield_9(kWh / kWp)\"]\n        var WR_10_kwh = (msg.payload[i].WR10) / 1000\n        var WR_10_Sp_Y = msg.payload[i][\"Specific Yield_10(kWh / kWp)\"]\n        var WR_11_kwh = (msg.payload[i].WR11) / 1000\n        var WR_11_Sp_Y = msg.payload[i][\"Specific Yield_11(kWh / kWp)\"]\n        var WR_12_kwh = (msg.payload[i].WR12) / 1000\n        var WR_12_Sp_Y = msg.payload[i][\"Specific Yield_12(kWh / kWp)\"]\n        var WR_13_kwh = (msg.payload[i].WR13) / 1000\n        var WR_13_Sp_Y = msg.payload[i][\"Specific Yield_13(kWh / kWp)\"]\n        var WR_14_kwh = (msg.payload[i].WR14) / 1000\n        var WR_14_Sp_Y = msg.payload[i][\"Specific Yield_14(kWh / kWp)\"]\n        var WR_15_kwh = (msg.payload[i].WR15) / 1000\n        var WR_15_Sp_Y = msg.payload[i][\"Specific Yield_15(kWh / kWp)\"]\n        var WR_16_kwh = (msg.payload[i].WR16) / 1000\n        var WR_16_Sp_Y = msg.payload[i][\"Specific Yield_16(kWh / kWp)\"]\n        var WR_17_kwh = (msg.payload[i].WR17) / 1000\n        var WR_17_Sp_Y = msg.payload[i][\"Specific Yield_17(kWh / kWp)\"]\n        var WR_18_kwh = (msg.payload[i].WR18) / 1000\n        var WR_18_Sp_Y = msg.payload[i][\"Specific Yield_18(kWh / kWp)\"]\n        var WR_19_kwh = (msg.payload[i].WR19) / 1000\n        var WR_19_Sp_Y = msg.payload[i][\"Specific Yield_19(kWh / kWp)\"]\n        var WR_20_kwh = (msg.payload[i].WR20) / 1000\n        var WR_20_Sp_Y = msg.payload[i][\"Specific Yield_20(kWh / kWp)\"]\n        var WR_21_kwh = (msg.payload[i].WR21) / 1000\n        var WR_21_Sp_Y = msg.payload[i][\"Specific Yield_21(kWh / kWp)\"]\n        var WR_22_kwh = (msg.payload[i].WR22) / 1000\n        var WR_22_Sp_Y = msg.payload[i][\"Specific Yield_22(kWh / kWp)\"]\n        var WR_23_kwh = (msg.payload[i].WR23) / 1000\n        var WR_23_Sp_Y = msg.payload[i][\"Specific Yield_23(kWh / kWp)\"]\n        var WR_24_kwh = (msg.payload[i].WR24) / 1000\n        var WR_24_Sp_Y = msg.payload[i][\"Specific Yield_24(kWh / kWp)\"]\n        var WR_25_kwh = (msg.payload[i].WR25) / 1000\n        var WR_25_Sp_Y = msg.payload[i][\"Specific Yield_25(kWh / kWp)\"]\n        var WR_26_kwh = (msg.payload[i].WR26) / 1000\n        var WR_26_Sp_Y = msg.payload[i][\"Specific Yield_26(kWh / kWp)\"]\n        var WR_27_kwh = (msg.payload[i].WR27) / 1000\n        var WR_27_Sp_Y = msg.payload[i][\"Specific Yield_27(kWh / kWp)\"]\n\n\n        var Max_sy = Math.max(WR_1_Sp_Y || 0, WR_2_Sp_Y || 0, WR_3_Sp_Y || 0, WR_4_Sp_Y || 0, WR_5_Sp_Y || 0, WR_6_Sp_Y || 0, WR_7_Sp_Y || 0, WR_8_Sp_Y || 0, WR_9_Sp_Y || 0, WR_10_Sp_Y || 0,\n            WR_11_Sp_Y || 0, WR_12_Sp_Y || 0, WR_13_Sp_Y || 0, WR_14_Sp_Y || 0, WR_15_Sp_Y || 0, WR_16_Sp_Y || 0, WR_17_Sp_Y || 0, WR_18_Sp_Y || 0, WR_19_Sp_Y || 0, WR_20_Sp_Y || 0,\n            WR_21_Sp_Y || 0, WR_22_Sp_Y || 0, WR_23_Sp_Y || 0, WR_24_Sp_Y || 0, WR_25_Sp_Y || 0, WR_26_Sp_Y || 0, WR_27_Sp_Y || 0)\n\n        var WR1_INV_CAPACITY = inv_cap[0]\n        var WR2_INV_CAPACITY = inv_cap[1]\n        var WR3_INV_CAPACITY = inv_cap[2]\n        var WR4_INV_CAPACITY = inv_cap[3]\n        var WR5_INV_CAPACITY = inv_cap[4]\n        var WR6_INV_CAPACITY = inv_cap[5]\n        var WR7_INV_CAPACITY = inv_cap[6]\n        var WR8_INV_CAPACITY = inv_cap[7]\n        var WR9_INV_CAPACITY = inv_cap[8]\n        var WR10_INV_CAPACITY = inv_cap[9]\n        var WR11_INV_CAPACITY = inv_cap[10]\n        var WR12_INV_CAPACITY = inv_cap[11]\n        var WR13_INV_CAPACITY = inv_cap[12]\n        var WR14_INV_CAPACITY = inv_cap[13]\n        var WR15_INV_CAPACITY = inv_cap[14]\n        var WR16_INV_CAPACITY = inv_cap[15]\n        var WR17_INV_CAPACITY = inv_cap[16]\n        var WR18_INV_CAPACITY = inv_cap[17]\n        var WR19_INV_CAPACITY = inv_cap[18]\n        var WR20_INV_CAPACITY = inv_cap[19]\n        var WR21_INV_CAPACITY = inv_cap[20]\n        var WR22_INV_CAPACITY = inv_cap[21]\n        var WR23_INV_CAPACITY = inv_cap[22]\n        var WR24_INV_CAPACITY = inv_cap[23]\n        var WR25_INV_CAPACITY = inv_cap[24]\n        var WR26_INV_CAPACITY = inv_cap[25]\n        var WR27_INV_CAPACITY = inv_cap[26]\n  \n  \n\n        var Expected_gen_WR1 = Max_sy * WR1_INV_CAPACITY\n        var Expected_gen_WR2 = Max_sy * WR2_INV_CAPACITY\n        var Expected_gen_WR3 = Max_sy * WR3_INV_CAPACITY\n        var Expected_gen_WR4 = Max_sy * WR4_INV_CAPACITY\n        var Expected_gen_WR5 = Max_sy * WR5_INV_CAPACITY\n        var Expected_gen_WR6 = Max_sy * WR6_INV_CAPACITY\n        var Expected_gen_WR7 = Max_sy * WR7_INV_CAPACITY\n        var Expected_gen_WR8 = Max_sy * WR8_INV_CAPACITY\n        var Expected_gen_WR9 = Max_sy * WR9_INV_CAPACITY\n        var Expected_gen_WR10 = Max_sy * WR10_INV_CAPACITY\n        var Expected_gen_WR11 = Max_sy * WR11_INV_CAPACITY\n        var Expected_gen_WR12 = Max_sy * WR12_INV_CAPACITY\n        var Expected_gen_WR13 = Max_sy * WR13_INV_CAPACITY\n        var Expected_gen_WR14 = Max_sy * WR14_INV_CAPACITY\n        var Expected_gen_WR15 = Max_sy * WR15_INV_CAPACITY\n        var Expected_gen_WR16 = Max_sy * WR16_INV_CAPACITY\n        var Expected_gen_WR17 = Max_sy * WR17_INV_CAPACITY\n        var Expected_gen_WR18 = Max_sy * WR18_INV_CAPACITY\n        var Expected_gen_WR19 = Max_sy * WR19_INV_CAPACITY\n        var Expected_gen_WR20 = Max_sy * WR20_INV_CAPACITY\n        var Expected_gen_WR21 = Max_sy * WR21_INV_CAPACITY\n        var Expected_gen_WR22 = Max_sy * WR22_INV_CAPACITY\n        var Expected_gen_WR23 = Max_sy * WR23_INV_CAPACITY\n        var Expected_gen_WR24 = Max_sy * WR24_INV_CAPACITY\n        var Expected_gen_WR25 = Max_sy * WR25_INV_CAPACITY\n        var Expected_gen_WR26 = Max_sy * WR26_INV_CAPACITY\n        var Expected_gen_WR27 = Max_sy * WR27_INV_CAPACITY\n\n\n        Total_exp_WR1 = Total_exp_WR1 + Expected_gen_WR1\n        Total_exp_WR2 = Total_exp_WR2 + Expected_gen_WR2\n        Total_exp_WR3 = Total_exp_WR3 + Expected_gen_WR3\n        Total_exp_WR4 = Total_exp_WR4 + Expected_gen_WR4\n        Total_exp_WR5 = Total_exp_WR5 + Expected_gen_WR5\n        Total_exp_WR6 = Total_exp_WR6 + Expected_gen_WR6\n        Total_exp_WR7 = Total_exp_WR7 + Expected_gen_WR7\n        Total_exp_WR8 = Total_exp_WR8 + Expected_gen_WR8\n        Total_exp_WR9 = Total_exp_WR9 + Expected_gen_WR9\n        Total_exp_WR10 = Total_exp_WR10 + Expected_gen_WR10\n        Total_exp_WR11 = Total_exp_WR11 + Expected_gen_WR11\n        Total_exp_WR12 = Total_exp_WR12 + Expected_gen_WR12\n        Total_exp_WR13 = Total_exp_WR13 + Expected_gen_WR13\n        Total_exp_WR14 = Total_exp_WR14 + Expected_gen_WR14\n        Total_exp_WR15 = Total_exp_WR15 + Expected_gen_WR15\n        Total_exp_WR16 = Total_exp_WR16 + Expected_gen_WR16\n        Total_exp_WR17 = Total_exp_WR17 + Expected_gen_WR17\n        Total_exp_WR18 = Total_exp_WR18 + Expected_gen_WR18\n        Total_exp_WR19 = Total_exp_WR19 + Expected_gen_WR19\n        Total_exp_WR20 = Total_exp_WR20 + Expected_gen_WR20\n        Total_exp_WR21 = Total_exp_WR21 + Expected_gen_WR21\n        Total_exp_WR22 = Total_exp_WR22 + Expected_gen_WR22\n        Total_exp_WR23 = Total_exp_WR23 + Expected_gen_WR23\n        Total_exp_WR24 = Total_exp_WR24 + Expected_gen_WR24\n        Total_exp_WR25 = Total_exp_WR25 + Expected_gen_WR25\n        Total_exp_WR26 = Total_exp_WR26 + Expected_gen_WR26\n        Total_exp_WR27 = Total_exp_WR27 + Expected_gen_WR27\n     \n\n        Total_ACT_WR1 = Total_ACT_WR1 + WR_1_kwh\n        Total_ACT_WR2 = Total_ACT_WR2 + WR_2_kwh\n        Total_ACT_WR3 = Total_ACT_WR3 + WR_3_kwh\n        Total_ACT_WR4 = Total_ACT_WR4 + WR_4_kwh\n        Total_ACT_WR5 = Total_ACT_WR5 + WR_5_kwh\n        Total_ACT_WR6 = Total_ACT_WR6 + WR_6_kwh\n        Total_ACT_WR7 = Total_ACT_WR7 + WR_7_kwh\n        Total_ACT_WR8 = Total_ACT_WR8 + WR_8_kwh\n        Total_ACT_WR9 = Total_ACT_WR9 + WR_9_kwh\n        Total_ACT_WR10 = Total_ACT_WR10 + WR_10_kwh\n        Total_ACT_WR11 = Total_ACT_WR11 + WR_11_kwh\n        Total_ACT_WR12 = Total_ACT_WR12 + WR_12_kwh\n        Total_ACT_WR13 = Total_ACT_WR13 + WR_13_kwh\n        Total_ACT_WR14 = Total_ACT_WR14 + WR_14_kwh\n        Total_ACT_WR15 = Total_ACT_WR15 + WR_15_kwh\n        Total_ACT_WR16 = Total_ACT_WR16 + WR_16_kwh\n        Total_ACT_WR17 = Total_ACT_WR17 + WR_17_kwh\n        Total_ACT_WR18 = Total_ACT_WR18 + WR_18_kwh\n        Total_ACT_WR19 = Total_ACT_WR19 + WR_19_kwh\n        Total_ACT_WR20 = Total_ACT_WR20 + WR_20_kwh\n        Total_ACT_WR21 = Total_ACT_WR21 + WR_21_kwh\n        Total_ACT_WR22 = Total_ACT_WR22 + WR_22_kwh\n        Total_ACT_WR23 = Total_ACT_WR23 + WR_23_kwh\n        Total_ACT_WR24 = Total_ACT_WR24 + WR_24_kwh\n        Total_ACT_WR25 = Total_ACT_WR25 + WR_25_kwh\n        Total_ACT_WR26 = Total_ACT_WR26 + WR_26_kwh\n        Total_ACT_WR27 = Total_ACT_WR27 + WR_27_kwh\n    \n        if ((Expected_gen_WR1 != WR_1_kwh) || (WR_1_kwh == 0)) { var GEN_LOSS_WR1 = (Expected_gen_WR1 - WR_1_kwh) } else { GEN_LOSS_WR1 = \"0\" }\n        if ((Expected_gen_WR2 != WR_2_kwh) || (WR_2_kwh == 0)) { var GEN_LOSS_WR2 = (Expected_gen_WR2 - WR_2_kwh) } else { GEN_LOSS_WR2 = \"0\" }\n        if ((Expected_gen_WR3 != WR_3_kwh) || (WR_3_kwh == 0)) { var GEN_LOSS_WR3 = (Expected_gen_WR3 - WR_3_kwh) } else { GEN_LOSS_WR3 = \"0\" }\n        if ((Expected_gen_WR4 != WR_4_kwh) || (WR_4_kwh == 0)) { var GEN_LOSS_WR4 = (Expected_gen_WR4 - WR_4_kwh) } else { GEN_LOSS_WR4 = \"0\" }\n        if ((Expected_gen_WR5 != WR_5_kwh) || (WR_5_kwh == 0)) { var GEN_LOSS_WR5 = (Expected_gen_WR5 - WR_5_kwh) } else { GEN_LOSS_WR5 = \"0\" }\n        if ((Expected_gen_WR6 != WR_6_kwh) || (WR_6_kwh == 0)) { var GEN_LOSS_WR6 = (Expected_gen_WR6 - WR_6_kwh) } else { GEN_LOSS_WR6 = \"0\" }\n        if ((Expected_gen_WR7 != WR_7_kwh) || (WR_7_kwh == 0)) { var GEN_LOSS_WR7 = (Expected_gen_WR7 - WR_7_kwh) } else { GEN_LOSS_WR7 = \"0\" }\n        if ((Expected_gen_WR8 != WR_8_kwh) || (WR_8_kwh == 0)) { var GEN_LOSS_WR8 = (Expected_gen_WR8 - WR_8_kwh) } else { GEN_LOSS_WR8 = \"0\" }\n        if ((Expected_gen_WR9 != WR_9_kwh) || (WR_9_kwh == 0)) { var GEN_LOSS_WR9 = (Expected_gen_WR9 - WR_9_kwh) } else { GEN_LOSS_WR9 = \"0\" }\n        if ((Expected_gen_WR10 != WR_10_kwh) || (WR_10_kwh == 0)) { var GEN_LOSS_WR10 = (Expected_gen_WR10 - WR_10_kwh) } else { GEN_LOSS_WR10 = \"0\" }\n        if ((Expected_gen_WR11 != WR_11_kwh) || (WR_11_kwh == 0)) { var GEN_LOSS_WR11 = (Expected_gen_WR11 - WR_11_kwh) } else { GEN_LOSS_WR11 = \"0\" }\n        if ((Expected_gen_WR12 != WR_12_kwh) || (WR_12_kwh == 0)) { var GEN_LOSS_WR12 = (Expected_gen_WR12 - WR_12_kwh) } else { GEN_LOSS_WR12 = \"0\" }\n        if ((Expected_gen_WR13 != WR_13_kwh) || (WR_13_kwh == 0)) { var GEN_LOSS_WR13 = (Expected_gen_WR13 - WR_13_kwh) } else { GEN_LOSS_WR13 = \"0\" }\n        if ((Expected_gen_WR14 != WR_14_kwh) || (WR_14_kwh == 0)) { var GEN_LOSS_WR14 = (Expected_gen_WR14 - WR_14_kwh) } else { GEN_LOSS_WR14 = \"0\" }\n        if ((Expected_gen_WR15 != WR_15_kwh) || (WR_15_kwh == 0)) { var GEN_LOSS_WR15 = (Expected_gen_WR15 - WR_15_kwh) } else { GEN_LOSS_WR15 = \"0\" }\n        if ((Expected_gen_WR16 != WR_16_kwh) || (WR_16_kwh == 0)) { var GEN_LOSS_WR16 = (Expected_gen_WR16 - WR_16_kwh) } else { GEN_LOSS_WR16 = \"0\" }\n        if ((Expected_gen_WR17 != WR_17_kwh) || (WR_17_kwh == 0)) { var GEN_LOSS_WR17 = (Expected_gen_WR17 - WR_17_kwh) } else { GEN_LOSS_WR17 = \"0\" }\n        if ((Expected_gen_WR18 != WR_18_kwh) || (WR_18_kwh == 0)) { var GEN_LOSS_WR18 = (Expected_gen_WR18 - WR_18_kwh) } else { GEN_LOSS_WR18 = \"0\" }\n        if ((Expected_gen_WR19 != WR_19_kwh) || (WR_19_kwh == 0)) { var GEN_LOSS_WR19 = (Expected_gen_WR19 - WR_19_kwh) } else { GEN_LOSS_WR19 = \"0\" }\n        if ((Expected_gen_WR20 != WR_20_kwh) || (WR_20_kwh == 0)) { var GEN_LOSS_WR20 = (Expected_gen_WR10 - WR_20_kwh) } else { GEN_LOSS_WR20 = \"0\" }\n        if ((Expected_gen_WR21 != WR_21_kwh) || (WR_21_kwh == 0)) { var GEN_LOSS_WR21 = (Expected_gen_WR21 - WR_21_kwh) } else { GEN_LOSS_WR21 = \"0\" }\n        if ((Expected_gen_WR22 != WR_22_kwh) || (WR_22_kwh == 0)) { var GEN_LOSS_WR22 = (Expected_gen_WR22 - WR_22_kwh) } else { GEN_LOSS_WR22 = \"0\" }\n        if ((Expected_gen_WR23 != WR_23_kwh) || (WR_23_kwh == 0)) { var GEN_LOSS_WR23 = (Expected_gen_WR23 - WR_23_kwh) } else { GEN_LOSS_WR23 = \"0\" }\n        if ((Expected_gen_WR24 != WR_24_kwh) || (WR_24_kwh == 0)) { var GEN_LOSS_WR24 = (Expected_gen_WR24 - WR_24_kwh) } else { GEN_LOSS_WR24 = \"0\" }\n        if ((Expected_gen_WR25 != WR_25_kwh) || (WR_25_kwh == 0)) { var GEN_LOSS_WR25 = (Expected_gen_WR25 - WR_25_kwh) } else { GEN_LOSS_WR25 = \"0\" }\n        if ((Expected_gen_WR26 != WR_26_kwh) || (WR_26_kwh == 0)) { var GEN_LOSS_WR26 = (Expected_gen_WR26 - WR_26_kwh) } else { GEN_LOSS_WR26 = \"0\" }\n        if ((Expected_gen_WR27 != WR_27_kwh) || (WR_27_kwh == 0)) { var GEN_LOSS_WR27 = (Expected_gen_WR27 - WR_27_kwh) } else { GEN_LOSS_WR27 = \"0\" }\n\n        Total_gen_loss_WR1 = Total_gen_loss_WR1 + (Expected_gen_WR1 - WR_1_kwh)\n        Total_gen_loss_WR2 = Total_gen_loss_WR2 + (Expected_gen_WR2 - WR_2_kwh)\n        Total_gen_loss_WR3 = Total_gen_loss_WR3 + (Expected_gen_WR3 - WR_3_kwh)\n        Total_gen_loss_WR4 = Total_gen_loss_WR4 + (Expected_gen_WR4 - WR_4_kwh)\n        Total_gen_loss_WR5 = Total_gen_loss_WR5 + (Expected_gen_WR5 - WR_5_kwh)\n        Total_gen_loss_WR6 = Total_gen_loss_WR6 + (Expected_gen_WR6 - WR_6_kwh)\n        Total_gen_loss_WR7 = Total_gen_loss_WR7 + (Expected_gen_WR7 - WR_7_kwh)\n        Total_gen_loss_WR8 = Total_gen_loss_WR8 + (Expected_gen_WR8 - WR_8_kwh)\n        Total_gen_loss_WR9 = Total_gen_loss_WR9 + (Expected_gen_WR9 - WR_9_kwh)\n        Total_gen_loss_WR10 = Total_gen_loss_WR10 + (Expected_gen_WR10 - WR_10_kwh)\n        Total_gen_loss_WR11 = Total_gen_loss_WR11 + (Expected_gen_WR11 - WR_11_kwh)\n        Total_gen_loss_WR12 = Total_gen_loss_WR12 + (Expected_gen_WR12 - WR_12_kwh)\n        Total_gen_loss_WR13 = Total_gen_loss_WR13 + (Expected_gen_WR13 - WR_13_kwh)\n        Total_gen_loss_WR14 = Total_gen_loss_WR14 + (Expected_gen_WR14 - WR_14_kwh)\n        Total_gen_loss_WR15 = Total_gen_loss_WR15 + (Expected_gen_WR15 - WR_15_kwh)\n        Total_gen_loss_WR16 = Total_gen_loss_WR16 + (Expected_gen_WR16 - WR_16_kwh)\n        Total_gen_loss_WR17 = Total_gen_loss_WR17 + (Expected_gen_WR17 - WR_17_kwh)\n        Total_gen_loss_WR18 = Total_gen_loss_WR18 + (Expected_gen_WR18 - WR_18_kwh)\n        Total_gen_loss_WR19 = Total_gen_loss_WR19 + (Expected_gen_WR19 - WR_19_kwh)\n        Total_gen_loss_WR20 = Total_gen_loss_WR20 + (Expected_gen_WR20 - WR_20_kwh)\n        Total_gen_loss_WR21 = Total_gen_loss_WR21 + (Expected_gen_WR21 - WR_21_kwh)\n        Total_gen_loss_WR22 = Total_gen_loss_WR22 + (Expected_gen_WR22 - WR_22_kwh)\n        Total_gen_loss_WR23 = Total_gen_loss_WR23 + (Expected_gen_WR23 - WR_23_kwh)\n        Total_gen_loss_WR24 = Total_gen_loss_WR24 + (Expected_gen_WR24 - WR_24_kwh)\n        Total_gen_loss_WR25 = Total_gen_loss_WR25 + (Expected_gen_WR25 - WR_25_kwh)\n        Total_gen_loss_WR26 = Total_gen_loss_WR26 + (Expected_gen_WR26 - WR_26_kwh)\n        Total_gen_loss_WR27 = Total_gen_loss_WR27 + (Expected_gen_WR27 - WR_27_kwh)\n     \n        var total_act_gen = [{\n            Total_ACT_WR1, Total_ACT_WR2, Total_ACT_WR3, Total_ACT_WR4, Total_ACT_WR5, Total_ACT_WR6, Total_ACT_WR7, Total_ACT_WR8, Total_ACT_WR9, Total_ACT_WR10, Total_ACT_WR11, Total_ACT_WR12, Total_ACT_WR13,Total_ACT_WR14, Total_ACT_WR15, Total_ACT_WR16, Total_ACT_WR17, Total_ACT_WR18, Total_ACT_WR19, Total_ACT_WR20\n            , Total_ACT_WR21, Total_ACT_WR22, Total_ACT_WR23, Total_ACT_WR24, Total_ACT_WR25, Total_ACT_WR26, Total_ACT_WR27}]\n        var total_exp_gen = [Total_exp_WR1, Total_exp_WR2, Total_exp_WR3, Total_exp_WR4, Total_exp_WR5, Total_exp_WR6, Total_exp_WR7, Total_exp_WR8, Total_exp_WR9, Total_exp_WR10, Total_exp_WR11, Total_exp_WR12, Total_exp_WR13, Total_exp_WR14, Total_exp_WR15, Total_exp_WR16, Total_exp_WR17, Total_exp_WR18, Total_exp_WR19, Total_exp_WR20\n            , Total_exp_WR21, Total_exp_WR22, Total_exp_WR23, Total_exp_WR24, Total_exp_WR25, Total_exp_WR26, Total_exp_WR27 ]\n        var totalgen_loss = [Total_gen_loss_WR1, Total_gen_loss_WR2, Total_gen_loss_WR3, Total_gen_loss_WR4, Total_gen_loss_WR5, Total_gen_loss_WR6, Total_gen_loss_WR7, Total_gen_loss_WR8, Total_gen_loss_WR9, Total_gen_loss_WR10, Total_gen_loss_WR11, Total_gen_loss_WR12, Total_gen_loss_WR13, Total_gen_loss_WR14, Total_gen_loss_WR15, Total_gen_loss_WR16, Total_gen_loss_WR17, Total_gen_loss_WR18, Total_gen_loss_WR19, Total_gen_loss_WR20\n            , Total_gen_loss_WR21, Total_gen_loss_WR22, Total_gen_loss_WR23, Total_gen_loss_WR24, Total_gen_loss_WR25, Total_gen_loss_WR26, Total_gen_loss_WR27]\n\n\n        obj = {\n            DATE,\n            WR_1_kwh,\n            WR_1_Sp_Y,\n            WR_2_kwh,\n            WR_2_Sp_Y,\n            WR_3_kwh,\n            WR_3_Sp_Y,\n            WR_4_kwh,\n            WR_4_Sp_Y,\n            WR_5_kwh,\n            WR_5_Sp_Y,\n            WR_6_kwh,\n            WR_6_Sp_Y,\n            WR_7_kwh,\n            WR_7_Sp_Y,\n            WR_8_kwh,\n            WR_8_Sp_Y,\n            WR_9_kwh,\n            WR_9_Sp_Y,\n            WR_10_kwh,\n            WR_10_Sp_Y,\n            WR_11_kwh,\n            WR_11_Sp_Y,\n            WR_12_kwh,\n            WR_12_Sp_Y,\n            WR_13_kwh,\n            WR_13_Sp_Y,\n            WR_14_kwh,\n            WR_14_Sp_Y,\n            WR_15_kwh,\n            WR_15_Sp_Y,\n            WR_16_kwh,\n            WR_16_Sp_Y,\n            WR_17_kwh,\n            WR_17_Sp_Y,\n            WR_18_kwh,\n            WR_18_Sp_Y,\n            WR_19_kwh,\n            WR_19_Sp_Y,\n            WR_20_kwh,\n            WR_20_Sp_Y,\n            WR_21_kwh,\n            WR_21_Sp_Y,\n            WR_22_kwh,\n            WR_22_Sp_Y,\n            WR_23_kwh,\n            WR_23_Sp_Y,\n            WR_24_kwh,\n            WR_24_Sp_Y,\n            WR_25_kwh,\n            WR_25_Sp_Y,\n            WR_26_kwh,\n            WR_26_Sp_Y,\n            WR_27_kwh,\n            WR_27_Sp_Y, \n            Max_sy,\n\n            Expected_gen_WR1,\n            Expected_gen_WR2,\n            Expected_gen_WR3,\n            Expected_gen_WR4,\n            Expected_gen_WR5,\n            Expected_gen_WR6,\n            Expected_gen_WR7,\n            Expected_gen_WR8,\n            Expected_gen_WR9,\n            Expected_gen_WR10,\n            Expected_gen_WR11,\n            Expected_gen_WR12,\n            Expected_gen_WR13,\n            Expected_gen_WR14,\n            Expected_gen_WR15,\n            Expected_gen_WR16,\n            Expected_gen_WR17,\n            Expected_gen_WR18,\n            Expected_gen_WR19,\n            Expected_gen_WR20,\n            Expected_gen_WR21,\n            Expected_gen_WR22,\n            Expected_gen_WR23,\n            Expected_gen_WR24,\n            Expected_gen_WR25,\n            Expected_gen_WR26,\n            Expected_gen_WR27,\n        \n            GEN_LOSS_WR1,\n            GEN_LOSS_WR2,\n            GEN_LOSS_WR3,\n            GEN_LOSS_WR4,\n            GEN_LOSS_WR5,\n            GEN_LOSS_WR6,\n            GEN_LOSS_WR7,\n            GEN_LOSS_WR8,\n            GEN_LOSS_WR9,\n            GEN_LOSS_WR10,\n            GEN_LOSS_WR11,\n            GEN_LOSS_WR12,\n            GEN_LOSS_WR13,\n            GEN_LOSS_WR14,\n            GEN_LOSS_WR15,\n            GEN_LOSS_WR16,\n            GEN_LOSS_WR17,\n            GEN_LOSS_WR18,\n            GEN_LOSS_WR19,\n            GEN_LOSS_WR20,\n            GEN_LOSS_WR21,\n            GEN_LOSS_WR22,\n            GEN_LOSS_WR23,\n            GEN_LOSS_WR24,\n            GEN_LOSS_WR25,\n            GEN_LOSS_WR26,\n            GEN_LOSS_WR27,\n          \n        }\n    }\n   \n    array.push(obj)\n\n}\nflow.set(\"out\", array);\nflow.set(\"totalgen_loss\", totalgen_loss)\nflow.set(\"total_act_gen\", total_act_gen)\nflow.set(\"total_exp_gen\", total_exp_gen)\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 440,
        "wires": [
            [
                "17a39c6c5b4ac583"
            ]
        ]
    },
    {
        "id": "17a39c6c5b4ac583",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 241",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 440,
        "wires": []
    },
    {
        "id": "80303571c49187f3",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 242",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "73714a666101bd63",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 910,
        "y": 380,
        "wires": [
            [
                "de8f807d79950295"
            ]
        ]
    },
    {
        "id": "de8f807d79950295",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "80303571c49187f3",
                "9264a55959640b82"
            ]
        ]
    },
    {
        "id": "5cb954fbab911278",
        "type": "delay",
        "z": "293ee0eba4be6517",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "bd805ecbe8e3fce7"
            ]
        ]
    },
    {
        "id": "3d9b411924683bc4",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "calculation",
        "info": "",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "42baf6beb55f21a2",
        "type": "fs-ops-dir",
        "z": "293ee0eba4be6517",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/wierig plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "2d76447fb8df8f2f"
            ]
        ]
    },
    {
        "id": "4a16e86ba770382f",
        "type": "inject",
        "z": "293ee0eba4be6517",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1080,
        "wires": [
            [
                "42baf6beb55f21a2"
            ]
        ]
    },
    {
        "id": "17e1391189510112",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "file to read",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/wierig plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "13b534faa90861a8",
                "5edc33d058c8df13"
            ]
        ]
    },
    {
        "id": "2d76447fb8df8f2f",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "file with delay",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1080,
        "wires": [
            [
                "17e1391189510112"
            ]
        ]
    },
    {
        "id": "13b534faa90861a8",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 243",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5edc33d058c8df13",
        "type": "file in",
        "z": "293ee0eba4be6517",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/wierig plants/1889130762_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 270,
        "y": 1200,
        "wires": [
            [
                "8167ecf17515e6f9"
            ]
        ]
    },
    {
        "id": "6fb8f8756a42b2ba",
        "type": "comment",
        "z": "293ee0eba4be6517",
        "name": "header correction",
        "info": "",
        "x": 960,
        "y": 1160,
        "wires": []
    },
    {
        "id": "de2de8f788ad30e4",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nvar inv_array = []\nfor (var i = 1; i < column.length; i++) {\n\n    const parts = column[i].split(\" \");\n    if (column[i].match(\"INV\")){\n        var num=column[i].match(/\\d+/g).map(Number);\n        var sy = \",Specific Yield_\" + num + \"(kWh / kWp)\"\n            var WR = \",WR\" + num\n            var inv = \"WR\" + num\n            inv_array.push(inv)\n            column_header = column_header.concat(WR, sy);\n    }\n    else{\n     var num = parts[1];\n    var sy =\",Specific Yield_\" + num + \"(kWh / kWp)\"\n    var pattern = num.match(/^[0-9]+$/);\n    if (pattern != null){\n        var WR = \",WR\" + pattern[0]\n        var inv = \"WR\" + pattern[0]\n        inv_array.push(inv)\n    column_header = column_header.concat(WR, sy);\n    }\n    }\n\nvar obj={\n    num, \n    sy,\n    column_header,\n    pattern\n    \n}\nresults.push(obj)\n}\n\n\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1200,
        "wires": [
            [
                "c8bc9f0df6bea25a"
            ]
        ]
    },
    {
        "id": "861de942ce210912",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 780,
        "y": 1200,
        "wires": [
            [
                "de2de8f788ad30e4"
            ]
        ]
    },
    {
        "id": "c8bc9f0df6bea25a",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 244",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "383e50d843a6af1b",
        "type": "csv",
        "z": "293ee0eba4be6517",
        "name": "value",
        "sep": ";",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "d787db3083e8dd6d"
            ]
        ]
    },
    {
        "id": "0bc314dc08706485",
        "type": "debug",
        "z": "293ee0eba4be6517",
        "name": "debug 245",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d787db3083e8dd6d",
        "type": "change",
        "z": "293ee0eba4be6517",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1240,
        "wires": [
            [
                "0bc314dc08706485"
            ]
        ]
    },
    {
        "id": "8167ecf17515e6f9",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1200,
        "wires": [
            [
                "861de942ce210912",
                "383e50d843a6af1b"
            ]
        ]
    },
    {
        "id": "59d6c688e6e6424d",
        "type": "function",
        "z": "293ee0eba4be6517",
        "name": "setup 2nd Table",
        "func": "\n\nvar totalgen_loss =flow.get(\"totalgen_loss\")\nvar total_act_gen=flow.get(\"total_act_gen\")\nvar total_exp_gen=flow.get(\"total_exp_gen\")\nvar INV_CAPACITY = flow.get(\"INV_CAPACITY\")\nvar inverter = flow.get(\"inv_array\")\nvar result\n\nvar array=[]\nvar loss=[]\n\nconst values = Object.values(total_act_gen[0])\nconst keys = Object.keys(total_act_gen[0]);\n\nfunction calculateSum(arr) {\n    var sum = 0;\n\n    for (var i = 0; i < arr.length; i++) {\n        if (typeof arr[i] === 'number' && !isNaN(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvar plant_CAPACITY = calculateSum(INV_CAPACITY)\nvar Total_Actual_Generation_in_kWh = calculateSum(values)\nvar Total_Expected_Generation_in_kWh =calculateSum(total_exp_gen)\nvar Total_Generation_Loss_in_kWh = calculateSum(totalgen_loss)\n\nfor (var i = 0; i <= totalgen_loss.length; i++)\n{\n\n    if(i == totalgen_loss.length) {\n\n        var Total_Loss_in_currency_Euro = calculateSum(loss)\n\n        var obj = {\n            INVERTERS: \"TOTAL\",\n            Capacity_in_kWp: plant_CAPACITY.toFixed(2),\n            Actual_Generation_in_kWh: Total_Actual_Generation_in_kWh.toFixed(2),\n            Expected_Generation_in_kWh: Total_Expected_Generation_in_kWh.toFixed(2),\n            Generation_Loss_in_kWh: Total_Generation_Loss_in_kWh.toFixed(2),\n            Loss_in_currency_Euro_Є: Total_Loss_in_currency_Euro.toFixed(2),\n            \n        }\n        array.push(obj)\n    }\n    if (isNaN(totalgen_loss[i])) {}\n\n    else {\n        \n        const prefix = \"Total_ACT_\";\n        const inv_name = keys[i].replace(prefix, \"\");\n\n        if (plant_CAPACITY >=50)\n    {\n        var LOSS_IN_CURRENCY=totalgen_loss[i]*0.075\n    }\n        if (plant_CAPACITY < 50) {\n        var LOSS_IN_CURRENCY = totalgen_loss[i] * 0.10\n    }\n       loss.push(LOSS_IN_CURRENCY)\n obj={\n    INVERTERS:inv_name,\n     Capacity_in_kWp: INV_CAPACITY[i].toFixed(2),\n     Actual_Generation_in_kWh: values[i].toFixed(2),\n     Expected_Generation_in_kWh: total_exp_gen[i].toFixed(2),\n     Generation_Loss_in_kWh: totalgen_loss[i].toFixed(2),\n     Loss_in_currency_Euro_Є: LOSS_IN_CURRENCY.toFixed(2)\n  \n}   \narray.push(obj)\n}\n}\nmsg.payload=array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 780,
        "wires": [
            [
                "438f548c1c272f2e"
            ]
        ]
    },
    {
        "id": "a6f9f92a0d21f81a",
        "type": "inject",
        "z": "bfa355920aed1577",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "e98ca529578d50c1"
            ]
        ]
    },
    {
        "id": "e98ca529578d50c1",
        "type": "fs-ops-dir",
        "z": "bfa355920aed1577",
        "name": "",
        "path": "/home/iplon/Downloads/IGOP/pletzinger plants",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 380,
        "y": 280,
        "wires": [
            [
                "a2020ab977d59e97"
            ]
        ]
    },
    {
        "id": "a2020ab977d59e97",
        "type": "function",
        "z": "bfa355920aed1577",
        "name": "file with delay ",
        "func": "\nfunction sleep(ms) {\n   return new Promise(resolve => setTimeout(resolve, ms));\n}\nfor (var i = 0; i < msg.payload.length; i++) {\n   \nvar obj={};\n    obj.payload = { filename: msg.payload[i]}\n\nnode.send(obj)\n    await sleep(15000);\n}\nreturn null ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "521cfee78b3a7e15"
            ]
        ]
    },
    {
        "id": "c5ca3416cced4131",
        "type": "function",
        "z": "bfa355920aed1577",
        "name": "check seperator",
        "func": "\nlet text=msg.payload\nlet check = text.includes(\";\")\nif(check==false)\n{\n    var result = text.replaceAll(\",\", \";\");\n}\nelse{result=text}\n\nmsg.payload = result\nreturn (msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "1cfe4f91cf948a6f"
            ]
        ]
    },
    {
        "id": "521cfee78b3a7e15",
        "type": "function",
        "z": "bfa355920aed1577",
        "name": "file to read *",
        "func": "var filename = msg.payload.filename\nfunction getDate(d) {\n    var day, month, year;\n\n    var result = d.match(\"[0-9]{2}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{4}\");\n    if (null != result) {\n        var dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[0];\n        month = dateSplitted[1];\n        year = dateSplitted[2];\n    }\n    result = d.match(\"[0-9]{4}([\\-/ \\.])[0-9]{2}[\\-/ \\.][0-9]{2}\");\n    if (null != result) {\n        dateSplitted = result[0].split(result[1]);\n        day = dateSplitted[2];\n        month = dateSplitted[1];\n        year = dateSplitted[0];\n    }\n\n    if (month > 12) {\n        var aux = day;\n        day = month;\n        month = aux;\n    }\n    //return year + \"/\" + month + \"/\" + day;\n\n    function getMonthName(monthNumber) {\n        const date = new Date();\n        date.setMonth(monthNumber - 1);\n\n        return date.toLocaleString('en-US', { month: 'long' });\n    }\n    return getMonthName(month)\n}\n\nvar month_name = getDate(filename)\n\nvar currentTime = new Date();\nvar currentOffset = currentTime.getTimezoneOffset();\n\nvar ISTOffset = 330;   // IST offset UTC +5:30 \n\nvar today = new Date(currentTime.getTime() + (ISTOffset + currentOffset)*60000);\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\nvar today1 = dd + '_' + mm + '_' + yyyy;\n\nvar c =today1;\ncontext.set('c',c)\n\nmsg.filename = \"/home/iplon/Downloads/IGOP/pletzinger plants/\" + filename\nflow.set(\"month\", month_name);\nflow.set(\"filename\", filename);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "a81db67a9b7ffdde"
            ]
        ]
    },
    {
        "id": "a81db67a9b7ffdde",
        "type": "file in",
        "z": "bfa355920aed1577",
        "name": "Meter data",
        "filename": "/home/iplon/Downloads/IGOP/pletzinger plants/1888128189_2023-05-01_2023-05-31.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 270,
        "y": 400,
        "wires": [
            [
                "c5ca3416cced4131"
            ]
        ]
    },
    {
        "id": "1cfe4f91cf948a6f",
        "type": "csv",
        "z": "bfa355920aed1577",
        "name": "header",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 740,
        "y": 400,
        "wires": [
            [
                "05e5f0ea4626c4e3"
            ]
        ]
    },
    {
        "id": "05e5f0ea4626c4e3",
        "type": "function",
        "z": "bfa355920aed1577",
        "name": "set header",
        "func": "var results = []\nvar filename = flow.get(\"filename\");\nconst plant = filename.substring(0, filename.indexOf('_'));\nvar column = msg.columns.split(',');\n var column_header=\"date\"\nvar inv_array = []\nfor (var i = 1; i < column.length; i++) {\n  const regex = /WR\\s?\\d+/g;\n\n  const filteredArray = column[i].match(regex);\n  if ((filteredArray != null)) {\n    var num = filteredArray[0].match(/WR\\s?(\\d+)/)\n    var sy = \",Specific Yield_\" + num[1] + \"(kWh / kWp)\"\n    var WR = \",\" + num[0]\n    var inv = \"WR\" + num[0]\n    inv_array.push(inv)\n    column_header = column_header.concat(WR, sy);\n  }\nvar obj={\n\n  column:column[i],\n  filteredArray,\n  num,\n  column_header\n}\nresults.push(obj)\n}\n\n\nmsg.payload=results\nflow.set(\"column\", column_header)\nflow.set(\"live_plant\", plant);\nflow.set(\"inv_array\", inv_array);\nflow.set(\"column_header\",column_header)\nmsg.columns=column_header\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "19b621d86ce64085"
            ]
        ]
    },
    {
        "id": "19b621d86ce64085",
        "type": "debug",
        "z": "bfa355920aed1577",
        "name": "debug 233",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 400,
        "wires": []
    }
]
