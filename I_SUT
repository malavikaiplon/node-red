[
    {
        "id": "9f94945fdba7cf88",
        "type": "tab",
        "label": "Modbus Simulation setup",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e057a0.f8a4b88",
        "type": "modbus-server",
        "z": "9f94945fdba7cf88",
        "name": "",
        "logEnabled": true,
        "hostname": "",
        "serverPort": "10502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 1024,
        "holdingBufferSize": 1024,
        "inputBufferSize": 1024,
        "discreteBufferSize": "1024",
        "showErrors": true,
        "x": 460,
        "y": 120,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "e7d28bcb.44d66",
        "type": "comment",
        "z": "9f94945fdba7cf88",
        "name": "Modbus TCP/IP master",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "3f99942531ef1094",
        "type": "csv",
        "z": "9f94945fdba7cf88",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 510,
        "y": 340,
        "wires": [
            [
                "bd97c8ed.a5c8d8"
            ]
        ]
    },
    {
        "id": "acc2aab2a6f3d920",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stop",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "cfb53a54e91a26e1"
            ]
        ]
    },
    {
        "id": "cfb53a54e91a26e1",
        "type": "file in",
        "z": "9f94945fdba7cf88",
        "name": "arken_csv",
        "filename": "/home/iplon/Downloads/-data-2022-09-19 12_05_38.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "3f99942531ef1094"
            ]
        ]
    },
    {
        "id": "ae282a4b10467471",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "inv_sungrow110CX_model",
        "func": "\n\nlet plantObj\n\nplantObj = []\n\n\n\n\n    var radiation = msg.payload[\"Solar_Radiation (W/M2)\"]\n    var time = Date.parse(msg.payload.Time )/1000\n\n\n    if  ((msg.topic == \"run\") || (msg.topic == \"Derating\") || (msg.topic ==\"Power_Limitation_From_External_Commands\"))\n{\n    var PAC = ((radiation * 900 * 0.8) / 1000)/9\n    var PAC_limit = 100\n\n    var PF = 1\n    var SAC = PF * PAC\n\n    var UAC1 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n    var UAC2 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n    var UAC3 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n\n    var IAC1 = (PAC / 3) * (1000 / UAC1)\n    var IAC2 = (PAC / 3) * (1000 / UAC2)\n    var IAC3 = (PAC / 3) * (1000 / UAC3)\n\n    var QAC= Math.floor(Math.random() * (0 - (0.1) + 1)) + (0.1)\n\n    var UDC1 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC2 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC3 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC4 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC5 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC6 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC7 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC8 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC9 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC10 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC11= Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC12 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n\n    var PDC = PAC * 1.02\n    \n    var IDC1=(PDC/12)*(1000/UDC1)\n    var IDC2 = (PDC / 12) * (1000 / UDC2)\n    var IDC3 = (PDC / 12) * (1000 / UDC3)\n    var IDC4 = (PDC / 12) * (1000 / UDC4)\n    var IDC5 = (PDC / 12) * (1000 / UDC5)\n    var IDC6 = (PDC / 12) * (1000 / UDC6)\n    var IDC7 = (PDC / 12) * (1000 / UDC7)\n    var IDC8 = (PDC / 12) * (1000 / UDC8)\n    var IDC9 = (PDC / 12) * (1000 / UDC9)\n    var IDC10 = (PDC / 12) * (1000 / UDC10)\n    var IDC11 = (PDC / 12) * (1000 / UDC11)\n    var IDC12 = (PDC / 12) * (1000 / UDC11)\n    \n    var internal_Temp = Math.floor(Math.random() * (60 - 50 + 1)) + 50\n    var frequency = 50\n\n        var obj = [\n        \n            //time,\n            radiation,\n            PAC_limit,\n            PAC,\n            PF,\n            SAC,\n            UAC1,UAC2,UAC3,QAC,\n            IAC1,IAC2,IAC3,PDC,\n            UDC1,UDC2,UDC3,UDC4,UDC5,UDC6,UDC7,UDC8,UDC9,UDC10,UDC11,UDC12,\n            IDC1, IDC2, IDC3, IDC4, IDC5, IDC6, IDC7, IDC8, IDC9, IDC10, IDC11, IDC12,\n            internal_Temp,frequency\n        \n        ]\n}\n \n        plantObj.push(obj)\n    \n\n    msg.payload = plantObj\n  \n    //return null;\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "d69205830cf87491"
            ]
        ]
    },
    {
        "id": "d04c0900be344d02",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "run",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "run",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "cfb53a54e91a26e1"
            ]
        ]
    },
    {
        "id": "ed9d099b7ce0b70b",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "derating",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Derating",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 420,
        "wires": [
            [
                "cfb53a54e91a26e1"
            ]
        ]
    },
    {
        "id": "14bd216e6a8b2d2d",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "Power_Limitation_From_External_Commands",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Power_Limitation_From_External_Commands",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "cfb53a54e91a26e1"
            ]
        ]
    },
    {
        "id": "7e8246cc11b162b5",
        "type": "modbus-flex-write",
        "z": "9f94945fdba7cf88",
        "name": "Modbus write",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "d6558d01.ba1a38",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1250,
        "y": 340,
        "wires": [
            [
                "5fbee8c69d225d1b"
            ],
            []
        ]
    },
    {
        "id": "d69205830cf87491",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "modbus write",
        "func": "\n\n\n\nmsg.payload = {\n    'value': msg.payload[0],\n    'fc': 16,\n    'unitid': 10,\n    'address': 0,\n    'quantity': 39\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "7e8246cc11b162b5"
            ]
        ]
    },
    {
        "id": "b4c3624bdcd25459",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 250,
        "y": 580,
        "wires": [
            [
                "983c43d3ee2698d6"
            ]
        ]
    },
    {
        "id": "983c43d3ee2698d6",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "modbus_read",
        "func": "msg.payload = { \n    'unitid': 10,\n    'fc': 3, \n    'address': 0, \n    'quantity': 39,\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 580,
        "wires": [
            [
                "482302d7ca19f56a"
            ]
        ]
    },
    {
        "id": "482302d7ca19f56a",
        "type": "modbus-flex-getter",
        "z": "9f94945fdba7cf88",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "d6558d01.ba1a38",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 650,
        "y": 580,
        "wires": [
            [
                "6ac8fa06e475e4be",
                "75f50ac21c9c06ee"
            ],
            []
        ]
    },
    {
        "id": "5fbee8c69d225d1b",
        "type": "modbus-response",
        "z": "9f94945fdba7cf88",
        "name": "",
        "registerShowMax": "40",
        "x": 1430,
        "y": 340,
        "wires": []
    },
    {
        "id": "3616ef0133fe6f42",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "inv_sungrow110CX_avg",
        "func": "\n\nlet plantObj\n\nplantObj = []\n\n\n//for (var i = 0; i < msg.payload[0].length; i++)\n //{\nvar time=msg.topic\nvar radiation = (msg.payload[0][0] + msg.payload[1][0] + msg.payload[2][0] + msg.payload[3][0] + msg.payload[4][0] +  msg.payload[5][0])/6\nvar PAC_limit = (msg.payload[0][1] + msg.payload[1][1] + msg.payload[2][1] + msg.payload[3][1] + msg.payload[4][1] + msg.payload[5][1]) / 6\nvar PAC = (msg.payload[0][2] + msg.payload[1][2] + msg.payload[2][2] + msg.payload[3][2] + msg.payload[4][2] + msg.payload[5][2]) / 6\nvar PF = (msg.payload[0][3] + msg.payload[1][3] + msg.payload[2][3] + msg.payload[3][3] + msg.payload[4][3] + msg.payload[5][3]) / 6\nvar SAC = (msg.payload[0][4] + msg.payload[1][4] + msg.payload[2][4] + msg.payload[3][4] + msg.payload[4][4] + msg.payload[5][4]) / 6\nvar UAC1 = (msg.payload[0][5] + msg.payload[1][5] + msg.payload[2][5] + msg.payload[3][5] + msg.payload[4][5] + msg.payload[5][5]) / 6\nvar UAC2 = (msg.payload[0][6] + msg.payload[1][6] + msg.payload[2][6] + msg.payload[3][6] + msg.payload[4][6] + msg.payload[5][6]) / 6\nvar UAC3 = (msg.payload[0][7] + msg.payload[1][7] + msg.payload[2][7] + msg.payload[3][7] + msg.payload[4][7] + msg.payload[5][7]) / 6\nvar QAC = (msg.payload[0][8] + msg.payload[1][8] + msg.payload[2][8] + msg.payload[3][8] + msg.payload[4][8] + msg.payload[5][8]) / 6\nvar IAC1 = (msg.payload[0][9] + msg.payload[1][9] + msg.payload[2][9] + msg.payload[3][9] + msg.payload[4][9] + msg.payload[5][9]) / 6\nvar IAC2 = (msg.payload[0][10] + msg.payload[1][10] + msg.payload[2][10] + msg.payload[3][10] + msg.payload[4][10] + msg.payload[5][10]) / 6\nvar IAC3 =(msg.payload[0][11] + msg.payload[1][11] + msg.payload[2][11] + msg.payload[3][11] + msg.payload[4][11] + msg.payload[5][11]) / 6\nvar PDC = (msg.payload[0][12] + msg.payload[1][12] + msg.payload[2][12] + msg.payload[3][12] + msg.payload[4][12] + msg.payload[5][12]) / 6\nvar UDC1 = (msg.payload[0][13] + msg.payload[1][13] + msg.payload[2][13] + msg.payload[3][13] + msg.payload[4][13] + msg.payload[5][13]) / 6\nvar UDC2 = (msg.payload[0][14] + msg.payload[1][14] + msg.payload[2][14] + msg.payload[3][14] + msg.payload[4][14] + msg.payload[5][14]) / 6 \nvar UDC3= (msg.payload[0][15] + msg.payload[1][15] + msg.payload[2][15] + msg.payload[3][15] + msg.payload[4][15] + msg.payload[5][15]) / 6\nvar UDC4 = (msg.payload[0][16] + msg.payload[1][16] + msg.payload[2][16] + msg.payload[3][16] + msg.payload[4][16] + msg.payload[5][16]) / 6\nvar UDC5 = (msg.payload[0][17] + msg.payload[1][17] + msg.payload[2][17] + msg.payload[3][17] + msg.payload[4][17] + msg.payload[5][17]) / 6\nvar UDC6 = (msg.payload[0][18] + msg.payload[1][18] + msg.payload[2][18] + msg.payload[3][18] + msg.payload[4][18] + msg.payload[5][18]) / 6\nvar UDC7 = (msg.payload[0][19] + msg.payload[1][19] + msg.payload[2][19] + msg.payload[3][19] + msg.payload[4][19] + msg.payload[5][19]) / 6\nvar UDC8 = (msg.payload[0][20] + msg.payload[1][20] + msg.payload[2][20] + msg.payload[3][20] + msg.payload[4][20] + msg.payload[5][20]) / 6\nvar UDC9 = (msg.payload[0][21] + msg.payload[1][21] + msg.payload[2][21] + msg.payload[3][21] + msg.payload[4][21] + msg.payload[5][21]) / 6\nvar UDC10 = (msg.payload[0][22] + msg.payload[1][22] + msg.payload[2][22] + msg.payload[3][22] + msg.payload[4][22] + msg.payload[5][22]) / 6\nvar UDC11 = (msg.payload[0][23] + msg.payload[1][23] + msg.payload[2][23] + msg.payload[3][23] + msg.payload[4][23] + msg.payload[5][23]) / 6\nvar UDC12 = (msg.payload[0][24] + msg.payload[1][24] + msg.payload[2][24] + msg.payload[3][24] + msg.payload[4][24] + msg.payload[5][24]) / 6\nvar IDC1 = (msg.payload[0][25] + msg.payload[1][25] + msg.payload[2][25] + msg.payload[3][25] + msg.payload[4][25] + msg.payload[5][25]) / 6\nvar IDC2 = (msg.payload[0][26] + msg.payload[1][26] + msg.payload[2][26] + msg.payload[3][26] + msg.payload[4][26] + msg.payload[5][26]) / 6\nvar IDC3 = (msg.payload[0][27] + msg.payload[1][27] + msg.payload[2][27] + msg.payload[3][27] + msg.payload[4][27] + msg.payload[5][27]) / 6\nvar IDC4 = (msg.payload[0][28] + msg.payload[1][28] + msg.payload[2][28] + msg.payload[3][28] + msg.payload[4][28] + msg.payload[5][28]) / 6\nvar IDC5 = (msg.payload[0][29] + msg.payload[1][29] + msg.payload[2][29] + msg.payload[3][29] + msg.payload[4][29] + msg.payload[5][29]) / 6\nvar IDC6 =(msg.payload[0][30] + msg.payload[1][30] + msg.payload[2][30] + msg.payload[3][30] + msg.payload[4][30] + msg.payload[5][30]) / 6\nvar IDC7 = (msg.payload[0][31] + msg.payload[1][31] + msg.payload[2][31] + msg.payload[3][31] + msg.payload[4][31] + msg.payload[5][31]) / 6\nvar IDC8 = (msg.payload[0][32] + msg.payload[1][32] + msg.payload[2][32] + msg.payload[3][32] + msg.payload[4][32] + msg.payload[5][32]) / 6\nvar IDC9 = (msg.payload[0][33] + msg.payload[1][33] + msg.payload[2][33] + msg.payload[3][33] + msg.payload[4][33] + msg.payload[5][33]) / 6\nvar IDC10 = (msg.payload[0][34] + msg.payload[1][34] + msg.payload[2][34] + msg.payload[3][34] + msg.payload[4][34] + msg.payload[5][34]) / 6\nvar IDC11 = (msg.payload[0][35] + msg.payload[1][35] + msg.payload[2][35] + msg.payload[3][35] + msg.payload[4][35] + msg.payload[5][35]) / 6\nvar IDC12 = (msg.payload[0][36] + msg.payload[1][36] + msg.payload[2][36] + msg.payload[3][36] + msg.payload[4][36] + msg.payload[5][36]) / 6\nvar internal_Temp = (msg.payload[0][37] + msg.payload[1][37] + msg.payload[2][37] + msg.payload[3][37] + msg.payload[4][37] + msg.payload[5][37]) / 6\nvar frequency = (msg.payload[0][38] + msg.payload[1][38] + msg.payload[2][38] + msg.payload[3][38] + msg.payload[4][38] + msg.payload[5][38]) / 6\n\n    \n    \n\n\n        var obj = {\n        \n            time,\n            radiation,\n            PAC_limit,\n            PAC,\n            PF,\n            SAC,\n            UAC1,UAC2,UAC3,QAC,\n            IAC1,IAC2,IAC3,PDC,\n            UDC1,UDC2,UDC3,UDC4,UDC5,UDC6,UDC7,UDC8,UDC9,UDC10,UDC11,UDC12,\n            IDC1, IDC2, IDC3, IDC4 ,IDC5, IDC6, IDC7, IDC8 ,IDC9 ,IDC10 ,IDC11 ,IDC12,\n            internal_Temp,frequency\n }\n        \n\n \n        plantObj.push(obj)\n    \n\n    msg.payload = plantObj\n \n    //return null;\n    return msg;\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "f827bc7564adeae2"
            ]
        ]
    },
    {
        "id": "6ac8fa06e475e4be",
        "type": "join",
        "z": "9f94945fdba7cf88",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3600",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 410,
        "y": 660,
        "wires": [
            [
                "3616ef0133fe6f42"
            ]
        ]
    },
    {
        "id": "b17a0a07e47e2ef2",
        "type": "comment",
        "z": "9f94945fdba7cf88",
        "name": "Modbus TCP/IP write",
        "info": "",
        "x": 260,
        "y": 260,
        "wires": []
    },
    {
        "id": "4cf305ad61552d1f",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "Fields and tags setup",
        "func": "\n\n    var obj = {};\n\n    obj.payload =\n        [\n            [{\n                measurement: \"isut_test\",\n\n                fields: {\n\n                    value: msg.payload[0].radiation\n\n\n                },\n                tags: {\n                    d: \"sungrow110CX\",\n                    f:\"radiation\"\n\n                },\n\n                timestamp:new Date(msg.payload[0].time)\n            }],\n             [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PAC_limit\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f:\"PAC_Limit\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PAC\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PF\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PF\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].SAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"SAC\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC1\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC2\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC3\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].QAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"QAC1\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC1\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC2\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC3\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PDC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PDC\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC1\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC2\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC3\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC4\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC4\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC5\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC5\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC6\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC6\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC7\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC7\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC8\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC8\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC9\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC9\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC10\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC10\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC11\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC11\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC12\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC12\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC1\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC1\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC2\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC2\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC3\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC3\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC4\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC4\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC5\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC5\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC6\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC6\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC7\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC7\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC8\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC8\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC9\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC9\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC10\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC10\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC11\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC11\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC12\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC12\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].internal_Temp\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"internal_Temp\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].frequency\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"frequency\"\n            },\n\n            timestamp: new Date(msg.payload[0].time)\n        }]\n        \n\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 760,
        "wires": [
            [
                "d382ca7907ef2ce4"
            ]
        ]
    },
    {
        "id": "f827bc7564adeae2",
        "type": "mqtt out",
        "z": "9f94945fdba7cf88",
        "name": "",
        "topic": "inverter model",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f11ff7629dcdb24c",
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "bd97c8ed.a5c8d8",
        "type": "delay",
        "z": "9f94945fdba7cf88",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "ae282a4b10467471"
            ]
        ]
    },
    {
        "id": "75f50ac21c9c06ee",
        "type": "modbus-response",
        "z": "9f94945fdba7cf88",
        "name": "",
        "registerShowMax": "40",
        "x": 930,
        "y": 580,
        "wires": []
    },
    {
        "id": "5e7f84510ef7ce1d",
        "type": "comment",
        "z": "9f94945fdba7cf88",
        "name": "Modbus TCP/IP read",
        "info": "",
        "x": 450,
        "y": 520,
        "wires": []
    },
    {
        "id": "d382ca7907ef2ce4",
        "type": "split",
        "z": "9f94945fdba7cf88",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 760,
        "wires": [
            [
                "2ca78acf95c0f178"
            ]
        ]
    },
    {
        "id": "2ca78acf95c0f178",
        "type": "influxdb batch",
        "z": "9f94945fdba7cf88",
        "influxdb": "7910076a2f64f209",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx db injecion",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iplon",
        "x": 840,
        "y": 760,
        "wires": []
    },
    {
        "id": "1747032b3771b47a",
        "type": "csv",
        "z": "9f94945fdba7cf88",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "3d1aee51bce68708"
            ]
        ]
    },
    {
        "id": "7fa649d9b8803bf1",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stop",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1080,
        "wires": [
            [
                "31279765e66d6333"
            ]
        ]
    },
    {
        "id": "31279765e66d6333",
        "type": "file in",
        "z": "9f94945fdba7cf88",
        "name": "arken_csv",
        "filename": "/home/iplon/Downloads/-data-2022-09-19 12_05_38.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "1747032b3771b47a"
            ]
        ]
    },
    {
        "id": "3e945c512892cb3c",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "inv_sungrow110CX_model",
        "func": "\n\nlet plantObj\n\nplantObj = []\n\n\n\n\n    var radiation = msg.payload[\"Solar_Radiation (W/M2)\"]\n    var time = Date.parse(msg.payload.Time )/1000\n\n\n    if  ((msg.topic == \"run\") || (msg.topic == \"Derating\") || (msg.topic ==\"Power_Limitation_From_External_Commands\"))\n{\n    var PAC = ((radiation * 900 * 0.8) / 1000)/9\n    var PAC_limit = 100\n\n    var PF = 1\n    var SAC = PF * PAC\n\n    var UAC1 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n    var UAC2 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n    var UAC3 = Math.floor(Math.random() * (241 - 238 + 1)) + 238\n\n    var IAC1 = (PAC / 3) * (1000 / UAC1)\n    var IAC2 = (PAC / 3) * (1000 / UAC2)\n    var IAC3 = (PAC / 3) * (1000 / UAC3)\n\n    var QAC= Math.floor(Math.random() * (0 - (0.1) + 1)) + (0.1)\n\n    var UDC1 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC2 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC3 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC4 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC5 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC6 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC7 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC8 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC9 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC10 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC11= Math.floor(Math.random() * (701 - 698 + 1)) + 698\n    var UDC12 = Math.floor(Math.random() * (701 - 698 + 1)) + 698\n\n    var PDC = PAC * 1.02\n    \n    var IDC1=(PDC/12)*(1000/UDC1)\n    var IDC2 = (PDC / 12) * (1000 / UDC2)\n    var IDC3 = (PDC / 12) * (1000 / UDC3)\n    var IDC4 = (PDC / 12) * (1000 / UDC4)\n    var IDC5 = (PDC / 12) * (1000 / UDC5)\n    var IDC6 = (PDC / 12) * (1000 / UDC6)\n    var IDC7 = (PDC / 12) * (1000 / UDC7)\n    var IDC8 = (PDC / 12) * (1000 / UDC8)\n    var IDC9 = (PDC / 12) * (1000 / UDC9)\n    var IDC10 = (PDC / 12) * (1000 / UDC10)\n    var IDC11 = (PDC / 12) * (1000 / UDC11)\n    var IDC12 = (PDC / 12) * (1000 / UDC11)\n    \n    var internal_Temp = Math.floor(Math.random() * (60 - 50 + 1)) + 50\n    var frequency = 50\n\n        var obj = [\n        \n            //time,\n            radiation,\n            PAC_limit,\n            PAC,\n            PF,\n            SAC,\n            UAC1,UAC2,UAC3,QAC,\n            IAC1,IAC2,IAC3,PDC,\n            UDC1,UDC2,UDC3,UDC4,UDC5,UDC6,UDC7,UDC8,UDC9,UDC10,UDC11,UDC12,\n            IDC1, IDC2, IDC3, IDC4, IDC5, IDC6, IDC7, IDC8, IDC9, IDC10, IDC11, IDC12,\n            internal_Temp,frequency\n        \n        ]\n}\n \n        plantObj.push(obj)\n    \n\n    msg.payload = plantObj\n  \n    //return null;\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1080,
        "wires": [
            [
                "bec2d5ba2c0934c1"
            ]
        ]
    },
    {
        "id": "6a9e289bcabd2d30",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "run",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "run",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "31279765e66d6333"
            ]
        ]
    },
    {
        "id": "694623cc88f24e62",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "derating",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Derating",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "31279765e66d6333"
            ]
        ]
    },
    {
        "id": "a67e9146b025e4d5",
        "type": "inject",
        "z": "9f94945fdba7cf88",
        "name": "Power_Limitation_From_External_Commands",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Power_Limitation_From_External_Commands",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "31279765e66d6333"
            ]
        ]
    },
    {
        "id": "cfe677eb98395526",
        "type": "modbus-flex-write",
        "z": "9f94945fdba7cf88",
        "name": "10502",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "d6558d01.ba1a38",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1290,
        "y": 1120,
        "wires": [
            [
                "877280b30a986358"
            ],
            []
        ]
    },
    {
        "id": "877280b30a986358",
        "type": "modbus-response",
        "z": "9f94945fdba7cf88",
        "name": "",
        "registerShowMax": "40",
        "x": 1450,
        "y": 1120,
        "wires": []
    },
    {
        "id": "3d1aee51bce68708",
        "type": "delay",
        "z": "9f94945fdba7cf88",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "3e945c512892cb3c"
            ]
        ]
    },
    {
        "id": "bec2d5ba2c0934c1",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "modbus write",
        "func": "\n\nmsg.payload = \n    [{\n    'value': msg.payload[0][0],\n    'fc': 16,\n    'unitid': 10,\n    'address': 5000,\n    'quantity': 1\n},\n{\n    'value': msg.payload[0][1],\n        'fc': 16,\n            'unitid': 10,\n                'address': 5001,\n                    'quantity': 1\n}]\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            [
                "6cf69167652b02ab"
            ]
        ]
    },
    {
        "id": "6cf69167652b02ab",
        "type": "split",
        "z": "9f94945fdba7cf88",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1170,
        "y": 1080,
        "wires": [
            [
                "041acf984149c720"
            ]
        ]
    },
    {
        "id": "041acf984149c720",
        "type": "debug",
        "z": "9f94945fdba7cf88",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1370,
        "y": 1080,
        "wires": []
    },
    {
        "id": "04f28b9495e55027",
        "type": "mqtt in",
        "z": "9f94945fdba7cf88",
        "d": true,
        "name": "",
        "topic": "inverter model",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f11ff7629dcdb24c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "a3cf866f22cf8792",
        "type": "debug",
        "z": "9f94945fdba7cf88",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1050,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c92353d77b7bf207",
        "type": "amqp-in",
        "z": "9f94945fdba7cf88",
        "name": "",
        "broker": "2895e55c38efc42c",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "inverter model",
        "exchangeDurable": true,
        "queueName": "inverter_sut",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 530,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "944b5d68a7be8f21",
        "type": "debug",
        "z": "9f94945fdba7cf88",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 830,
        "y": 840,
        "wires": []
    },
    {
        "id": "b7f6c786ccb2ae79",
        "type": "function",
        "z": "9f94945fdba7cf88",
        "name": "Fields and tags setup 2.3",
        "func": "\n\n    var obj = {};\n\n    obj.payload =\n        [\n            [{\n                measurement: \"isut_test\",\n\n                fields: {\n\n                    value: msg.payload[0].radiation\n\n\n                },\n                tags: {\n                    d: \"sungrow110CX\",\n                    f:\"radiation\"\n\n                },\n\n                time:new Date(msg.payload[0].time)\n            }],\n             [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PAC_limit\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f:\"PAC_Limit\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PAC\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PF\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PF\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].SAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"SAC\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC1\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC2\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UAC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UAC3\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].QAC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"QAC1\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC1\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC2\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IAC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IAC3\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].PDC\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"PDC\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC1\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC1\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC2\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC2\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC3\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC3\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC4\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC4\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC5\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC5\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC6\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC6\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC7\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC7\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC8\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC8\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC9\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC9\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC10\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC10\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC11\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC11\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].UDC12\n\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"UDC12\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC1\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC1\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC2\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC2\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC3\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC3\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC4\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC4\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC5\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC5\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC6\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC6\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC7\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC7\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC8\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC8\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC9\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC9\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC10\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC10\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC11\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC11\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].IDC12\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"IDC12\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].internal_Temp\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"internal_Temp\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }],\n        [{\n            measurement: \"isut_test\",\n\n            fields: {\n\n                value: msg.payload[0].frequency\n\n            },\n            tags: {\n                d: \"sungrow110CX\",\n                f: \"frequency\"\n            },\n\n            time: new Date(msg.payload[0].time)\n        }]\n        \n\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "22355db3d86c085f",
        "type": "amqp-in",
        "z": "9f94945fdba7cf88",
        "name": "",
        "broker": "2895e55c38efc42c",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "inverter model",
        "exchangeDurable": true,
        "queueName": "telegraf",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 830,
        "y": 1000,
        "wires": [
            [
                "a3cf866f22cf8792"
            ]
        ]
    },
    {
        "id": "51743decc68a82ba",
        "type": "amqp-out",
        "z": "9f94945fdba7cf88",
        "name": "",
        "broker": "2895e55c38efc42c",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "invereter model",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 920,
        "y": 720,
        "wires": []
    },
    {
        "id": "d6558d01.ba1a38",
        "type": "modbus-client",
        "z": "9f94945fdba7cf88",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "localhost",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "f11ff7629dcdb24c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "172.17.0.6",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7910076a2f64f209",
        "type": "influxdb",
        "hostname": "172.17.0.7",
        "port": "8086",
        "protocol": "http",
        "database": "",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.7:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "2895e55c38efc42c",
        "type": "amqp-broker",
        "name": "",
        "host": "172.17.0.6",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "c563e3c6072c32be",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
